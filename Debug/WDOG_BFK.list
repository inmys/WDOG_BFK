
WDOG_BFK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006a94  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000530  08006b54  08006b54  00016b54  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007084  08007084  00020228  2**0
                  CONTENTS
  4 .ARM          00000000  08007084  08007084  00020228  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007084  08007084  00020228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007084  08007084  00017084  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007088  08007088  00017088  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800708c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010b0  20000228  080072b4  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000528  200012d8  080072b4  000212d8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020228  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002e8cd  00000000  00000000  00020250  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006aa7  00000000  00000000  0004eb1d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00016ae0  00000000  00000000  000555c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001528  00000000  00000000  0006c0a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002540  00000000  00000000  0006d5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001ec61  00000000  00000000  0006fb10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006d0a  00000000  00000000  0008e771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0009547b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004508  00000000  00000000  000954d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000228 	.word	0x20000228
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006b3c 	.word	0x08006b3c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000022c 	.word	0x2000022c
 8000104:	08006b3c 	.word	0x08006b3c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_sqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5609      	ldrsb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_uqi>:
 8000140:	b402      	push	{r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0049      	lsls	r1, r1, #1
 8000148:	5c09      	ldrb	r1, [r1, r0]
 800014a:	0049      	lsls	r1, r1, #1
 800014c:	448e      	add	lr, r1
 800014e:	bc02      	pop	{r1}
 8000150:	4770      	bx	lr
 8000152:	46c0      	nop			; (mov r8, r8)

08000154 <__gnu_thumb1_case_shi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5e09      	ldrsh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__gnu_thumb1_case_uhi>:
 8000168:	b403      	push	{r0, r1}
 800016a:	4671      	mov	r1, lr
 800016c:	0849      	lsrs	r1, r1, #1
 800016e:	0040      	lsls	r0, r0, #1
 8000170:	0049      	lsls	r1, r1, #1
 8000172:	5a09      	ldrh	r1, [r1, r0]
 8000174:	0049      	lsls	r1, r1, #1
 8000176:	448e      	add	lr, r1
 8000178:	bc03      	pop	{r0, r1}
 800017a:	4770      	bx	lr

0800017c <__udivsi3>:
 800017c:	2200      	movs	r2, #0
 800017e:	0843      	lsrs	r3, r0, #1
 8000180:	428b      	cmp	r3, r1
 8000182:	d374      	bcc.n	800026e <__udivsi3+0xf2>
 8000184:	0903      	lsrs	r3, r0, #4
 8000186:	428b      	cmp	r3, r1
 8000188:	d35f      	bcc.n	800024a <__udivsi3+0xce>
 800018a:	0a03      	lsrs	r3, r0, #8
 800018c:	428b      	cmp	r3, r1
 800018e:	d344      	bcc.n	800021a <__udivsi3+0x9e>
 8000190:	0b03      	lsrs	r3, r0, #12
 8000192:	428b      	cmp	r3, r1
 8000194:	d328      	bcc.n	80001e8 <__udivsi3+0x6c>
 8000196:	0c03      	lsrs	r3, r0, #16
 8000198:	428b      	cmp	r3, r1
 800019a:	d30d      	bcc.n	80001b8 <__udivsi3+0x3c>
 800019c:	22ff      	movs	r2, #255	; 0xff
 800019e:	0209      	lsls	r1, r1, #8
 80001a0:	ba12      	rev	r2, r2
 80001a2:	0c03      	lsrs	r3, r0, #16
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d302      	bcc.n	80001ae <__udivsi3+0x32>
 80001a8:	1212      	asrs	r2, r2, #8
 80001aa:	0209      	lsls	r1, r1, #8
 80001ac:	d065      	beq.n	800027a <__udivsi3+0xfe>
 80001ae:	0b03      	lsrs	r3, r0, #12
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d319      	bcc.n	80001e8 <__udivsi3+0x6c>
 80001b4:	e000      	b.n	80001b8 <__udivsi3+0x3c>
 80001b6:	0a09      	lsrs	r1, r1, #8
 80001b8:	0bc3      	lsrs	r3, r0, #15
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x46>
 80001be:	03cb      	lsls	r3, r1, #15
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0b83      	lsrs	r3, r0, #14
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x52>
 80001ca:	038b      	lsls	r3, r1, #14
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0b43      	lsrs	r3, r0, #13
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x5e>
 80001d6:	034b      	lsls	r3, r1, #13
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	0b03      	lsrs	r3, r0, #12
 80001de:	428b      	cmp	r3, r1
 80001e0:	d301      	bcc.n	80001e6 <__udivsi3+0x6a>
 80001e2:	030b      	lsls	r3, r1, #12
 80001e4:	1ac0      	subs	r0, r0, r3
 80001e6:	4152      	adcs	r2, r2
 80001e8:	0ac3      	lsrs	r3, r0, #11
 80001ea:	428b      	cmp	r3, r1
 80001ec:	d301      	bcc.n	80001f2 <__udivsi3+0x76>
 80001ee:	02cb      	lsls	r3, r1, #11
 80001f0:	1ac0      	subs	r0, r0, r3
 80001f2:	4152      	adcs	r2, r2
 80001f4:	0a83      	lsrs	r3, r0, #10
 80001f6:	428b      	cmp	r3, r1
 80001f8:	d301      	bcc.n	80001fe <__udivsi3+0x82>
 80001fa:	028b      	lsls	r3, r1, #10
 80001fc:	1ac0      	subs	r0, r0, r3
 80001fe:	4152      	adcs	r2, r2
 8000200:	0a43      	lsrs	r3, r0, #9
 8000202:	428b      	cmp	r3, r1
 8000204:	d301      	bcc.n	800020a <__udivsi3+0x8e>
 8000206:	024b      	lsls	r3, r1, #9
 8000208:	1ac0      	subs	r0, r0, r3
 800020a:	4152      	adcs	r2, r2
 800020c:	0a03      	lsrs	r3, r0, #8
 800020e:	428b      	cmp	r3, r1
 8000210:	d301      	bcc.n	8000216 <__udivsi3+0x9a>
 8000212:	020b      	lsls	r3, r1, #8
 8000214:	1ac0      	subs	r0, r0, r3
 8000216:	4152      	adcs	r2, r2
 8000218:	d2cd      	bcs.n	80001b6 <__udivsi3+0x3a>
 800021a:	09c3      	lsrs	r3, r0, #7
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xa8>
 8000220:	01cb      	lsls	r3, r1, #7
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0983      	lsrs	r3, r0, #6
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xb4>
 800022c:	018b      	lsls	r3, r1, #6
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	0943      	lsrs	r3, r0, #5
 8000234:	428b      	cmp	r3, r1
 8000236:	d301      	bcc.n	800023c <__udivsi3+0xc0>
 8000238:	014b      	lsls	r3, r1, #5
 800023a:	1ac0      	subs	r0, r0, r3
 800023c:	4152      	adcs	r2, r2
 800023e:	0903      	lsrs	r3, r0, #4
 8000240:	428b      	cmp	r3, r1
 8000242:	d301      	bcc.n	8000248 <__udivsi3+0xcc>
 8000244:	010b      	lsls	r3, r1, #4
 8000246:	1ac0      	subs	r0, r0, r3
 8000248:	4152      	adcs	r2, r2
 800024a:	08c3      	lsrs	r3, r0, #3
 800024c:	428b      	cmp	r3, r1
 800024e:	d301      	bcc.n	8000254 <__udivsi3+0xd8>
 8000250:	00cb      	lsls	r3, r1, #3
 8000252:	1ac0      	subs	r0, r0, r3
 8000254:	4152      	adcs	r2, r2
 8000256:	0883      	lsrs	r3, r0, #2
 8000258:	428b      	cmp	r3, r1
 800025a:	d301      	bcc.n	8000260 <__udivsi3+0xe4>
 800025c:	008b      	lsls	r3, r1, #2
 800025e:	1ac0      	subs	r0, r0, r3
 8000260:	4152      	adcs	r2, r2
 8000262:	0843      	lsrs	r3, r0, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d301      	bcc.n	800026c <__udivsi3+0xf0>
 8000268:	004b      	lsls	r3, r1, #1
 800026a:	1ac0      	subs	r0, r0, r3
 800026c:	4152      	adcs	r2, r2
 800026e:	1a41      	subs	r1, r0, r1
 8000270:	d200      	bcs.n	8000274 <__udivsi3+0xf8>
 8000272:	4601      	mov	r1, r0
 8000274:	4152      	adcs	r2, r2
 8000276:	4610      	mov	r0, r2
 8000278:	4770      	bx	lr
 800027a:	e7ff      	b.n	800027c <__udivsi3+0x100>
 800027c:	b501      	push	{r0, lr}
 800027e:	2000      	movs	r0, #0
 8000280:	f000 f806 	bl	8000290 <__aeabi_idiv0>
 8000284:	bd02      	pop	{r1, pc}
 8000286:	46c0      	nop			; (mov r8, r8)

08000288 <__aeabi_uidivmod>:
 8000288:	2900      	cmp	r1, #0
 800028a:	d0f7      	beq.n	800027c <__udivsi3+0x100>
 800028c:	e776      	b.n	800017c <__udivsi3>
 800028e:	4770      	bx	lr

08000290 <__aeabi_idiv0>:
 8000290:	4770      	bx	lr
 8000292:	46c0      	nop			; (mov r8, r8)

08000294 <__aeabi_llsr>:
 8000294:	40d0      	lsrs	r0, r2
 8000296:	1c0b      	adds	r3, r1, #0
 8000298:	40d1      	lsrs	r1, r2
 800029a:	469c      	mov	ip, r3
 800029c:	3a20      	subs	r2, #32
 800029e:	40d3      	lsrs	r3, r2
 80002a0:	4318      	orrs	r0, r3
 80002a2:	4252      	negs	r2, r2
 80002a4:	4663      	mov	r3, ip
 80002a6:	4093      	lsls	r3, r2
 80002a8:	4318      	orrs	r0, r3
 80002aa:	4770      	bx	lr

080002ac <clearBuf>:

}

void clearBuf(char* buf){
	int j;
	for(j=0;j<BUF_LEN;j++)
 80002ac:	0003      	movs	r3, r0
		buf[j] = 0;
 80002ae:	2200      	movs	r2, #0
 80002b0:	3328      	adds	r3, #40	; 0x28
 80002b2:	7002      	strb	r2, [r0, #0]
	for(j=0;j<BUF_LEN;j++)
 80002b4:	3001      	adds	r0, #1
 80002b6:	4298      	cmp	r0, r3
 80002b8:	d1fb      	bne.n	80002b2 <clearBuf+0x6>
}
 80002ba:	4770      	bx	lr

080002bc <POST>:
void POST(){
 80002bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002be:	b095      	sub	sp, #84	; 0x54
	EnableSPI();
 80002c0:	f000 fa70 	bl	80007a4 <EnableSPI>
 80002c4:	2400      	movs	r4, #0
 80002c6:	2501      	movs	r5, #1
		clearBuf(buf);
 80002c8:	a80a      	add	r0, sp, #40	; 0x28
 80002ca:	f7ff ffef 	bl	80002ac <clearBuf>
				abuf[j] = 0;
 80002ce:	2300      	movs	r3, #0
 80002d0:	1c66      	adds	r6, r4, #1
		sprintf(buf,"Flash %d: ",i+1);
 80002d2:	4944      	ldr	r1, [pc, #272]	; (80003e4 <POST+0x128>)
 80002d4:	0032      	movs	r2, r6
 80002d6:	a80a      	add	r0, sp, #40	; 0x28
				abuf[j] = 0;
 80002d8:	9306      	str	r3, [sp, #24]
				bbuf[j] = 0;
 80002da:	9308      	str	r3, [sp, #32]
		sprintf(buf,"Flash %d: ",i+1);
 80002dc:	f005 ff70 	bl	80061c0 <siprintf>
		UART_putstr(buf);
 80002e0:	a80a      	add	r0, sp, #40	; 0x28
 80002e2:	f000 faa9 	bl	8000838 <UART_putstr>
		if(SPI_ReadID(i,&conf) == HAL_OK){
 80002e6:	b2e0      	uxtb	r0, r4
 80002e8:	a904      	add	r1, sp, #16
 80002ea:	f000 fed3 	bl	8001094 <SPI_ReadID>
 80002ee:	2800      	cmp	r0, #0
 80002f0:	d000      	beq.n	80002f4 <POST+0x38>
 80002f2:	e071      	b.n	80003d8 <POST+0x11c>
			switch(conf.MemoryType){
 80002f4:	466b      	mov	r3, sp
 80002f6:	7c5b      	ldrb	r3, [r3, #17]
				sprintf(abuf,"3");
 80002f8:	493b      	ldr	r1, [pc, #236]	; (80003e8 <POST+0x12c>)
			switch(conf.MemoryType){
 80002fa:	2bba      	cmp	r3, #186	; 0xba
 80002fc:	d005      	beq.n	800030a <POST+0x4e>
 80002fe:	2bbb      	cmp	r3, #187	; 0xbb
 8000300:	d002      	beq.n	8000308 <POST+0x4c>
				sprintf(abuf,"?");
 8000302:	493a      	ldr	r1, [pc, #232]	; (80003ec <POST+0x130>)
			switch(conf.MemoryType){
 8000304:	2b60      	cmp	r3, #96	; 0x60
 8000306:	d100      	bne.n	800030a <POST+0x4e>
				sprintf(abuf,"1.8");
 8000308:	4939      	ldr	r1, [pc, #228]	; (80003f0 <POST+0x134>)
				sprintf(abuf,"?");
 800030a:	a806      	add	r0, sp, #24
 800030c:	f005 ff78 	bl	8006200 <strcpy>
			switch(conf.MemoryCapacity){
 8000310:	466b      	mov	r3, sp
 8000312:	7c98      	ldrb	r0, [r3, #18]
 8000314:	3817      	subs	r0, #23
 8000316:	280b      	cmp	r0, #11
 8000318:	d85c      	bhi.n	80003d4 <POST+0x118>
 800031a:	f7ff ff11 	bl	8000140 <__gnu_thumb1_case_uqi>
 800031e:	5759      	.short	0x5759
 8000320:	5b5b5b55 	.word	0x5b5b5b55
 8000324:	535b5b5b 	.word	0x535b5b5b
 8000328:	0651      	.short	0x0651
				sprintf(bbuf,"2Gb");
 800032a:	4932      	ldr	r1, [pc, #200]	; (80003f4 <POST+0x138>)
				sprintf(bbuf,"?");
 800032c:	a808      	add	r0, sp, #32
 800032e:	f005 ff67 	bl	8006200 <strcpy>
		sprintf(buf,"%sV %s\r\n",abuf, bbuf);
 8000332:	4931      	ldr	r1, [pc, #196]	; (80003f8 <POST+0x13c>)
 8000334:	ab08      	add	r3, sp, #32
 8000336:	aa06      	add	r2, sp, #24
 8000338:	a80a      	add	r0, sp, #40	; 0x28
 800033a:	f005 ff41 	bl	80061c0 <siprintf>
		UART_putstr(buf);
 800033e:	a80a      	add	r0, sp, #40	; 0x28
 8000340:	f000 fa7a 	bl	8000838 <UART_putstr>
	for(i=0;i<2;i++){
 8000344:	002c      	movs	r4, r5
 8000346:	2e02      	cmp	r6, #2
 8000348:	d1be      	bne.n	80002c8 <POST+0xc>
	clearBuf(buf);
 800034a:	a80a      	add	r0, sp, #40	; 0x28
 800034c:	f7ff ffae 	bl	80002ac <clearBuf>
	abuf[0] = 0x03;
 8000350:	466a      	mov	r2, sp
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,abuf,2,1);
 8000352:	4f2a      	ldr	r7, [pc, #168]	; (80003fc <POST+0x140>)
	abuf[0] = 0x03;
 8000354:	4b2a      	ldr	r3, [pc, #168]	; (8000400 <POST+0x144>)
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,abuf,2,1);
 8000356:	2140      	movs	r1, #64	; 0x40
	abuf[0] = 0x03;
 8000358:	8313      	strh	r3, [r2, #24]
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,abuf,2,1);
 800035a:	0038      	movs	r0, r7
 800035c:	aa06      	add	r2, sp, #24
 800035e:	0033      	movs	r3, r6
	uint8_t tester = 0x03;
 8000360:	240f      	movs	r4, #15
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,abuf,2,1);
 8000362:	9500      	str	r5, [sp, #0]
 8000364:	f000 f968 	bl	8000638 <SFT_I2C_Master_Transmit>
	uint8_t tester = 0x03;
 8000368:	2303      	movs	r3, #3
 800036a:	446c      	add	r4, sp
	UART_putstr("I/O Expander: ");
 800036c:	4825      	ldr	r0, [pc, #148]	; (8000404 <POST+0x148>)
	uint8_t tester = 0x03;
 800036e:	7023      	strb	r3, [r4, #0]
	UART_putstr("I/O Expander: ");
 8000370:	f000 fa62 	bl	8000838 <UART_putstr>
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,&tester,1,1);
 8000374:	2301      	movs	r3, #1
 8000376:	0022      	movs	r2, r4
 8000378:	2140      	movs	r1, #64	; 0x40
 800037a:	0038      	movs	r0, r7
 800037c:	9500      	str	r5, [sp, #0]
 800037e:	f000 f95b 	bl	8000638 <SFT_I2C_Master_Transmit>
	tester = 0;
 8000382:	2300      	movs	r3, #0
	SFT_I2C_Master_Receive(&si2c1,GPIO_EXPANDER_ADDR,&tester,1,1);
 8000384:	0038      	movs	r0, r7
	tester = 0;
 8000386:	7023      	strb	r3, [r4, #0]
	SFT_I2C_Master_Receive(&si2c1,GPIO_EXPANDER_ADDR,&tester,1,1);
 8000388:	0022      	movs	r2, r4
 800038a:	3301      	adds	r3, #1
 800038c:	2140      	movs	r1, #64	; 0x40
 800038e:	9500      	str	r5, [sp, #0]
 8000390:	f000 f96f 	bl	8000672 <SFT_I2C_Master_Receive>
	if(tester==0b01010101)
 8000394:	7823      	ldrb	r3, [r4, #0]
		UART_putstr("OK\r\n");
 8000396:	481c      	ldr	r0, [pc, #112]	; (8000408 <POST+0x14c>)
	if(tester==0b01010101)
 8000398:	2b55      	cmp	r3, #85	; 0x55
 800039a:	d000      	beq.n	800039e <POST+0xe2>
		UART_putstr("FAILED\r\n");
 800039c:	481b      	ldr	r0, [pc, #108]	; (800040c <POST+0x150>)
 800039e:	f000 fa4b 	bl	8000838 <UART_putstr>
	abuf[1] = 0;
 80003a2:	466a      	mov	r2, sp
 80003a4:	2300      	movs	r3, #0
 80003a6:	7653      	strb	r3, [r2, #25]
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,abuf,2,1);
 80003a8:	3301      	adds	r3, #1
 80003aa:	2140      	movs	r1, #64	; 0x40
 80003ac:	0038      	movs	r0, r7
 80003ae:	9300      	str	r3, [sp, #0]
 80003b0:	aa06      	add	r2, sp, #24
 80003b2:	3301      	adds	r3, #1
 80003b4:	f000 f940 	bl	8000638 <SFT_I2C_Master_Transmit>
	DisableSPI();
 80003b8:	f000 f9a4 	bl	8000704 <DisableSPI>
}
 80003bc:	b015      	add	sp, #84	; 0x54
 80003be:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(bbuf,"1Gb");
 80003c0:	4913      	ldr	r1, [pc, #76]	; (8000410 <POST+0x154>)
 80003c2:	e7b3      	b.n	800032c <POST+0x70>
				sprintf(bbuf,"512Mb");
 80003c4:	4913      	ldr	r1, [pc, #76]	; (8000414 <POST+0x158>)
 80003c6:	e7b1      	b.n	800032c <POST+0x70>
				sprintf(bbuf,"256Mb");
 80003c8:	4913      	ldr	r1, [pc, #76]	; (8000418 <POST+0x15c>)
 80003ca:	e7af      	b.n	800032c <POST+0x70>
				sprintf(bbuf,"128Mb");
 80003cc:	4913      	ldr	r1, [pc, #76]	; (800041c <POST+0x160>)
 80003ce:	e7ad      	b.n	800032c <POST+0x70>
				sprintf(bbuf,"64Mb");
 80003d0:	4913      	ldr	r1, [pc, #76]	; (8000420 <POST+0x164>)
 80003d2:	e7ab      	b.n	800032c <POST+0x70>
				sprintf(bbuf,"?");
 80003d4:	4905      	ldr	r1, [pc, #20]	; (80003ec <POST+0x130>)
 80003d6:	e7a9      	b.n	800032c <POST+0x70>
			sprintf(buf,"FAILED\r\n");
 80003d8:	490c      	ldr	r1, [pc, #48]	; (800040c <POST+0x150>)
 80003da:	a80a      	add	r0, sp, #40	; 0x28
 80003dc:	f005 ff10 	bl	8006200 <strcpy>
 80003e0:	e7ad      	b.n	800033e <POST+0x82>
 80003e2:	46c0      	nop			; (mov r8, r8)
 80003e4:	08006b54 	.word	0x08006b54
 80003e8:	08006b5f 	.word	0x08006b5f
 80003ec:	08006b65 	.word	0x08006b65
 80003f0:	08006b61 	.word	0x08006b61
 80003f4:	08006b67 	.word	0x08006b67
 80003f8:	08006b86 	.word	0x08006b86
 80003fc:	2000079c 	.word	0x2000079c
 8000400:	00005503 	.word	0x00005503
 8000404:	08006b98 	.word	0x08006b98
 8000408:	08006ba7 	.word	0x08006ba7
 800040c:	08006b8f 	.word	0x08006b8f
 8000410:	08006b6b 	.word	0x08006b6b
 8000414:	08006b6f 	.word	0x08006b6f
 8000418:	08006b75 	.word	0x08006b75
 800041c:	08006b7b 	.word	0x08006b7b
 8000420:	08006b81 	.word	0x08006b81

08000424 <setLineDirection>:
	}
	setLineDirection(&(hi2c->scl),I2C_OUTPUT|((params)&(I2C_PULLUP)));
	setLineDirection(&(hi2c->sda),I2C_OUTPUT|((params)&(I2C_PULLUP)));
}

void setLineDirection(struct sPinPack *line,uint8_t params){
 8000424:	b530      	push	{r4, r5, lr}
 8000426:	0004      	movs	r4, r0
 8000428:	000d      	movs	r5, r1
 800042a:	b087      	sub	sp, #28
	// 1 - output
	// 0 - input
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800042c:	2208      	movs	r2, #8
 800042e:	2100      	movs	r1, #0
 8000430:	a804      	add	r0, sp, #16
 8000432:	f005 febc 	bl	80061ae <memset>
	GPIO_InitStruct.Pin = line->GPIO_pin;
 8000436:	6863      	ldr	r3, [r4, #4]
 8000438:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = (params & I2C_INPUT)? GPIO_MODE_INPUT : GPIO_MODE_OUTPUT_OD;
 800043a:	2300      	movs	r3, #0
 800043c:	07aa      	lsls	r2, r5, #30
 800043e:	d400      	bmi.n	8000442 <setLineDirection+0x1e>
 8000440:	3311      	adds	r3, #17
 8000442:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = (params & I2C_PULLUP)? GPIO_PULLUP : GPIO_NOPULL;
 8000444:	2301      	movs	r3, #1
	HAL_GPIO_Init(line->GPIOx, &GPIO_InitStruct);
 8000446:	6820      	ldr	r0, [r4, #0]
	GPIO_InitStruct.Pull = (params & I2C_PULLUP)? GPIO_PULLUP : GPIO_NOPULL;
 8000448:	402b      	ands	r3, r5
	HAL_GPIO_Init(line->GPIOx, &GPIO_InitStruct);
 800044a:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = (params & I2C_PULLUP)? GPIO_PULLUP : GPIO_NOPULL;
 800044c:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(line->GPIOx, &GPIO_InitStruct);
 800044e:	f001 fec5 	bl	80021dc <HAL_GPIO_Init>
	line->params = params;
 8000452:	7225      	strb	r5, [r4, #8]
}
 8000454:	b007      	add	sp, #28
 8000456:	bd30      	pop	{r4, r5, pc}

08000458 <SFT_I2C_Init>:
void SFT_I2C_Init(GPIO_TypeDef *SCL_GPIOx, uint16_t *SCL_GPIO_pin,GPIO_TypeDef *SDA_GPIOx, uint16_t *SDA_GPIO_pin,I2C_handler *hi2c,uint8_t params){
 8000458:	b510      	push	{r4, lr}
 800045a:	9c02      	ldr	r4, [sp, #8]
	if(hi2c!=NULL){
 800045c:	2c00      	cmp	r4, #0
 800045e:	d003      	beq.n	8000468 <SFT_I2C_Init+0x10>
		hi2c->scl.GPIO_pin = SCL_GPIO_pin;
 8000460:	6061      	str	r1, [r4, #4]
		hi2c->scl.GPIOx = SCL_GPIOx;
 8000462:	6020      	str	r0, [r4, #0]
		hi2c->sda.GPIO_pin = SDA_GPIO_pin;
 8000464:	6123      	str	r3, [r4, #16]
		hi2c->sda.GPIOx = SDA_GPIOx;
 8000466:	60e2      	str	r2, [r4, #12]
	setLineDirection(&(hi2c->scl),I2C_OUTPUT|((params)&(I2C_PULLUP)));
 8000468:	2103      	movs	r1, #3
 800046a:	0020      	movs	r0, r4
 800046c:	4249      	negs	r1, r1
 800046e:	f7ff ffd9 	bl	8000424 <setLineDirection>
	setLineDirection(&(hi2c->sda),I2C_OUTPUT|((params)&(I2C_PULLUP)));
 8000472:	0020      	movs	r0, r4
 8000474:	2103      	movs	r1, #3
 8000476:	300c      	adds	r0, #12
 8000478:	4249      	negs	r1, r1
 800047a:	f7ff ffd3 	bl	8000424 <setLineDirection>
}
 800047e:	bd10      	pop	{r4, pc}

08000480 <startCondition>:

void startCondition(struct Shandler *si2c){
 8000480:	b510      	push	{r4, lr}
 8000482:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,1);
 8000484:	6903      	ldr	r3, [r0, #16]
 8000486:	2201      	movs	r2, #1
 8000488:	b299      	uxth	r1, r3
 800048a:	68c0      	ldr	r0, [r0, #12]
 800048c:	f001 ffc4 	bl	8002418 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,1);
 8000490:	6863      	ldr	r3, [r4, #4]
 8000492:	2201      	movs	r2, #1
 8000494:	b299      	uxth	r1, r3
 8000496:	6820      	ldr	r0, [r4, #0]
 8000498:	f001 ffbe 	bl	8002418 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 800049c:	f003 f982 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,0);
 80004a0:	6923      	ldr	r3, [r4, #16]
 80004a2:	2200      	movs	r2, #0
 80004a4:	b299      	uxth	r1, r3
 80004a6:	68e0      	ldr	r0, [r4, #12]
 80004a8:	f001 ffb6 	bl	8002418 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 80004ac:	f003 f97a 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,0);
 80004b0:	6863      	ldr	r3, [r4, #4]
 80004b2:	2200      	movs	r2, #0
 80004b4:	b299      	uxth	r1, r3
 80004b6:	6820      	ldr	r0, [r4, #0]
 80004b8:	f001 ffae 	bl	8002418 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 80004bc:	f003 f972 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,1);
 80004c0:	6923      	ldr	r3, [r4, #16]
 80004c2:	2201      	movs	r2, #1
 80004c4:	68e0      	ldr	r0, [r4, #12]
 80004c6:	b299      	uxth	r1, r3
 80004c8:	f001 ffa6 	bl	8002418 <HAL_GPIO_WritePin>
}
 80004cc:	bd10      	pop	{r4, pc}

080004ce <stopCondition>:

void stopCondition(struct Shandler *si2c){
 80004ce:	b510      	push	{r4, lr}
 80004d0:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,0);
 80004d2:	6903      	ldr	r3, [r0, #16]
 80004d4:	2200      	movs	r2, #0
 80004d6:	b299      	uxth	r1, r3
 80004d8:	68c0      	ldr	r0, [r0, #12]
 80004da:	f001 ff9d 	bl	8002418 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 80004de:	f003 f961 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,1);
 80004e2:	6863      	ldr	r3, [r4, #4]
 80004e4:	2201      	movs	r2, #1
 80004e6:	b299      	uxth	r1, r3
 80004e8:	6820      	ldr	r0, [r4, #0]
 80004ea:	f001 ff95 	bl	8002418 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 80004ee:	f003 f959 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,1);
 80004f2:	6923      	ldr	r3, [r4, #16]
 80004f4:	2201      	movs	r2, #1
 80004f6:	68e0      	ldr	r0, [r4, #12]
 80004f8:	b299      	uxth	r1, r3
 80004fa:	f001 ff8d 	bl	8002418 <HAL_GPIO_WritePin>

}
 80004fe:	bd10      	pop	{r4, pc}

08000500 <sendByte>:

void sendByte(struct Shandler *si2c,uint8_t byte){
 8000500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000502:	0004      	movs	r4, r0
 8000504:	000e      	movs	r6, r1
	int i;
	for(i=7;i>=0;i--){
 8000506:	2507      	movs	r5, #7
		HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,byte&(1<<i));
 8000508:	2701      	movs	r7, #1
 800050a:	003a      	movs	r2, r7
 800050c:	40aa      	lsls	r2, r5
 800050e:	6923      	ldr	r3, [r4, #16]
 8000510:	4032      	ands	r2, r6
 8000512:	b299      	uxth	r1, r3
 8000514:	68e0      	ldr	r0, [r4, #12]
 8000516:	f001 ff7f 	bl	8002418 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 800051a:	f003 f943 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
		I2C_Delay(I2C_DELAY_US);
		HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,1);
 800051e:	6863      	ldr	r3, [r4, #4]
 8000520:	2201      	movs	r2, #1
 8000522:	b299      	uxth	r1, r3
 8000524:	6820      	ldr	r0, [r4, #0]
 8000526:	f001 ff77 	bl	8002418 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 800052a:	f003 f93b 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
		I2C_Delay(I2C_DELAY_US);
		HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,0);
 800052e:	6863      	ldr	r3, [r4, #4]
 8000530:	2200      	movs	r2, #0
 8000532:	6820      	ldr	r0, [r4, #0]
 8000534:	b299      	uxth	r1, r3
 8000536:	f001 ff6f 	bl	8002418 <HAL_GPIO_WritePin>
	for(i=7;i>=0;i--){
 800053a:	3d01      	subs	r5, #1
 800053c:	d2e5      	bcs.n	800050a <sendByte+0xa>
	}
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,1);
 800053e:	6923      	ldr	r3, [r4, #16]
 8000540:	2201      	movs	r2, #1
 8000542:	68e0      	ldr	r0, [r4, #12]
 8000544:	b299      	uxth	r1, r3
 8000546:	f001 ff67 	bl	8002418 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 800054a:	f003 f92b 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);

}
 800054e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08000550 <recvByte>:

uint8_t recvByte(struct Shandler *si2c,uint8_t lastByte){
 8000550:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int i;
	uint8_t byte = 0;
	setLineDirection(&si2c->sda,I2C_INPUT|I2C_PULLUP);
 8000552:	0007      	movs	r7, r0
 8000554:	370c      	adds	r7, #12
uint8_t recvByte(struct Shandler *si2c,uint8_t lastByte){
 8000556:	9101      	str	r1, [sp, #4]
 8000558:	0004      	movs	r4, r0
	setLineDirection(&si2c->sda,I2C_INPUT|I2C_PULLUP);
 800055a:	2103      	movs	r1, #3
 800055c:	0038      	movs	r0, r7
 800055e:	f7ff ff61 	bl	8000424 <setLineDirection>
	uint8_t byte = 0;
 8000562:	2600      	movs	r6, #0
	for(i=7;i>=0;i--){
 8000564:	2507      	movs	r5, #7
		CLOCK_UP;
 8000566:	6863      	ldr	r3, [r4, #4]
 8000568:	2201      	movs	r2, #1
 800056a:	b299      	uxth	r1, r3
 800056c:	6820      	ldr	r0, [r4, #0]
 800056e:	f001 ff53 	bl	8002418 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 8000572:	f003 f917 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
		I2C_Delay(I2C_DELAY_US);
		byte|=(HAL_GPIO_ReadPin(si2c->sda.GPIOx,si2c->sda.GPIO_pin))<<i;
 8000576:	6923      	ldr	r3, [r4, #16]
 8000578:	68e0      	ldr	r0, [r4, #12]
 800057a:	b299      	uxth	r1, r3
 800057c:	f001 ff46 	bl	800240c <HAL_GPIO_ReadPin>
 8000580:	40a8      	lsls	r0, r5
		CLOCK_DOWN;
 8000582:	6863      	ldr	r3, [r4, #4]
		byte|=(HAL_GPIO_ReadPin(si2c->sda.GPIOx,si2c->sda.GPIO_pin))<<i;
 8000584:	4306      	orrs	r6, r0
		CLOCK_DOWN;
 8000586:	2200      	movs	r2, #0
 8000588:	6820      	ldr	r0, [r4, #0]
 800058a:	b299      	uxth	r1, r3
		byte|=(HAL_GPIO_ReadPin(si2c->sda.GPIOx,si2c->sda.GPIO_pin))<<i;
 800058c:	b2f6      	uxtb	r6, r6
		CLOCK_DOWN;
 800058e:	f001 ff43 	bl	8002418 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 8000592:	f003 f907 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
	for(i=7;i>=0;i--){
 8000596:	3d01      	subs	r5, #1
 8000598:	d2e5      	bcs.n	8000566 <recvByte+0x16>
		I2C_Delay(I2C_DELAY_US);
	}
	setLineDirection(&si2c->sda,I2C_OUTPUT|I2C_PULLUP);
 800059a:	21fd      	movs	r1, #253	; 0xfd
 800059c:	0038      	movs	r0, r7
 800059e:	f7ff ff41 	bl	8000424 <setLineDirection>
	if(!lastByte)
 80005a2:	9b01      	ldr	r3, [sp, #4]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d105      	bne.n	80005b4 <recvByte+0x64>
		HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,ACK);
 80005a8:	6923      	ldr	r3, [r4, #16]
 80005aa:	9a01      	ldr	r2, [sp, #4]
 80005ac:	68e0      	ldr	r0, [r4, #12]
 80005ae:	b299      	uxth	r1, r3
 80005b0:	f001 ff32 	bl	8002418 <HAL_GPIO_WritePin>
	CLOCK_UP;
 80005b4:	6863      	ldr	r3, [r4, #4]
 80005b6:	2201      	movs	r2, #1
 80005b8:	b299      	uxth	r1, r3
 80005ba:	6820      	ldr	r0, [r4, #0]
 80005bc:	f001 ff2c 	bl	8002418 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 80005c0:	f003 f8f0 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	CLOCK_DOWN;
 80005c4:	6863      	ldr	r3, [r4, #4]
 80005c6:	6820      	ldr	r0, [r4, #0]
 80005c8:	b299      	uxth	r1, r3
 80005ca:	2200      	movs	r2, #0
 80005cc:	f001 ff24 	bl	8002418 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,1);
 80005d0:	6923      	ldr	r3, [r4, #16]
 80005d2:	2201      	movs	r2, #1
 80005d4:	68e0      	ldr	r0, [r4, #12]
 80005d6:	b299      	uxth	r1, r3
 80005d8:	f001 ff1e 	bl	8002418 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 80005dc:	f003 f8e2 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	return byte;
}
 80005e0:	0030      	movs	r0, r6
 80005e2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080005e4 <readReceipt>:

uint8_t readReceipt(struct Shandler *si2c){
 80005e4:	b570      	push	{r4, r5, r6, lr}
 80005e6:	0004      	movs	r4, r0
	uint8_t result;
	HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,1);
	setLineDirection(&si2c->sda,I2C_INPUT|I2C_PULLUP);
 80005e8:	0026      	movs	r6, r4
	HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,1);
 80005ea:	6843      	ldr	r3, [r0, #4]
 80005ec:	2201      	movs	r2, #1
 80005ee:	b299      	uxth	r1, r3
	setLineDirection(&si2c->sda,I2C_INPUT|I2C_PULLUP);
 80005f0:	360c      	adds	r6, #12
	HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,1);
 80005f2:	6800      	ldr	r0, [r0, #0]
 80005f4:	f001 ff10 	bl	8002418 <HAL_GPIO_WritePin>
	setLineDirection(&si2c->sda,I2C_INPUT|I2C_PULLUP);
 80005f8:	0030      	movs	r0, r6
 80005fa:	2103      	movs	r1, #3
 80005fc:	f7ff ff12 	bl	8000424 <setLineDirection>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 8000600:	f003 f8d0 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	result = HAL_GPIO_ReadPin(si2c->sda.GPIOx,si2c->sda.GPIO_pin);
 8000604:	6923      	ldr	r3, [r4, #16]
 8000606:	68e0      	ldr	r0, [r4, #12]
 8000608:	b299      	uxth	r1, r3
 800060a:	f001 feff 	bl	800240c <HAL_GPIO_ReadPin>
 800060e:	0005      	movs	r5, r0
	setLineDirection(&si2c->sda,I2C_OUTPUT|I2C_PULLUP);
 8000610:	21fd      	movs	r1, #253	; 0xfd
 8000612:	0030      	movs	r0, r6
 8000614:	f7ff ff06 	bl	8000424 <setLineDirection>
	HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,0);
 8000618:	6863      	ldr	r3, [r4, #4]
 800061a:	6820      	ldr	r0, [r4, #0]
 800061c:	b299      	uxth	r1, r3
 800061e:	2200      	movs	r2, #0
 8000620:	f001 fefa 	bl	8002418 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,1);
 8000624:	6923      	ldr	r3, [r4, #16]
 8000626:	2201      	movs	r2, #1
 8000628:	68e0      	ldr	r0, [r4, #12]
 800062a:	b299      	uxth	r1, r3
 800062c:	f001 fef4 	bl	8002418 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 8000630:	f003 f8b8 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	return result;
}
 8000634:	0028      	movs	r0, r5
 8000636:	bd70      	pop	{r4, r5, r6, pc}

08000638 <SFT_I2C_Master_Transmit>:

void SFT_I2C_Master_Transmit(struct Shandler *si2c, uint8_t DevAddress, uint8_t *pData,uint16_t Size, uint8_t timeout){
 8000638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800063a:	0005      	movs	r5, r0
 800063c:	000f      	movs	r7, r1
 800063e:	0014      	movs	r4, r2
 8000640:	001e      	movs	r6, r3
	uint16_t i = -1;
	startCondition(si2c);
 8000642:	f7ff ff1d 	bl	8000480 <startCondition>
	// address
	sendByte(si2c,DevAddress);
 8000646:	0039      	movs	r1, r7
 8000648:	0028      	movs	r0, r5
 800064a:	f7ff ff59 	bl	8000500 <sendByte>
	// data
	while((readReceipt(si2c) == ACK) && ++i<Size)
 800064e:	19a6      	adds	r6, r4, r6
 8000650:	0028      	movs	r0, r5
 8000652:	f7ff ffc7 	bl	80005e4 <readReceipt>
 8000656:	2800      	cmp	r0, #0
 8000658:	d101      	bne.n	800065e <SFT_I2C_Master_Transmit+0x26>
 800065a:	42b4      	cmp	r4, r6
 800065c:	d103      	bne.n	8000666 <SFT_I2C_Master_Transmit+0x2e>
		sendByte(si2c,pData[i]);
	stopCondition(si2c);
 800065e:	0028      	movs	r0, r5
 8000660:	f7ff ff35 	bl	80004ce <stopCondition>
}
 8000664:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendByte(si2c,pData[i]);
 8000666:	7821      	ldrb	r1, [r4, #0]
 8000668:	0028      	movs	r0, r5
 800066a:	f7ff ff49 	bl	8000500 <sendByte>
 800066e:	3401      	adds	r4, #1
 8000670:	e7ee      	b.n	8000650 <SFT_I2C_Master_Transmit+0x18>

08000672 <SFT_I2C_Master_Receive>:

void SFT_I2C_Master_Receive (struct Shandler *si2c, uint8_t DevAddress, uint8_t *pData,uint16_t Size, uint8_t timeout){
 8000672:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000674:	000e      	movs	r6, r1
 8000676:	0004      	movs	r4, r0
 8000678:	001d      	movs	r5, r3
 800067a:	9201      	str	r2, [sp, #4]
	uint16_t i = -1;
	startCondition(si2c);
 800067c:	f7ff ff00 	bl	8000480 <startCondition>
	// address
	sendByte(si2c,DevAddress|1);
 8000680:	2101      	movs	r1, #1
 8000682:	0020      	movs	r0, r4
 8000684:	4331      	orrs	r1, r6
 8000686:	f7ff ff3b 	bl	8000500 <sendByte>
	readReceipt(si2c);
 800068a:	0020      	movs	r0, r4
 800068c:	f7ff ffaa 	bl	80005e4 <readReceipt>
	// data
	while(++i<Size)
 8000690:	2600      	movs	r6, #0
 8000692:	42ae      	cmp	r6, r5
 8000694:	d103      	bne.n	800069e <SFT_I2C_Master_Receive+0x2c>
		pData[i] = recvByte(si2c,(i+1==Size));
	stopCondition(si2c);
 8000696:	0020      	movs	r0, r4
 8000698:	f7ff ff19 	bl	80004ce <stopCondition>
}
 800069c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pData[i] = recvByte(si2c,(i+1==Size));
 800069e:	1c77      	adds	r7, r6, #1
 80006a0:	1be9      	subs	r1, r5, r7
 80006a2:	424b      	negs	r3, r1
 80006a4:	4159      	adcs	r1, r3
 80006a6:	0020      	movs	r0, r4
 80006a8:	b2c9      	uxtb	r1, r1
 80006aa:	f7ff ff51 	bl	8000550 <recvByte>
 80006ae:	9b01      	ldr	r3, [sp, #4]
 80006b0:	5598      	strb	r0, [r3, r6]
 80006b2:	003e      	movs	r6, r7
 80006b4:	e7ed      	b.n	8000692 <SFT_I2C_Master_Receive+0x20>
	...

080006b8 <MX_SPI1_Init>:
  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006b8:	22e0      	movs	r2, #224	; 0xe0
  hspi1.Instance = SPI1;
 80006ba:	4810      	ldr	r0, [pc, #64]	; (80006fc <MX_SPI1_Init+0x44>)
 80006bc:	4b10      	ldr	r3, [pc, #64]	; (8000700 <MX_SPI1_Init+0x48>)
{
 80006be:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 80006c0:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006c2:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c4:	00d2      	lsls	r2, r2, #3
 80006c6:	60c2      	str	r2, [r0, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006c8:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80006ca:	005b      	lsls	r3, r3, #1
 80006cc:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006ce:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80006d0:	0092      	lsls	r2, r2, #2
 80006d2:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 80006d4:	3af9      	subs	r2, #249	; 0xf9
 80006d6:	3aff      	subs	r2, #255	; 0xff
 80006d8:	61c2      	str	r2, [r0, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 7;
 80006da:	3a01      	subs	r2, #1
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80006dc:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006de:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006e0:	6143      	str	r3, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e2:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80006e4:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006e6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80006e8:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80006ea:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80006ec:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80006ee:	f003 fb13 	bl	8003d18 <HAL_SPI_Init>
 80006f2:	2800      	cmp	r0, #0
 80006f4:	d001      	beq.n	80006fa <MX_SPI1_Init+0x42>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f6:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <MX_SPI1_Init+0x40>
}
 80006fa:	bd10      	pop	{r4, pc}
 80006fc:	20000800 	.word	0x20000800
 8000700:	40013000 	.word	0x40013000

08000704 <DisableSPI>:
void DisableSPI() {
 8000704:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000706:	2214      	movs	r2, #20
 8000708:	2100      	movs	r1, #0
 800070a:	a801      	add	r0, sp, #4
 800070c:	f005 fd4f 	bl	80061ae <memset>
	HAL_SPI_DeInit(&hspi1);
 8000710:	4806      	ldr	r0, [pc, #24]	; (800072c <DisableSPI+0x28>)
 8000712:	f003 fb79 	bl	8003e08 <HAL_SPI_DeInit>
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000716:	2309      	movs	r3, #9
 8000718:	9301      	str	r3, [sp, #4]
  	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	2300      	movs	r3, #0
  	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800071c:	4804      	ldr	r0, [pc, #16]	; (8000730 <DisableSPI+0x2c>)
 800071e:	a901      	add	r1, sp, #4
  	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000720:	9302      	str	r3, [sp, #8]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000722:	9303      	str	r3, [sp, #12]
  	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000724:	f001 fd5a 	bl	80021dc <HAL_GPIO_Init>
}
 8000728:	b007      	add	sp, #28
 800072a:	bd00      	pop	{pc}
 800072c:	20000800 	.word	0x20000800
 8000730:	48000400 	.word	0x48000400

08000734 <SetI2C_Mask>:
void SetI2C_Mask(uint8_t mask) {
 8000734:	b507      	push	{r0, r1, r2, lr}
	SysCntrl.i2c_bt[1] |= mask;
 8000736:	4b06      	ldr	r3, [pc, #24]	; (8000750 <SetI2C_Mask+0x1c>)
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR, SysCntrl.i2c_bt,2,1);
 8000738:	2140      	movs	r1, #64	; 0x40
	SysCntrl.i2c_bt[1] |= mask;
 800073a:	78da      	ldrb	r2, [r3, #3]
 800073c:	4310      	orrs	r0, r2
 800073e:	70d8      	strb	r0, [r3, #3]
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR, SysCntrl.i2c_bt,2,1);
 8000740:	2301      	movs	r3, #1
 8000742:	4a04      	ldr	r2, [pc, #16]	; (8000754 <SetI2C_Mask+0x20>)
 8000744:	9300      	str	r3, [sp, #0]
 8000746:	4804      	ldr	r0, [pc, #16]	; (8000758 <SetI2C_Mask+0x24>)
 8000748:	18db      	adds	r3, r3, r3
 800074a:	f7ff ff75 	bl	8000638 <SFT_I2C_Master_Transmit>
}
 800074e:	bd07      	pop	{r0, r1, r2, pc}
 8000750:	200004c0 	.word	0x200004c0
 8000754:	200004c2 	.word	0x200004c2
 8000758:	2000079c 	.word	0x2000079c

0800075c <ClrI2C_Mask>:
void ClrI2C_Mask(uint8_t mask) {
 800075c:	b507      	push	{r0, r1, r2, lr}
	SysCntrl.i2c_bt[1] &= ~mask;
 800075e:	4a06      	ldr	r2, [pc, #24]	; (8000778 <ClrI2C_Mask+0x1c>)
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR, SysCntrl.i2c_bt,2,1);
 8000760:	2140      	movs	r1, #64	; 0x40
	SysCntrl.i2c_bt[1] &= ~mask;
 8000762:	78d3      	ldrb	r3, [r2, #3]
 8000764:	4383      	bics	r3, r0
 8000766:	70d3      	strb	r3, [r2, #3]
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR, SysCntrl.i2c_bt,2,1);
 8000768:	2301      	movs	r3, #1
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <ClrI2C_Mask+0x20>)
 800076c:	9300      	str	r3, [sp, #0]
 800076e:	4804      	ldr	r0, [pc, #16]	; (8000780 <ClrI2C_Mask+0x24>)
 8000770:	18db      	adds	r3, r3, r3
 8000772:	f7ff ff61 	bl	8000638 <SFT_I2C_Master_Transmit>
}
 8000776:	bd07      	pop	{r0, r1, r2, pc}
 8000778:	200004c0 	.word	0x200004c0
 800077c:	200004c2 	.word	0x200004c2
 8000780:	2000079c 	.word	0x2000079c

08000784 <Set_CS>:
void Set_CS(uint8_t cs) {
 8000784:	0002      	movs	r2, r0
 8000786:	b510      	push	{r4, lr}
	if(cs == 0)
 8000788:	2800      	cmp	r0, #0
 800078a:	d105      	bne.n	8000798 <Set_CS+0x14>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 800078c:	3201      	adds	r2, #1
 800078e:	0011      	movs	r1, r2
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000790:	4803      	ldr	r0, [pc, #12]	; (80007a0 <Set_CS+0x1c>)
 8000792:	f001 fe41 	bl	8002418 <HAL_GPIO_WritePin>
}
 8000796:	bd10      	pop	{r4, pc}
	if(cs == 1)
 8000798:	2801      	cmp	r0, #1
 800079a:	d1fc      	bne.n	8000796 <Set_CS+0x12>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 800079c:	2108      	movs	r1, #8
 800079e:	e7f7      	b.n	8000790 <Set_CS+0xc>
 80007a0:	48000400 	.word	0x48000400

080007a4 <EnableSPI>:
void EnableSPI() {
 80007a4:	b530      	push	{r4, r5, lr}
 80007a6:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a8:	2214      	movs	r2, #20
 80007aa:	2100      	movs	r1, #0
 80007ac:	a801      	add	r0, sp, #4
 80007ae:	f005 fcfe 	bl	80061ae <memset>
	ClrI2C_Mask(FLASH_EN_0|FLASH_EN_1);
 80007b2:	2018      	movs	r0, #24
 80007b4:	f7ff ffd2 	bl	800075c <ClrI2C_Mask>
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b8:	2400      	movs	r4, #0
	MX_SPI1_Init();
 80007ba:	f7ff ff7d 	bl	80006b8 <MX_SPI1_Init>
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007be:	2501      	movs	r5, #1
  	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80007c0:	2309      	movs	r3, #9
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007c2:	a901      	add	r1, sp, #4
 80007c4:	4807      	ldr	r0, [pc, #28]	; (80007e4 <EnableSPI+0x40>)
  	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 80007c6:	9301      	str	r3, [sp, #4]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007c8:	9502      	str	r5, [sp, #8]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ca:	9403      	str	r4, [sp, #12]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007cc:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007ce:	f001 fd05 	bl	80021dc <HAL_GPIO_Init>
	Set_CS(0);
 80007d2:	0020      	movs	r0, r4
 80007d4:	f7ff ffd6 	bl	8000784 <Set_CS>
	Set_CS(1);
 80007d8:	0028      	movs	r0, r5
 80007da:	f7ff ffd3 	bl	8000784 <Set_CS>
}
 80007de:	b007      	add	sp, #28
 80007e0:	bd30      	pop	{r4, r5, pc}
 80007e2:	46c0      	nop			; (mov r8, r8)
 80007e4:	48000400 	.word	0x48000400

080007e8 <Clr_CS>:
void Clr_CS(uint8_t cs) {
 80007e8:	0002      	movs	r2, r0
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80007ea:	2101      	movs	r1, #1
void Clr_CS(uint8_t cs) {
 80007ec:	b510      	push	{r4, lr}
	if(cs == 0)
 80007ee:	2800      	cmp	r0, #0
 80007f0:	d003      	beq.n	80007fa <Clr_CS+0x12>
	if(cs == 1)
 80007f2:	2801      	cmp	r0, #1
 80007f4:	d104      	bne.n	8000800 <Clr_CS+0x18>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 80007f6:	2200      	movs	r2, #0
 80007f8:	2108      	movs	r1, #8
 80007fa:	4802      	ldr	r0, [pc, #8]	; (8000804 <Clr_CS+0x1c>)
 80007fc:	f001 fe0c 	bl	8002418 <HAL_GPIO_WritePin>
}
 8000800:	bd10      	pop	{r4, pc}
 8000802:	46c0      	nop			; (mov r8, r8)
 8000804:	48000400 	.word	0x48000400

08000808 <Test_RxPacket>:
void Test_RxPacket(uint8_t *Buf,uint32_t Len) {
 8000808:	b5f0      	push	{r4, r5, r6, r7, lr}
		SysCntrl.uart_rx_buf[SysCntrl.rx_head++] = Buf[idx++];
 800080a:	4d0a      	ldr	r5, [pc, #40]	; (8000834 <Test_RxPacket+0x2c>)
		SysCntrl.rx_head &= RX_BUF_SIZE-1;
 800080c:	26ff      	movs	r6, #255	; 0xff
		SysCntrl.uart_rx_buf[SysCntrl.rx_head++] = Buf[idx++];
 800080e:	002c      	movs	r4, r5
 8000810:	1841      	adds	r1, r0, r1
 8000812:	34fe      	adds	r4, #254	; 0xfe
	while(Len!=0) {
 8000814:	4288      	cmp	r0, r1
 8000816:	d100      	bne.n	800081a <Test_RxPacket+0x12>
}
 8000818:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SysCntrl.uart_rx_buf[SysCntrl.rx_head++] = Buf[idx++];
 800081a:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 800081c:	1c53      	adds	r3, r2, #1
 800081e:	b29b      	uxth	r3, r3
 8000820:	8523      	strh	r3, [r4, #40]	; 0x28
 8000822:	7807      	ldrb	r7, [r0, #0]
 8000824:	18aa      	adds	r2, r5, r2
 8000826:	3206      	adds	r2, #6
		SysCntrl.rx_head &= RX_BUF_SIZE-1;
 8000828:	4033      	ands	r3, r6
		SysCntrl.uart_rx_buf[SysCntrl.rx_head++] = Buf[idx++];
 800082a:	77d7      	strb	r7, [r2, #31]
		SysCntrl.rx_head &= RX_BUF_SIZE-1;
 800082c:	8523      	strh	r3, [r4, #40]	; 0x28
		Len--;
 800082e:	3001      	adds	r0, #1
 8000830:	e7f0      	b.n	8000814 <Test_RxPacket+0xc>
 8000832:	46c0      	nop			; (mov r8, r8)
 8000834:	200004c0 	.word	0x200004c0

08000838 <UART_putstr>:
void UART_putstr(char *str){
 8000838:	b510      	push	{r4, lr}
 800083a:	0004      	movs	r4, r0
	while(CDC_Transmit_FS((uint8_t*)str,strlen(str)) != USBD_OK);
 800083c:	0020      	movs	r0, r4
 800083e:	f7ff fc6d 	bl	800011c <strlen>
 8000842:	b281      	uxth	r1, r0
 8000844:	0020      	movs	r0, r4
 8000846:	f005 fa89 	bl	8005d5c <CDC_Transmit_FS>
 800084a:	2800      	cmp	r0, #0
 800084c:	d1f6      	bne.n	800083c <UART_putstr+0x4>
}
 800084e:	bd10      	pop	{r4, pc}

08000850 <UART_putstrln>:
void UART_putstrln(char *str){
 8000850:	b510      	push	{r4, lr}
 8000852:	0004      	movs	r4, r0
	HAL_Delay(1);
 8000854:	2001      	movs	r0, #1
 8000856:	f001 fa01 	bl	8001c5c <HAL_Delay>
	if(str!=0)
 800085a:	2c00      	cmp	r4, #0
 800085c:	d008      	beq.n	8000870 <UART_putstrln+0x20>
		while(CDC_Transmit_FS((uint8_t*)str,strlen(str)) != USBD_OK);
 800085e:	0020      	movs	r0, r4
 8000860:	f7ff fc5c 	bl	800011c <strlen>
 8000864:	b281      	uxth	r1, r0
 8000866:	0020      	movs	r0, r4
 8000868:	f005 fa78 	bl	8005d5c <CDC_Transmit_FS>
 800086c:	2800      	cmp	r0, #0
 800086e:	d1f6      	bne.n	800085e <UART_putstrln+0xe>
	HAL_Delay(1);
 8000870:	2001      	movs	r0, #1
 8000872:	f001 f9f3 	bl	8001c5c <HAL_Delay>
	while(CDC_Transmit_FS((uint8_t*)"\r\n",3) != USBD_OK);
 8000876:	2103      	movs	r1, #3
 8000878:	4802      	ldr	r0, [pc, #8]	; (8000884 <UART_putstrln+0x34>)
 800087a:	f005 fa6f 	bl	8005d5c <CDC_Transmit_FS>
 800087e:	2800      	cmp	r0, #0
 8000880:	d1f9      	bne.n	8000876 <UART_putstrln+0x26>
}
 8000882:	bd10      	pop	{r4, pc}
 8000884:	08006b95 	.word	0x08006b95

08000888 <UART_SendByte>:
void UART_SendByte(uint8_t bt) {
 8000888:	b513      	push	{r0, r1, r4, lr}
 800088a:	466b      	mov	r3, sp
 800088c:	1ddc      	adds	r4, r3, #7
 800088e:	7020      	strb	r0, [r4, #0]
	while(CDC_Transmit_FS(&bt,1) != USBD_OK);
 8000890:	2101      	movs	r1, #1
 8000892:	0020      	movs	r0, r4
 8000894:	f005 fa62 	bl	8005d5c <CDC_Transmit_FS>
 8000898:	2800      	cmp	r0, #0
 800089a:	d1f9      	bne.n	8000890 <UART_SendByte+0x8>
}
 800089c:	bd13      	pop	{r0, r1, r4, pc}
	...

080008a0 <ReadUartNonBlock>:
int ReadUartNonBlock(uint8_t *buf,int size) {
 80008a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	while((SysCntrl.rx_head != SysCntrl.rx_tail) && size) {
 80008a2:	4d0c      	ldr	r5, [pc, #48]	; (80008d4 <ReadUartNonBlock+0x34>)
int ReadUartNonBlock(uint8_t *buf,int size) {
 80008a4:	0004      	movs	r4, r0
	while((SysCntrl.rx_head != SysCntrl.rx_tail) && size) {
 80008a6:	002a      	movs	r2, r5
 80008a8:	2000      	movs	r0, #0
		SysCntrl.rx_tail &= RX_BUF_SIZE-1;
 80008aa:	26ff      	movs	r6, #255	; 0xff
	while((SysCntrl.rx_head != SysCntrl.rx_tail) && size) {
 80008ac:	32fe      	adds	r2, #254	; 0xfe
 80008ae:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
 80008b0:	8d17      	ldrh	r7, [r2, #40]	; 0x28
 80008b2:	429f      	cmp	r7, r3
 80008b4:	d001      	beq.n	80008ba <ReadUartNonBlock+0x1a>
 80008b6:	4288      	cmp	r0, r1
 80008b8:	d100      	bne.n	80008bc <ReadUartNonBlock+0x1c>
}
 80008ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf[cnt++] = SysCntrl.uart_rx_buf[SysCntrl.rx_tail++];
 80008bc:	1c5f      	adds	r7, r3, #1
 80008be:	18eb      	adds	r3, r5, r3
 80008c0:	8557      	strh	r7, [r2, #42]	; 0x2a
 80008c2:	3306      	adds	r3, #6
 80008c4:	7fdb      	ldrb	r3, [r3, #31]
 80008c6:	5423      	strb	r3, [r4, r0]
		SysCntrl.rx_tail &= RX_BUF_SIZE-1;
 80008c8:	8d53      	ldrh	r3, [r2, #42]	; 0x2a
 80008ca:	3001      	adds	r0, #1
 80008cc:	4033      	ands	r3, r6
 80008ce:	8553      	strh	r3, [r2, #42]	; 0x2a
		size--;
 80008d0:	e7ed      	b.n	80008ae <ReadUartNonBlock+0xe>
 80008d2:	46c0      	nop			; (mov r8, r8)
 80008d4:	200004c0 	.word	0x200004c0

080008d8 <userInput>:
void userInput(uint8_t anykey){
 80008d8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80008da:	0005      	movs	r5, r0
		console.result = ReadUartNonBlock(&bt, 1);
 80008dc:	466b      	mov	r3, sp
 80008de:	2101      	movs	r1, #1
 80008e0:	1dd8      	adds	r0, r3, #7
 80008e2:	f7ff ffdd 	bl	80008a0 <ReadUartNonBlock>
 80008e6:	4c24      	ldr	r4, [pc, #144]	; (8000978 <userInput+0xa0>)
 80008e8:	b2c0      	uxtb	r0, r0
 80008ea:	0023      	movs	r3, r4
 80008ec:	3345      	adds	r3, #69	; 0x45
 80008ee:	7018      	strb	r0, [r3, #0]
		if(console.result) {
 80008f0:	2800      	cmp	r0, #0
 80008f2:	d020      	beq.n	8000936 <userInput+0x5e>
			if(anykey)
 80008f4:	2d00      	cmp	r5, #0
 80008f6:	d003      	beq.n	8000900 <userInput+0x28>
				console.cmd_flag = 1;
 80008f8:	0023      	movs	r3, r4
 80008fa:	2201      	movs	r2, #1
 80008fc:	3344      	adds	r3, #68	; 0x44
 80008fe:	701a      	strb	r2, [r3, #0]
			if(bt == 0x8){ //0x8 - asci backspace
 8000900:	466b      	mov	r3, sp
 8000902:	79de      	ldrb	r6, [r3, #7]
 8000904:	2e08      	cmp	r6, #8
 8000906:	d110      	bne.n	800092a <userInput+0x52>
				UART_SendByte(0x8);
 8000908:	0030      	movs	r0, r6
 800090a:	f7ff ffbd 	bl	8000888 <UART_SendByte>
				UART_SendByte(0x20); //0x20 - asci space
 800090e:	2020      	movs	r0, #32
 8000910:	f7ff ffba 	bl	8000888 <UART_SendByte>
				UART_SendByte(0x8);
 8000914:	0030      	movs	r0, r6
 8000916:	f7ff ffb7 	bl	8000888 <UART_SendByte>
				console.buf[--console.idx] = 0;
 800091a:	2200      	movs	r2, #0
 800091c:	7823      	ldrb	r3, [r4, #0]
 800091e:	3b01      	subs	r3, #1
 8000920:	b2db      	uxtb	r3, r3
 8000922:	7023      	strb	r3, [r4, #0]
 8000924:	18e3      	adds	r3, r4, r3
					console.buf[console.idx++] = bt;
 8000926:	705a      	strb	r2, [r3, #1]
 8000928:	e017      	b.n	800095a <userInput+0x82>
				if(bt == '\n')
 800092a:	2e0a      	cmp	r6, #10
 800092c:	d104      	bne.n	8000938 <userInput+0x60>
	}while(console.result && (!console.cmd_flag));
 800092e:	3444      	adds	r4, #68	; 0x44
 8000930:	7823      	ldrb	r3, [r4, #0]
 8000932:	2b00      	cmp	r3, #0
 8000934:	d0d2      	beq.n	80008dc <userInput+0x4>
}
 8000936:	bd73      	pop	{r0, r1, r4, r5, r6, pc}
				UART_SendByte(bt);
 8000938:	0030      	movs	r0, r6
 800093a:	f7ff ffa5 	bl	8000888 <UART_SendByte>
				if(bt == '\r'){
 800093e:	466b      	mov	r3, sp
 8000940:	79da      	ldrb	r2, [r3, #7]
					console.buf[console.idx++] = 0;
 8000942:	7823      	ldrb	r3, [r4, #0]
				if(bt == '\r'){
 8000944:	2a0d      	cmp	r2, #13
 8000946:	d113      	bne.n	8000970 <userInput+0x98>
					console.buf[console.idx++] = 0;
 8000948:	1c5a      	adds	r2, r3, #1
 800094a:	7022      	strb	r2, [r4, #0]
 800094c:	2200      	movs	r2, #0
 800094e:	18e3      	adds	r3, r4, r3
 8000950:	705a      	strb	r2, [r3, #1]
					console.cmd_flag = 1;
 8000952:	0023      	movs	r3, r4
 8000954:	3201      	adds	r2, #1
 8000956:	3344      	adds	r3, #68	; 0x44
 8000958:	701a      	strb	r2, [r3, #0]
			if(console.idx >= UART_BUF_SIZE) console.idx = 0;
 800095a:	7823      	ldrb	r3, [r4, #0]
 800095c:	2b1f      	cmp	r3, #31
 800095e:	d901      	bls.n	8000964 <userInput+0x8c>
 8000960:	2300      	movs	r3, #0
 8000962:	7023      	strb	r3, [r4, #0]
	}while(console.result && (!console.cmd_flag));
 8000964:	0023      	movs	r3, r4
 8000966:	3345      	adds	r3, #69	; 0x45
 8000968:	781b      	ldrb	r3, [r3, #0]
 800096a:	2b00      	cmp	r3, #0
 800096c:	d1df      	bne.n	800092e <userInput+0x56>
 800096e:	e7e2      	b.n	8000936 <userInput+0x5e>
					console.buf[console.idx++] = bt;
 8000970:	1c59      	adds	r1, r3, #1
 8000972:	7021      	strb	r1, [r4, #0]
 8000974:	18e3      	adds	r3, r4, r3
 8000976:	e7d6      	b.n	8000926 <userInput+0x4e>
 8000978:	20000474 	.word	0x20000474

0800097c <refreshConsoleS>:
void refreshConsoleS(){
 800097c:	2301      	movs	r3, #1
		console.buf[i] = 0;
 800097e:	2100      	movs	r1, #0
 8000980:	4a05      	ldr	r2, [pc, #20]	; (8000998 <refreshConsoleS+0x1c>)
 8000982:	1898      	adds	r0, r3, r2
 8000984:	3301      	adds	r3, #1
 8000986:	7001      	strb	r1, [r0, #0]
	for(i=0;i<UART_BUF_SIZE;i++)
 8000988:	2b21      	cmp	r3, #33	; 0x21
 800098a:	d1fa      	bne.n	8000982 <refreshConsoleS+0x6>
	console.cmd_flag = 0;
 800098c:	0013      	movs	r3, r2
 800098e:	3344      	adds	r3, #68	; 0x44
 8000990:	7019      	strb	r1, [r3, #0]
	console.idx = 0;
 8000992:	7011      	strb	r1, [r2, #0]
}
 8000994:	4770      	bx	lr
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	20000474 	.word	0x20000474

0800099c <clearUartConsole>:
void clearUartConsole(){
 800099c:	b510      	push	{r4, lr}
	while(CDC_Transmit_FS((uint8_t*)clr,strlen(clr)) != USBD_OK);
 800099e:	4b06      	ldr	r3, [pc, #24]	; (80009b8 <clearUartConsole+0x1c>)
 80009a0:	681c      	ldr	r4, [r3, #0]
 80009a2:	0020      	movs	r0, r4
 80009a4:	f7ff fbba 	bl	800011c <strlen>
 80009a8:	b281      	uxth	r1, r0
 80009aa:	0020      	movs	r0, r4
 80009ac:	f005 f9d6 	bl	8005d5c <CDC_Transmit_FS>
 80009b0:	2800      	cmp	r0, #0
 80009b2:	d1f4      	bne.n	800099e <clearUartConsole+0x2>
}
 80009b4:	bd10      	pop	{r4, pc}
 80009b6:	46c0      	nop			; (mov r8, r8)
 80009b8:	20000000 	.word	0x20000000

080009bc <UART_Con_Mash>:
void UART_Con_Mash(){
 80009bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	userInput(0);
 80009be:	2000      	movs	r0, #0
void UART_Con_Mash(){
 80009c0:	b085      	sub	sp, #20
	userInput(0);
 80009c2:	f7ff ff89 	bl	80008d8 <userInput>
	if(console.cmd_flag){
 80009c6:	4c4e      	ldr	r4, [pc, #312]	; (8000b00 <UART_Con_Mash+0x144>)
 80009c8:	0023      	movs	r3, r4
 80009ca:	3344      	adds	r3, #68	; 0x44
 80009cc:	781b      	ldrb	r3, [r3, #0]
 80009ce:	1d27      	adds	r7, r4, #4
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d02f      	beq.n	8000a34 <UART_Con_Mash+0x78>
		if(!strcmp(console.buf,"help")){
 80009d4:	4d4b      	ldr	r5, [pc, #300]	; (8000b04 <UART_Con_Mash+0x148>)
 80009d6:	494c      	ldr	r1, [pc, #304]	; (8000b08 <UART_Con_Mash+0x14c>)
 80009d8:	0028      	movs	r0, r5
 80009da:	f7ff fb95 	bl	8000108 <strcmp>
 80009de:	2800      	cmp	r0, #0
 80009e0:	d103      	bne.n	80009ea <UART_Con_Mash+0x2e>
			UART_putstrln("ping!");
 80009e2:	484a      	ldr	r0, [pc, #296]	; (8000b0c <UART_Con_Mash+0x150>)
			UART_putstrln("Unknown command");
 80009e4:	f7ff ff34 	bl	8000850 <UART_putstrln>
 80009e8:	e022      	b.n	8000a30 <UART_Con_Mash+0x74>
		if(!strcmp(console.buf,"restart")){
 80009ea:	0028      	movs	r0, r5
 80009ec:	4948      	ldr	r1, [pc, #288]	; (8000b10 <UART_Con_Mash+0x154>)
 80009ee:	f7ff fb8b 	bl	8000108 <strcmp>
 80009f2:	1e06      	subs	r6, r0, #0
 80009f4:	d109      	bne.n	8000a0a <UART_Con_Mash+0x4e>
			SysCntrl.power_stage = 41;
 80009f6:	2229      	movs	r2, #41	; 0x29
 80009f8:	4b46      	ldr	r3, [pc, #280]	; (8000b14 <UART_Con_Mash+0x158>)
			UART_putstrln("CPU restarted...");
 80009fa:	4847      	ldr	r0, [pc, #284]	; (8000b18 <UART_Con_Mash+0x15c>)
			SysCntrl.power_stage = 41;
 80009fc:	701a      	strb	r2, [r3, #0]
			UART_putstrln("CPU turn off...");
 80009fe:	f7ff ff27 	bl	8000850 <UART_putstrln>
			refreshConsoleS();
 8000a02:	f7ff ffbb 	bl	800097c <refreshConsoleS>
			UART_putstrln(0);
 8000a06:	0030      	movs	r0, r6
 8000a08:	e7ec      	b.n	80009e4 <UART_Con_Mash+0x28>
		if(!strcmp(console.buf,"autoboot")){
 8000a0a:	0028      	movs	r0, r5
 8000a0c:	4943      	ldr	r1, [pc, #268]	; (8000b1c <UART_Con_Mash+0x160>)
 8000a0e:	f7ff fb7b 	bl	8000108 <strcmp>
 8000a12:	2800      	cmp	r0, #0
 8000a14:	d110      	bne.n	8000a38 <UART_Con_Mash+0x7c>
			SysCntrl.PowerState =(SysCntrl.PowerState)?0:1;
 8000a16:	2201      	movs	r2, #1
 8000a18:	483e      	ldr	r0, [pc, #248]	; (8000b14 <UART_Con_Mash+0x158>)
 8000a1a:	4941      	ldr	r1, [pc, #260]	; (8000b20 <UART_Con_Mash+0x164>)
 8000a1c:	5c43      	ldrb	r3, [r0, r1]
 8000a1e:	095c      	lsrs	r4, r3, #5
 8000a20:	43a2      	bics	r2, r4
 8000a22:	2420      	movs	r4, #32
 8000a24:	0152      	lsls	r2, r2, #5
 8000a26:	43a3      	bics	r3, r4
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	5443      	strb	r3, [r0, r1]
			writeConfig();
 8000a2c:	f000 fd1c 	bl	8001468 <writeConfig>
		refreshConsoleS();
 8000a30:	f7ff ffa4 	bl	800097c <refreshConsoleS>
}
 8000a34:	b005      	add	sp, #20
 8000a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if(!strcmp(console.buf,"poweroff")){
 8000a38:	0028      	movs	r0, r5
 8000a3a:	493a      	ldr	r1, [pc, #232]	; (8000b24 <UART_Con_Mash+0x168>)
 8000a3c:	f7ff fb64 	bl	8000108 <strcmp>
 8000a40:	1e06      	subs	r6, r0, #0
 8000a42:	d104      	bne.n	8000a4e <UART_Con_Mash+0x92>
			SysCntrl.power_stage = 100;
 8000a44:	2264      	movs	r2, #100	; 0x64
 8000a46:	4b33      	ldr	r3, [pc, #204]	; (8000b14 <UART_Con_Mash+0x158>)
			UART_putstrln("CPU turn off...");
 8000a48:	4837      	ldr	r0, [pc, #220]	; (8000b28 <UART_Con_Mash+0x16c>)
			SysCntrl.power_stage = 100;
 8000a4a:	701a      	strb	r2, [r3, #0]
			UART_putstrln("CPU turn off...");
 8000a4c:	e7d7      	b.n	80009fe <UART_Con_Mash+0x42>
		if(!strcmp(console.buf,"xmodem")){
 8000a4e:	0028      	movs	r0, r5
 8000a50:	4936      	ldr	r1, [pc, #216]	; (8000b2c <UART_Con_Mash+0x170>)
 8000a52:	f7ff fb59 	bl	8000108 <strcmp>
 8000a56:	2800      	cmp	r0, #0
 8000a58:	d105      	bne.n	8000a66 <UART_Con_Mash+0xaa>
			UART_putstrln("Start XMODEM");
 8000a5a:	4835      	ldr	r0, [pc, #212]	; (8000b30 <UART_Con_Mash+0x174>)
 8000a5c:	f7ff fef8 	bl	8000850 <UART_putstrln>
			console.cmdStage = 100;
 8000a60:	2364      	movs	r3, #100	; 0x64
			console.cmdStage = 6;
 8000a62:	87fb      	strh	r3, [r7, #62]	; 0x3e
 8000a64:	e7e4      	b.n	8000a30 <UART_Con_Mash+0x74>
		if(!strcmp(console.buf,"dump1")){
 8000a66:	0028      	movs	r0, r5
 8000a68:	4932      	ldr	r1, [pc, #200]	; (8000b34 <UART_Con_Mash+0x178>)
 8000a6a:	f7ff fb4d 	bl	8000108 <strcmp>
 8000a6e:	1e06      	subs	r6, r0, #0
 8000a70:	d107      	bne.n	8000a82 <UART_Con_Mash+0xc6>
			EnableSPI();
 8000a72:	f7ff fe97 	bl	80007a4 <EnableSPI>
			FlashDump(1);
 8000a76:	2001      	movs	r0, #1
			FlashDump(0);
 8000a78:	f000 fc2c 	bl	80012d4 <FlashDump>
			DisableSPI();
 8000a7c:	f7ff fe42 	bl	8000704 <DisableSPI>
			UART_putstrln(0);
 8000a80:	e7c1      	b.n	8000a06 <UART_Con_Mash+0x4a>
		if(!strcmp(console.buf,"dump0")){
 8000a82:	0028      	movs	r0, r5
 8000a84:	492c      	ldr	r1, [pc, #176]	; (8000b38 <UART_Con_Mash+0x17c>)
 8000a86:	f7ff fb3f 	bl	8000108 <strcmp>
 8000a8a:	1e06      	subs	r6, r0, #0
 8000a8c:	d103      	bne.n	8000a96 <UART_Con_Mash+0xda>
			EnableSPI();
 8000a8e:	f7ff fe89 	bl	80007a4 <EnableSPI>
			FlashDump(0);
 8000a92:	0030      	movs	r0, r6
 8000a94:	e7f0      	b.n	8000a78 <UART_Con_Mash+0xbc>
		if(!strcmp(console.buf,"post")){
 8000a96:	0028      	movs	r0, r5
 8000a98:	4928      	ldr	r1, [pc, #160]	; (8000b3c <UART_Con_Mash+0x180>)
 8000a9a:	f7ff fb35 	bl	8000108 <strcmp>
 8000a9e:	2800      	cmp	r0, #0
 8000aa0:	d103      	bne.n	8000aaa <UART_Con_Mash+0xee>
			POST();
 8000aa2:	f7ff fc0b 	bl	80002bc <POST>
			console.cmdStage = 6;
 8000aa6:	2306      	movs	r3, #6
 8000aa8:	e7db      	b.n	8000a62 <UART_Con_Mash+0xa6>
		if(!strcmp(console.buf,"power")){
 8000aaa:	0028      	movs	r0, r5
 8000aac:	4924      	ldr	r1, [pc, #144]	; (8000b40 <UART_Con_Mash+0x184>)
 8000aae:	f7ff fb2b 	bl	8000108 <strcmp>
 8000ab2:	2800      	cmp	r0, #0
 8000ab4:	d106      	bne.n	8000ac4 <UART_Con_Mash+0x108>
			checkPowerLevels(1);
 8000ab6:	3001      	adds	r0, #1
 8000ab8:	f000 fd38 	bl	800152c <checkPowerLevels>
			console.cmdStage = 6;
 8000abc:	2306      	movs	r3, #6
 8000abe:	3404      	adds	r4, #4
			console.cmdStage = 7;
 8000ac0:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8000ac2:	e7b5      	b.n	8000a30 <UART_Con_Mash+0x74>
		if(!strcmp(console.buf,"mm")){
 8000ac4:	0028      	movs	r0, r5
 8000ac6:	491f      	ldr	r1, [pc, #124]	; (8000b44 <UART_Con_Mash+0x188>)
 8000ac8:	f7ff fb1e 	bl	8000108 <strcmp>
 8000acc:	2800      	cmp	r0, #0
 8000ace:	d103      	bne.n	8000ad8 <UART_Con_Mash+0x11c>
			memoryMenu(1);
 8000ad0:	3001      	adds	r0, #1
 8000ad2:	f000 fc53 	bl	800137c <memoryMenu>
 8000ad6:	e7f1      	b.n	8000abc <UART_Con_Mash+0x100>
		if(!strcmp(console.buf,"pwrstage")){
 8000ad8:	0028      	movs	r0, r5
 8000ada:	491b      	ldr	r1, [pc, #108]	; (8000b48 <UART_Con_Mash+0x18c>)
 8000adc:	f7ff fb14 	bl	8000108 <strcmp>
 8000ae0:	2800      	cmp	r0, #0
 8000ae2:	d10b      	bne.n	8000afc <UART_Con_Mash+0x140>
			sprintf(buf,"Power stage:%d",SysCntrl.power_stage);
 8000ae4:	4b0b      	ldr	r3, [pc, #44]	; (8000b14 <UART_Con_Mash+0x158>)
 8000ae6:	4919      	ldr	r1, [pc, #100]	; (8000b4c <UART_Con_Mash+0x190>)
 8000ae8:	781a      	ldrb	r2, [r3, #0]
 8000aea:	4668      	mov	r0, sp
 8000aec:	f005 fb68 	bl	80061c0 <siprintf>
			UART_putstrln(buf);
 8000af0:	4668      	mov	r0, sp
 8000af2:	f7ff fead 	bl	8000850 <UART_putstrln>
			console.cmdStage = 7;
 8000af6:	3404      	adds	r4, #4
 8000af8:	2307      	movs	r3, #7
 8000afa:	e7e1      	b.n	8000ac0 <UART_Con_Mash+0x104>
			UART_putstrln("Unknown command");
 8000afc:	4814      	ldr	r0, [pc, #80]	; (8000b50 <UART_Con_Mash+0x194>)
 8000afe:	e771      	b.n	80009e4 <UART_Con_Mash+0x28>
 8000b00:	20000474 	.word	0x20000474
 8000b04:	20000475 	.word	0x20000475
 8000b08:	08006bac 	.word	0x08006bac
 8000b0c:	08006bb1 	.word	0x08006bb1
 8000b10:	08006bb7 	.word	0x08006bb7
 8000b14:	200004c0 	.word	0x200004c0
 8000b18:	08006bbf 	.word	0x08006bbf
 8000b1c:	08006bd0 	.word	0x08006bd0
 8000b20:	000002d9 	.word	0x000002d9
 8000b24:	08006bd9 	.word	0x08006bd9
 8000b28:	08006be2 	.word	0x08006be2
 8000b2c:	08006bf2 	.word	0x08006bf2
 8000b30:	08006bf9 	.word	0x08006bf9
 8000b34:	08006c06 	.word	0x08006c06
 8000b38:	08006c0c 	.word	0x08006c0c
 8000b3c:	08006c12 	.word	0x08006c12
 8000b40:	08006c17 	.word	0x08006c17
 8000b44:	08006c1d 	.word	0x08006c1d
 8000b48:	08006c20 	.word	0x08006c20
 8000b4c:	08006c29 	.word	0x08006c29
 8000b50:	08006c38 	.word	0x08006c38

08000b54 <ByteToHEX>:
uint8_t ByteToHEX(uint8_t bt){
 8000b54:	0003      	movs	r3, r0
if(bt<10)
 8000b56:	2809      	cmp	r0, #9
 8000b58:	d802      	bhi.n	8000b60 <ByteToHEX+0xc>
	return bt+'0';
 8000b5a:	3330      	adds	r3, #48	; 0x30
	return bt+0x37;
 8000b5c:	b2d8      	uxtb	r0, r3
}
 8000b5e:	4770      	bx	lr
return 'X';
 8000b60:	2058      	movs	r0, #88	; 0x58
if(bt<=0xf)
 8000b62:	2b0f      	cmp	r3, #15
 8000b64:	d8fb      	bhi.n	8000b5e <ByteToHEX+0xa>
	return bt+0x37;
 8000b66:	3337      	adds	r3, #55	; 0x37
 8000b68:	e7f8      	b.n	8000b5c <ByteToHEX+0x8>
	...

08000b6c <SystemClock_Config>:
{
 8000b6c:	b510      	push	{r4, lr}
 8000b6e:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b70:	2230      	movs	r2, #48	; 0x30
 8000b72:	2100      	movs	r1, #0
 8000b74:	a80c      	add	r0, sp, #48	; 0x30
 8000b76:	f005 fb1a 	bl	80061ae <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b7a:	2210      	movs	r2, #16
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	a801      	add	r0, sp, #4
 8000b80:	f005 fb15 	bl	80061ae <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b84:	2218      	movs	r2, #24
 8000b86:	2100      	movs	r1, #0
 8000b88:	a805      	add	r0, sp, #20
 8000b8a:	f005 fb10 	bl	80061ae <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000b8e:	2332      	movs	r3, #50	; 0x32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b90:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000b92:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b94:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 31;
 8000b96:	3b13      	subs	r3, #19
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b98:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000b9a:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000b9c:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 31;
 8000b9e:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSI14CalibrationValue = 31;
 8000ba0:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ba2:	f002 fbaf 	bl	8003304 <HAL_RCC_OscConfig>
 8000ba6:	2800      	cmp	r0, #0
 8000ba8:	d001      	beq.n	8000bae <SystemClock_Config+0x42>
 8000baa:	b672      	cpsid	i
  while (1)
 8000bac:	e7fe      	b.n	8000bac <SystemClock_Config+0x40>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bae:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bb0:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bb4:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000bb6:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bb8:	0021      	movs	r1, r4
 8000bba:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000bbc:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000bbe:	f002 fe33 	bl	8003828 <HAL_RCC_ClockConfig>
 8000bc2:	2800      	cmp	r0, #0
 8000bc4:	d001      	beq.n	8000bca <SystemClock_Config+0x5e>
 8000bc6:	b672      	cpsid	i
  while (1)
 8000bc8:	e7fe      	b.n	8000bc8 <SystemClock_Config+0x5c>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <SystemClock_Config+0x78>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000bcc:	9008      	str	r0, [sp, #32]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000bce:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd0:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000bd2:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000bd4:	f002 fee0 	bl	8003998 <HAL_RCCEx_PeriphCLKConfig>
 8000bd8:	2800      	cmp	r0, #0
 8000bda:	d001      	beq.n	8000be0 <SystemClock_Config+0x74>
 8000bdc:	b672      	cpsid	i
  while (1)
 8000bde:	e7fe      	b.n	8000bde <SystemClock_Config+0x72>
}
 8000be0:	b018      	add	sp, #96	; 0x60
 8000be2:	bd10      	pop	{r4, pc}
 8000be4:	00020020 	.word	0x00020020

08000be8 <main>:
{
 8000be8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bea:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000bec:	f001 f814 	bl	8001c18 <HAL_Init>
  readConfig();
 8000bf0:	f000 fc66 	bl	80014c0 <readConfig>
  if(SysCntrl.Magic!=0b10110){
 8000bf4:	211f      	movs	r1, #31
 8000bf6:	4ea1      	ldr	r6, [pc, #644]	; (8000e7c <main+0x294>)
 8000bf8:	4ba1      	ldr	r3, [pc, #644]	; (8000e80 <main+0x298>)
 8000bfa:	5cf3      	ldrb	r3, [r6, r3]
 8000bfc:	400b      	ands	r3, r1
 8000bfe:	2b16      	cmp	r3, #22
 8000c00:	d010      	beq.n	8000c24 <main+0x3c>
	SysCntrl.Watchdog = 1;
 8000c02:	20b6      	movs	r0, #182	; 0xb6
 8000c04:	0080      	lsls	r0, r0, #2
 8000c06:	5a33      	ldrh	r3, [r6, r0]
 8000c08:	4a9e      	ldr	r2, [pc, #632]	; (8000e84 <main+0x29c>)
 8000c0a:	401a      	ands	r2, r3
 8000c0c:	4b9e      	ldr	r3, [pc, #632]	; (8000e88 <main+0x2a0>)
 8000c0e:	4313      	orrs	r3, r2
 8000c10:	5233      	strh	r3, [r6, r0]
	SysCntrl.Magic = 0b10110;
 8000c12:	4b9e      	ldr	r3, [pc, #632]	; (8000e8c <main+0x2a4>)
 8000c14:	18f0      	adds	r0, r6, r3
 8000c16:	2316      	movs	r3, #22
 8000c18:	7842      	ldrb	r2, [r0, #1]
 8000c1a:	438a      	bics	r2, r1
 8000c1c:	4313      	orrs	r3, r2
 8000c1e:	7043      	strb	r3, [r0, #1]
	writeConfig();
 8000c20:	f000 fc22 	bl	8001468 <writeConfig>
  SysCntrl.i2c_bt[0] = 0x1;
 8000c24:	2501      	movs	r5, #1
  SysCntrl.rx_head = 0;
 8000c26:	0033      	movs	r3, r6
  SysCntrl.power_stage = 0;
 8000c28:	2400      	movs	r4, #0
  SysCntrl.rx_head = 0;
 8000c2a:	33fe      	adds	r3, #254	; 0xfe
  SysCntrl.i2c_bt[0] = 0x1;
 8000c2c:	8075      	strh	r5, [r6, #2]
  SysCntrl.rx_head = 0;
 8000c2e:	851c      	strh	r4, [r3, #40]	; 0x28
  SysCntrl.rx_tail = 0;
 8000c30:	855c      	strh	r4, [r3, #42]	; 0x2a
  SysCntrl.power_stage = 0;
 8000c32:	7034      	strb	r4, [r6, #0]
  refreshConsoleS();
 8000c34:	f7ff fea2 	bl	800097c <refreshConsoleS>
  SystemClock_Config();
 8000c38:	f7ff ff98 	bl	8000b6c <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	2214      	movs	r2, #20
 8000c3e:	0021      	movs	r1, r4
 8000c40:	a805      	add	r0, sp, #20
 8000c42:	f005 fab4 	bl	80061ae <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c46:	2080      	movs	r0, #128	; 0x80
 8000c48:	4b91      	ldr	r3, [pc, #580]	; (8000e90 <main+0x2a8>)
 8000c4a:	02c0      	lsls	r0, r0, #11
 8000c4c:	6959      	ldr	r1, [r3, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000c4e:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c50:	4301      	orrs	r1, r0
 8000c52:	6159      	str	r1, [r3, #20]
 8000c54:	695a      	ldr	r2, [r3, #20]
 8000c56:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c58:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c5a:	9202      	str	r2, [sp, #8]
 8000c5c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c5e:	6959      	ldr	r1, [r3, #20]
 8000c60:	03c0      	lsls	r0, r0, #15
 8000c62:	4301      	orrs	r1, r0
 8000c64:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c66:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c68:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c6a:	0289      	lsls	r1, r1, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c6c:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000c6e:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000c70:	9203      	str	r2, [sp, #12]
 8000c72:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000c76:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c78:	430a      	orrs	r2, r1
 8000c7a:	615a      	str	r2, [r3, #20]
 8000c7c:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000c7e:	0022      	movs	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c80:	400b      	ands	r3, r1
 8000c82:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000c84:	211b      	movs	r1, #27
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c86:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000c88:	f001 fbc6 	bl	8002418 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000c8c:	2090      	movs	r0, #144	; 0x90
 8000c8e:	002a      	movs	r2, r5
 8000c90:	2104      	movs	r1, #4
 8000c92:	05c0      	lsls	r0, r0, #23
 8000c94:	f001 fbc0 	bl	8002418 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 8000c98:	0022      	movs	r2, r4
 8000c9a:	2109      	movs	r1, #9
 8000c9c:	487d      	ldr	r0, [pc, #500]	; (8000e94 <main+0x2ac>)
 8000c9e:	f001 fbbb 	bl	8002418 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ca2:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca4:	487b      	ldr	r0, [pc, #492]	; (8000e94 <main+0x2ac>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000ca6:	005b      	lsls	r3, r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ca8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8000caa:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cac:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cae:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cb0:	f001 fa94 	bl	80021dc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cb4:	4878      	ldr	r0, [pc, #480]	; (8000e98 <main+0x2b0>)
 8000cb6:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000cb8:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000cba:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000cbc:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000cbe:	f001 fa8d 	bl	80021dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000cc2:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc4:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8000cc6:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc8:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cca:	330a      	adds	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ccc:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8000cce:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cd2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd4:	f001 fa82 	bl	80021dc <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cd8:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000cda:	2318      	movs	r3, #24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cdc:	a905      	add	r1, sp, #20
 8000cde:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8000ce0:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce2:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ce4:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce6:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ce8:	f001 fa78 	bl	80021dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000cec:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cee:	4869      	ldr	r0, [pc, #420]	; (8000e94 <main+0x2ac>)
 8000cf0:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000cf2:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cf4:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf6:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf8:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfa:	f001 fa6f 	bl	80021dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000cfe:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d00:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d02:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d04:	a905      	add	r1, sp, #20
 8000d06:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000d08:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000d0a:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d0e:	f001 fa65 	bl	80021dc <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d12:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	a905      	add	r1, sp, #20
 8000d16:	485f      	ldr	r0, [pc, #380]	; (8000e94 <main+0x2ac>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8000d18:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d1a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d1c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d1e:	f001 fa5d 	bl	80021dc <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8000d22:	4f5e      	ldr	r7, [pc, #376]	; (8000e9c <main+0x2b4>)
 8000d24:	4b5e      	ldr	r3, [pc, #376]	; (8000ea0 <main+0x2b8>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d26:	0038      	movs	r0, r7
  hi2c1.Instance = I2C1;
 8000d28:	603b      	str	r3, [r7, #0]
  hi2c1.Init.Timing = 0x2000090E;
 8000d2a:	4b5e      	ldr	r3, [pc, #376]	; (8000ea4 <main+0x2bc>)
  hi2c1.Init.OwnAddress1 = 0;
 8000d2c:	60bc      	str	r4, [r7, #8]
  hi2c1.Init.Timing = 0x2000090E;
 8000d2e:	607b      	str	r3, [r7, #4]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d30:	60fd      	str	r5, [r7, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d32:	613c      	str	r4, [r7, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000d34:	617c      	str	r4, [r7, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d36:	61bc      	str	r4, [r7, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d38:	61fc      	str	r4, [r7, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d3a:	623c      	str	r4, [r7, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d3c:	f001 fb72 	bl	8002424 <HAL_I2C_Init>
 8000d40:	0001      	movs	r1, r0
 8000d42:	42a0      	cmp	r0, r4
 8000d44:	d001      	beq.n	8000d4a <main+0x162>
 8000d46:	b672      	cpsid	i
  while (1)
 8000d48:	e7fe      	b.n	8000d48 <main+0x160>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d4a:	0038      	movs	r0, r7
 8000d4c:	f001 fbc0 	bl	80024d0 <HAL_I2CEx_ConfigAnalogFilter>
 8000d50:	1e01      	subs	r1, r0, #0
 8000d52:	d001      	beq.n	8000d58 <main+0x170>
 8000d54:	b672      	cpsid	i
  while (1)
 8000d56:	e7fe      	b.n	8000d56 <main+0x16e>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d58:	0038      	movs	r0, r7
 8000d5a:	f001 fbdf 	bl	800251c <HAL_I2CEx_ConfigDigitalFilter>
 8000d5e:	1e07      	subs	r7, r0, #0
 8000d60:	d001      	beq.n	8000d66 <main+0x17e>
 8000d62:	b672      	cpsid	i
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <main+0x17c>
  MX_SPI1_Init();
 8000d66:	f7ff fca7 	bl	80006b8 <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 8000d6a:	f004 ffa1 	bl	8005cb0 <MX_USB_DEVICE_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 8000d6e:	220c      	movs	r2, #12
 8000d70:	0039      	movs	r1, r7
 8000d72:	a805      	add	r0, sp, #20
 8000d74:	f005 fa1b 	bl	80061ae <memset>
  hadc.Instance = ADC1;
 8000d78:	4c4b      	ldr	r4, [pc, #300]	; (8000ea8 <main+0x2c0>)
 8000d7a:	4b4c      	ldr	r3, [pc, #304]	; (8000eac <main+0x2c4>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d7c:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 8000d7e:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000d80:	2304      	movs	r3, #4
 8000d82:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d84:	23c2      	movs	r3, #194	; 0xc2
 8000d86:	33ff      	adds	r3, #255	; 0xff
 8000d88:	61e3      	str	r3, [r4, #28]
  hadc.Init.LowPowerAutoWait = DISABLE;
 8000d8a:	61a7      	str	r7, [r4, #24]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d8c:	1d63      	adds	r3, r4, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000d8e:	6067      	str	r7, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8000d90:	60a7      	str	r7, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000d92:	60e7      	str	r7, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8000d94:	6125      	str	r5, [r4, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000d96:	6227      	str	r7, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000d98:	77df      	strb	r7, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000d9a:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000d9c:	f000 ff70 	bl	8001c80 <HAL_ADC_Init>
 8000da0:	2800      	cmp	r0, #0
 8000da2:	d001      	beq.n	8000da8 <main+0x1c0>
 8000da4:	b672      	cpsid	i
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <main+0x1be>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 8000da8:	2310      	movs	r3, #16
 8000daa:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	015b      	lsls	r3, r3, #5
 8000db0:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000db2:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000db4:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000db6:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000db8:	a905      	add	r1, sp, #20
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000dba:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000dbc:	f001 f808 	bl	8001dd0 <HAL_ADC_ConfigChannel>
 8000dc0:	1e04      	subs	r4, r0, #0
 8000dc2:	d001      	beq.n	8000dc8 <main+0x1e0>
 8000dc4:	b672      	cpsid	i
  while (1)
 8000dc6:	e7fe      	b.n	8000dc6 <main+0x1de>
  Set_CS(0);
 8000dc8:	f7ff fcdc 	bl	8000784 <Set_CS>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 8000dcc:	002a      	movs	r2, r5
 8000dce:	2108      	movs	r1, #8
 8000dd0:	4830      	ldr	r0, [pc, #192]	; (8000e94 <main+0x2ac>)
 8000dd2:	f001 fb21 	bl	8002418 <HAL_GPIO_WritePin>
  SFT_I2C_Init(GPIOA,GPIO_PIN_1,GPIOA,GPIO_PIN_0,&si2c1,0);
 8000dd6:	2290      	movs	r2, #144	; 0x90
 8000dd8:	4f35      	ldr	r7, [pc, #212]	; (8000eb0 <main+0x2c8>)
 8000dda:	05d2      	lsls	r2, r2, #23
 8000ddc:	0010      	movs	r0, r2
 8000dde:	002b      	movs	r3, r5
 8000de0:	2102      	movs	r1, #2
 8000de2:	9401      	str	r4, [sp, #4]
 8000de4:	9700      	str	r7, [sp, #0]
 8000de6:	f7ff fb37 	bl	8000458 <SFT_I2C_Init>
  SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,SysCntrl.i2c_bt,2,1); // Clear outputs
 8000dea:	0038      	movs	r0, r7
 8000dec:	2302      	movs	r3, #2
 8000dee:	2140      	movs	r1, #64	; 0x40
 8000df0:	4a30      	ldr	r2, [pc, #192]	; (8000eb4 <main+0x2cc>)
 8000df2:	9500      	str	r5, [sp, #0]
 8000df4:	f7ff fc20 	bl	8000638 <SFT_I2C_Master_Transmit>
  SysCntrl.i2c_bt[0] = 0x3;
 8000df8:	2303      	movs	r3, #3
  SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,SysCntrl.i2c_bt,2,1); // All outputs
 8000dfa:	2140      	movs	r1, #64	; 0x40
 8000dfc:	4a2d      	ldr	r2, [pc, #180]	; (8000eb4 <main+0x2cc>)
 8000dfe:	0038      	movs	r0, r7
  SysCntrl.i2c_bt[0] = 0x3;
 8000e00:	70b3      	strb	r3, [r6, #2]
  SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,SysCntrl.i2c_bt,2,1); // All outputs
 8000e02:	3b01      	subs	r3, #1
 8000e04:	9500      	str	r5, [sp, #0]
 8000e06:	f7ff fc17 	bl	8000638 <SFT_I2C_Master_Transmit>
  SPI_Reset(0);
 8000e0a:	0020      	movs	r0, r4
  SysCntrl.i2c_bt[0] = 0x1;
 8000e0c:	70b5      	strb	r5, [r6, #2]
  SPI_Reset(0);
 8000e0e:	f000 f927 	bl	8001060 <SPI_Reset>
  SPI_Reset(1);
 8000e12:	0028      	movs	r0, r5
 8000e14:	f000 f924 	bl	8001060 <SPI_Reset>
  USB_EnableGlobalInt(&hUsbDeviceFS);
 8000e18:	4f27      	ldr	r7, [pc, #156]	; (8000eb8 <main+0x2d0>)
 8000e1a:	0038      	movs	r0, r7
 8000e1c:	f003 fc6e 	bl	80046fc <USB_EnableGlobalInt>
  DisableSPI();
 8000e20:	f7ff fc70 	bl	8000704 <DisableSPI>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_RESET);
 8000e24:	2090      	movs	r0, #144	; 0x90
 8000e26:	0022      	movs	r2, r4
 8000e28:	2104      	movs	r1, #4
				 switch(hUsbDeviceFS.dev_state){
 8000e2a:	24a7      	movs	r4, #167	; 0xa7
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_RESET);
 8000e2c:	05c0      	lsls	r0, r0, #23
 8000e2e:	f001 faf3 	bl	8002418 <HAL_GPIO_WritePin>
				 switch(hUsbDeviceFS.dev_state){
 8000e32:	00a4      	lsls	r4, r4, #2
	  if(SysCntrl.TimerTick) {
 8000e34:	4a21      	ldr	r2, [pc, #132]	; (8000ebc <main+0x2d4>)
	  asm("nop");
 8000e36:	46c0      	nop			; (mov r8, r8)
	  if(SysCntrl.TimerTick) {
 8000e38:	5cb1      	ldrb	r1, [r6, r2]
 8000e3a:	1c0b      	adds	r3, r1, #0
 8000e3c:	4229      	tst	r1, r5
 8000e3e:	d0fa      	beq.n	8000e36 <main+0x24e>
		  SysCntrl.TimerTick = 0;
 8000e40:	43ab      	bics	r3, r5
 8000e42:	54b3      	strb	r3, [r6, r2]
		  switch(SysCntrl.MS_counter % 10) {
 8000e44:	4b1e      	ldr	r3, [pc, #120]	; (8000ec0 <main+0x2d8>)
 8000e46:	210a      	movs	r1, #10
 8000e48:	5af0      	ldrh	r0, [r6, r3]
 8000e4a:	f7ff fa1d 	bl	8000288 <__aeabi_uidivmod>
 8000e4e:	b289      	uxth	r1, r1
 8000e50:	2901      	cmp	r1, #1
 8000e52:	d00c      	beq.n	8000e6e <main+0x286>
 8000e54:	2903      	cmp	r1, #3
 8000e56:	d00d      	beq.n	8000e74 <main+0x28c>
 8000e58:	2900      	cmp	r1, #0
 8000e5a:	d1eb      	bne.n	8000e34 <main+0x24c>
			 if(SysCntrl.power_stage == 51)
 8000e5c:	7833      	ldrb	r3, [r6, #0]
 8000e5e:	2b33      	cmp	r3, #51	; 0x33
 8000e60:	d1e8      	bne.n	8000e34 <main+0x24c>
				 switch(hUsbDeviceFS.dev_state){
 8000e62:	5d3b      	ldrb	r3, [r7, r4]
 8000e64:	2b03      	cmp	r3, #3
 8000e66:	d1e5      	bne.n	8000e34 <main+0x24c>
						 UART_Con_Mash();
 8000e68:	f7ff fda8 	bl	80009bc <UART_Con_Mash>
					break;
 8000e6c:	e7e2      	b.n	8000e34 <main+0x24c>
			  PowerSM();
 8000e6e:	f000 fcad 	bl	80017cc <PowerSM>
			  break;
 8000e72:	e7df      	b.n	8000e34 <main+0x24c>
			checkPowerLevels(0);
 8000e74:	2000      	movs	r0, #0
 8000e76:	f000 fb59 	bl	800152c <checkPowerLevels>
			  break;
 8000e7a:	e7db      	b.n	8000e34 <main+0x24c>
 8000e7c:	200004c0 	.word	0x200004c0
 8000e80:	000002da 	.word	0x000002da
 8000e84:	ffffd8fd 	.word	0xffffd8fd
 8000e88:	00002002 	.word	0x00002002
 8000e8c:	000002d9 	.word	0x000002d9
 8000e90:	40021000 	.word	0x40021000
 8000e94:	48000400 	.word	0x48000400
 8000e98:	48001400 	.word	0x48001400
 8000e9c:	200007b4 	.word	0x200007b4
 8000ea0:	40005400 	.word	0x40005400
 8000ea4:	2000090e 	.word	0x2000090e
 8000ea8:	20000864 	.word	0x20000864
 8000eac:	40012400 	.word	0x40012400
 8000eb0:	2000079c 	.word	0x2000079c
 8000eb4:	200004c2 	.word	0x200004c2
 8000eb8:	20000910 	.word	0x20000910
 8000ebc:	000002d5 	.word	0x000002d5
 8000ec0:	000002d6 	.word	0x000002d6

08000ec4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM17) {
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	; (8000ef8 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000ec6:	6802      	ldr	r2, [r0, #0]
{
 8000ec8:	b510      	push	{r4, lr}
  if (htim->Instance == TIM17) {
 8000eca:	429a      	cmp	r2, r3
 8000ecc:	d101      	bne.n	8000ed2 <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 8000ece:	f000 feb3 	bl	8001c38 <HAL_IncTick>
  SysCntrl.TimerTick = 1;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	4a09      	ldr	r2, [pc, #36]	; (8000efc <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000ed6:	490a      	ldr	r1, [pc, #40]	; (8000f00 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000ed8:	5c50      	ldrb	r0, [r2, r1]
 8000eda:	4303      	orrs	r3, r0
  if(++SysCntrl.MS_counter>999)SysCntrl.MS_counter = 0;
 8000edc:	20fa      	movs	r0, #250	; 0xfa
  SysCntrl.TimerTick = 1;
 8000ede:	5453      	strb	r3, [r2, r1]
  if(++SysCntrl.MS_counter>999)SysCntrl.MS_counter = 0;
 8000ee0:	4908      	ldr	r1, [pc, #32]	; (8000f04 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000ee2:	0080      	lsls	r0, r0, #2
 8000ee4:	5a53      	ldrh	r3, [r2, r1]
 8000ee6:	3301      	adds	r3, #1
 8000ee8:	b29b      	uxth	r3, r3
 8000eea:	4283      	cmp	r3, r0
 8000eec:	d201      	bcs.n	8000ef2 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8000eee:	5253      	strh	r3, [r2, r1]
}
 8000ef0:	bd10      	pop	{r4, pc}
  if(++SysCntrl.MS_counter>999)SysCntrl.MS_counter = 0;
 8000ef2:	2300      	movs	r3, #0
 8000ef4:	e7fb      	b.n	8000eee <HAL_TIM_PeriodElapsedCallback+0x2a>
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	40014800 	.word	0x40014800
 8000efc:	200004c0 	.word	0x200004c0
 8000f00:	000002d5 	.word	0x000002d5
 8000f04:	000002d6 	.word	0x000002d6

08000f08 <Error_Handler>:
 8000f08:	b672      	cpsid	i
  while (1)
 8000f0a:	e7fe      	b.n	8000f0a <Error_Handler+0x2>

08000f0c <SPI_ReadStatus>:


#define CORRECTOR 1

// Sector - 64
uint8_t SPI_ReadStatus() {
 8000f0c:	b570      	push	{r4, r5, r6, lr}
	Clr_CS(SysCntrl.active_cs);
 8000f0e:	4c0d      	ldr	r4, [pc, #52]	; (8000f44 <SPI_ReadStatus+0x38>)
	SysCntrl.spi_buf_tx[0] = 0x05;
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 1, HAL_MAX_DELAY);
 8000f10:	2601      	movs	r6, #1
	Clr_CS(SysCntrl.active_cs);
 8000f12:	7920      	ldrb	r0, [r4, #4]
 8000f14:	f7ff fc68 	bl	80007e8 <Clr_CS>
	SysCntrl.spi_buf_tx[0] = 0x05;
 8000f18:	2305      	movs	r3, #5
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 1, HAL_MAX_DELAY);
 8000f1a:	4d0b      	ldr	r5, [pc, #44]	; (8000f48 <SPI_ReadStatus+0x3c>)
 8000f1c:	4276      	negs	r6, r6
 8000f1e:	0028      	movs	r0, r5
	SysCntrl.spi_buf_tx[0] = 0x05;
 8000f20:	7163      	strb	r3, [r4, #5]
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 1, HAL_MAX_DELAY);
 8000f22:	2201      	movs	r2, #1
 8000f24:	0033      	movs	r3, r6
 8000f26:	4909      	ldr	r1, [pc, #36]	; (8000f4c <SPI_ReadStatus+0x40>)
 8000f28:	f002 ff85 	bl	8003e36 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,SysCntrl.spi_buf_rx, 1, HAL_MAX_DELAY);
 8000f2c:	0033      	movs	r3, r6
 8000f2e:	2201      	movs	r2, #1
 8000f30:	0028      	movs	r0, r5
 8000f32:	4907      	ldr	r1, [pc, #28]	; (8000f50 <SPI_ReadStatus+0x44>)
 8000f34:	f003 f942 	bl	80041bc <HAL_SPI_Receive>

	Set_CS(SysCntrl.active_cs);
 8000f38:	7920      	ldrb	r0, [r4, #4]
 8000f3a:	f7ff fc23 	bl	8000784 <Set_CS>

	return SysCntrl.spi_buf_rx[0];
 8000f3e:	7d60      	ldrb	r0, [r4, #21]
}
 8000f40:	bd70      	pop	{r4, r5, r6, pc}
 8000f42:	46c0      	nop			; (mov r8, r8)
 8000f44:	200004c0 	.word	0x200004c0
 8000f48:	20000800 	.word	0x20000800
 8000f4c:	200004c5 	.word	0x200004c5
 8000f50:	200004d5 	.word	0x200004d5

08000f54 <Flash_WriteEnable>:

void Flash_WriteEnable() {
 8000f54:	b510      	push	{r4, lr}

	Clr_CS(SysCntrl.active_cs);
 8000f56:	4c08      	ldr	r4, [pc, #32]	; (8000f78 <Flash_WriteEnable+0x24>)
 8000f58:	7920      	ldrb	r0, [r4, #4]
 8000f5a:	f7ff fc45 	bl	80007e8 <Clr_CS>
	SysCntrl.spi_buf_tx[0] = 0x06;
 8000f5e:	2306      	movs	r3, #6
 8000f60:	7163      	strb	r3, [r4, #5]
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 1, HAL_MAX_DELAY);
 8000f62:	3b05      	subs	r3, #5
 8000f64:	2201      	movs	r2, #1
 8000f66:	4905      	ldr	r1, [pc, #20]	; (8000f7c <Flash_WriteEnable+0x28>)
 8000f68:	425b      	negs	r3, r3
 8000f6a:	4805      	ldr	r0, [pc, #20]	; (8000f80 <Flash_WriteEnable+0x2c>)
 8000f6c:	f002 ff63 	bl	8003e36 <HAL_SPI_Transmit>
	Set_CS(SysCntrl.active_cs);
 8000f70:	7920      	ldrb	r0, [r4, #4]
 8000f72:	f7ff fc07 	bl	8000784 <Set_CS>
}
 8000f76:	bd10      	pop	{r4, pc}
 8000f78:	200004c0 	.word	0x200004c0
 8000f7c:	200004c5 	.word	0x200004c5
 8000f80:	20000800 	.word	0x20000800

08000f84 <SPI_EraseAddr>:
		SysCntrl.SPI_page_idx = 0;

}


void SPI_EraseAddr(uint32_t addr) {
 8000f84:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;

	Clr_CS(SysCntrl.active_cs);
 8000f86:	4c11      	ldr	r4, [pc, #68]	; (8000fcc <SPI_EraseAddr+0x48>)
void SPI_EraseAddr(uint32_t addr) {
 8000f88:	0005      	movs	r5, r0
	Clr_CS(SysCntrl.active_cs);
 8000f8a:	7920      	ldrb	r0, [r4, #4]
 8000f8c:	f7ff fc2c 	bl	80007e8 <Clr_CS>
	SysCntrl.spi_buf_tx[0] = 0xD8;
 8000f90:	23d8      	movs	r3, #216	; 0xd8
 8000f92:	7163      	strb	r3, [r4, #5]
	SysCntrl.spi_buf_tx[1] = (addr>>16) & 0xff;
 8000f94:	0c2b      	lsrs	r3, r5, #16
 8000f96:	71a3      	strb	r3, [r4, #6]
	SysCntrl.spi_buf_tx[2] = (addr>>8)  & 0xff;
 8000f98:	0a2b      	lsrs	r3, r5, #8
 8000f9a:	71e3      	strb	r3, [r4, #7]
	SysCntrl.spi_buf_tx[3] = (addr>>0)  & 0xff;

	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 4, HAL_MAX_DELAY);
 8000f9c:	2301      	movs	r3, #1
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	490b      	ldr	r1, [pc, #44]	; (8000fd0 <SPI_EraseAddr+0x4c>)
 8000fa2:	425b      	negs	r3, r3
 8000fa4:	480b      	ldr	r0, [pc, #44]	; (8000fd4 <SPI_EraseAddr+0x50>)
	SysCntrl.spi_buf_tx[3] = (addr>>0)  & 0xff;
 8000fa6:	7225      	strb	r5, [r4, #8]
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 4, HAL_MAX_DELAY);
 8000fa8:	f002 ff45 	bl	8003e36 <HAL_SPI_Transmit>
	Set_CS(SysCntrl.active_cs);
 8000fac:	7920      	ldrb	r0, [r4, #4]
 8000fae:	f7ff fbe9 	bl	8000784 <Set_CS>
void SPI_EraseAddr(uint32_t addr) {
 8000fb2:	2564      	movs	r5, #100	; 0x64


	do{
		for(i=0;i<100;i++)asm("nop");
	}while(SPI_ReadStatus()&1);
 8000fb4:	2401      	movs	r4, #1
void SPI_EraseAddr(uint32_t addr) {
 8000fb6:	002b      	movs	r3, r5
		for(i=0;i<100;i++)asm("nop");
 8000fb8:	46c0      	nop			; (mov r8, r8)
 8000fba:	3b01      	subs	r3, #1
 8000fbc:	b2db      	uxtb	r3, r3
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d1fa      	bne.n	8000fb8 <SPI_EraseAddr+0x34>
	}while(SPI_ReadStatus()&1);
 8000fc2:	f7ff ffa3 	bl	8000f0c <SPI_ReadStatus>
 8000fc6:	4220      	tst	r0, r4
 8000fc8:	d1f5      	bne.n	8000fb6 <SPI_EraseAddr+0x32>
}
 8000fca:	bd70      	pop	{r4, r5, r6, pc}
 8000fcc:	200004c0 	.word	0x200004c0
 8000fd0:	200004c5 	.word	0x200004c5
 8000fd4:	20000800 	.word	0x20000800

08000fd8 <Flash_PageWrite>:
void Flash_PageWrite() {
 8000fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}while(SPI_ReadStatus()&1);
 8000fda:	2401      	movs	r4, #1
 8000fdc:	f7ff ff96 	bl	8000f0c <SPI_ReadStatus>
 8000fe0:	4220      	tst	r0, r4
 8000fe2:	d1fb      	bne.n	8000fdc <Flash_PageWrite+0x4>
		Flash_WriteEnable();
 8000fe4:	f7ff ffb6 	bl	8000f54 <Flash_WriteEnable>
	if((SysCntrl.SPI_address & 0xffff) == 0)
 8000fe8:	23af      	movs	r3, #175	; 0xaf
 8000fea:	4c19      	ldr	r4, [pc, #100]	; (8001050 <Flash_PageWrite+0x78>)
 8000fec:	009b      	lsls	r3, r3, #2
 8000fee:	58e0      	ldr	r0, [r4, r3]
 8000ff0:	b283      	uxth	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d101      	bne.n	8000ffa <Flash_PageWrite+0x22>
		SPI_EraseAddr(SysCntrl.SPI_address);
 8000ff6:	f7ff ffc5 	bl	8000f84 <SPI_EraseAddr>
		Flash_WriteEnable();
 8000ffa:	f7ff ffab 	bl	8000f54 <Flash_WriteEnable>
		SysCntrl.spi_buf_tx[1] = (SysCntrl.SPI_address>>16) & 0xff;
 8000ffe:	26af      	movs	r6, #175	; 0xaf
		Clr_CS(SysCntrl.active_cs);
 8001000:	7920      	ldrb	r0, [r4, #4]
 8001002:	f7ff fbf1 	bl	80007e8 <Clr_CS>
		SysCntrl.spi_buf_tx[0] = 0x02;
 8001006:	2302      	movs	r3, #2
		SysCntrl.spi_buf_tx[1] = (SysCntrl.SPI_address>>16) & 0xff;
 8001008:	00b6      	lsls	r6, r6, #2
		SysCntrl.spi_buf_tx[0] = 0x02;
 800100a:	7163      	strb	r3, [r4, #5]
		SysCntrl.spi_buf_tx[1] = (SysCntrl.SPI_address>>16) & 0xff;
 800100c:	59a3      	ldr	r3, [r4, r6]
		HAL_SPI_Transmit(&hspi1, SysCntrl.SPI_page, SysCntrl.SPI_page_idx, HAL_MAX_DELAY);
 800100e:	25ae      	movs	r5, #174	; 0xae
		SysCntrl.spi_buf_tx[1] = (SysCntrl.SPI_address>>16) & 0xff;
 8001010:	0c1a      	lsrs	r2, r3, #16
 8001012:	71a2      	strb	r2, [r4, #6]
		SysCntrl.spi_buf_tx[3] = (SysCntrl.SPI_address>>0)  & 0xff;
 8001014:	7223      	strb	r3, [r4, #8]
		SysCntrl.spi_buf_tx[2] = (SysCntrl.SPI_address>>8)  & 0xff;
 8001016:	0a1a      	lsrs	r2, r3, #8
		HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 4, HAL_MAX_DELAY);
 8001018:	2301      	movs	r3, #1
 800101a:	4f0e      	ldr	r7, [pc, #56]	; (8001054 <Flash_PageWrite+0x7c>)
		HAL_SPI_Transmit(&hspi1, SysCntrl.SPI_page, SysCntrl.SPI_page_idx, HAL_MAX_DELAY);
 800101c:	00ad      	lsls	r5, r5, #2
		HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 4, HAL_MAX_DELAY);
 800101e:	0038      	movs	r0, r7
		SysCntrl.spi_buf_tx[2] = (SysCntrl.SPI_address>>8)  & 0xff;
 8001020:	71e2      	strb	r2, [r4, #7]
		HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 4, HAL_MAX_DELAY);
 8001022:	490d      	ldr	r1, [pc, #52]	; (8001058 <Flash_PageWrite+0x80>)
 8001024:	2204      	movs	r2, #4
 8001026:	425b      	negs	r3, r3
 8001028:	f002 ff05 	bl	8003e36 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, SysCntrl.SPI_page, SysCntrl.SPI_page_idx, HAL_MAX_DELAY);
 800102c:	5963      	ldr	r3, [r4, r5]
 800102e:	0038      	movs	r0, r7
 8001030:	b29a      	uxth	r2, r3
 8001032:	2301      	movs	r3, #1
 8001034:	4909      	ldr	r1, [pc, #36]	; (800105c <Flash_PageWrite+0x84>)
 8001036:	425b      	negs	r3, r3
 8001038:	f002 fefd 	bl	8003e36 <HAL_SPI_Transmit>
		Set_CS(SysCntrl.active_cs);
 800103c:	7920      	ldrb	r0, [r4, #4]
 800103e:	f7ff fba1 	bl	8000784 <Set_CS>
		SysCntrl.SPI_address += SysCntrl.SPI_page_idx;
 8001042:	59a3      	ldr	r3, [r4, r6]
 8001044:	5962      	ldr	r2, [r4, r5]
 8001046:	189b      	adds	r3, r3, r2
 8001048:	51a3      	str	r3, [r4, r6]
		SysCntrl.SPI_page_idx = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	5163      	str	r3, [r4, r5]
}
 800104e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001050:	200004c0 	.word	0x200004c0
 8001054:	20000800 	.word	0x20000800
 8001058:	200004c5 	.word	0x200004c5
 800105c:	200005ea 	.word	0x200005ea

08001060 <SPI_Reset>:

void SPI_Reset(uint8_t cs) {
 8001060:	b510      	push	{r4, lr}
 8001062:	0004      	movs	r4, r0
	Clr_CS(cs);
 8001064:	f7ff fbc0 	bl	80007e8 <Clr_CS>
	SysCntrl.spi_buf_tx[0] = 0x66;
 8001068:	2266      	movs	r2, #102	; 0x66
 800106a:	4b07      	ldr	r3, [pc, #28]	; (8001088 <SPI_Reset+0x28>)
	SysCntrl.spi_buf_tx[1] = 0x99;
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 2, HAL_MAX_DELAY);
 800106c:	4907      	ldr	r1, [pc, #28]	; (800108c <SPI_Reset+0x2c>)
	SysCntrl.spi_buf_tx[0] = 0x66;
 800106e:	715a      	strb	r2, [r3, #5]
	SysCntrl.spi_buf_tx[1] = 0x99;
 8001070:	3233      	adds	r2, #51	; 0x33
 8001072:	719a      	strb	r2, [r3, #6]
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 2, HAL_MAX_DELAY);
 8001074:	2301      	movs	r3, #1
 8001076:	3a97      	subs	r2, #151	; 0x97
 8001078:	425b      	negs	r3, r3
 800107a:	4805      	ldr	r0, [pc, #20]	; (8001090 <SPI_Reset+0x30>)
 800107c:	f002 fedb 	bl	8003e36 <HAL_SPI_Transmit>
	Set_CS(cs);
 8001080:	0020      	movs	r0, r4
 8001082:	f7ff fb7f 	bl	8000784 <Set_CS>
}
 8001086:	bd10      	pop	{r4, pc}
 8001088:	200004c0 	.word	0x200004c0
 800108c:	200004c5 	.word	0x200004c5
 8001090:	20000800 	.word	0x20000800

08001094 <SPI_ReadID>:

uint8_t SPI_ReadID(uint8_t cs,struct memoryReport *data) {
 8001094:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8001096:	000c      	movs	r4, r1
 8001098:	0007      	movs	r7, r0
	Clr_CS(cs);
 800109a:	f7ff fba5 	bl	80007e8 <Clr_CS>
	SysCntrl.spi_buf_tx[0] = 0x9f;
 800109e:	239f      	movs	r3, #159	; 0x9f
 80010a0:	4d0f      	ldr	r5, [pc, #60]	; (80010e0 <SPI_ReadID+0x4c>)
	SysCntrl.spi_buf_tx[1] = 0x0;
	SysCntrl.spi_buf_tx[2] = 0x0;
	SysCntrl.spi_buf_tx[3] = 0x0;
	SysCntrl.spi_buf_tx[4] = 0x0;
	uint8_t result = HAL_SPI_TransmitReceive(&hspi1, SysCntrl.spi_buf_tx, SysCntrl.spi_buf_rx, 5,HAL_MAX_DELAY);
 80010a2:	4a10      	ldr	r2, [pc, #64]	; (80010e4 <SPI_ReadID+0x50>)
	SysCntrl.spi_buf_tx[0] = 0x9f;
 80010a4:	716b      	strb	r3, [r5, #5]
	SysCntrl.spi_buf_tx[1] = 0x0;
 80010a6:	2300      	movs	r3, #0
 80010a8:	80eb      	strh	r3, [r5, #6]
	SysCntrl.spi_buf_tx[3] = 0x0;
 80010aa:	812b      	strh	r3, [r5, #8]
	uint8_t result = HAL_SPI_TransmitReceive(&hspi1, SysCntrl.spi_buf_tx, SysCntrl.spi_buf_rx, 5,HAL_MAX_DELAY);
 80010ac:	3b01      	subs	r3, #1
 80010ae:	9300      	str	r3, [sp, #0]
 80010b0:	490d      	ldr	r1, [pc, #52]	; (80010e8 <SPI_ReadID+0x54>)
 80010b2:	480e      	ldr	r0, [pc, #56]	; (80010ec <SPI_ReadID+0x58>)
 80010b4:	3306      	adds	r3, #6
 80010b6:	f002 ff7b 	bl	8003fb0 <HAL_SPI_TransmitReceive>
 80010ba:	1e06      	subs	r6, r0, #0
//	char buf[30];
//	for(i = 0; i < 5; i++){
//		sprintf(buf, "spi_buf_rx(%d): %x", i, SysCntrl.spi_buf_rx[i]);
//		UART_putstrln(buf);
//	}
	if(result == HAL_OK && data!=NULL){
 80010bc:	d10b      	bne.n	80010d6 <SPI_ReadID+0x42>
 80010be:	2c00      	cmp	r4, #0
 80010c0:	d009      	beq.n	80010d6 <SPI_ReadID+0x42>
			data->ManufacturerID = SysCntrl.spi_buf_rx[1];
 80010c2:	7dab      	ldrb	r3, [r5, #22]
 80010c4:	7023      	strb	r3, [r4, #0]
			data->MemoryType = SysCntrl.spi_buf_rx[2];
 80010c6:	7deb      	ldrb	r3, [r5, #23]
 80010c8:	7063      	strb	r3, [r4, #1]
			data->MemoryCapacity = SysCntrl.spi_buf_rx[3];
 80010ca:	7e2b      	ldrb	r3, [r5, #24]
 80010cc:	70a3      	strb	r3, [r4, #2]
			data->UniqID[0] = SysCntrl.spi_buf_rx[4];
 80010ce:	7e6b      	ldrb	r3, [r5, #25]
 80010d0:	70e3      	strb	r3, [r4, #3]
			data->UniqID[1] = SysCntrl.spi_buf_rx[5];
 80010d2:	7eab      	ldrb	r3, [r5, #26]
 80010d4:	7123      	strb	r3, [r4, #4]
	}
	Set_CS(cs);
 80010d6:	0038      	movs	r0, r7
 80010d8:	f7ff fb54 	bl	8000784 <Set_CS>
	return result;
}
 80010dc:	0030      	movs	r0, r6
 80010de:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80010e0:	200004c0 	.word	0x200004c0
 80010e4:	200004d5 	.word	0x200004d5
 80010e8:	200004c5 	.word	0x200004c5
 80010ec:	20000800 	.word	0x20000800

080010f0 <Xmodem_SPI>:

extern struct SConsole console;
void Xmodem_SPI(){
 80010f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t bt;
	int result,i;

	if(SysCntrl.TimerCnt)SysCntrl.TimerCnt--;
 80010f2:	22b4      	movs	r2, #180	; 0xb4
 80010f4:	4c61      	ldr	r4, [pc, #388]	; (800127c <Xmodem_SPI+0x18c>)
 80010f6:	0092      	lsls	r2, r2, #2
 80010f8:	58a3      	ldr	r3, [r4, r2]
 80010fa:	2b00      	cmp	r3, #0
 80010fc:	d001      	beq.n	8001102 <Xmodem_SPI+0x12>
 80010fe:	3b01      	subs	r3, #1
 8001100:	50a3      	str	r3, [r4, r2]

	switch(SysCntrl.XmodemState) {
 8001102:	25b3      	movs	r5, #179	; 0xb3
 8001104:	00ad      	lsls	r5, r5, #2
 8001106:	5d66      	ldrb	r6, [r4, r5]
 8001108:	2e01      	cmp	r6, #1
 800110a:	d041      	beq.n	8001190 <Xmodem_SPI+0xa0>
 800110c:	2e02      	cmp	r6, #2
 800110e:	d100      	bne.n	8001112 <Xmodem_SPI+0x22>
 8001110:	e06e      	b.n	80011f0 <Xmodem_SPI+0x100>
 8001112:	2e00      	cmp	r6, #0
 8001114:	d10c      	bne.n	8001130 <Xmodem_SPI+0x40>
	case XMODEM_STATE_INIT:
		result = ReadUartNonBlock(&bt,1);
 8001116:	466b      	mov	r3, sp
 8001118:	1ddf      	adds	r7, r3, #7
 800111a:	2101      	movs	r1, #1
 800111c:	0038      	movs	r0, r7
 800111e:	f7ff fbbf 	bl	80008a0 <ReadUartNonBlock>
		if((result>0)) {
 8001122:	2800      	cmp	r0, #0
 8001124:	dd15      	ble.n	8001152 <Xmodem_SPI+0x62>
			switch(bt){
 8001126:	783b      	ldrb	r3, [r7, #0]
 8001128:	2b01      	cmp	r3, #1
 800112a:	d002      	beq.n	8001132 <Xmodem_SPI+0x42>
 800112c:	2b03      	cmp	r3, #3
 800112e:	d00a      	beq.n	8001146 <Xmodem_SPI+0x56>
	case XMODEM_STATE_S2:
		break;
	case XMODEM_STATE_S3:
		break;
	}
}
 8001130:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
				SysCntrl.XmodemState = XMODEM_STATE_S0;
 8001132:	5563      	strb	r3, [r4, r5]
				SysCntrl.X_idx = 0;
 8001134:	23b1      	movs	r3, #177	; 0xb1
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	50e6      	str	r6, [r4, r3]
				SysCntrl.SPI_page_idx = 0;
 800113a:	3b0c      	subs	r3, #12
 800113c:	50e6      	str	r6, [r4, r3]
				SysCntrl.bt_count = 128+4;
 800113e:	3310      	adds	r3, #16
 8001140:	2284      	movs	r2, #132	; 0x84
 8001142:	50e2      	str	r2, [r4, r3]
			break;
 8001144:	e7f4      	b.n	8001130 <Xmodem_SPI+0x40>
				SysCntrl.XmodemMode = 0;
 8001146:	2101      	movs	r1, #1
 8001148:	4a4d      	ldr	r2, [pc, #308]	; (8001280 <Xmodem_SPI+0x190>)
 800114a:	5ca3      	ldrb	r3, [r4, r2]
 800114c:	438b      	bics	r3, r1
 800114e:	54a3      	strb	r3, [r4, r2]
				break;
 8001150:	e7ee      	b.n	8001130 <Xmodem_SPI+0x40>
			if(!result && !SysCntrl.TimerCnt) {
 8001152:	23b4      	movs	r3, #180	; 0xb4
 8001154:	009b      	lsls	r3, r3, #2
 8001156:	58e2      	ldr	r2, [r4, r3]
 8001158:	4310      	orrs	r0, r2
 800115a:	d1e9      	bne.n	8001130 <Xmodem_SPI+0x40>
				SysCntrl.TryCounter--;
 800115c:	22b5      	movs	r2, #181	; 0xb5
 800115e:	0092      	lsls	r2, r2, #2
 8001160:	5ca5      	ldrb	r5, [r4, r2]
 8001162:	3d01      	subs	r5, #1
 8001164:	b2ed      	uxtb	r5, r5
 8001166:	54a5      	strb	r5, [r4, r2]
				if(!SysCntrl.TryCounter) {
 8001168:	2d00      	cmp	r5, #0
 800116a:	d10b      	bne.n	8001184 <Xmodem_SPI+0x94>
					SysCntrl.XmodemMode = 0;
 800116c:	2101      	movs	r1, #1
 800116e:	4a44      	ldr	r2, [pc, #272]	; (8001280 <Xmodem_SPI+0x190>)
					UART_putstrln("Timeout...");
 8001170:	4844      	ldr	r0, [pc, #272]	; (8001284 <Xmodem_SPI+0x194>)
					SysCntrl.XmodemMode = 0;
 8001172:	5ca3      	ldrb	r3, [r4, r2]
 8001174:	438b      	bics	r3, r1
 8001176:	54a3      	strb	r3, [r4, r2]
					UART_putstrln("Timeout...");
 8001178:	f7ff fb6a 	bl	8000850 <UART_putstrln>
					console.cmdStage = 0;
 800117c:	4b42      	ldr	r3, [pc, #264]	; (8001288 <Xmodem_SPI+0x198>)
 800117e:	3304      	adds	r3, #4
 8001180:	87dd      	strh	r5, [r3, #62]	; 0x3e
 8001182:	e7d5      	b.n	8001130 <Xmodem_SPI+0x40>
					SysCntrl.TimerCnt = XMODEM_TIME_1SEC;
 8001184:	2264      	movs	r2, #100	; 0x64
					UART_putstr("C");
 8001186:	4841      	ldr	r0, [pc, #260]	; (800128c <Xmodem_SPI+0x19c>)
					SysCntrl.TimerCnt = XMODEM_TIME_1SEC;
 8001188:	50e2      	str	r2, [r4, r3]
						UART_putstr("Canceled\n\r");
 800118a:	f7ff fb55 	bl	8000838 <UART_putstr>
}
 800118e:	e7cf      	b.n	8001130 <Xmodem_SPI+0x40>
		result = ReadUartNonBlock(&SysCntrl.SPI_rxbuf[SysCntrl.X_idx],SysCntrl.bt_count);
 8001190:	27b1      	movs	r7, #177	; 0xb1
 8001192:	26b2      	movs	r6, #178	; 0xb2
 8001194:	00bf      	lsls	r7, r7, #2
 8001196:	59e3      	ldr	r3, [r4, r7]
 8001198:	4a3d      	ldr	r2, [pc, #244]	; (8001290 <Xmodem_SPI+0x1a0>)
 800119a:	00b6      	lsls	r6, r6, #2
 800119c:	1898      	adds	r0, r3, r2
 800119e:	59a1      	ldr	r1, [r4, r6]
 80011a0:	1820      	adds	r0, r4, r0
 80011a2:	f7ff fb7d 	bl	80008a0 <ReadUartNonBlock>
		if(result>0) {
 80011a6:	2800      	cmp	r0, #0
 80011a8:	ddc2      	ble.n	8001130 <Xmodem_SPI+0x40>
			SysCntrl.X_idx += result;
 80011aa:	59e3      	ldr	r3, [r4, r7]
 80011ac:	181b      	adds	r3, r3, r0
 80011ae:	51e3      	str	r3, [r4, r7]
			SysCntrl.bt_count -= result;
 80011b0:	59a3      	ldr	r3, [r4, r6]
 80011b2:	1a1d      	subs	r5, r3, r0
 80011b4:	51a5      	str	r5, [r4, r6]
			if(!SysCntrl.bt_count) {
 80011b6:	d1bb      	bne.n	8001130 <Xmodem_SPI+0x40>
				UART_SendByte(0x06); // ACK
 80011b8:	2006      	movs	r0, #6
 80011ba:	f7ff fb65 	bl	8000888 <UART_SendByte>
				for(i=0;i<128;i++) {
 80011be:	23ae      	movs	r3, #174	; 0xae
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	58e3      	ldr	r3, [r4, r3]
 80011c4:	4a33      	ldr	r2, [pc, #204]	; (8001294 <Xmodem_SPI+0x1a4>)
					SysCntrl.SPI_page[SysCntrl.SPI_page_idx++] = SysCntrl.SPI_rxbuf[i+2];
 80011c6:	1ed9      	subs	r1, r3, #3
 80011c8:	39ff      	subs	r1, #255	; 0xff
 80011ca:	7810      	ldrb	r0, [r2, #0]
				for(i=0;i<128;i++) {
 80011cc:	3501      	adds	r5, #1
					SysCntrl.SPI_page[SysCntrl.SPI_page_idx++] = SysCntrl.SPI_rxbuf[i+2];
 80011ce:	5450      	strb	r0, [r2, r1]
				for(i=0;i<128;i++) {
 80011d0:	3201      	adds	r2, #1
 80011d2:	2d80      	cmp	r5, #128	; 0x80
 80011d4:	d1f9      	bne.n	80011ca <Xmodem_SPI+0xda>
 80011d6:	22ae      	movs	r2, #174	; 0xae
 80011d8:	3380      	adds	r3, #128	; 0x80
 80011da:	0092      	lsls	r2, r2, #2
 80011dc:	50a3      	str	r3, [r4, r2]
				if(SysCntrl.SPI_page_idx >= 255)
 80011de:	2bfe      	cmp	r3, #254	; 0xfe
 80011e0:	d901      	bls.n	80011e6 <Xmodem_SPI+0xf6>
					Flash_PageWrite();
 80011e2:	f7ff fef9 	bl	8000fd8 <Flash_PageWrite>
				SysCntrl.XmodemState = XMODEM_STATE_S1;
 80011e6:	23b3      	movs	r3, #179	; 0xb3
 80011e8:	2202      	movs	r2, #2
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	54e2      	strb	r2, [r4, r3]
 80011ee:	e79f      	b.n	8001130 <Xmodem_SPI+0x40>
		result = ReadUartNonBlock(&bt,1);
 80011f0:	466b      	mov	r3, sp
 80011f2:	1dde      	adds	r6, r3, #7
 80011f4:	2101      	movs	r1, #1
 80011f6:	0030      	movs	r0, r6
 80011f8:	f7ff fb52 	bl	80008a0 <ReadUartNonBlock>
		if(result>0){
 80011fc:	2800      	cmp	r0, #0
 80011fe:	dd97      	ble.n	8001130 <Xmodem_SPI+0x40>
			if((bt == 0x01)) {
 8001200:	7833      	ldrb	r3, [r6, #0]
 8001202:	2b01      	cmp	r3, #1
 8001204:	d106      	bne.n	8001214 <Xmodem_SPI+0x124>
					SysCntrl.XmodemState = XMODEM_STATE_S0;
 8001206:	5563      	strb	r3, [r4, r5]
					SysCntrl.X_idx = 0;
 8001208:	23b1      	movs	r3, #177	; 0xb1
 800120a:	2200      	movs	r2, #0
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	50e2      	str	r2, [r4, r3]
					SysCntrl.bt_count = 128+4;
 8001210:	3304      	adds	r3, #4
 8001212:	e795      	b.n	8001140 <Xmodem_SPI+0x50>
					} else if(bt == 0x04) {
 8001214:	2b04      	cmp	r3, #4
 8001216:	d111      	bne.n	800123c <Xmodem_SPI+0x14c>
						UART_SendByte(0x06); // ACK
 8001218:	2006      	movs	r0, #6
 800121a:	f7ff fb35 	bl	8000888 <UART_SendByte>
						if(SysCntrl.SPI_page_idx == 128) {
 800121e:	23ae      	movs	r3, #174	; 0xae
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	58e3      	ldr	r3, [r4, r3]
 8001224:	2b80      	cmp	r3, #128	; 0x80
 8001226:	d000      	beq.n	800122a <Xmodem_SPI+0x13a>
 8001228:	e782      	b.n	8001130 <Xmodem_SPI+0x40>
							Flash_PageWrite();
 800122a:	f7ff fed5 	bl	8000fd8 <Flash_PageWrite>
							SysCntrl.XmodemState = XMODEM_STATE_INIT;
 800122e:	5b63      	ldrh	r3, [r4, r5]
 8001230:	0a5b      	lsrs	r3, r3, #9
 8001232:	025b      	lsls	r3, r3, #9
 8001234:	5363      	strh	r3, [r4, r5]
						DisableSPI();
 8001236:	f7ff fa65 	bl	8000704 <DisableSPI>
 800123a:	e779      	b.n	8001130 <Xmodem_SPI+0x40>
					} else if(bt == 0x17) {
 800123c:	2b17      	cmp	r3, #23
 800123e:	d10b      	bne.n	8001258 <Xmodem_SPI+0x168>
						UART_SendByte(0x06); // ACK
 8001240:	2006      	movs	r0, #6
 8001242:	f7ff fb21 	bl	8000888 <UART_SendByte>
						console.cmdStage = 0;
 8001246:	2200      	movs	r2, #0
						SysCntrl.XmodemState = XMODEM_STATE_INIT;
 8001248:	5b63      	ldrh	r3, [r4, r5]
 800124a:	0a5b      	lsrs	r3, r3, #9
 800124c:	025b      	lsls	r3, r3, #9
 800124e:	5363      	strh	r3, [r4, r5]
						console.cmdStage = 0;
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <Xmodem_SPI+0x198>)
 8001252:	3304      	adds	r3, #4
 8001254:	87da      	strh	r2, [r3, #62]	; 0x3e
 8001256:	e7ee      	b.n	8001236 <Xmodem_SPI+0x146>
					}  else if(bt == 0x18) {
 8001258:	2b18      	cmp	r3, #24
 800125a:	d000      	beq.n	800125e <Xmodem_SPI+0x16e>
 800125c:	e768      	b.n	8001130 <Xmodem_SPI+0x40>
						UART_SendByte(0x06); // ACK
 800125e:	2006      	movs	r0, #6
 8001260:	f7ff fb12 	bl	8000888 <UART_SendByte>
						UART_SendByte(0x06); // ACK
 8001264:	2006      	movs	r0, #6
 8001266:	f7ff fb0f 	bl	8000888 <UART_SendByte>
						SysCntrl.XmodemState = XMODEM_STATE_INIT;
 800126a:	5b63      	ldrh	r3, [r4, r5]
 800126c:	0a5b      	lsrs	r3, r3, #9
 800126e:	025b      	lsls	r3, r3, #9
 8001270:	5363      	strh	r3, [r4, r5]
						DisableSPI();
 8001272:	f7ff fa47 	bl	8000704 <DisableSPI>
						UART_putstr("Canceled\n\r");
 8001276:	4808      	ldr	r0, [pc, #32]	; (8001298 <Xmodem_SPI+0x1a8>)
 8001278:	e787      	b.n	800118a <Xmodem_SPI+0x9a>
 800127a:	46c0      	nop			; (mov r8, r8)
 800127c:	200004c0 	.word	0x200004c0
 8001280:	000002cd 	.word	0x000002cd
 8001284:	08006c4d 	.word	0x08006c4d
 8001288:	20000474 	.word	0x20000474
 800128c:	08006c58 	.word	0x08006c58
 8001290:	0000022a 	.word	0x0000022a
 8001294:	200006ec 	.word	0x200006ec
 8001298:	08006c5a 	.word	0x08006c5a

0800129c <Xmodem_Init>:

void Xmodem_Init(){
 800129c:	b510      	push	{r4, lr}
	EnableSPI();
 800129e:	f7ff fa81 	bl	80007a4 <EnableSPI>
	SysCntrl.XmodemMode = 1;
	SysCntrl.XmodemState = XMODEM_STATE_INIT;
 80012a2:	20b3      	movs	r0, #179	; 0xb3
 80012a4:	2180      	movs	r1, #128	; 0x80
 80012a6:	4a09      	ldr	r2, [pc, #36]	; (80012cc <Xmodem_Init+0x30>)
 80012a8:	0080      	lsls	r0, r0, #2
 80012aa:	5a13      	ldrh	r3, [r2, r0]
 80012ac:	0049      	lsls	r1, r1, #1
 80012ae:	0a5b      	lsrs	r3, r3, #9
 80012b0:	025b      	lsls	r3, r3, #9
 80012b2:	430b      	orrs	r3, r1
 80012b4:	5213      	strh	r3, [r2, r0]
	SysCntrl.TryCounter = 100;
 80012b6:	2364      	movs	r3, #100	; 0x64
 80012b8:	31d5      	adds	r1, #213	; 0xd5
 80012ba:	31ff      	adds	r1, #255	; 0xff
 80012bc:	5453      	strb	r3, [r2, r1]
	SysCntrl.TimerCnt = XMODEM_TIME_1SEC;
	UART_putstr("C");
 80012be:	4804      	ldr	r0, [pc, #16]	; (80012d0 <Xmodem_Init+0x34>)
	SysCntrl.TimerCnt = XMODEM_TIME_1SEC;
 80012c0:	3904      	subs	r1, #4
 80012c2:	5053      	str	r3, [r2, r1]
	UART_putstr("C");
 80012c4:	f7ff fab8 	bl	8000838 <UART_putstr>
}
 80012c8:	bd10      	pop	{r4, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	200004c0 	.word	0x200004c0
 80012d0:	08006c58 	.word	0x08006c58

080012d4 <FlashDump>:





void FlashDump(uint8_t cs){
 80012d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80012d6:	0006      	movs	r6, r0
	int i;
	EnableSPI();
 80012d8:	f7ff fa64 	bl	80007a4 <EnableSPI>
	//Switch_BootSpi2BMC();
	Clr_CS(cs);
 80012dc:	0030      	movs	r0, r6
 80012de:	f7ff fa83 	bl	80007e8 <Clr_CS>
	SysCntrl.spi_buf_tx[0] = 0x0b;
 80012e2:	220b      	movs	r2, #11
 80012e4:	4b1e      	ldr	r3, [pc, #120]	; (8001360 <FlashDump+0x8c>)
	SysCntrl.spi_buf_tx[1] = 0x0;
	SysCntrl.spi_buf_tx[2] = 0x0;
	SysCntrl.spi_buf_tx[3] = 0x0;
	SysCntrl.spi_buf_tx[4] = 0x0;

	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx,5,HAL_MAX_DELAY);
 80012e6:	4c1f      	ldr	r4, [pc, #124]	; (8001364 <FlashDump+0x90>)
	SysCntrl.spi_buf_tx[0] = 0x0b;
 80012e8:	715a      	strb	r2, [r3, #5]
	SysCntrl.spi_buf_tx[1] = 0x0;
 80012ea:	2200      	movs	r2, #0
 80012ec:	80da      	strh	r2, [r3, #6]
	SysCntrl.spi_buf_tx[3] = 0x0;
 80012ee:	811a      	strh	r2, [r3, #8]
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx,5,HAL_MAX_DELAY);
 80012f0:	2301      	movs	r3, #1
 80012f2:	0020      	movs	r0, r4
 80012f4:	491c      	ldr	r1, [pc, #112]	; (8001368 <FlashDump+0x94>)
 80012f6:	425b      	negs	r3, r3
 80012f8:	3205      	adds	r2, #5
 80012fa:	f002 fd9c 	bl	8003e36 <HAL_SPI_Transmit>

	if(HAL_SPI_Receive(&hspi1,SysCntrl.SPI_page, 256, HAL_MAX_DELAY) == HAL_OK){
 80012fe:	2301      	movs	r3, #1
 8001300:	2280      	movs	r2, #128	; 0x80
 8001302:	4d1a      	ldr	r5, [pc, #104]	; (800136c <FlashDump+0x98>)
 8001304:	0020      	movs	r0, r4
 8001306:	0029      	movs	r1, r5
 8001308:	425b      	negs	r3, r3
 800130a:	0052      	lsls	r2, r2, #1
 800130c:	f002 ff56 	bl	80041bc <HAL_SPI_Receive>
 8001310:	1e04      	subs	r4, r0, #0
 8001312:	d11e      	bne.n	8001352 <FlashDump+0x7e>
		SPI_ReadID(0,NULL);
 8001314:	0001      	movs	r1, r0
 8001316:	f7ff febd 	bl	8001094 <SPI_ReadID>
		UART_putstrln(SysCntrl.spi_buf_rx);
 800131a:	4815      	ldr	r0, [pc, #84]	; (8001370 <FlashDump+0x9c>)
 800131c:	f7ff fa98 	bl	8000850 <UART_putstrln>
		for (i=0;i<256;i++){
			UART_SendByte(ByteToHEX(SysCntrl.SPI_page[i]>>4));
			UART_SendByte(ByteToHEX(SysCntrl.SPI_page[i]&0x0f));
 8001320:	270f      	movs	r7, #15
			UART_SendByte(ByteToHEX(SysCntrl.SPI_page[i]>>4));
 8001322:	7828      	ldrb	r0, [r5, #0]
		for (i=0;i<256;i++){
 8001324:	3401      	adds	r4, #1
			UART_SendByte(ByteToHEX(SysCntrl.SPI_page[i]>>4));
 8001326:	0900      	lsrs	r0, r0, #4
 8001328:	f7ff fc14 	bl	8000b54 <ByteToHEX>
 800132c:	f7ff faac 	bl	8000888 <UART_SendByte>
			UART_SendByte(ByteToHEX(SysCntrl.SPI_page[i]&0x0f));
 8001330:	7828      	ldrb	r0, [r5, #0]
 8001332:	3501      	adds	r5, #1
 8001334:	4038      	ands	r0, r7
 8001336:	f7ff fc0d 	bl	8000b54 <ByteToHEX>
 800133a:	f7ff faa5 	bl	8000888 <UART_SendByte>
			UART_putstr(" ");
 800133e:	480d      	ldr	r0, [pc, #52]	; (8001374 <FlashDump+0xa0>)
 8001340:	f7ff fa7a 	bl	8000838 <UART_putstr>
		for (i=0;i<256;i++){
 8001344:	2380      	movs	r3, #128	; 0x80
 8001346:	005b      	lsls	r3, r3, #1
 8001348:	429c      	cmp	r4, r3
 800134a:	d1ea      	bne.n	8001322 <FlashDump+0x4e>
		}
		UART_putstr("\n\r");
 800134c:	480a      	ldr	r0, [pc, #40]	; (8001378 <FlashDump+0xa4>)
 800134e:	f7ff fa73 	bl	8000838 <UART_putstr>
	}
	Set_CS(cs);
 8001352:	0030      	movs	r0, r6
 8001354:	f7ff fa16 	bl	8000784 <Set_CS>
	DisableSPI();
 8001358:	f7ff f9d4 	bl	8000704 <DisableSPI>
}
 800135c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800135e:	46c0      	nop			; (mov r8, r8)
 8001360:	200004c0 	.word	0x200004c0
 8001364:	20000800 	.word	0x20000800
 8001368:	200004c5 	.word	0x200004c5
 800136c:	200005ea 	.word	0x200005ea
 8001370:	200004d5 	.word	0x200004d5
 8001374:	08007053 	.word	0x08007053
 8001378:	08006c62 	.word	0x08006c62

0800137c <memoryMenu>:


void memoryMenu(){
 800137c:	b570      	push	{r4, r5, r6, lr}
	char buf[BUF_LEN];
	sprintf(buf,"CPU main flash #%d",SysCntrl.MainFlash+1);
	UART_putstrln(buf);
	clearBuf(buf);
	sprintf(buf,"CPU boot flash #%d",SysCntrl.BootFlash+1);
 800137e:	26b6      	movs	r6, #182	; 0xb6
	sprintf(buf,"CPU main flash #%d",SysCntrl.MainFlash+1);
 8001380:	4c2a      	ldr	r4, [pc, #168]	; (800142c <memoryMenu+0xb0>)
 8001382:	4d2b      	ldr	r5, [pc, #172]	; (8001430 <memoryMenu+0xb4>)
void memoryMenu(){
 8001384:	b08a      	sub	sp, #40	; 0x28
	sprintf(buf,"CPU main flash #%d",SysCntrl.MainFlash+1);
 8001386:	5d62      	ldrb	r2, [r4, r5]
 8001388:	492a      	ldr	r1, [pc, #168]	; (8001434 <memoryMenu+0xb8>)
 800138a:	07d2      	lsls	r2, r2, #31
 800138c:	0fd2      	lsrs	r2, r2, #31
 800138e:	3201      	adds	r2, #1
 8001390:	4668      	mov	r0, sp
 8001392:	f004 ff15 	bl	80061c0 <siprintf>
	UART_putstrln(buf);
 8001396:	4668      	mov	r0, sp
 8001398:	f7ff fa5a 	bl	8000850 <UART_putstrln>
	sprintf(buf,"CPU boot flash #%d",SysCntrl.BootFlash+1);
 800139c:	00b6      	lsls	r6, r6, #2
	clearBuf(buf);
 800139e:	4668      	mov	r0, sp
 80013a0:	f7fe ff84 	bl	80002ac <clearBuf>
	sprintf(buf,"CPU boot flash #%d",SysCntrl.BootFlash+1);
 80013a4:	5da2      	ldrb	r2, [r4, r6]
 80013a6:	4924      	ldr	r1, [pc, #144]	; (8001438 <memoryMenu+0xbc>)
 80013a8:	07d2      	lsls	r2, r2, #31
 80013aa:	0fd2      	lsrs	r2, r2, #31
 80013ac:	3201      	adds	r2, #1
 80013ae:	4668      	mov	r0, sp
 80013b0:	f004 ff06 	bl	80061c0 <siprintf>
	UART_putstrln(buf);
 80013b4:	4668      	mov	r0, sp
 80013b6:	f7ff fa4b 	bl	8000850 <UART_putstrln>
	clearBuf(buf);
 80013ba:	4668      	mov	r0, sp
 80013bc:	f7fe ff76 	bl	80002ac <clearBuf>
	sprintf(buf,"CPU boot attempt: %d",SysCntrl.BootAttempt);
 80013c0:	5d62      	ldrb	r2, [r4, r5]
 80013c2:	491e      	ldr	r1, [pc, #120]	; (800143c <memoryMenu+0xc0>)
 80013c4:	06d2      	lsls	r2, r2, #27
 80013c6:	0f92      	lsrs	r2, r2, #30
 80013c8:	4668      	mov	r0, sp
 80013ca:	f004 fef9 	bl	80061c0 <siprintf>
	UART_putstrln(buf);
 80013ce:	4668      	mov	r0, sp
 80013d0:	f7ff fa3e 	bl	8000850 <UART_putstrln>
	clearBuf(buf);
 80013d4:	4668      	mov	r0, sp
 80013d6:	f7fe ff69 	bl	80002ac <clearBuf>
	sprintf(buf,"Watchdog: %s",SysCntrl.Watchdog?"Enabled":"Disabled");
 80013da:	5da3      	ldrb	r3, [r4, r6]
 80013dc:	4a18      	ldr	r2, [pc, #96]	; (8001440 <memoryMenu+0xc4>)
 80013de:	079b      	lsls	r3, r3, #30
 80013e0:	d400      	bmi.n	80013e4 <memoryMenu+0x68>
 80013e2:	4a18      	ldr	r2, [pc, #96]	; (8001444 <memoryMenu+0xc8>)
 80013e4:	4918      	ldr	r1, [pc, #96]	; (8001448 <memoryMenu+0xcc>)
 80013e6:	4668      	mov	r0, sp
 80013e8:	f004 feea 	bl	80061c0 <siprintf>
	UART_putstrln(buf);
 80013ec:	4668      	mov	r0, sp
 80013ee:	f7ff fa2f 	bl	8000850 <UART_putstrln>
	sprintf(buf,"Auto boot: %s \r\nLaunch is %s",SysCntrl.PowerState?"On":"Off by key",(SysCntrl.pgin)?"allowed":"prohibited");
 80013f2:	5d63      	ldrb	r3, [r4, r5]
 80013f4:	4a15      	ldr	r2, [pc, #84]	; (800144c <memoryMenu+0xd0>)
 80013f6:	069b      	lsls	r3, r3, #26
 80013f8:	d400      	bmi.n	80013fc <memoryMenu+0x80>
 80013fa:	4a15      	ldr	r2, [pc, #84]	; (8001450 <memoryMenu+0xd4>)
 80013fc:	4b15      	ldr	r3, [pc, #84]	; (8001454 <memoryMenu+0xd8>)
 80013fe:	5ce1      	ldrb	r1, [r4, r3]
 8001400:	4b15      	ldr	r3, [pc, #84]	; (8001458 <memoryMenu+0xdc>)
 8001402:	07c9      	lsls	r1, r1, #31
 8001404:	d400      	bmi.n	8001408 <memoryMenu+0x8c>
 8001406:	4b15      	ldr	r3, [pc, #84]	; (800145c <memoryMenu+0xe0>)
 8001408:	4915      	ldr	r1, [pc, #84]	; (8001460 <memoryMenu+0xe4>)
 800140a:	4668      	mov	r0, sp
 800140c:	f004 fed8 	bl	80061c0 <siprintf>
	UART_putstrln(buf);
 8001410:	4668      	mov	r0, sp
 8001412:	f7ff fa1d 	bl	8000850 <UART_putstrln>
	sprintf(buf,"DEBUG: CPU Power stage: %d",SysCntrl.power_stage);
 8001416:	7822      	ldrb	r2, [r4, #0]
 8001418:	4912      	ldr	r1, [pc, #72]	; (8001464 <memoryMenu+0xe8>)
 800141a:	4668      	mov	r0, sp
 800141c:	f004 fed0 	bl	80061c0 <siprintf>
	UART_putstrln(buf);
 8001420:	4668      	mov	r0, sp
 8001422:	f7ff fa15 	bl	8000850 <UART_putstrln>
}
 8001426:	b00a      	add	sp, #40	; 0x28
 8001428:	bd70      	pop	{r4, r5, r6, pc}
 800142a:	46c0      	nop			; (mov r8, r8)
 800142c:	200004c0 	.word	0x200004c0
 8001430:	000002d9 	.word	0x000002d9
 8001434:	08006c97 	.word	0x08006c97
 8001438:	08006caa 	.word	0x08006caa
 800143c:	08006cbd 	.word	0x08006cbd
 8001440:	08006c65 	.word	0x08006c65
 8001444:	08006c6d 	.word	0x08006c6d
 8001448:	08006cd2 	.word	0x08006cd2
 800144c:	08006c76 	.word	0x08006c76
 8001450:	08006c79 	.word	0x08006c79
 8001454:	000002db 	.word	0x000002db
 8001458:	08006c84 	.word	0x08006c84
 800145c:	08006c8c 	.word	0x08006c8c
 8001460:	08006cdf 	.word	0x08006cdf
 8001464:	08006cfc 	.word	0x08006cfc

08001468 <writeConfig>:

void writeConfig(){
 8001468:	b530      	push	{r4, r5, lr}
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase  = TYPEERASE_PAGES;
	EraseInitStruct.PageAddress = CONFIG_ADDR_IN_FLASH-4;
	EraseInitStruct.NbPages = 1;
 800146a:	2401      	movs	r4, #1
	EraseInitStruct.TypeErase  = TYPEERASE_PAGES;
 800146c:	2500      	movs	r5, #0
	EraseInitStruct.PageAddress = CONFIG_ADDR_IN_FLASH-4;
 800146e:	4b0f      	ldr	r3, [pc, #60]	; (80014ac <writeConfig+0x44>)
void writeConfig(){
 8001470:	b085      	sub	sp, #20
	EraseInitStruct.PageAddress = CONFIG_ADDR_IN_FLASH-4;
 8001472:	9302      	str	r3, [sp, #8]
	EraseInitStruct.TypeErase  = TYPEERASE_PAGES;
 8001474:	9501      	str	r5, [sp, #4]
	EraseInitStruct.NbPages = 1;
 8001476:	9403      	str	r4, [sp, #12]

	// TODO: Error handler
	uint32_t error;
	HAL_FLASH_Unlock();
 8001478:	f000 fdb6 	bl	8001fe8 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct,&error);
 800147c:	4669      	mov	r1, sp
 800147e:	a801      	add	r0, sp, #4
 8001480:	f000 fe62 	bl	8002148 <HAL_FLASHEx_Erase>
	uint16_t data = (SysCntrl.SavedConfigH<<8)|(SysCntrl.SavedConfigL);
 8001484:	490a      	ldr	r1, [pc, #40]	; (80014b0 <writeConfig+0x48>)
 8001486:	4b0b      	ldr	r3, [pc, #44]	; (80014b4 <writeConfig+0x4c>)
 8001488:	4a0b      	ldr	r2, [pc, #44]	; (80014b8 <writeConfig+0x50>)
 800148a:	5ccb      	ldrb	r3, [r1, r3]
 800148c:	5c8a      	ldrb	r2, [r1, r2]
 800148e:	021b      	lsls	r3, r3, #8
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,CONFIG_ADDR_IN_FLASH, data);
 8001490:	431a      	orrs	r2, r3
 8001492:	490a      	ldr	r1, [pc, #40]	; (80014bc <writeConfig+0x54>)
 8001494:	002b      	movs	r3, r5
 8001496:	0020      	movs	r0, r4
 8001498:	f000 fdf0 	bl	800207c <HAL_FLASH_Program>
	HAL_Delay(500);
 800149c:	20fa      	movs	r0, #250	; 0xfa
 800149e:	40a0      	lsls	r0, r4
 80014a0:	f000 fbdc 	bl	8001c5c <HAL_Delay>
	HAL_FLASH_Lock();
 80014a4:	f000 fdb4 	bl	8002010 <HAL_FLASH_Lock>
}
 80014a8:	b005      	add	sp, #20
 80014aa:	bd30      	pop	{r4, r5, pc}
 80014ac:	08007c00 	.word	0x08007c00
 80014b0:	200004c0 	.word	0x200004c0
 80014b4:	000002d9 	.word	0x000002d9
 80014b8:	000002da 	.word	0x000002da
 80014bc:	08007c04 	.word	0x08007c04

080014c0 <readConfig>:

void readConfig(){
	uint16_t *data = (uint16_t*) CONFIG_ADDR_IN_FLASH;

	SysCntrl.SavedConfigL = (*data)&(0b0000000011111111);
 80014c0:	4b04      	ldr	r3, [pc, #16]	; (80014d4 <readConfig+0x14>)
 80014c2:	4a05      	ldr	r2, [pc, #20]	; (80014d8 <readConfig+0x18>)
 80014c4:	881b      	ldrh	r3, [r3, #0]
 80014c6:	4905      	ldr	r1, [pc, #20]	; (80014dc <readConfig+0x1c>)
 80014c8:	5453      	strb	r3, [r2, r1]
	SysCntrl.SavedConfigH = (*data)>>8;
 80014ca:	4905      	ldr	r1, [pc, #20]	; (80014e0 <readConfig+0x20>)
 80014cc:	0a1b      	lsrs	r3, r3, #8
 80014ce:	5453      	strb	r3, [r2, r1]

}
 80014d0:	4770      	bx	lr
 80014d2:	46c0      	nop			; (mov r8, r8)
 80014d4:	08007c04 	.word	0x08007c04
 80014d8:	200004c0 	.word	0x200004c0
 80014dc:	000002da 	.word	0x000002da
 80014e0:	000002d9 	.word	0x000002d9

080014e4 <debouncer>:
// RSTBTN reset btm from motherboard    (x16)
// PWRBTN power button from motherboard (x15)
// ALTBOOT watchdog                     (x14)
// STMBOOTSEL ???                       (x19)

uint8_t debouncer(GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin){
 80014e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80014e6:	0006      	movs	r6, r0
 80014e8:	000f      	movs	r7, r1
	uint8_t pinState;
	uint8_t prevState;
	uint8_t i,swtch = 1;
	char buf[25] = {0};
	pinState = HAL_GPIO_ReadPin(GPIOx,GPIO_Pin);
 80014ea:	f000 ff8f 	bl	800240c <HAL_GPIO_ReadPin>
 80014ee:	2503      	movs	r5, #3
 80014f0:	0004      	movs	r4, r0
	for(i=0;i<3 && swtch;i++){
		prevState = pinState;
		pinState = HAL_GPIO_ReadPin(GPIOx,GPIO_Pin);
 80014f2:	0039      	movs	r1, r7
 80014f4:	0030      	movs	r0, r6
 80014f6:	9401      	str	r4, [sp, #4]
 80014f8:	f000 ff88 	bl	800240c <HAL_GPIO_ReadPin>
		if(prevState!=pinState)
 80014fc:	9a01      	ldr	r2, [sp, #4]
		pinState = HAL_GPIO_ReadPin(GPIOx,GPIO_Pin);
 80014fe:	0004      	movs	r4, r0
			swtch = 0;
 8001500:	2300      	movs	r3, #0
		if(prevState!=pinState)
 8001502:	4282      	cmp	r2, r0
 8001504:	d103      	bne.n	800150e <debouncer+0x2a>
		else
			HAL_Delay(2);
 8001506:	2002      	movs	r0, #2
 8001508:	f000 fba8 	bl	8001c5c <HAL_Delay>
 800150c:	2301      	movs	r3, #1
	for(i=0;i<3 && swtch;i++){
 800150e:	3d01      	subs	r5, #1
 8001510:	b2ed      	uxtb	r5, r5
 8001512:	2d00      	cmp	r5, #0
 8001514:	d002      	beq.n	800151c <debouncer+0x38>
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1eb      	bne.n	80014f2 <debouncer+0xe>
	}

	if(swtch)
		return 0b10000000|((pinState)?1:0);

}
 800151a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if(swtch)
 800151c:	2b00      	cmp	r3, #0
 800151e:	d0fc      	beq.n	800151a <debouncer+0x36>
		return 0b10000000|((pinState)?1:0);
 8001520:	1e60      	subs	r0, r4, #1
 8001522:	4184      	sbcs	r4, r0
 8001524:	0020      	movs	r0, r4
 8001526:	3080      	adds	r0, #128	; 0x80
 8001528:	e7f7      	b.n	800151a <debouncer+0x36>
	...

0800152c <checkPowerLevels>:

void checkPowerLevels(uint8_t output){
	char buf[10] = {0};
 800152c:	2100      	movs	r1, #0
void checkPowerLevels(uint8_t output){
 800152e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001530:	b085      	sub	sp, #20
	char buf[10] = {0};
 8001532:	2206      	movs	r2, #6
void checkPowerLevels(uint8_t output){
 8001534:	0006      	movs	r6, r0
	char buf[10] = {0};
 8001536:	a802      	add	r0, sp, #8
 8001538:	9101      	str	r1, [sp, #4]
 800153a:	f004 fe38 	bl	80061ae <memset>
	uint8_t pinState;


	pinState = HAL_GPIO_ReadPin(PGIN_PIN);
 800153e:	2180      	movs	r1, #128	; 0x80
 8001540:	2090      	movs	r0, #144	; 0x90
 8001542:	0209      	lsls	r1, r1, #8
 8001544:	05c0      	lsls	r0, r0, #23
 8001546:	f000 ff61 	bl	800240c <HAL_GPIO_ReadPin>

	SysCntrl.pgin = (pinState)?0:1;
 800154a:	2101      	movs	r1, #1
 800154c:	4243      	negs	r3, r0
 800154e:	4158      	adcs	r0, r3
 8001550:	4d40      	ldr	r5, [pc, #256]	; (8001654 <checkPowerLevels+0x128>)
 8001552:	4c41      	ldr	r4, [pc, #260]	; (8001658 <checkPowerLevels+0x12c>)
 8001554:	b2c2      	uxtb	r2, r0
 8001556:	5d2b      	ldrb	r3, [r5, r4]
 8001558:	4008      	ands	r0, r1
 800155a:	438b      	bics	r3, r1
 800155c:	4318      	orrs	r0, r3
 800155e:	5528      	strb	r0, [r5, r4]
	if(output){
 8001560:	2e00      	cmp	r6, #0
 8001562:	d006      	beq.n	8001572 <checkPowerLevels+0x46>
		sprintf(buf,"PGIN: %d\r\n",SysCntrl.pgin);
 8001564:	493d      	ldr	r1, [pc, #244]	; (800165c <checkPowerLevels+0x130>)
 8001566:	a801      	add	r0, sp, #4
 8001568:	f004 fe2a 	bl	80061c0 <siprintf>
		UART_putstr(buf);
 800156c:	a801      	add	r0, sp, #4
 800156e:	f7ff f963 	bl	8000838 <UART_putstr>
	}

	pinState = HAL_GPIO_ReadPin(PWRBTN_PIN);
 8001572:	2102      	movs	r1, #2
 8001574:	483a      	ldr	r0, [pc, #232]	; (8001660 <checkPowerLevels+0x134>)
 8001576:	f000 ff49 	bl	800240c <HAL_GPIO_ReadPin>
	if((pinState&0b00000001)!=SysCntrl.pwrbtn){
 800157a:	2701      	movs	r7, #1
 800157c:	5d2b      	ldrb	r3, [r5, r4]
 800157e:	4038      	ands	r0, r7
 8001580:	079b      	lsls	r3, r3, #30
 8001582:	0fdb      	lsrs	r3, r3, #31
 8001584:	4283      	cmp	r3, r0
 8001586:	d00c      	beq.n	80015a2 <checkPowerLevels+0x76>
		pinState = debouncer(PWRBTN_PIN);
 8001588:	2102      	movs	r1, #2
 800158a:	4835      	ldr	r0, [pc, #212]	; (8001660 <checkPowerLevels+0x134>)
 800158c:	f7ff ffaa 	bl	80014e4 <debouncer>
		if(pinState&0b10000000)
 8001590:	0603      	lsls	r3, r0, #24
 8001592:	d506      	bpl.n	80015a2 <checkPowerLevels+0x76>
			SysCntrl.pwrbtn = pinState&0b00000001;
 8001594:	4038      	ands	r0, r7
 8001596:	2302      	movs	r3, #2
 8001598:	40b8      	lsls	r0, r7
 800159a:	5d2f      	ldrb	r7, [r5, r4]
 800159c:	439f      	bics	r7, r3
 800159e:	4338      	orrs	r0, r7
 80015a0:	5528      	strb	r0, [r5, r4]
	}

	if(output){
 80015a2:	2e00      	cmp	r6, #0
 80015a4:	d009      	beq.n	80015ba <checkPowerLevels+0x8e>
		sprintf(buf,"PWRBTN: %d\r\n",SysCntrl.pwrbtn);
 80015a6:	5d2a      	ldrb	r2, [r5, r4]
 80015a8:	492e      	ldr	r1, [pc, #184]	; (8001664 <checkPowerLevels+0x138>)
 80015aa:	0792      	lsls	r2, r2, #30
 80015ac:	0fd2      	lsrs	r2, r2, #31
 80015ae:	a801      	add	r0, sp, #4
 80015b0:	f004 fe06 	bl	80061c0 <siprintf>
		UART_putstr(buf);
 80015b4:	a801      	add	r0, sp, #4
 80015b6:	f7ff f93f 	bl	8000838 <UART_putstr>
	}

	pinState = HAL_GPIO_ReadPin(RSTBTN_PIN);
 80015ba:	2110      	movs	r1, #16
 80015bc:	482a      	ldr	r0, [pc, #168]	; (8001668 <checkPowerLevels+0x13c>)
 80015be:	f000 ff25 	bl	800240c <HAL_GPIO_ReadPin>
	if((pinState&0b00000001)!=SysCntrl.rstbtn){
 80015c2:	2701      	movs	r7, #1
 80015c4:	5d2b      	ldrb	r3, [r5, r4]
 80015c6:	4038      	ands	r0, r7
 80015c8:	075b      	lsls	r3, r3, #29
 80015ca:	0fdb      	lsrs	r3, r3, #31
 80015cc:	4283      	cmp	r3, r0
 80015ce:	d00c      	beq.n	80015ea <checkPowerLevels+0xbe>
		pinState = debouncer(RSTBTN_PIN);
 80015d0:	2110      	movs	r1, #16
 80015d2:	4825      	ldr	r0, [pc, #148]	; (8001668 <checkPowerLevels+0x13c>)
 80015d4:	f7ff ff86 	bl	80014e4 <debouncer>
		if(pinState&0b10000000){
 80015d8:	0603      	lsls	r3, r0, #24
 80015da:	d506      	bpl.n	80015ea <checkPowerLevels+0xbe>
			SysCntrl.rstbtn = pinState&0b00000001;
 80015dc:	2304      	movs	r3, #4
 80015de:	4038      	ands	r0, r7
 80015e0:	5d2f      	ldrb	r7, [r5, r4]
 80015e2:	0080      	lsls	r0, r0, #2
 80015e4:	439f      	bics	r7, r3
 80015e6:	4338      	orrs	r0, r7
 80015e8:	5528      	strb	r0, [r5, r4]
		}
	}

	if(output){
 80015ea:	2e00      	cmp	r6, #0
 80015ec:	d009      	beq.n	8001602 <checkPowerLevels+0xd6>
		sprintf(buf,"RSTBTN: %d\r\n",SysCntrl.rstbtn);
 80015ee:	5d2a      	ldrb	r2, [r5, r4]
 80015f0:	491e      	ldr	r1, [pc, #120]	; (800166c <checkPowerLevels+0x140>)
 80015f2:	0752      	lsls	r2, r2, #29
 80015f4:	0fd2      	lsrs	r2, r2, #31
 80015f6:	a801      	add	r0, sp, #4
 80015f8:	f004 fde2 	bl	80061c0 <siprintf>
		UART_putstr(buf);
 80015fc:	a801      	add	r0, sp, #4
 80015fe:	f7ff f91b 	bl	8000838 <UART_putstr>
	}


	pinState = HAL_GPIO_ReadPin(STMBOOTSEL_PIN);
 8001602:	2180      	movs	r1, #128	; 0x80
 8001604:	4818      	ldr	r0, [pc, #96]	; (8001668 <checkPowerLevels+0x13c>)
 8001606:	0049      	lsls	r1, r1, #1
 8001608:	f000 ff00 	bl	800240c <HAL_GPIO_ReadPin>
	if((pinState&0b00000001)!=SysCntrl.stmbootsel){
 800160c:	2701      	movs	r7, #1
 800160e:	5d2b      	ldrb	r3, [r5, r4]
 8001610:	4038      	ands	r0, r7
 8001612:	071b      	lsls	r3, r3, #28
 8001614:	0fdb      	lsrs	r3, r3, #31
 8001616:	4283      	cmp	r3, r0
 8001618:	d00d      	beq.n	8001636 <checkPowerLevels+0x10a>
		pinState = debouncer(STMBOOTSEL_PIN);
 800161a:	2180      	movs	r1, #128	; 0x80
 800161c:	4812      	ldr	r0, [pc, #72]	; (8001668 <checkPowerLevels+0x13c>)
 800161e:	0049      	lsls	r1, r1, #1
 8001620:	f7ff ff60 	bl	80014e4 <debouncer>
		if(pinState&0b10000000)
 8001624:	0603      	lsls	r3, r0, #24
 8001626:	d506      	bpl.n	8001636 <checkPowerLevels+0x10a>
			SysCntrl.stmbootsel = pinState&0b00000001;
 8001628:	2308      	movs	r3, #8
 800162a:	4038      	ands	r0, r7
 800162c:	5d2f      	ldrb	r7, [r5, r4]
 800162e:	00c0      	lsls	r0, r0, #3
 8001630:	439f      	bics	r7, r3
 8001632:	4338      	orrs	r0, r7
 8001634:	5528      	strb	r0, [r5, r4]
	}

	if(output){
 8001636:	2e00      	cmp	r6, #0
 8001638:	d009      	beq.n	800164e <checkPowerLevels+0x122>
		sprintf(buf,"STMBOOTSEL: %d\r\n",SysCntrl.stmbootsel);
 800163a:	5d2a      	ldrb	r2, [r5, r4]
 800163c:	490c      	ldr	r1, [pc, #48]	; (8001670 <checkPowerLevels+0x144>)
 800163e:	0712      	lsls	r2, r2, #28
 8001640:	0fd2      	lsrs	r2, r2, #31
 8001642:	a801      	add	r0, sp, #4
 8001644:	f004 fdbc 	bl	80061c0 <siprintf>
		UART_putstr(buf);
 8001648:	a801      	add	r0, sp, #4
 800164a:	f7ff f8f5 	bl	8000838 <UART_putstr>
	}
}
 800164e:	b005      	add	sp, #20
 8001650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001652:	46c0      	nop			; (mov r8, r8)
 8001654:	200004c0 	.word	0x200004c0
 8001658:	000002db 	.word	0x000002db
 800165c:	08006d17 	.word	0x08006d17
 8001660:	48001400 	.word	0x48001400
 8001664:	08006d22 	.word	0x08006d22
 8001668:	48000400 	.word	0x48000400
 800166c:	08006d2f 	.word	0x08006d2f
 8001670:	08006d3c 	.word	0x08006d3c

08001674 <BootMenu>:
	if((!strcmp(console.buf,"Y")) || (!strcmp(console.buf,"y")))
		return 1;
	return 0;
}

int BootMenu(){
 8001674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint8_t i,result = 0;
	clearUartConsole();
 8001676:	f7ff f991 	bl	800099c <clearUartConsole>
	UART_putstrln(WELCOME_SCREEN);
 800167a:	4849      	ldr	r0, [pc, #292]	; (80017a0 <BootMenu+0x12c>)
 800167c:	f7ff f8e8 	bl	8000850 <UART_putstrln>
	memoryMenu();
 8001680:	f7ff fe7c 	bl	800137c <memoryMenu>
	UART_putstr("CPU FW status:");
 8001684:	4847      	ldr	r0, [pc, #284]	; (80017a4 <BootMenu+0x130>)
 8001686:	f7ff f8d7 	bl	8000838 <UART_putstr>
	UART_putstrln(CS_STASTUS_LABELS[SysCntrl.FWStatus]);
 800168a:	4d47      	ldr	r5, [pc, #284]	; (80017a8 <BootMenu+0x134>)
 800168c:	4c47      	ldr	r4, [pc, #284]	; (80017ac <BootMenu+0x138>)
 800168e:	4a48      	ldr	r2, [pc, #288]	; (80017b0 <BootMenu+0x13c>)
 8001690:	5d63      	ldrb	r3, [r4, r5]
 8001692:	075b      	lsls	r3, r3, #29
 8001694:	0f9b      	lsrs	r3, r3, #30
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	5898      	ldr	r0, [r3, r2]
 800169a:	f7ff f8d9 	bl	8000850 <UART_putstrln>
	for(i=0;i<10;i++)
 800169e:	4e45      	ldr	r6, [pc, #276]	; (80017b4 <BootMenu+0x140>)
 80016a0:	0037      	movs	r7, r6
 80016a2:	3728      	adds	r7, #40	; 0x28
		UART_putstrln(menu[i]);
 80016a4:	ce01      	ldmia	r6!, {r0}
 80016a6:	f7ff f8d3 	bl	8000850 <UART_putstrln>
	for(i=0;i<10;i++)
 80016aa:	42b7      	cmp	r7, r6
 80016ac:	d1fa      	bne.n	80016a4 <BootMenu+0x30>
	refreshConsoleS();
 80016ae:	f7ff f965 	bl	800097c <refreshConsoleS>
	while(!console.cmd_flag) userInput(0);
 80016b2:	4e41      	ldr	r6, [pc, #260]	; (80017b8 <BootMenu+0x144>)
 80016b4:	3644      	adds	r6, #68	; 0x44
 80016b6:	7830      	ldrb	r0, [r6, #0]
 80016b8:	2800      	cmp	r0, #0
 80016ba:	d00e      	beq.n	80016da <BootMenu+0x66>
	uint8_t cmd = atoi(console.buf)-1;
 80016bc:	483f      	ldr	r0, [pc, #252]	; (80017bc <BootMenu+0x148>)
 80016be:	f004 fd3c 	bl	800613a <atoi>
 80016c2:	3801      	subs	r0, #1
 80016c4:	b2c0      	uxtb	r0, r0
 80016c6:	2600      	movs	r6, #0
 80016c8:	2808      	cmp	r0, #8
 80016ca:	d80d      	bhi.n	80016e8 <BootMenu+0x74>
 80016cc:	f7fe fd38 	bl	8000140 <__gnu_thumb1_case_uqi>
 80016d0:	33251008 	.word	0x33251008
 80016d4:	5a554a3e 	.word	0x5a554a3e
 80016d8:	61          	.byte	0x61
 80016d9:	00          	.byte	0x00
	while(!console.cmd_flag) userInput(0);
 80016da:	f7ff f8fd 	bl	80008d8 <userInput>
 80016de:	e7ea      	b.n	80016b6 <BootMenu+0x42>
	switch(cmd){
	case 0:
		UART_putstrln("Booting...");
 80016e0:	4837      	ldr	r0, [pc, #220]	; (80017c0 <BootMenu+0x14c>)
 80016e2:	f7ff f8b5 	bl	8000850 <UART_putstrln>
		result = 1;
 80016e6:	2601      	movs	r6, #1
		// Set FW status to BAD
		SysCntrl.FWStatus = BAD;
	break;

	}
	refreshConsoleS();
 80016e8:	f7ff f948 	bl	800097c <refreshConsoleS>
	return result;
}
 80016ec:	0030      	movs	r0, r6
 80016ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if(SysCntrl.MainFlash == 0){
 80016f0:	5d63      	ldrb	r3, [r4, r5]
 80016f2:	2501      	movs	r5, #1
 80016f4:	422b      	tst	r3, r5
 80016f6:	d105      	bne.n	8001704 <BootMenu+0x90>
			UART_putstrln(text[3]);
 80016f8:	4b32      	ldr	r3, [pc, #200]	; (80017c4 <BootMenu+0x150>)
 80016fa:	68d8      	ldr	r0, [r3, #12]
 80016fc:	f7ff f8a8 	bl	8000850 <UART_putstrln>
	uint8_t i,result = 0;
 8001700:	2600      	movs	r6, #0
	break;
 8001702:	e7f1      	b.n	80016e8 <BootMenu+0x74>
			SysCntrl.active_cs = 0;
 8001704:	2300      	movs	r3, #0
 8001706:	7123      	strb	r3, [r4, #4]
			Xmodem_Init();
 8001708:	f7ff fdc8 	bl	800129c <Xmodem_Init>
			while(SysCntrl.XmodemMode) Xmodem_SPI();
 800170c:	4b2e      	ldr	r3, [pc, #184]	; (80017c8 <BootMenu+0x154>)
 800170e:	5ce3      	ldrb	r3, [r4, r3]
 8001710:	422b      	tst	r3, r5
 8001712:	d0f5      	beq.n	8001700 <BootMenu+0x8c>
 8001714:	f7ff fcec 	bl	80010f0 <Xmodem_SPI>
 8001718:	e7f8      	b.n	800170c <BootMenu+0x98>
		if(SysCntrl.MainFlash == 1){
 800171a:	5d63      	ldrb	r3, [r4, r5]
 800171c:	2501      	movs	r5, #1
 800171e:	422b      	tst	r3, r5
 8001720:	d1ea      	bne.n	80016f8 <BootMenu+0x84>
			SysCntrl.active_cs = 1;
 8001722:	7125      	strb	r5, [r4, #4]
			Xmodem_Init();
 8001724:	f7ff fdba 	bl	800129c <Xmodem_Init>
			while(SysCntrl.XmodemMode) Xmodem_SPI();
 8001728:	4b27      	ldr	r3, [pc, #156]	; (80017c8 <BootMenu+0x154>)
 800172a:	5ce3      	ldrb	r3, [r4, r3]
 800172c:	422b      	tst	r3, r5
 800172e:	d0e7      	beq.n	8001700 <BootMenu+0x8c>
 8001730:	f7ff fcde 	bl	80010f0 <Xmodem_SPI>
 8001734:	e7f8      	b.n	8001728 <BootMenu+0xb4>
		SysCntrl.MainFlash = ~SysCntrl.MainFlash;
 8001736:	5d62      	ldrb	r2, [r4, r5]
 8001738:	2101      	movs	r1, #1
 800173a:	07d3      	lsls	r3, r2, #31
 800173c:	0fdb      	lsrs	r3, r3, #31
 800173e:	43db      	mvns	r3, r3
 8001740:	438a      	bics	r2, r1
 8001742:	400b      	ands	r3, r1
 8001744:	4313      	orrs	r3, r2
 8001746:	5563      	strb	r3, [r4, r5]
		writeConfig();
 8001748:	f7ff fe8e 	bl	8001468 <writeConfig>
		SysCntrl.BootFlash = ~SysCntrl.BootFlash;
 800174c:	21b6      	movs	r1, #182	; 0xb6
 800174e:	0089      	lsls	r1, r1, #2
 8001750:	5c62      	ldrb	r2, [r4, r1]
 8001752:	2001      	movs	r0, #1
 8001754:	07d3      	lsls	r3, r2, #31
 8001756:	0fdb      	lsrs	r3, r3, #31
 8001758:	43db      	mvns	r3, r3
 800175a:	4003      	ands	r3, r0
		SysCntrl.Watchdog = ~SysCntrl.Watchdog;
 800175c:	4382      	bics	r2, r0
 800175e:	4313      	orrs	r3, r2
 8001760:	5463      	strb	r3, [r4, r1]
	break;
 8001762:	e7cd      	b.n	8001700 <BootMenu+0x8c>
		SysCntrl.Watchdog = ~SysCntrl.Watchdog;
 8001764:	21b6      	movs	r1, #182	; 0xb6
 8001766:	0089      	lsls	r1, r1, #2
 8001768:	5c62      	ldrb	r2, [r4, r1]
 800176a:	2001      	movs	r0, #1
 800176c:	0793      	lsls	r3, r2, #30
 800176e:	0fdb      	lsrs	r3, r3, #31
 8001770:	43db      	mvns	r3, r3
 8001772:	4003      	ands	r3, r0
 8001774:	4083      	lsls	r3, r0
 8001776:	1800      	adds	r0, r0, r0
 8001778:	e7f0      	b.n	800175c <BootMenu+0xe8>
		SysCntrl.FWStatus = CONFIRMED;
 800177a:	2206      	movs	r2, #6
 800177c:	5d63      	ldrb	r3, [r4, r5]
 800177e:	4393      	bics	r3, r2
		SysCntrl.FWStatus = BAD;
 8001780:	5563      	strb	r3, [r4, r5]
 8001782:	e7bd      	b.n	8001700 <BootMenu+0x8c>
		SysCntrl.FWStatus = UPDATED;
 8001784:	2206      	movs	r2, #6
 8001786:	5d63      	ldrb	r3, [r4, r5]
 8001788:	4393      	bics	r3, r2
 800178a:	001a      	movs	r2, r3
 800178c:	2302      	movs	r3, #2
		SysCntrl.FWStatus = BAD;
 800178e:	4313      	orrs	r3, r2
 8001790:	e7f6      	b.n	8001780 <BootMenu+0x10c>
 8001792:	2206      	movs	r2, #6
 8001794:	5d63      	ldrb	r3, [r4, r5]
 8001796:	4393      	bics	r3, r2
 8001798:	001a      	movs	r2, r3
 800179a:	2304      	movs	r3, #4
 800179c:	e7f7      	b.n	800178e <BootMenu+0x11a>
 800179e:	46c0      	nop			; (mov r8, r8)
 80017a0:	08006d4d 	.word	0x08006d4d
 80017a4:	08006d7b 	.word	0x08006d7b
 80017a8:	000002d9 	.word	0x000002d9
 80017ac:	200004c0 	.word	0x200004c0
 80017b0:	20000008 	.word	0x20000008
 80017b4:	20000018 	.word	0x20000018
 80017b8:	20000474 	.word	0x20000474
 80017bc:	20000475 	.word	0x20000475
 80017c0:	08006d8a 	.word	0x08006d8a
 80017c4:	20000040 	.word	0x20000040
 80017c8:	000002cd 	.word	0x000002cd

080017cc <PowerSM>:
void PowerSM() {
 80017cc:	b570      	push	{r4, r5, r6, lr}
	if(SysCntrl.PowerTimer>0)
 80017ce:	4c53      	ldr	r4, [pc, #332]	; (800191c <PowerSM+0x150>)
 80017d0:	7863      	ldrb	r3, [r4, #1]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d002      	beq.n	80017dc <PowerSM+0x10>
		SysCntrl.PowerTimer--;
 80017d6:	3b01      	subs	r3, #1
 80017d8:	7063      	strb	r3, [r4, #1]
}
 80017da:	bd70      	pop	{r4, r5, r6, pc}
		switch(SysCntrl.power_stage) {
 80017dc:	7820      	ldrb	r0, [r4, #0]
 80017de:	2815      	cmp	r0, #21
 80017e0:	d100      	bne.n	80017e4 <PowerSM+0x18>
 80017e2:	e092      	b.n	800190a <PowerSM+0x13e>
 80017e4:	d810      	bhi.n	8001808 <PowerSM+0x3c>
 80017e6:	280a      	cmp	r0, #10
 80017e8:	d807      	bhi.n	80017fa <PowerSM+0x2e>
 80017ea:	f7fe fc9f 	bl	800012c <__gnu_thumb1_case_sqi>
 80017ee:	4d23      	.short	0x4d23
 80017f0:	f6f6f6f6 	.word	0xf6f6f6f6
 80017f4:	53f6f6f6 	.word	0x53f6f6f6
 80017f8:	6b          	.byte	0x6b
 80017f9:	00          	.byte	0x00
 80017fa:	2814      	cmp	r0, #20
 80017fc:	d1ed      	bne.n	80017da <PowerSM+0xe>
			SetI2C_Mask(ENA_LV_DCDC);
 80017fe:	2001      	movs	r0, #1
 8001800:	f7fe ff98 	bl	8000734 <SetI2C_Mask>
			SysCntrl.power_stage = 30;
 8001804:	4b46      	ldr	r3, [pc, #280]	; (8001920 <PowerSM+0x154>)
 8001806:	e056      	b.n	80018b6 <PowerSM+0xea>
		switch(SysCntrl.power_stage) {
 8001808:	2829      	cmp	r0, #41	; 0x29
 800180a:	d07c      	beq.n	8001906 <PowerSM+0x13a>
 800180c:	d80b      	bhi.n	8001826 <PowerSM+0x5a>
 800180e:	281e      	cmp	r0, #30
 8001810:	d061      	beq.n	80018d6 <PowerSM+0x10a>
 8001812:	2828      	cmp	r0, #40	; 0x28
 8001814:	d1e1      	bne.n	80017da <PowerSM+0xe>
			SetI2C_Mask(CPU_RST_N);
 8001816:	2080      	movs	r0, #128	; 0x80
 8001818:	f7fe ff8c 	bl	8000734 <SetI2C_Mask>
			ClrI2C_Mask(TRST_N|EJ_TRST_N|RESET_N);
 800181c:	2064      	movs	r0, #100	; 0x64
 800181e:	f7fe ff9d 	bl	800075c <ClrI2C_Mask>
			SysCntrl.power_stage = 51;
 8001822:	4b40      	ldr	r3, [pc, #256]	; (8001924 <PowerSM+0x158>)
 8001824:	e047      	b.n	80018b6 <PowerSM+0xea>
		switch(SysCntrl.power_stage) {
 8001826:	2833      	cmp	r0, #51	; 0x33
 8001828:	d05a      	beq.n	80018e0 <PowerSM+0x114>
 800182a:	2864      	cmp	r0, #100	; 0x64
 800182c:	d1d5      	bne.n	80017da <PowerSM+0xe>
			ClrI2C_Mask(0b11111111);
 800182e:	309b      	adds	r0, #155	; 0x9b
 8001830:	f7fe ff94 	bl	800075c <ClrI2C_Mask>
			 if(SysCntrl.FWStatus == CONFIRMED || SysCntrl.FWStatus == BAD)
 8001834:	22b6      	movs	r2, #182	; 0xb6
 8001836:	4d3c      	ldr	r5, [pc, #240]	; (8001928 <PowerSM+0x15c>)
 8001838:	0092      	lsls	r2, r2, #2
 800183a:	5d63      	ldrb	r3, [r4, r5]
 800183c:	07d9      	lsls	r1, r3, #31
 800183e:	0fc9      	lsrs	r1, r1, #31
 8001840:	0798      	lsls	r0, r3, #30
 8001842:	d405      	bmi.n	8001850 <PowerSM+0x84>
				 SysCntrl.BootFlash = SysCntrl.MainFlash;
 8001844:	2001      	movs	r0, #1
 8001846:	5ca3      	ldrb	r3, [r4, r2]
					 SysCntrl.BootFlash = SysCntrl.MainFlash;
 8001848:	4383      	bics	r3, r0
 800184a:	4319      	orrs	r1, r3
 800184c:	54a1      	strb	r1, [r4, r2]
 800184e:	e010      	b.n	8001872 <PowerSM+0xa6>
				 if(SysCntrl.BootAttempt>0){
 8001850:	2018      	movs	r0, #24
 8001852:	4203      	tst	r3, r0
 8001854:	d010      	beq.n	8001878 <PowerSM+0xac>
					 SysCntrl.BootAttempt--;
 8001856:	06db      	lsls	r3, r3, #27
 8001858:	0f9b      	lsrs	r3, r3, #30
					 SysCntrl.BootFlash = ~SysCntrl.MainFlash;
 800185a:	3815      	subs	r0, #21
					 SysCntrl.BootAttempt--;
 800185c:	3303      	adds	r3, #3
					 SysCntrl.BootFlash = ~SysCntrl.MainFlash;
 800185e:	4003      	ands	r3, r0
 8001860:	3802      	subs	r0, #2
 8001862:	4041      	eors	r1, r0
 8001864:	02db      	lsls	r3, r3, #11
 8001866:	430b      	orrs	r3, r1
 8001868:	4830      	ldr	r0, [pc, #192]	; (800192c <PowerSM+0x160>)
 800186a:	5aa1      	ldrh	r1, [r4, r2]
 800186c:	4001      	ands	r1, r0
 800186e:	430b      	orrs	r3, r1
 8001870:	52a3      	strh	r3, [r4, r2]
			 SysCntrl.power_stage = 1;
 8001872:	2301      	movs	r3, #1
				SysCntrl.power_stage = 9;
 8001874:	7023      	strb	r3, [r4, #0]
 8001876:	e7b0      	b.n	80017da <PowerSM+0xe>
					 SysCntrl.FWStatus = BAD;
 8001878:	2006      	movs	r0, #6
 800187a:	4383      	bics	r3, r0
 800187c:	3802      	subs	r0, #2
 800187e:	4303      	orrs	r3, r0
 8001880:	5563      	strb	r3, [r4, r5]
					 SysCntrl.BootFlash = SysCntrl.MainFlash;
 8001882:	3803      	subs	r0, #3
 8001884:	5ca3      	ldrb	r3, [r4, r2]
 8001886:	e7df      	b.n	8001848 <PowerSM+0x7c>
			if(BootMenu())
 8001888:	f7ff fef4 	bl	8001674 <BootMenu>
 800188c:	2800      	cmp	r0, #0
 800188e:	d0a4      	beq.n	80017da <PowerSM+0xe>
				SysCntrl.power_stage = 9;
 8001890:	2309      	movs	r3, #9
 8001892:	e7ef      	b.n	8001874 <PowerSM+0xa8>
			 if(SysCntrl.BootFlash){
 8001894:	23b6      	movs	r3, #182	; 0xb6
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	5ce3      	ldrb	r3, [r4, r3]
 800189a:	07db      	lsls	r3, r3, #31
 800189c:	d50d      	bpl.n	80018ba <PowerSM+0xee>
				  SetI2C_Mask(FLASH_EN_1);
 800189e:	2010      	movs	r0, #16
 80018a0:	f7fe ff48 	bl	8000734 <SetI2C_Mask>
				  ClrI2C_Mask(FLASH_EN_0);
 80018a4:	2008      	movs	r0, #8
				  ClrI2C_Mask(FLASH_EN_1);
 80018a6:	f7fe ff59 	bl	800075c <ClrI2C_Mask>
			if(SysCntrl.pgin){
 80018aa:	4b21      	ldr	r3, [pc, #132]	; (8001930 <PowerSM+0x164>)
 80018ac:	5ce3      	ldrb	r3, [r4, r3]
 80018ae:	07db      	lsls	r3, r3, #31
 80018b0:	d400      	bmi.n	80018b4 <PowerSM+0xe8>
 80018b2:	e792      	b.n	80017da <PowerSM+0xe>
				SysCntrl.power_stage = 10;
 80018b4:	4b1f      	ldr	r3, [pc, #124]	; (8001934 <PowerSM+0x168>)
			SysCntrl.power_stage = 51;
 80018b6:	8023      	strh	r3, [r4, #0]
}
 80018b8:	e78f      	b.n	80017da <PowerSM+0xe>
				  SetI2C_Mask(FLASH_EN_0);
 80018ba:	2008      	movs	r0, #8
 80018bc:	f7fe ff3a 	bl	8000734 <SetI2C_Mask>
				  ClrI2C_Mask(FLASH_EN_1);
 80018c0:	2010      	movs	r0, #16
 80018c2:	e7f0      	b.n	80018a6 <PowerSM+0xda>
			SetI2C_Mask(TRST_N|EJ_TRST_N);
 80018c4:	2060      	movs	r0, #96	; 0x60
 80018c6:	f7fe ff35 	bl	8000734 <SetI2C_Mask>
			ClrI2C_Mask(RESET_N|CPU_RST_N);
 80018ca:	2084      	movs	r0, #132	; 0x84
 80018cc:	f7fe ff46 	bl	800075c <ClrI2C_Mask>
			SysCntrl.power_stage = 20;
 80018d0:	2385      	movs	r3, #133	; 0x85
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	e7ef      	b.n	80018b6 <PowerSM+0xea>
			SetI2C_Mask(ENA_HV_DCDC);
 80018d6:	2002      	movs	r0, #2
 80018d8:	f7fe ff2c 	bl	8000734 <SetI2C_Mask>
			SysCntrl.power_stage = 40;
 80018dc:	4b16      	ldr	r3, [pc, #88]	; (8001938 <PowerSM+0x16c>)
 80018de:	e7ea      	b.n	80018b6 <PowerSM+0xea>
			SetI2C_Mask(TRST_N|EJ_TRST_N|RESET_N);
 80018e0:	2064      	movs	r0, #100	; 0x64
 80018e2:	f7fe ff27 	bl	8000734 <SetI2C_Mask>
			ClrI2C_Mask(CPU_RST_N);
 80018e6:	2080      	movs	r0, #128	; 0x80
 80018e8:	f7fe ff38 	bl	800075c <ClrI2C_Mask>
			SysCntrl.PowerTimer  = 100;
 80018ec:	2364      	movs	r3, #100	; 0x64
 80018ee:	7063      	strb	r3, [r4, #1]
			if(SysCntrl.rstbtn){
 80018f0:	4b0f      	ldr	r3, [pc, #60]	; (8001930 <PowerSM+0x164>)
 80018f2:	5ce3      	ldrb	r3, [r4, r3]
 80018f4:	075a      	lsls	r2, r3, #29
 80018f6:	d501      	bpl.n	80018fc <PowerSM+0x130>
				SysCntrl.power_stage = 41;
 80018f8:	4a10      	ldr	r2, [pc, #64]	; (800193c <PowerSM+0x170>)
 80018fa:	8022      	strh	r2, [r4, #0]
			if(SysCntrl.pwrbtn){
 80018fc:	079b      	lsls	r3, r3, #30
 80018fe:	d400      	bmi.n	8001902 <PowerSM+0x136>
 8001900:	e76b      	b.n	80017da <PowerSM+0xe>
				SysCntrl.power_stage = 100;
 8001902:	4b0f      	ldr	r3, [pc, #60]	; (8001940 <PowerSM+0x174>)
 8001904:	e7d7      	b.n	80018b6 <PowerSM+0xea>
			SysCntrl.power_stage = 21;
 8001906:	4b0f      	ldr	r3, [pc, #60]	; (8001944 <PowerSM+0x178>)
 8001908:	e7d5      	b.n	80018b6 <PowerSM+0xea>
			SetI2C_Mask(CPU_RST_N);
 800190a:	2080      	movs	r0, #128	; 0x80
 800190c:	f7fe ff12 	bl	8000734 <SetI2C_Mask>
			ClrI2C_Mask(TRST_N|EJ_TRST_N|RESET_N);
 8001910:	2064      	movs	r0, #100	; 0x64
 8001912:	f7fe ff23 	bl	800075c <ClrI2C_Mask>
			SysCntrl.power_stage = 51;
 8001916:	2334      	movs	r3, #52	; 0x34
 8001918:	33ff      	adds	r3, #255	; 0xff
 800191a:	e7cc      	b.n	80018b6 <PowerSM+0xea>
 800191c:	200004c0 	.word	0x200004c0
 8001920:	0000141e 	.word	0x0000141e
 8001924:	00006433 	.word	0x00006433
 8001928:	000002d9 	.word	0x000002d9
 800192c:	ffffe7fe 	.word	0xffffe7fe
 8001930:	000002db 	.word	0x000002db
 8001934:	0000020a 	.word	0x0000020a
 8001938:	00000a28 	.word	0x00000a28
 800193c:	00002829 	.word	0x00002829
 8001940:	fffff464 	.word	0xfffff464
 8001944:	ffff8815 	.word	0xffff8815

08001948 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001948:	2001      	movs	r0, #1
 800194a:	4b0c      	ldr	r3, [pc, #48]	; (800197c <HAL_MspInit+0x34>)
{
 800194c:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800194e:	6999      	ldr	r1, [r3, #24]
 8001950:	4301      	orrs	r1, r0
 8001952:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001954:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001956:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001958:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800195a:	4002      	ands	r2, r0
 800195c:	9200      	str	r2, [sp, #0]
 800195e:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001960:	69da      	ldr	r2, [r3, #28]
 8001962:	430a      	orrs	r2, r1
 8001964:	61da      	str	r2, [r3, #28]
 8001966:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8001968:	4a05      	ldr	r2, [pc, #20]	; (8001980 <HAL_MspInit+0x38>)
  __HAL_RCC_PWR_CLK_ENABLE();
 800196a:	400b      	ands	r3, r1
 800196c:	9301      	str	r3, [sp, #4]
 800196e:	9b01      	ldr	r3, [sp, #4]
  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8001970:	2310      	movs	r3, #16
 8001972:	6811      	ldr	r1, [r2, #0]
 8001974:	430b      	orrs	r3, r1
 8001976:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001978:	b002      	add	sp, #8
 800197a:	4770      	bx	lr
 800197c:	40021000 	.word	0x40021000
 8001980:	40010000 	.word	0x40010000

08001984 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8001984:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <HAL_ADC_MspInit+0x24>)
 8001986:	6802      	ldr	r2, [r0, #0]
{
 8001988:	b082      	sub	sp, #8
  if(hadc->Instance==ADC1)
 800198a:	429a      	cmp	r2, r3
 800198c:	d109      	bne.n	80019a2 <HAL_ADC_MspInit+0x1e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800198e:	2080      	movs	r0, #128	; 0x80
 8001990:	4a06      	ldr	r2, [pc, #24]	; (80019ac <HAL_ADC_MspInit+0x28>)
 8001992:	0080      	lsls	r0, r0, #2
 8001994:	6991      	ldr	r1, [r2, #24]
 8001996:	4301      	orrs	r1, r0
 8001998:	6191      	str	r1, [r2, #24]
 800199a:	6993      	ldr	r3, [r2, #24]
 800199c:	4003      	ands	r3, r0
 800199e:	9301      	str	r3, [sp, #4]
 80019a0:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80019a2:	b002      	add	sp, #8
 80019a4:	4770      	bx	lr
 80019a6:	46c0      	nop			; (mov r8, r8)
 80019a8:	40012400 	.word	0x40012400
 80019ac:	40021000 	.word	0x40021000

080019b0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019b0:	b510      	push	{r4, lr}
 80019b2:	0004      	movs	r4, r0
 80019b4:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b6:	2214      	movs	r2, #20
 80019b8:	2100      	movs	r1, #0
 80019ba:	a803      	add	r0, sp, #12
 80019bc:	f004 fbf7 	bl	80061ae <memset>
  if(hi2c->Instance==I2C1)
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_I2C_MspInit+0x60>)
 80019c2:	6822      	ldr	r2, [r4, #0]
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d120      	bne.n	8001a0a <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019c8:	2180      	movs	r1, #128	; 0x80
 80019ca:	4c12      	ldr	r4, [pc, #72]	; (8001a14 <HAL_I2C_MspInit+0x64>)
 80019cc:	02c9      	lsls	r1, r1, #11
 80019ce:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019d0:	4811      	ldr	r0, [pc, #68]	; (8001a18 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019d2:	430a      	orrs	r2, r1
 80019d4:	6162      	str	r2, [r4, #20]
 80019d6:	6963      	ldr	r3, [r4, #20]
 80019d8:	400b      	ands	r3, r1
 80019da:	9301      	str	r3, [sp, #4]
 80019dc:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80019de:	23c0      	movs	r3, #192	; 0xc0
 80019e0:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80019e2:	3bae      	subs	r3, #174	; 0xae
 80019e4:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e6:	2300      	movs	r3, #0
 80019e8:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80019ea:	3303      	adds	r3, #3
 80019ec:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ee:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 80019f0:	3b02      	subs	r3, #2
 80019f2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019f4:	f000 fbf2 	bl	80021dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80019f8:	2180      	movs	r1, #128	; 0x80
 80019fa:	69e2      	ldr	r2, [r4, #28]
 80019fc:	0389      	lsls	r1, r1, #14
 80019fe:	430a      	orrs	r2, r1
 8001a00:	61e2      	str	r2, [r4, #28]
 8001a02:	69e3      	ldr	r3, [r4, #28]
 8001a04:	400b      	ands	r3, r1
 8001a06:	9302      	str	r3, [sp, #8]
 8001a08:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a0a:	b008      	add	sp, #32
 8001a0c:	bd10      	pop	{r4, pc}
 8001a0e:	46c0      	nop			; (mov r8, r8)
 8001a10:	40005400 	.word	0x40005400
 8001a14:	40021000 	.word	0x40021000
 8001a18:	48000400 	.word	0x48000400

08001a1c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a1c:	b510      	push	{r4, lr}
 8001a1e:	0004      	movs	r4, r0
 8001a20:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a22:	2214      	movs	r2, #20
 8001a24:	2100      	movs	r1, #0
 8001a26:	a803      	add	r0, sp, #12
 8001a28:	f004 fbc1 	bl	80061ae <memset>
  if(hspi->Instance==SPI1)
 8001a2c:	4b17      	ldr	r3, [pc, #92]	; (8001a8c <HAL_SPI_MspInit+0x70>)
 8001a2e:	6822      	ldr	r2, [r4, #0]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d128      	bne.n	8001a86 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a34:	2080      	movs	r0, #128	; 0x80
 8001a36:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <HAL_SPI_MspInit+0x74>)
 8001a38:	0140      	lsls	r0, r0, #5
 8001a3a:	6999      	ldr	r1, [r3, #24]
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a3e:	4301      	orrs	r1, r0
 8001a40:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a42:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a44:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a46:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a48:	4002      	ands	r2, r0
 8001a4a:	9201      	str	r2, [sp, #4]
 8001a4c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a4e:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a50:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a52:	430a      	orrs	r2, r1
 8001a54:	615a      	str	r2, [r3, #20]
 8001a56:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a58:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a5a:	400b      	ands	r3, r1
 8001a5c:	9302      	str	r3, [sp, #8]
 8001a5e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001a60:	23e0      	movs	r3, #224	; 0xe0
 8001a62:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	3bde      	subs	r3, #222	; 0xde
 8001a66:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a68:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001a70:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a72:	f000 fbb3 	bl	80021dc <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a76:	2019      	movs	r0, #25
 8001a78:	0022      	movs	r2, r4
 8001a7a:	0021      	movs	r1, r4
 8001a7c:	f000 fa2c 	bl	8001ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a80:	2019      	movs	r0, #25
 8001a82:	f000 fa53 	bl	8001f2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001a86:	b008      	add	sp, #32
 8001a88:	bd10      	pop	{r4, pc}
 8001a8a:	46c0      	nop			; (mov r8, r8)
 8001a8c:	40013000 	.word	0x40013000
 8001a90:	40021000 	.word	0x40021000

08001a94 <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_SPI_MspDeInit+0x28>)
 8001a96:	6802      	ldr	r2, [r0, #0]
{
 8001a98:	b510      	push	{r4, lr}
  if(hspi->Instance==SPI1)
 8001a9a:	429a      	cmp	r2, r3
 8001a9c:	d10c      	bne.n	8001ab8 <HAL_SPI_MspDeInit+0x24>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001a9e:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001aa0:	4a07      	ldr	r2, [pc, #28]	; (8001ac0 <HAL_SPI_MspDeInit+0x2c>)
 8001aa2:	4908      	ldr	r1, [pc, #32]	; (8001ac4 <HAL_SPI_MspDeInit+0x30>)
 8001aa4:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001aa6:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001aa8:	400b      	ands	r3, r1
 8001aaa:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001aac:	21e0      	movs	r1, #224	; 0xe0
 8001aae:	f000 fc45 	bl	800233c <HAL_GPIO_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8001ab2:	2019      	movs	r0, #25
 8001ab4:	f000 fa46 	bl	8001f44 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001ab8:	bd10      	pop	{r4, pc}
 8001aba:	46c0      	nop			; (mov r8, r8)
 8001abc:	40013000 	.word	0x40013000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	ffffefff 	.word	0xffffefff

08001ac8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ac8:	b510      	push	{r4, lr}
 8001aca:	0001      	movs	r1, r0
 8001acc:	b086      	sub	sp, #24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8001ace:	2200      	movs	r2, #0
 8001ad0:	2016      	movs	r0, #22
 8001ad2:	f000 fa01 	bl	8001ed8 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001ad6:	2016      	movs	r0, #22
 8001ad8:	f000 fa28 	bl	8001f2c <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001adc:	2080      	movs	r0, #128	; 0x80
 8001ade:	4a14      	ldr	r2, [pc, #80]	; (8001b30 <HAL_InitTick+0x68>)
 8001ae0:	02c0      	lsls	r0, r0, #11
 8001ae2:	6991      	ldr	r1, [r2, #24]
 8001ae4:	4301      	orrs	r1, r0
 8001ae6:	6191      	str	r1, [r2, #24]
 8001ae8:	6993      	ldr	r3, [r2, #24]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001aea:	4669      	mov	r1, sp
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001aec:	4003      	ands	r3, r0
 8001aee:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001af0:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001af2:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001af4:	f001 ff34 	bl	8003960 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001af8:	f001 ff22 	bl	8003940 <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001afc:	4c0d      	ldr	r4, [pc, #52]	; (8001b34 <HAL_InitTick+0x6c>)
 8001afe:	4b0e      	ldr	r3, [pc, #56]	; (8001b38 <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b00:	490e      	ldr	r1, [pc, #56]	; (8001b3c <HAL_InitTick+0x74>)
  htim17.Instance = TIM17;
 8001b02:	6023      	str	r3, [r4, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001b04:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <HAL_InitTick+0x78>)
 8001b06:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b08:	f7fe fb38 	bl	800017c <__udivsi3>
  htim17.Init.Prescaler = uwPrescalerValue;
  htim17.Init.ClockDivision = 0;
 8001b0c:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001b0e:	3801      	subs	r0, #1
  htim17.Init.Prescaler = uwPrescalerValue;
 8001b10:	6060      	str	r0, [r4, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001b12:	0020      	movs	r0, r4
  htim17.Init.ClockDivision = 0;
 8001b14:	6123      	str	r3, [r4, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b16:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001b18:	f002 fdc6 	bl	80046a8 <HAL_TIM_Base_Init>
 8001b1c:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
  }

  /* Return function status */
  return HAL_ERROR;
 8001b1e:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d102      	bne.n	8001b2a <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim17);
 8001b24:	0020      	movs	r0, r4
 8001b26:	f002 fca3 	bl	8004470 <HAL_TIM_Base_Start_IT>
}
 8001b2a:	b006      	add	sp, #24
 8001b2c:	bd10      	pop	{r4, pc}
 8001b2e:	46c0      	nop			; (mov r8, r8)
 8001b30:	40021000 	.word	0x40021000
 8001b34:	200008a4 	.word	0x200008a4
 8001b38:	40014800 	.word	0x40014800
 8001b3c:	000f4240 	.word	0x000f4240
 8001b40:	000003e7 	.word	0x000003e7

08001b44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b44:	e7fe      	b.n	8001b44 <NMI_Handler>

08001b46 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b46:	e7fe      	b.n	8001b46 <HardFault_Handler>

08001b48 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001b48:	4770      	bx	lr

08001b4a <PendSV_Handler>:
 8001b4a:	4770      	bx	lr

08001b4c <SysTick_Handler>:
 8001b4c:	4770      	bx	lr
	...

08001b50 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001b50:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001b52:	4802      	ldr	r0, [pc, #8]	; (8001b5c <TIM17_IRQHandler+0xc>)
 8001b54:	f002 fcbc 	bl	80044d0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001b58:	bd10      	pop	{r4, pc}
 8001b5a:	46c0      	nop			; (mov r8, r8)
 8001b5c:	200008a4 	.word	0x200008a4

08001b60 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b60:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b62:	4802      	ldr	r0, [pc, #8]	; (8001b6c <SPI1_IRQHandler+0xc>)
 8001b64:	f002 fbe8 	bl	8004338 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b68:	bd10      	pop	{r4, pc}
 8001b6a:	46c0      	nop			; (mov r8, r8)
 8001b6c:	20000800 	.word	0x20000800

08001b70 <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001b70:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001b72:	4802      	ldr	r0, [pc, #8]	; (8001b7c <USB_IRQHandler+0xc>)
 8001b74:	f000 fd88 	bl	8002688 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001b78:	bd10      	pop	{r4, pc}
 8001b7a:	46c0      	nop			; (mov r8, r8)
 8001b7c:	20000fd4 	.word	0x20000fd4

08001b80 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b80:	4a0b      	ldr	r2, [pc, #44]	; (8001bb0 <_sbrk+0x30>)
 8001b82:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <_sbrk+0x34>)
{
 8001b84:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b86:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b88:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <_sbrk+0x38>)
{
 8001b8a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001b8c:	6810      	ldr	r0, [r2, #0]
 8001b8e:	2800      	cmp	r0, #0
 8001b90:	d101      	bne.n	8001b96 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8001b92:	480a      	ldr	r0, [pc, #40]	; (8001bbc <_sbrk+0x3c>)
 8001b94:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b96:	6810      	ldr	r0, [r2, #0]
 8001b98:	18c3      	adds	r3, r0, r3
 8001b9a:	428b      	cmp	r3, r1
 8001b9c:	d906      	bls.n	8001bac <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8001b9e:	f004 fad3 	bl	8006148 <__errno>
 8001ba2:	230c      	movs	r3, #12
 8001ba4:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001ba6:	2001      	movs	r0, #1
 8001ba8:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001baa:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001bac:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001bae:	e7fc      	b.n	8001baa <_sbrk+0x2a>
 8001bb0:	00000325 	.word	0x00000325
 8001bb4:	20001800 	.word	0x20001800
 8001bb8:	20000244 	.word	0x20000244
 8001bbc:	200012d8 	.word	0x200012d8

08001bc0 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001bc0:	4770      	bx	lr
	...

08001bc4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001bc4:	480d      	ldr	r0, [pc, #52]	; (8001bfc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001bc6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001bc8:	480d      	ldr	r0, [pc, #52]	; (8001c00 <LoopForever+0x6>)
  ldr r1, =_edata
 8001bca:	490e      	ldr	r1, [pc, #56]	; (8001c04 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001bcc:	4a0e      	ldr	r2, [pc, #56]	; (8001c08 <LoopForever+0xe>)
  movs r3, #0
 8001bce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bd0:	e002      	b.n	8001bd8 <LoopCopyDataInit>

08001bd2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bd2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bd4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bd6:	3304      	adds	r3, #4

08001bd8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bd8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bda:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bdc:	d3f9      	bcc.n	8001bd2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bde:	4a0b      	ldr	r2, [pc, #44]	; (8001c0c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001be0:	4c0b      	ldr	r4, [pc, #44]	; (8001c10 <LoopForever+0x16>)
  movs r3, #0
 8001be2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001be4:	e001      	b.n	8001bea <LoopFillZerobss>

08001be6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001be6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001be8:	3204      	adds	r2, #4

08001bea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bec:	d3fb      	bcc.n	8001be6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001bee:	f7ff ffe7 	bl	8001bc0 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001bf2:	f004 faaf 	bl	8006154 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bf6:	f7fe fff7 	bl	8000be8 <main>

08001bfa <LoopForever>:

LoopForever:
    b LoopForever
 8001bfa:	e7fe      	b.n	8001bfa <LoopForever>
  ldr   r0, =_estack
 8001bfc:	20001800 	.word	0x20001800
  ldr r0, =_sdata
 8001c00:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c04:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 8001c08:	0800708c 	.word	0x0800708c
  ldr r2, =_sbss
 8001c0c:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8001c10:	200012d8 	.word	0x200012d8

08001c14 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001c14:	e7fe      	b.n	8001c14 <ADC1_IRQHandler>
	...

08001c18 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	2310      	movs	r3, #16
 8001c1a:	4a06      	ldr	r2, [pc, #24]	; (8001c34 <HAL_Init+0x1c>)
{
 8001c1c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c1e:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001c20:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c22:	430b      	orrs	r3, r1
 8001c24:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c26:	f7ff ff4f 	bl	8001ac8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c2a:	f7ff fe8d 	bl	8001948 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001c2e:	2000      	movs	r0, #0
 8001c30:	bd10      	pop	{r4, pc}
 8001c32:	46c0      	nop			; (mov r8, r8)
 8001c34:	40022000 	.word	0x40022000

08001c38 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001c38:	4a03      	ldr	r2, [pc, #12]	; (8001c48 <HAL_IncTick+0x10>)
 8001c3a:	4b04      	ldr	r3, [pc, #16]	; (8001c4c <HAL_IncTick+0x14>)
 8001c3c:	6811      	ldr	r1, [r2, #0]
 8001c3e:	781b      	ldrb	r3, [r3, #0]
 8001c40:	185b      	adds	r3, r3, r1
 8001c42:	6013      	str	r3, [r2, #0]
}
 8001c44:	4770      	bx	lr
 8001c46:	46c0      	nop			; (mov r8, r8)
 8001c48:	200008ec 	.word	0x200008ec
 8001c4c:	20000050 	.word	0x20000050

08001c50 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001c50:	4b01      	ldr	r3, [pc, #4]	; (8001c58 <HAL_GetTick+0x8>)
 8001c52:	6818      	ldr	r0, [r3, #0]
}
 8001c54:	4770      	bx	lr
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	200008ec 	.word	0x200008ec

08001c5c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001c5c:	b570      	push	{r4, r5, r6, lr}
 8001c5e:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001c60:	f7ff fff6 	bl	8001c50 <HAL_GetTick>
 8001c64:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001c66:	1c63      	adds	r3, r4, #1
 8001c68:	d002      	beq.n	8001c70 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001c6a:	4b04      	ldr	r3, [pc, #16]	; (8001c7c <HAL_Delay+0x20>)
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001c70:	f7ff ffee 	bl	8001c50 <HAL_GetTick>
 8001c74:	1b40      	subs	r0, r0, r5
 8001c76:	42a0      	cmp	r0, r4
 8001c78:	d3fa      	bcc.n	8001c70 <HAL_Delay+0x14>
  {
  }
}
 8001c7a:	bd70      	pop	{r4, r5, r6, pc}
 8001c7c:	20000050 	.word	0x20000050

08001c80 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001c82:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8001c84:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001c86:	2c00      	cmp	r4, #0
 8001c88:	d100      	bne.n	8001c8c <HAL_ADC_Init+0xc>
 8001c8a:	e080      	b.n	8001d8e <HAL_ADC_Init+0x10e>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001c8c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d106      	bne.n	8001ca0 <HAL_ADC_Init+0x20>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001c92:	0022      	movs	r2, r4
 8001c94:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8001c96:	63e3      	str	r3, [r4, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001c98:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001c9a:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001c9c:	f7ff fe72 	bl	8001984 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8001ca0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001ca2:	06db      	lsls	r3, r3, #27
 8001ca4:	d500      	bpl.n	8001ca8 <HAL_ADC_Init+0x28>
 8001ca6:	e087      	b.n	8001db8 <HAL_ADC_Init+0x138>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001ca8:	6823      	ldr	r3, [r4, #0]
 8001caa:	2204      	movs	r2, #4
 8001cac:	6899      	ldr	r1, [r3, #8]
 8001cae:	0008      	movs	r0, r1
 8001cb0:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8001cb2:	4211      	tst	r1, r2
 8001cb4:	d000      	beq.n	8001cb8 <HAL_ADC_Init+0x38>
 8001cb6:	e07f      	b.n	8001db8 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001cb8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8001cba:	4942      	ldr	r1, [pc, #264]	; (8001dc4 <HAL_ADC_Init+0x144>)
 8001cbc:	4011      	ands	r1, r2
 8001cbe:	2202      	movs	r2, #2
 8001cc0:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001cc2:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8001cc4:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8001cc6:	689a      	ldr	r2, [r3, #8]
 8001cc8:	400a      	ands	r2, r1
 8001cca:	2a01      	cmp	r2, #1
 8001ccc:	d105      	bne.n	8001cda <HAL_ADC_Init+0x5a>
 8001cce:	6819      	ldr	r1, [r3, #0]
 8001cd0:	4211      	tst	r1, r2
 8001cd2:	d10e      	bne.n	8001cf2 <HAL_ADC_Init+0x72>
 8001cd4:	68da      	ldr	r2, [r3, #12]
 8001cd6:	0412      	lsls	r2, r2, #16
 8001cd8:	d40b      	bmi.n	8001cf2 <HAL_ADC_Init+0x72>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001cda:	2118      	movs	r1, #24
 8001cdc:	68da      	ldr	r2, [r3, #12]
 8001cde:	438a      	bics	r2, r1
 8001ce0:	68a1      	ldr	r1, [r4, #8]
 8001ce2:	430a      	orrs	r2, r1
 8001ce4:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8001ce6:	6919      	ldr	r1, [r3, #16]
 8001ce8:	6862      	ldr	r2, [r4, #4]
 8001cea:	0089      	lsls	r1, r1, #2
 8001cec:	0889      	lsrs	r1, r1, #2
 8001cee:	4311      	orrs	r1, r2
 8001cf0:	6119      	str	r1, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	4934      	ldr	r1, [pc, #208]	; (8001dc8 <HAL_ADC_Init+0x148>)
 8001cf6:	400a      	ands	r2, r1
 8001cf8:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cfa:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001cfc:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001cfe:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8001d00:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001d02:	4315      	orrs	r5, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d04:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d06:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8001d08:	3a01      	subs	r2, #1
 8001d0a:	1e56      	subs	r6, r2, #1
 8001d0c:	41b2      	sbcs	r2, r6
 8001d0e:	0316      	lsls	r6, r2, #12
 8001d10:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8001d12:	034f      	lsls	r7, r1, #13
 8001d14:	4315      	orrs	r5, r2
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d16:	6922      	ldr	r2, [r4, #16]
 8001d18:	432f      	orrs	r7, r5
 8001d1a:	2a02      	cmp	r2, #2
 8001d1c:	d100      	bne.n	8001d20 <HAL_ADC_Init+0xa0>
 8001d1e:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8001d20:	1d62      	adds	r2, r4, #5
 8001d22:	7fd2      	ldrb	r2, [r2, #31]
 8001d24:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8001d26:	433a      	orrs	r2, r7
 8001d28:	4332      	orrs	r2, r6
 8001d2a:	4302      	orrs	r2, r0
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001d2c:	7ee0      	ldrb	r0, [r4, #27]
 8001d2e:	2801      	cmp	r0, #1
 8001d30:	d104      	bne.n	8001d3c <HAL_ADC_Init+0xbc>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8001d32:	2900      	cmp	r1, #0
 8001d34:	d12c      	bne.n	8001d90 <HAL_ADC_Init+0x110>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001d36:	2180      	movs	r1, #128	; 0x80
 8001d38:	0249      	lsls	r1, r1, #9
 8001d3a:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001d3c:	20c2      	movs	r0, #194	; 0xc2
 8001d3e:	69e1      	ldr	r1, [r4, #28]
 8001d40:	30ff      	adds	r0, #255	; 0xff
 8001d42:	4281      	cmp	r1, r0
 8001d44:	d002      	beq.n	8001d4c <HAL_ADC_Init+0xcc>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 8001d46:	6a20      	ldr	r0, [r4, #32]
 8001d48:	4301      	orrs	r1, r0
 8001d4a:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d4c:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001d4e:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d50:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 8001d52:	4311      	orrs	r1, r2
 8001d54:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001d56:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8001d58:	4281      	cmp	r1, r0
 8001d5a:	d002      	beq.n	8001d62 <HAL_ADC_Init+0xe2>
 8001d5c:	1e48      	subs	r0, r1, #1
 8001d5e:	2806      	cmp	r0, #6
 8001d60:	d807      	bhi.n	8001d72 <HAL_ADC_Init+0xf2>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d62:	2507      	movs	r5, #7
 8001d64:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001d66:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001d68:	43a8      	bics	r0, r5
 8001d6a:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 8001d6c:	6958      	ldr	r0, [r3, #20]
 8001d6e:	4301      	orrs	r1, r0
 8001d70:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 8001d72:	68db      	ldr	r3, [r3, #12]
 8001d74:	4915      	ldr	r1, [pc, #84]	; (8001dcc <HAL_ADC_Init+0x14c>)
 8001d76:	400b      	ands	r3, r1
 8001d78:	4293      	cmp	r3, r2
 8001d7a:	d111      	bne.n	8001da0 <HAL_ADC_Init+0x120>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d7c:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001d7e:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 8001d80:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 8001d82:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001d84:	4393      	bics	r3, r2
 8001d86:	001a      	movs	r2, r3
 8001d88:	2301      	movs	r3, #1
 8001d8a:	4313      	orrs	r3, r2
 8001d8c:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001d8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d90:	2120      	movs	r1, #32
 8001d92:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001d94:	4329      	orrs	r1, r5
 8001d96:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d98:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001d9a:	4308      	orrs	r0, r1
 8001d9c:	63e0      	str	r0, [r4, #60]	; 0x3c
 8001d9e:	e7cd      	b.n	8001d3c <HAL_ADC_Init+0xbc>
      ADC_STATE_CLR_SET(hadc->State,
 8001da0:	2212      	movs	r2, #18
 8001da2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001da4:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8001da6:	4393      	bics	r3, r2
 8001da8:	001a      	movs	r2, r3
 8001daa:	2310      	movs	r3, #16
 8001dac:	4313      	orrs	r3, r2
 8001dae:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001db0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001db2:	4303      	orrs	r3, r0
 8001db4:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8001db6:	e7ea      	b.n	8001d8e <HAL_ADC_Init+0x10e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001db8:	2310      	movs	r3, #16
 8001dba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001dbc:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dbe:	4313      	orrs	r3, r2
 8001dc0:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001dc2:	e7e4      	b.n	8001d8e <HAL_ADC_Init+0x10e>
 8001dc4:	fffffefd 	.word	0xfffffefd
 8001dc8:	fffe0219 	.word	0xfffe0219
 8001dcc:	833fffe7 	.word	0x833fffe7

08001dd0 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001dd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8001dd2:	2200      	movs	r2, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001dd4:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8001dd6:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8001dd8:	3434      	adds	r4, #52	; 0x34
 8001dda:	7822      	ldrb	r2, [r4, #0]
{
 8001ddc:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001dde:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8001de0:	2002      	movs	r0, #2
 8001de2:	2a01      	cmp	r2, #1
 8001de4:	d02a      	beq.n	8001e3c <HAL_ADC_ConfigChannel+0x6c>
 8001de6:	3801      	subs	r0, #1
 8001de8:	7020      	strb	r0, [r4, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	6896      	ldr	r6, [r2, #8]
 8001dee:	0776      	lsls	r6, r6, #29
 8001df0:	d45f      	bmi.n	8001eb2 <HAL_ADC_ConfigChannel+0xe2>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001df2:	680b      	ldr	r3, [r1, #0]
 8001df4:	4f31      	ldr	r7, [pc, #196]	; (8001ebc <HAL_ADC_ConfigChannel+0xec>)
 8001df6:	001e      	movs	r6, r3
 8001df8:	46bc      	mov	ip, r7
 8001dfa:	684f      	ldr	r7, [r1, #4]
 8001dfc:	4098      	lsls	r0, r3
 8001dfe:	3e10      	subs	r6, #16
 8001e00:	4567      	cmp	r7, ip
 8001e02:	d03f      	beq.n	8001e84 <HAL_ADC_ConfigChannel+0xb4>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e04:	6a97      	ldr	r7, [r2, #40]	; 0x28
 8001e06:	4338      	orrs	r0, r7
 8001e08:	6290      	str	r0, [r2, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 8001e0a:	2080      	movs	r0, #128	; 0x80
 8001e0c:	0540      	lsls	r0, r0, #21
 8001e0e:	4285      	cmp	r5, r0
 8001e10:	d00f      	beq.n	8001e32 <HAL_ADC_ConfigChannel+0x62>
 8001e12:	3d01      	subs	r5, #1
 8001e14:	2d06      	cmp	r5, #6
 8001e16:	d90c      	bls.n	8001e32 <HAL_ADC_ConfigChannel+0x62>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8001e18:	2007      	movs	r0, #7
 8001e1a:	6955      	ldr	r5, [r2, #20]
 8001e1c:	6889      	ldr	r1, [r1, #8]
 8001e1e:	4005      	ands	r5, r0
 8001e20:	42a9      	cmp	r1, r5
 8001e22:	d006      	beq.n	8001e32 <HAL_ADC_ConfigChannel+0x62>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e24:	6955      	ldr	r5, [r2, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001e26:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8001e28:	4385      	bics	r5, r0
 8001e2a:	6155      	str	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8001e2c:	6955      	ldr	r5, [r2, #20]
 8001e2e:	4329      	orrs	r1, r5
 8001e30:	6151      	str	r1, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e32:	2e02      	cmp	r6, #2
 8001e34:	d903      	bls.n	8001e3e <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e36:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001e38:	2300      	movs	r3, #0
 8001e3a:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 8001e3c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e3e:	4820      	ldr	r0, [pc, #128]	; (8001ec0 <HAL_ADC_ConfigChannel+0xf0>)
 8001e40:	6805      	ldr	r5, [r0, #0]
 8001e42:	2b10      	cmp	r3, #16
 8001e44:	d01b      	beq.n	8001e7e <HAL_ADC_ConfigChannel+0xae>
 8001e46:	0019      	movs	r1, r3
 8001e48:	3911      	subs	r1, #17
 8001e4a:	424a      	negs	r2, r1
 8001e4c:	4151      	adcs	r1, r2
 8001e4e:	424a      	negs	r2, r1
 8001e50:	491c      	ldr	r1, [pc, #112]	; (8001ec4 <HAL_ADC_ConfigChannel+0xf4>)
 8001e52:	400a      	ands	r2, r1
 8001e54:	2180      	movs	r1, #128	; 0x80
 8001e56:	0449      	lsls	r1, r1, #17
 8001e58:	1852      	adds	r2, r2, r1
 8001e5a:	432a      	orrs	r2, r5
 8001e5c:	6002      	str	r2, [r0, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001e5e:	2b10      	cmp	r3, #16
 8001e60:	d1e9      	bne.n	8001e36 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001e62:	4b19      	ldr	r3, [pc, #100]	; (8001ec8 <HAL_ADC_ConfigChannel+0xf8>)
 8001e64:	4919      	ldr	r1, [pc, #100]	; (8001ecc <HAL_ADC_ConfigChannel+0xfc>)
 8001e66:	6818      	ldr	r0, [r3, #0]
 8001e68:	f7fe f988 	bl	800017c <__udivsi3>
 8001e6c:	230a      	movs	r3, #10
 8001e6e:	4343      	muls	r3, r0
            wait_loop_index--;
 8001e70:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 8001e72:	9b01      	ldr	r3, [sp, #4]
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d0de      	beq.n	8001e36 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 8001e78:	9b01      	ldr	r3, [sp, #4]
 8001e7a:	3b01      	subs	r3, #1
 8001e7c:	e7f8      	b.n	8001e70 <HAL_ADC_ConfigChannel+0xa0>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e7e:	2280      	movs	r2, #128	; 0x80
 8001e80:	0412      	lsls	r2, r2, #16
 8001e82:	e7ea      	b.n	8001e5a <HAL_ADC_ConfigChannel+0x8a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 8001e84:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8001e86:	4381      	bics	r1, r0
 8001e88:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001e8a:	2e02      	cmp	r6, #2
 8001e8c:	d8d3      	bhi.n	8001e36 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 8001e8e:	490c      	ldr	r1, [pc, #48]	; (8001ec0 <HAL_ADC_ConfigChannel+0xf0>)
 8001e90:	6808      	ldr	r0, [r1, #0]
 8001e92:	2b10      	cmp	r3, #16
 8001e94:	d00b      	beq.n	8001eae <HAL_ADC_ConfigChannel+0xde>
 8001e96:	3b11      	subs	r3, #17
 8001e98:	425a      	negs	r2, r3
 8001e9a:	415a      	adcs	r2, r3
 8001e9c:	4253      	negs	r3, r2
 8001e9e:	22c0      	movs	r2, #192	; 0xc0
 8001ea0:	0412      	lsls	r2, r2, #16
 8001ea2:	4013      	ands	r3, r2
 8001ea4:	4a0a      	ldr	r2, [pc, #40]	; (8001ed0 <HAL_ADC_ConfigChannel+0x100>)
 8001ea6:	189b      	adds	r3, r3, r2
 8001ea8:	4003      	ands	r3, r0
 8001eaa:	600b      	str	r3, [r1, #0]
 8001eac:	e7c3      	b.n	8001e36 <HAL_ADC_ConfigChannel+0x66>
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <HAL_ADC_ConfigChannel+0x104>)
 8001eb0:	e7fa      	b.n	8001ea8 <HAL_ADC_ConfigChannel+0xd8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8001eb6:	430a      	orrs	r2, r1
 8001eb8:	639a      	str	r2, [r3, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8001eba:	e7bd      	b.n	8001e38 <HAL_ADC_ConfigChannel+0x68>
 8001ebc:	00001001 	.word	0x00001001
 8001ec0:	40012708 	.word	0x40012708
 8001ec4:	ff400000 	.word	0xff400000
 8001ec8:	20000004 	.word	0x20000004
 8001ecc:	000f4240 	.word	0x000f4240
 8001ed0:	feffffff 	.word	0xfeffffff
 8001ed4:	ff7fffff 	.word	0xff7fffff

08001ed8 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ed8:	b530      	push	{r4, r5, lr}
 8001eda:	25ff      	movs	r5, #255	; 0xff
 8001edc:	2403      	movs	r4, #3
 8001ede:	002a      	movs	r2, r5
 8001ee0:	4004      	ands	r4, r0
 8001ee2:	00e4      	lsls	r4, r4, #3
 8001ee4:	40a2      	lsls	r2, r4
 8001ee6:	0189      	lsls	r1, r1, #6
 8001ee8:	4029      	ands	r1, r5
 8001eea:	43d2      	mvns	r2, r2
 8001eec:	40a1      	lsls	r1, r4
 8001eee:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8001ef0:	2800      	cmp	r0, #0
 8001ef2:	db0a      	blt.n	8001f0a <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ef4:	24c0      	movs	r4, #192	; 0xc0
 8001ef6:	4b0b      	ldr	r3, [pc, #44]	; (8001f24 <HAL_NVIC_SetPriority+0x4c>)
 8001ef8:	0880      	lsrs	r0, r0, #2
 8001efa:	0080      	lsls	r0, r0, #2
 8001efc:	18c0      	adds	r0, r0, r3
 8001efe:	00a4      	lsls	r4, r4, #2
 8001f00:	5903      	ldr	r3, [r0, r4]
 8001f02:	401a      	ands	r2, r3
 8001f04:	4311      	orrs	r1, r2
 8001f06:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8001f08:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001f0a:	200f      	movs	r0, #15
 8001f0c:	4003      	ands	r3, r0
 8001f0e:	3b08      	subs	r3, #8
 8001f10:	4805      	ldr	r0, [pc, #20]	; (8001f28 <HAL_NVIC_SetPriority+0x50>)
 8001f12:	089b      	lsrs	r3, r3, #2
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	181b      	adds	r3, r3, r0
 8001f18:	69d8      	ldr	r0, [r3, #28]
 8001f1a:	4002      	ands	r2, r0
 8001f1c:	4311      	orrs	r1, r2
 8001f1e:	61d9      	str	r1, [r3, #28]
 8001f20:	e7f2      	b.n	8001f08 <HAL_NVIC_SetPriority+0x30>
 8001f22:	46c0      	nop			; (mov r8, r8)
 8001f24:	e000e100 	.word	0xe000e100
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f2c:	2800      	cmp	r0, #0
 8001f2e:	db05      	blt.n	8001f3c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f30:	231f      	movs	r3, #31
 8001f32:	4018      	ands	r0, r3
 8001f34:	3b1e      	subs	r3, #30
 8001f36:	4083      	lsls	r3, r0
 8001f38:	4a01      	ldr	r2, [pc, #4]	; (8001f40 <HAL_NVIC_EnableIRQ+0x14>)
 8001f3a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001f3c:	4770      	bx	lr
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	e000e100 	.word	0xe000e100

08001f44 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001f44:	2800      	cmp	r0, #0
 8001f46:	db09      	blt.n	8001f5c <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f48:	231f      	movs	r3, #31
 8001f4a:	4018      	ands	r0, r3
 8001f4c:	3b1e      	subs	r3, #30
 8001f4e:	4083      	lsls	r3, r0
 8001f50:	4a03      	ldr	r2, [pc, #12]	; (8001f60 <HAL_NVIC_DisableIRQ+0x1c>)
 8001f52:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001f54:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8001f58:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8001f5c:	4770      	bx	lr
 8001f5e:	46c0      	nop			; (mov r8, r8)
 8001f60:	e000e104 	.word	0xe000e104

08001f64 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f64:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f66:	1c84      	adds	r4, r0, #2
 8001f68:	7fe3      	ldrb	r3, [r4, #31]
 8001f6a:	2b02      	cmp	r3, #2
 8001f6c:	d004      	beq.n	8001f78 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f6e:	2304      	movs	r3, #4
 8001f70:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 8001f72:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 8001f74:	0018      	movs	r0, r3
 8001f76:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f78:	210e      	movs	r1, #14
 8001f7a:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f7c:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 8001f7e:	681a      	ldr	r2, [r3, #0]
 8001f80:	438a      	bics	r2, r1
 8001f82:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 8001f84:	2201      	movs	r2, #1
 8001f86:	6819      	ldr	r1, [r3, #0]
 8001f88:	4391      	bics	r1, r2
 8001f8a:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 8001f8c:	0011      	movs	r1, r2
 8001f8e:	40a9      	lsls	r1, r5
 8001f90:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 8001f92:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 8001f94:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 8001f96:	2400      	movs	r4, #0
 8001f98:	1883      	adds	r3, r0, r2
 8001f9a:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 8001f9c:	6b42      	ldr	r2, [r0, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 8001f9e:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8001fa0:	42a2      	cmp	r2, r4
 8001fa2:	d0e7      	beq.n	8001f74 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8001fa4:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8001fa6:	0023      	movs	r3, r4
 8001fa8:	e7e4      	b.n	8001f74 <HAL_DMA_Abort_IT+0x10>
	...

08001fac <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001fac:	4b0c      	ldr	r3, [pc, #48]	; (8001fe0 <FLASH_SetErrorCode+0x34>)
 8001fae:	2110      	movs	r1, #16
 8001fb0:	68d8      	ldr	r0, [r3, #12]
{
 8001fb2:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001fb4:	0002      	movs	r2, r0
 8001fb6:	400a      	ands	r2, r1
 8001fb8:	4208      	tst	r0, r1
 8001fba:	d005      	beq.n	8001fc8 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001fbc:	2202      	movs	r2, #2
 8001fbe:	4809      	ldr	r0, [pc, #36]	; (8001fe4 <FLASH_SetErrorCode+0x38>)
 8001fc0:	69c4      	ldr	r4, [r0, #28]
 8001fc2:	4322      	orrs	r2, r4
 8001fc4:	61c2      	str	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8001fc6:	000a      	movs	r2, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8001fc8:	2004      	movs	r0, #4
 8001fca:	68d9      	ldr	r1, [r3, #12]
 8001fcc:	4201      	tst	r1, r0
 8001fce:	d005      	beq.n	8001fdc <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001fd0:	2101      	movs	r1, #1
 8001fd2:	4c04      	ldr	r4, [pc, #16]	; (8001fe4 <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 8001fd4:	4302      	orrs	r2, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8001fd6:	69e5      	ldr	r5, [r4, #28]
 8001fd8:	4329      	orrs	r1, r5
 8001fda:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001fdc:	60da      	str	r2, [r3, #12]
}  
 8001fde:	bd30      	pop	{r4, r5, pc}
 8001fe0:	40022000 	.word	0x40022000
 8001fe4:	200008f0 	.word	0x200008f0

08001fe8 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_FLASH_Unlock+0x1c>)
  HAL_StatusTypeDef status = HAL_OK;
 8001fea:	2000      	movs	r0, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001fec:	691a      	ldr	r2, [r3, #16]
 8001fee:	0612      	lsls	r2, r2, #24
 8001ff0:	d506      	bpl.n	8002000 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8001ff2:	4a05      	ldr	r2, [pc, #20]	; (8002008 <HAL_FLASH_Unlock+0x20>)
 8001ff4:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001ff6:	4a05      	ldr	r2, [pc, #20]	; (800200c <HAL_FLASH_Unlock+0x24>)
 8001ff8:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8001ffa:	6918      	ldr	r0, [r3, #16]
 8001ffc:	0600      	lsls	r0, r0, #24
  HAL_StatusTypeDef status = HAL_OK;
 8001ffe:	0fc0      	lsrs	r0, r0, #31
}
 8002000:	4770      	bx	lr
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	40022000 	.word	0x40022000
 8002008:	45670123 	.word	0x45670123
 800200c:	cdef89ab 	.word	0xcdef89ab

08002010 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002010:	2380      	movs	r3, #128	; 0x80
 8002012:	4a03      	ldr	r2, [pc, #12]	; (8002020 <HAL_FLASH_Lock+0x10>)
}
 8002014:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002016:	6911      	ldr	r1, [r2, #16]
 8002018:	430b      	orrs	r3, r1
 800201a:	6113      	str	r3, [r2, #16]
}
 800201c:	4770      	bx	lr
 800201e:	46c0      	nop			; (mov r8, r8)
 8002020:	40022000 	.word	0x40022000

08002024 <FLASH_WaitForLastOperation>:
{
 8002024:	b570      	push	{r4, r5, r6, lr}
 8002026:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002028:	f7ff fe12 	bl	8001c50 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800202c:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 800202e:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002030:	4b11      	ldr	r3, [pc, #68]	; (8002078 <FLASH_WaitForLastOperation+0x54>)
 8002032:	001a      	movs	r2, r3
 8002034:	68d9      	ldr	r1, [r3, #12]
 8002036:	4231      	tst	r1, r6
 8002038:	d111      	bne.n	800205e <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800203a:	2120      	movs	r1, #32
 800203c:	68d8      	ldr	r0, [r3, #12]
 800203e:	4208      	tst	r0, r1
 8002040:	d000      	beq.n	8002044 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8002042:	60d9      	str	r1, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002044:	68d1      	ldr	r1, [r2, #12]
 8002046:	2310      	movs	r3, #16
 8002048:	0008      	movs	r0, r1
 800204a:	4018      	ands	r0, r3
 800204c:	4219      	tst	r1, r3
 800204e:	d102      	bne.n	8002056 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002050:	68d3      	ldr	r3, [r2, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8002052:	075b      	lsls	r3, r3, #29
 8002054:	d508      	bpl.n	8002068 <FLASH_WaitForLastOperation+0x44>
    FLASH_SetErrorCode();
 8002056:	f7ff ffa9 	bl	8001fac <FLASH_SetErrorCode>
    return HAL_ERROR;
 800205a:	2001      	movs	r0, #1
 800205c:	e004      	b.n	8002068 <FLASH_WaitForLastOperation+0x44>
    if (Timeout != HAL_MAX_DELAY)
 800205e:	1c61      	adds	r1, r4, #1
 8002060:	d0e8      	beq.n	8002034 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8002062:	2c00      	cmp	r4, #0
 8002064:	d101      	bne.n	800206a <FLASH_WaitForLastOperation+0x46>
        return HAL_TIMEOUT;
 8002066:	2003      	movs	r0, #3
}
 8002068:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800206a:	f7ff fdf1 	bl	8001c50 <HAL_GetTick>
 800206e:	1b40      	subs	r0, r0, r5
 8002070:	42a0      	cmp	r0, r4
 8002072:	d9dd      	bls.n	8002030 <FLASH_WaitForLastOperation+0xc>
 8002074:	e7f7      	b.n	8002066 <FLASH_WaitForLastOperation+0x42>
 8002076:	46c0      	nop			; (mov r8, r8)
 8002078:	40022000 	.word	0x40022000

0800207c <HAL_FLASH_Program>:
{
 800207c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800207e:	b085      	sub	sp, #20
 8002080:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(&pFlash);
 8002082:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <HAL_FLASH_Program+0x78>)
{
 8002084:	9101      	str	r1, [sp, #4]
 8002086:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(&pFlash);
 8002088:	7e1a      	ldrb	r2, [r3, #24]
{
 800208a:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 800208c:	2002      	movs	r0, #2
 800208e:	2a01      	cmp	r2, #1
 8002090:	d02e      	beq.n	80020f0 <HAL_FLASH_Program+0x74>
 8002092:	2201      	movs	r2, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002094:	4818      	ldr	r0, [pc, #96]	; (80020f8 <HAL_FLASH_Program+0x7c>)
  __HAL_LOCK(&pFlash);
 8002096:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002098:	f7ff ffc4 	bl	8002024 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 800209c:	2800      	cmp	r0, #0
 800209e:	d124      	bne.n	80020ea <HAL_FLASH_Program+0x6e>
      nbiterations = 1U;
 80020a0:	0026      	movs	r6, r4
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80020a2:	2c01      	cmp	r4, #1
 80020a4:	d002      	beq.n	80020ac <HAL_FLASH_Program+0x30>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80020a6:	2c02      	cmp	r4, #2
 80020a8:	d000      	beq.n	80020ac <HAL_FLASH_Program+0x30>
      nbiterations = 4U;
 80020aa:	2604      	movs	r6, #4
 80020ac:	2400      	movs	r4, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80020ae:	9802      	ldr	r0, [sp, #8]
 80020b0:	9903      	ldr	r1, [sp, #12]
 80020b2:	0122      	lsls	r2, r4, #4
 80020b4:	f7fe f8ee 	bl	8000294 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020b8:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80020ba:	2701      	movs	r7, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020bc:	4b0d      	ldr	r3, [pc, #52]	; (80020f4 <HAL_FLASH_Program+0x78>)
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80020be:	4d0f      	ldr	r5, [pc, #60]	; (80020fc <HAL_FLASH_Program+0x80>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80020c0:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 80020c2:	692b      	ldr	r3, [r5, #16]
 80020c4:	9a01      	ldr	r2, [sp, #4]
 80020c6:	433b      	orrs	r3, r7
 80020c8:	612b      	str	r3, [r5, #16]
 80020ca:	0063      	lsls	r3, r4, #1
 80020cc:	189b      	adds	r3, r3, r2
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 80020ce:	b280      	uxth	r0, r0
  *(__IO uint16_t*)Address = Data;
 80020d0:	8018      	strh	r0, [r3, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80020d2:	4809      	ldr	r0, [pc, #36]	; (80020f8 <HAL_FLASH_Program+0x7c>)
 80020d4:	f7ff ffa6 	bl	8002024 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 80020d8:	692b      	ldr	r3, [r5, #16]
 80020da:	43bb      	bics	r3, r7
 80020dc:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 80020de:	2800      	cmp	r0, #0
 80020e0:	d103      	bne.n	80020ea <HAL_FLASH_Program+0x6e>
    for (index = 0U; index < nbiterations; index++)
 80020e2:	19e4      	adds	r4, r4, r7
 80020e4:	b2e3      	uxtb	r3, r4
 80020e6:	429e      	cmp	r6, r3
 80020e8:	d8e1      	bhi.n	80020ae <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 80020ea:	2200      	movs	r2, #0
 80020ec:	4b01      	ldr	r3, [pc, #4]	; (80020f4 <HAL_FLASH_Program+0x78>)
 80020ee:	761a      	strb	r2, [r3, #24]
}
 80020f0:	b005      	add	sp, #20
 80020f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80020f4:	200008f0 	.word	0x200008f0
 80020f8:	0000c350 	.word	0x0000c350
 80020fc:	40022000 	.word	0x40022000

08002100 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002100:	2200      	movs	r2, #0
 8002102:	4b06      	ldr	r3, [pc, #24]	; (800211c <FLASH_MassErase+0x1c>)
 8002104:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002106:	4b06      	ldr	r3, [pc, #24]	; (8002120 <FLASH_MassErase+0x20>)
 8002108:	3204      	adds	r2, #4
 800210a:	6919      	ldr	r1, [r3, #16]
 800210c:	430a      	orrs	r2, r1
 800210e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002110:	2240      	movs	r2, #64	; 0x40
 8002112:	6919      	ldr	r1, [r3, #16]
 8002114:	430a      	orrs	r2, r1
 8002116:	611a      	str	r2, [r3, #16]
}
 8002118:	4770      	bx	lr
 800211a:	46c0      	nop			; (mov r8, r8)
 800211c:	200008f0 	.word	0x200008f0
 8002120:	40022000 	.word	0x40022000

08002124 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002124:	2200      	movs	r2, #0
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <FLASH_PageErase+0x1c>)
 8002128:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800212a:	4b06      	ldr	r3, [pc, #24]	; (8002144 <FLASH_PageErase+0x20>)
 800212c:	3202      	adds	r2, #2
 800212e:	6919      	ldr	r1, [r3, #16]
 8002130:	430a      	orrs	r2, r1
 8002132:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002134:	2240      	movs	r2, #64	; 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 8002136:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002138:	6919      	ldr	r1, [r3, #16]
 800213a:	430a      	orrs	r2, r1
 800213c:	611a      	str	r2, [r3, #16]
}
 800213e:	4770      	bx	lr
 8002140:	200008f0 	.word	0x200008f0
 8002144:	40022000 	.word	0x40022000

08002148 <HAL_FLASHEx_Erase>:
{
 8002148:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 800214a:	4f21      	ldr	r7, [pc, #132]	; (80021d0 <HAL_FLASHEx_Erase+0x88>)
{
 800214c:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 800214e:	7e3b      	ldrb	r3, [r7, #24]
{
 8002150:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 8002152:	2002      	movs	r0, #2
 8002154:	2b01      	cmp	r3, #1
 8002156:	d00c      	beq.n	8002172 <HAL_FLASHEx_Erase+0x2a>
 8002158:	2301      	movs	r3, #1
 800215a:	763b      	strb	r3, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800215c:	6823      	ldr	r3, [r4, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800215e:	481d      	ldr	r0, [pc, #116]	; (80021d4 <HAL_FLASHEx_Erase+0x8c>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8002160:	2b01      	cmp	r3, #1
 8002162:	d112      	bne.n	800218a <HAL_FLASHEx_Erase+0x42>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 8002164:	f7ff ff5e 	bl	8002024 <FLASH_WaitForLastOperation>
 8002168:	2800      	cmp	r0, #0
 800216a:	d003      	beq.n	8002174 <HAL_FLASHEx_Erase+0x2c>
  HAL_StatusTypeDef status = HAL_ERROR;
 800216c:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 800216e:	2300      	movs	r3, #0
 8002170:	763b      	strb	r3, [r7, #24]
}
 8002172:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 8002174:	f7ff ffc4 	bl	8002100 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8002178:	4816      	ldr	r0, [pc, #88]	; (80021d4 <HAL_FLASHEx_Erase+0x8c>)
 800217a:	f7ff ff53 	bl	8002024 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 800217e:	2104      	movs	r1, #4
 8002180:	4a15      	ldr	r2, [pc, #84]	; (80021d8 <HAL_FLASHEx_Erase+0x90>)
 8002182:	6913      	ldr	r3, [r2, #16]
 8002184:	438b      	bics	r3, r1
 8002186:	6113      	str	r3, [r2, #16]
 8002188:	e7f1      	b.n	800216e <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 800218a:	f7ff ff4b 	bl	8002024 <FLASH_WaitForLastOperation>
 800218e:	2800      	cmp	r0, #0
 8002190:	d1ec      	bne.n	800216c <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 8002192:	2301      	movs	r3, #1
 8002194:	425b      	negs	r3, r3
 8002196:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 8002198:	6865      	ldr	r5, [r4, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800219a:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 800219c:	68a3      	ldr	r3, [r4, #8]
 800219e:	6862      	ldr	r2, [r4, #4]
 80021a0:	029b      	lsls	r3, r3, #10
 80021a2:	189b      	adds	r3, r3, r2
        for(address = pEraseInit->PageAddress;
 80021a4:	42ab      	cmp	r3, r5
 80021a6:	d9e2      	bls.n	800216e <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 80021a8:	0028      	movs	r0, r5
 80021aa:	f7ff ffbb 	bl	8002124 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80021ae:	4809      	ldr	r0, [pc, #36]	; (80021d4 <HAL_FLASHEx_Erase+0x8c>)
 80021b0:	f7ff ff38 	bl	8002024 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 80021b4:	2102      	movs	r1, #2
 80021b6:	4a08      	ldr	r2, [pc, #32]	; (80021d8 <HAL_FLASHEx_Erase+0x90>)
 80021b8:	6913      	ldr	r3, [r2, #16]
 80021ba:	438b      	bics	r3, r1
 80021bc:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 80021be:	2800      	cmp	r0, #0
 80021c0:	d001      	beq.n	80021c6 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 80021c2:	6035      	str	r5, [r6, #0]
            break;
 80021c4:	e7d3      	b.n	800216e <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 80021c6:	2380      	movs	r3, #128	; 0x80
 80021c8:	00db      	lsls	r3, r3, #3
 80021ca:	18ed      	adds	r5, r5, r3
 80021cc:	e7e6      	b.n	800219c <HAL_FLASHEx_Erase+0x54>
 80021ce:	46c0      	nop			; (mov r8, r8)
 80021d0:	200008f0 	.word	0x200008f0
 80021d4:	0000c350 	.word	0x0000c350
 80021d8:	40022000 	.word	0x40022000

080021dc <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 80021dc:	2300      	movs	r3, #0
{
 80021de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80021e0:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80021e2:	680a      	ldr	r2, [r1, #0]
 80021e4:	0014      	movs	r4, r2
 80021e6:	40dc      	lsrs	r4, r3
 80021e8:	d101      	bne.n	80021ee <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 80021ea:	b007      	add	sp, #28
 80021ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80021ee:	2501      	movs	r5, #1
 80021f0:	0014      	movs	r4, r2
 80021f2:	409d      	lsls	r5, r3
 80021f4:	402c      	ands	r4, r5
 80021f6:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 80021f8:	422a      	tst	r2, r5
 80021fa:	d100      	bne.n	80021fe <HAL_GPIO_Init+0x22>
 80021fc:	e091      	b.n	8002322 <HAL_GPIO_Init+0x146>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80021fe:	684a      	ldr	r2, [r1, #4]
 8002200:	005e      	lsls	r6, r3, #1
 8002202:	4694      	mov	ip, r2
 8002204:	2203      	movs	r2, #3
 8002206:	4664      	mov	r4, ip
 8002208:	4022      	ands	r2, r4
 800220a:	2403      	movs	r4, #3
 800220c:	40b4      	lsls	r4, r6
 800220e:	43e4      	mvns	r4, r4
 8002210:	9402      	str	r4, [sp, #8]
 8002212:	1e54      	subs	r4, r2, #1
 8002214:	2c01      	cmp	r4, #1
 8002216:	d82a      	bhi.n	800226e <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8002218:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800221a:	9c02      	ldr	r4, [sp, #8]
 800221c:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800221e:	68cc      	ldr	r4, [r1, #12]
 8002220:	40b4      	lsls	r4, r6
 8002222:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8002224:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002226:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002228:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800222a:	43ac      	bics	r4, r5
 800222c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800222e:	4664      	mov	r4, ip
 8002230:	0924      	lsrs	r4, r4, #4
 8002232:	403c      	ands	r4, r7
 8002234:	409c      	lsls	r4, r3
 8002236:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002238:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800223a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800223c:	9c02      	ldr	r4, [sp, #8]
 800223e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002240:	688c      	ldr	r4, [r1, #8]
 8002242:	40b4      	lsls	r4, r6
 8002244:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 8002246:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002248:	2a02      	cmp	r2, #2
 800224a:	d112      	bne.n	8002272 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 800224c:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800224e:	2507      	movs	r5, #7
 8002250:	00a4      	lsls	r4, r4, #2
 8002252:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 8002254:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002256:	9403      	str	r4, [sp, #12]
 8002258:	240f      	movs	r4, #15
 800225a:	401d      	ands	r5, r3
 800225c:	00ad      	lsls	r5, r5, #2
 800225e:	40ac      	lsls	r4, r5
 8002260:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002262:	690c      	ldr	r4, [r1, #16]
 8002264:	40ac      	lsls	r4, r5
 8002266:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 8002268:	9c03      	ldr	r4, [sp, #12]
 800226a:	6227      	str	r7, [r4, #32]
 800226c:	e001      	b.n	8002272 <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800226e:	2a03      	cmp	r2, #3
 8002270:	d1e3      	bne.n	800223a <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 8002272:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002274:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002276:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002278:	4025      	ands	r5, r4
 800227a:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800227c:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 800227e:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002280:	24c0      	movs	r4, #192	; 0xc0
 8002282:	4662      	mov	r2, ip
 8002284:	02a4      	lsls	r4, r4, #10
 8002286:	4222      	tst	r2, r4
 8002288:	d04b      	beq.n	8002322 <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800228a:	2501      	movs	r5, #1
 800228c:	4a26      	ldr	r2, [pc, #152]	; (8002328 <HAL_GPIO_Init+0x14c>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800228e:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002290:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002292:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002294:	432c      	orrs	r4, r5
 8002296:	6194      	str	r4, [r2, #24]
 8002298:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 800229a:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800229c:	402a      	ands	r2, r5
 800229e:	9205      	str	r2, [sp, #20]
 80022a0:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 80022a2:	4a22      	ldr	r2, [pc, #136]	; (800232c <HAL_GPIO_Init+0x150>)
 80022a4:	00a4      	lsls	r4, r4, #2
 80022a6:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022a8:	220f      	movs	r2, #15
 80022aa:	3502      	adds	r5, #2
 80022ac:	401d      	ands	r5, r3
 80022ae:	00ad      	lsls	r5, r5, #2
 80022b0:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 80022b2:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80022b4:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022b6:	2200      	movs	r2, #0
 80022b8:	42b8      	cmp	r0, r7
 80022ba:	d008      	beq.n	80022ce <HAL_GPIO_Init+0xf2>
 80022bc:	4f1c      	ldr	r7, [pc, #112]	; (8002330 <HAL_GPIO_Init+0x154>)
 80022be:	3201      	adds	r2, #1
 80022c0:	42b8      	cmp	r0, r7
 80022c2:	d004      	beq.n	80022ce <HAL_GPIO_Init+0xf2>
 80022c4:	4f1b      	ldr	r7, [pc, #108]	; (8002334 <HAL_GPIO_Init+0x158>)
 80022c6:	3201      	adds	r2, #1
 80022c8:	42b8      	cmp	r0, r7
 80022ca:	d000      	beq.n	80022ce <HAL_GPIO_Init+0xf2>
 80022cc:	3203      	adds	r2, #3
 80022ce:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022d0:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80022d2:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 80022d4:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 80022d6:	4a18      	ldr	r2, [pc, #96]	; (8002338 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 80022d8:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 80022da:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 80022dc:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 80022de:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 80022e0:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80022e2:	03ff      	lsls	r7, r7, #15
 80022e4:	d401      	bmi.n	80022ea <HAL_GPIO_Init+0x10e>
        temp &= ~(iocurrent);
 80022e6:	0035      	movs	r5, r6
 80022e8:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022ea:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 80022ec:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 80022ee:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 80022f0:	9d01      	ldr	r5, [sp, #4]
 80022f2:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80022f4:	03bf      	lsls	r7, r7, #14
 80022f6:	d401      	bmi.n	80022fc <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 80022f8:	0035      	movs	r5, r6
 80022fa:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80022fc:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 80022fe:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002300:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8002302:	9d01      	ldr	r5, [sp, #4]
 8002304:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002306:	02ff      	lsls	r7, r7, #11
 8002308:	d401      	bmi.n	800230e <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 800230a:	0035      	movs	r5, r6
 800230c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800230e:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8002310:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002312:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8002314:	9e01      	ldr	r6, [sp, #4]
 8002316:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002318:	02bf      	lsls	r7, r7, #10
 800231a:	d401      	bmi.n	8002320 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 800231c:	4025      	ands	r5, r4
 800231e:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8002320:	60d6      	str	r6, [r2, #12]
    position++;
 8002322:	3301      	adds	r3, #1
 8002324:	e75d      	b.n	80021e2 <HAL_GPIO_Init+0x6>
 8002326:	46c0      	nop			; (mov r8, r8)
 8002328:	40021000 	.word	0x40021000
 800232c:	40010000 	.word	0x40010000
 8002330:	48000400 	.word	0x48000400
 8002334:	48000800 	.word	0x48000800
 8002338:	40010400 	.word	0x40010400

0800233c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800233c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 800233e:	2300      	movs	r3, #0
{
 8002340:	000f      	movs	r7, r1
 8002342:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 8002344:	003a      	movs	r2, r7
 8002346:	40da      	lsrs	r2, r3
 8002348:	d101      	bne.n	800234e <HAL_GPIO_DeInit+0x12>

    }

    position++;
  }
}
 800234a:	b005      	add	sp, #20
 800234c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 800234e:	2201      	movs	r2, #1
 8002350:	409a      	lsls	r2, r3
 8002352:	0014      	movs	r4, r2
 8002354:	9201      	str	r2, [sp, #4]
 8002356:	403c      	ands	r4, r7
    if (iocurrent != 0x00u)
 8002358:	4217      	tst	r7, r2
 800235a:	d04c      	beq.n	80023f6 <HAL_GPIO_DeInit+0xba>
      tmp = SYSCFG->EXTICR[position >> 2u];
 800235c:	4927      	ldr	r1, [pc, #156]	; (80023fc <HAL_GPIO_DeInit+0xc0>)
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 800235e:	2503      	movs	r5, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 8002360:	089a      	lsrs	r2, r3, #2
 8002362:	0092      	lsls	r2, r2, #2
 8002364:	1852      	adds	r2, r2, r1
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002366:	210f      	movs	r1, #15
 8002368:	401d      	ands	r5, r3
 800236a:	00ad      	lsls	r5, r5, #2
 800236c:	40a9      	lsls	r1, r5
      tmp = SYSCFG->EXTICR[position >> 2u];
 800236e:	6896      	ldr	r6, [r2, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 8002370:	9102      	str	r1, [sp, #8]
 8002372:	400e      	ands	r6, r1
 8002374:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 8002376:	2690      	movs	r6, #144	; 0x90
 8002378:	2100      	movs	r1, #0
 800237a:	05f6      	lsls	r6, r6, #23
 800237c:	42b0      	cmp	r0, r6
 800237e:	d00a      	beq.n	8002396 <HAL_GPIO_DeInit+0x5a>
 8002380:	491f      	ldr	r1, [pc, #124]	; (8002400 <HAL_GPIO_DeInit+0xc4>)
 8002382:	468c      	mov	ip, r1
 8002384:	2101      	movs	r1, #1
 8002386:	4560      	cmp	r0, ip
 8002388:	d005      	beq.n	8002396 <HAL_GPIO_DeInit+0x5a>
 800238a:	491e      	ldr	r1, [pc, #120]	; (8002404 <HAL_GPIO_DeInit+0xc8>)
 800238c:	468c      	mov	ip, r1
 800238e:	2102      	movs	r1, #2
 8002390:	4560      	cmp	r0, ip
 8002392:	d000      	beq.n	8002396 <HAL_GPIO_DeInit+0x5a>
 8002394:	3103      	adds	r1, #3
 8002396:	40a9      	lsls	r1, r5
 8002398:	9d03      	ldr	r5, [sp, #12]
 800239a:	42a9      	cmp	r1, r5
 800239c:	d110      	bne.n	80023c0 <HAL_GPIO_DeInit+0x84>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 800239e:	491a      	ldr	r1, [pc, #104]	; (8002408 <HAL_GPIO_DeInit+0xcc>)
 80023a0:	680d      	ldr	r5, [r1, #0]
 80023a2:	43a5      	bics	r5, r4
 80023a4:	600d      	str	r5, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80023a6:	684d      	ldr	r5, [r1, #4]
 80023a8:	43a5      	bics	r5, r4
 80023aa:	604d      	str	r5, [r1, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80023ac:	688d      	ldr	r5, [r1, #8]
 80023ae:	43a5      	bics	r5, r4
 80023b0:	608d      	str	r5, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80023b2:	68cd      	ldr	r5, [r1, #12]
 80023b4:	43a5      	bics	r5, r4
 80023b6:	60cd      	str	r5, [r1, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 80023b8:	6891      	ldr	r1, [r2, #8]
 80023ba:	9c02      	ldr	r4, [sp, #8]
 80023bc:	43a1      	bics	r1, r4
 80023be:	6091      	str	r1, [r2, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023c0:	2403      	movs	r4, #3
 80023c2:	0059      	lsls	r1, r3, #1
 80023c4:	408c      	lsls	r4, r1
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80023c6:	2107      	movs	r1, #7
 80023c8:	260f      	movs	r6, #15
 80023ca:	4019      	ands	r1, r3
 80023cc:	0089      	lsls	r1, r1, #2
 80023ce:	408e      	lsls	r6, r1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023d0:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023d2:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80023d4:	43a2      	bics	r2, r4
 80023d6:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 80023d8:	08da      	lsrs	r2, r3, #3
 80023da:	0092      	lsls	r2, r2, #2
 80023dc:	1882      	adds	r2, r0, r2
 80023de:	6a15      	ldr	r5, [r2, #32]
 80023e0:	43b5      	bics	r5, r6
 80023e2:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 80023e4:	68c2      	ldr	r2, [r0, #12]
 80023e6:	43a2      	bics	r2, r4
 80023e8:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023ea:	6842      	ldr	r2, [r0, #4]
 80023ec:	438a      	bics	r2, r1
 80023ee:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80023f0:	6882      	ldr	r2, [r0, #8]
 80023f2:	43a2      	bics	r2, r4
 80023f4:	6082      	str	r2, [r0, #8]
    position++;
 80023f6:	3301      	adds	r3, #1
 80023f8:	e7a4      	b.n	8002344 <HAL_GPIO_DeInit+0x8>
 80023fa:	46c0      	nop			; (mov r8, r8)
 80023fc:	40010000 	.word	0x40010000
 8002400:	48000400 	.word	0x48000400
 8002404:	48000800 	.word	0x48000800
 8002408:	40010400 	.word	0x40010400

0800240c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800240c:	6900      	ldr	r0, [r0, #16]
 800240e:	4008      	ands	r0, r1
 8002410:	1e41      	subs	r1, r0, #1
 8002412:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002414:	b2c0      	uxtb	r0, r0
  }
 8002416:	4770      	bx	lr

08002418 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002418:	2a00      	cmp	r2, #0
 800241a:	d001      	beq.n	8002420 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800241c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800241e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002420:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002422:	e7fc      	b.n	800241e <HAL_GPIO_WritePin+0x6>

08002424 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002424:	b570      	push	{r4, r5, r6, lr}
 8002426:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8002428:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800242a:	2c00      	cmp	r4, #0
 800242c:	d03f      	beq.n	80024ae <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800242e:	0025      	movs	r5, r4
 8002430:	3541      	adds	r5, #65	; 0x41
 8002432:	782b      	ldrb	r3, [r5, #0]
 8002434:	b2da      	uxtb	r2, r3
 8002436:	2b00      	cmp	r3, #0
 8002438:	d105      	bne.n	8002446 <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800243a:	0023      	movs	r3, r4
 800243c:	3340      	adds	r3, #64	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800243e:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 8002440:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 8002442:	f7ff fab5 	bl	80019b0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002446:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002448:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 800244a:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 800244c:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800244e:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	68a6      	ldr	r6, [r4, #8]
 8002454:	438a      	bics	r2, r1
 8002456:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002458:	6861      	ldr	r1, [r4, #4]
 800245a:	4a1a      	ldr	r2, [pc, #104]	; (80024c4 <HAL_I2C_Init+0xa0>)
 800245c:	400a      	ands	r2, r1
 800245e:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002460:	6899      	ldr	r1, [r3, #8]
 8002462:	4a19      	ldr	r2, [pc, #100]	; (80024c8 <HAL_I2C_Init+0xa4>)
 8002464:	4011      	ands	r1, r2
 8002466:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002468:	2801      	cmp	r0, #1
 800246a:	d121      	bne.n	80024b0 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800246c:	2180      	movs	r1, #128	; 0x80
 800246e:	0209      	lsls	r1, r1, #8
 8002470:	4331      	orrs	r1, r6
 8002472:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8002474:	6858      	ldr	r0, [r3, #4]
 8002476:	4915      	ldr	r1, [pc, #84]	; (80024cc <HAL_I2C_Init+0xa8>)
 8002478:	4301      	orrs	r1, r0
 800247a:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800247c:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800247e:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8002480:	400a      	ands	r2, r1
 8002482:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8002484:	6961      	ldr	r1, [r4, #20]
 8002486:	6922      	ldr	r2, [r4, #16]
 8002488:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 800248a:	69a1      	ldr	r1, [r4, #24]
 800248c:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800248e:	430a      	orrs	r2, r1
 8002490:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8002492:	6a21      	ldr	r1, [r4, #32]
 8002494:	69e2      	ldr	r2, [r4, #28]
 8002496:	430a      	orrs	r2, r1
 8002498:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 800249a:	2201      	movs	r2, #1
 800249c:	6819      	ldr	r1, [r3, #0]
 800249e:	430a      	orrs	r2, r1
 80024a0:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80024a2:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80024a4:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80024a6:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 80024a8:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80024aa:	3442      	adds	r4, #66	; 0x42
 80024ac:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 80024ae:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80024b0:	2184      	movs	r1, #132	; 0x84
 80024b2:	0209      	lsls	r1, r1, #8
 80024b4:	4331      	orrs	r1, r6
 80024b6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80024b8:	2802      	cmp	r0, #2
 80024ba:	d1db      	bne.n	8002474 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80024bc:	2180      	movs	r1, #128	; 0x80
 80024be:	0109      	lsls	r1, r1, #4
 80024c0:	6059      	str	r1, [r3, #4]
 80024c2:	e7d7      	b.n	8002474 <HAL_I2C_Init+0x50>
 80024c4:	f0ffffff 	.word	0xf0ffffff
 80024c8:	ffff7fff 	.word	0xffff7fff
 80024cc:	02008000 	.word	0x02008000

080024d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80024d0:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80024d2:	0004      	movs	r4, r0
 80024d4:	3441      	adds	r4, #65	; 0x41
 80024d6:	7822      	ldrb	r2, [r4, #0]
{
 80024d8:	0003      	movs	r3, r0
 80024da:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 80024dc:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 80024de:	b2d6      	uxtb	r6, r2
 80024e0:	2a20      	cmp	r2, #32
 80024e2:	d118      	bne.n	8002516 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 80024e4:	001d      	movs	r5, r3
 80024e6:	3540      	adds	r5, #64	; 0x40
 80024e8:	782a      	ldrb	r2, [r5, #0]
 80024ea:	2a01      	cmp	r2, #1
 80024ec:	d013      	beq.n	8002516 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 80024ee:	2224      	movs	r2, #36	; 0x24
 80024f0:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	3a23      	subs	r2, #35	; 0x23
 80024f6:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024f8:	4807      	ldr	r0, [pc, #28]	; (8002518 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 80024fa:	4391      	bics	r1, r2
 80024fc:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80024fe:	6819      	ldr	r1, [r3, #0]
 8002500:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8002502:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002504:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002506:	6819      	ldr	r1, [r3, #0]
 8002508:	4339      	orrs	r1, r7
 800250a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800250c:	6819      	ldr	r1, [r3, #0]
 800250e:	430a      	orrs	r2, r1
 8002510:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002512:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002514:	7028      	strb	r0, [r5, #0]
  }
}
 8002516:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002518:	ffffefff 	.word	0xffffefff

0800251c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800251c:	0002      	movs	r2, r0
{
 800251e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002520:	3241      	adds	r2, #65	; 0x41
 8002522:	7814      	ldrb	r4, [r2, #0]
{
 8002524:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002526:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002528:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800252a:	2c20      	cmp	r4, #32
 800252c:	d117      	bne.n	800255e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800252e:	001c      	movs	r4, r3
 8002530:	3440      	adds	r4, #64	; 0x40
 8002532:	7826      	ldrb	r6, [r4, #0]
 8002534:	2e01      	cmp	r6, #1
 8002536:	d012      	beq.n	800255e <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002538:	3022      	adds	r0, #34	; 0x22
 800253a:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	3823      	subs	r0, #35	; 0x23
 8002540:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 8002542:	4f07      	ldr	r7, [pc, #28]	; (8002560 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 8002544:	4386      	bics	r6, r0
 8002546:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 8002548:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 800254a:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 800254c:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 800254e:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 8002550:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 8002552:	6819      	ldr	r1, [r3, #0]
 8002554:	4308      	orrs	r0, r1
 8002556:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 8002558:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 800255a:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 800255c:	7020      	strb	r0, [r4, #0]
  }
}
 800255e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002560:	fffff0ff 	.word	0xfffff0ff

08002564 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002566:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 8002568:	2501      	movs	r5, #1
{
 800256a:	b087      	sub	sp, #28
  if (hpcd == NULL)
 800256c:	2800      	cmp	r0, #0
 800256e:	d032      	beq.n	80025d6 <HAL_PCD_Init+0x72>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002570:	4d31      	ldr	r5, [pc, #196]	; (8002638 <HAL_PCD_Init+0xd4>)
 8002572:	5d43      	ldrb	r3, [r0, r5]
 8002574:	b2da      	uxtb	r2, r3
 8002576:	2b00      	cmp	r3, #0
 8002578:	d104      	bne.n	8002584 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800257a:	23aa      	movs	r3, #170	; 0xaa
 800257c:	009b      	lsls	r3, r3, #2
 800257e:	54c2      	strb	r2, [r0, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002580:	f003 fc7a 	bl	8005e78 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002584:	2303      	movs	r3, #3
 8002586:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002588:	6820      	ldr	r0, [r4, #0]
 800258a:	f002 f8c1 	bl	8004710 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800258e:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002590:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002592:	0019      	movs	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002594:	6860      	ldr	r0, [r4, #4]
 8002596:	4283      	cmp	r3, r0
 8002598:	d320      	bcc.n	80025dc <HAL_PCD_Init+0x78>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800259a:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800259c:	2628      	movs	r6, #40	; 0x28
 800259e:	0011      	movs	r1, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a0:	4290      	cmp	r0, r2
 80025a2:	d834      	bhi.n	800260e <HAL_PCD_Init+0xaa>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 80025a4:	0023      	movs	r3, r4
 80025a6:	466a      	mov	r2, sp
 80025a8:	3310      	adds	r3, #16
 80025aa:	cb43      	ldmia	r3!, {r0, r1, r6}
 80025ac:	c243      	stmia	r2!, {r0, r1, r6}
 80025ae:	cb03      	ldmia	r3!, {r0, r1}
 80025b0:	c203      	stmia	r2!, {r0, r1}
 80025b2:	68a2      	ldr	r2, [r4, #8]
 80025b4:	68e3      	ldr	r3, [r4, #12]
 80025b6:	6861      	ldr	r1, [r4, #4]
 80025b8:	6820      	ldr	r0, [r4, #0]
 80025ba:	f002 f8b3 	bl	8004724 <USB_DevInit>

  hpcd->USB_Address = 0U;
 80025be:	2300      	movs	r3, #0
 80025c0:	1d62      	adds	r2, r4, #5
 80025c2:	77d3      	strb	r3, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 80025c4:	2201      	movs	r2, #1
 80025c6:	5562      	strb	r2, [r4, r5]
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 80025c8:	001d      	movs	r5, r3
  if (hpcd->Init.lpm_enable == 1U)
 80025ca:	69e3      	ldr	r3, [r4, #28]
 80025cc:	4293      	cmp	r3, r2
 80025ce:	d102      	bne.n	80025d6 <HAL_PCD_Init+0x72>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80025d0:	0020      	movs	r0, r4
 80025d2:	f000 fe82 	bl	80032da <HAL_PCDEx_ActivateLPM>
}
 80025d6:	0028      	movs	r0, r5
 80025d8:	b007      	add	sp, #28
 80025da:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 80025dc:	2629      	movs	r6, #41	; 0x29
 80025de:	2228      	movs	r2, #40	; 0x28
 80025e0:	46b4      	mov	ip, r6
 80025e2:	435a      	muls	r2, r3
 80025e4:	18a2      	adds	r2, r4, r2
 80025e6:	4494      	add	ip, r2
 80025e8:	4666      	mov	r6, ip
 80025ea:	7037      	strb	r7, [r6, #0]
    hpcd->IN_ep[i].num = i;
 80025ec:	2628      	movs	r6, #40	; 0x28
 80025ee:	46b4      	mov	ip, r6
 80025f0:	4494      	add	ip, r2
 80025f2:	4666      	mov	r6, ip
 80025f4:	7033      	strb	r3, [r6, #0]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025f6:	262b      	movs	r6, #43	; 0x2b
 80025f8:	46b4      	mov	ip, r6
 80025fa:	4494      	add	ip, r2
 80025fc:	4666      	mov	r6, ip
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025fe:	86d3      	strh	r3, [r2, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002600:	3301      	adds	r3, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002602:	7031      	strb	r1, [r6, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002604:	b2db      	uxtb	r3, r3
    hpcd->IN_ep[i].maxpacket = 0U;
 8002606:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002608:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800260a:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800260c:	e7c3      	b.n	8002596 <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 800260e:	0033      	movs	r3, r6
 8002610:	4353      	muls	r3, r2
 8002612:	18e3      	adds	r3, r4, r3
 8002614:	001f      	movs	r7, r3
 8002616:	376a      	adds	r7, #106	; 0x6a
 8002618:	37ff      	adds	r7, #255	; 0xff
 800261a:	7039      	strb	r1, [r7, #0]
    hpcd->OUT_ep[i].num = i;
 800261c:	3f01      	subs	r7, #1
 800261e:	703a      	strb	r2, [r7, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002620:	70f9      	strb	r1, [r7, #3]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002622:	3381      	adds	r3, #129	; 0x81
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002624:	3f6c      	subs	r7, #108	; 0x6c
 8002626:	67f9      	str	r1, [r7, #124]	; 0x7c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002628:	33ff      	adds	r3, #255	; 0xff
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800262a:	3780      	adds	r7, #128	; 0x80
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800262c:	3201      	adds	r2, #1
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800262e:	6039      	str	r1, [r7, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002630:	b2d2      	uxtb	r2, r2
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002632:	6019      	str	r1, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002634:	e7b4      	b.n	80025a0 <HAL_PCD_Init+0x3c>
 8002636:	46c0      	nop			; (mov r8, r8)
 8002638:	000002a9 	.word	0x000002a9

0800263c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800263c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 800263e:	25aa      	movs	r5, #170	; 0xaa
 8002640:	00ad      	lsls	r5, r5, #2
 8002642:	5d43      	ldrb	r3, [r0, r5]
{
 8002644:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 8002646:	2002      	movs	r0, #2
 8002648:	2b01      	cmp	r3, #1
 800264a:	d009      	beq.n	8002660 <HAL_PCD_Start+0x24>
 800264c:	2301      	movs	r3, #1
 800264e:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 8002650:	6820      	ldr	r0, [r4, #0]
 8002652:	f002 f853 	bl	80046fc <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002656:	6820      	ldr	r0, [r4, #0]
 8002658:	f002 fab3 	bl	8004bc2 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800265c:	2000      	movs	r0, #0
 800265e:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8002660:	bd70      	pop	{r4, r5, r6, pc}

08002662 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002662:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 8002664:	25aa      	movs	r5, #170	; 0xaa
 8002666:	00ad      	lsls	r5, r5, #2
 8002668:	5d43      	ldrb	r3, [r0, r5]
{
 800266a:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 800266c:	2002      	movs	r0, #2
 800266e:	2b01      	cmp	r3, #1
 8002670:	d008      	beq.n	8002684 <HAL_PCD_SetAddress+0x22>
 8002672:	2301      	movs	r3, #1
 8002674:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
 8002676:	1d63      	adds	r3, r4, #5
 8002678:	77d9      	strb	r1, [r3, #31]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800267a:	6820      	ldr	r0, [r4, #0]
 800267c:	f002 fa9a 	bl	8004bb4 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002680:	2000      	movs	r0, #0
 8002682:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 8002684:	bd70      	pop	{r4, r5, r6, pc}
	...

08002688 <HAL_PCD_IRQHandler>:
{
 8002688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268a:	0004      	movs	r4, r0
 800268c:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 800268e:	6800      	ldr	r0, [r0, #0]
 8002690:	f002 fa9f 	bl	8004bd2 <USB_ReadInterrupts>
 8002694:	0403      	lsls	r3, r0, #16
 8002696:	d500      	bpl.n	800269a <HAL_PCD_IRQHandler+0x12>
 8002698:	e0db      	b.n	8002852 <HAL_PCD_IRQHandler+0x1ca>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 800269a:	6820      	ldr	r0, [r4, #0]
 800269c:	f002 fa99 	bl	8004bd2 <USB_ReadInterrupts>
 80026a0:	0543      	lsls	r3, r0, #21
 80026a2:	d50c      	bpl.n	80026be <HAL_PCD_IRQHandler+0x36>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80026a4:	6823      	ldr	r3, [r4, #0]
 80026a6:	49b3      	ldr	r1, [pc, #716]	; (8002974 <HAL_PCD_IRQHandler+0x2ec>)
 80026a8:	3306      	adds	r3, #6
 80026aa:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 80026ac:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 80026ae:	400a      	ands	r2, r1
 80026b0:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 80026b2:	f003 fc25 	bl	8005f00 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 80026b6:	2100      	movs	r1, #0
 80026b8:	0020      	movs	r0, r4
 80026ba:	f7ff ffd2 	bl	8002662 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 80026be:	6820      	ldr	r0, [r4, #0]
 80026c0:	f002 fa87 	bl	8004bd2 <USB_ReadInterrupts>
 80026c4:	0443      	lsls	r3, r0, #17
 80026c6:	d505      	bpl.n	80026d4 <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	49ab      	ldr	r1, [pc, #684]	; (8002978 <HAL_PCD_IRQHandler+0x2f0>)
 80026cc:	3306      	adds	r3, #6
 80026ce:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80026d0:	400a      	ands	r2, r1
 80026d2:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 80026d4:	6820      	ldr	r0, [r4, #0]
 80026d6:	f002 fa7c 	bl	8004bd2 <USB_ReadInterrupts>
 80026da:	0483      	lsls	r3, r0, #18
 80026dc:	d505      	bpl.n	80026ea <HAL_PCD_IRQHandler+0x62>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 80026de:	6823      	ldr	r3, [r4, #0]
 80026e0:	49a6      	ldr	r1, [pc, #664]	; (800297c <HAL_PCD_IRQHandler+0x2f4>)
 80026e2:	3306      	adds	r3, #6
 80026e4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80026e6:	400a      	ands	r2, r1
 80026e8:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 80026ea:	6820      	ldr	r0, [r4, #0]
 80026ec:	f002 fa71 	bl	8004bd2 <USB_ReadInterrupts>
 80026f0:	04c3      	lsls	r3, r0, #19
 80026f2:	d51c      	bpl.n	800272e <HAL_PCD_IRQHandler+0xa6>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 80026f4:	2104      	movs	r1, #4
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	3302      	adds	r3, #2
 80026fa:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80026fc:	438a      	bics	r2, r1
 80026fe:	87da      	strh	r2, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002700:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002702:	1849      	adds	r1, r1, r1
 8002704:	438a      	bics	r2, r1
 8002706:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L1)
 8002708:	23b8      	movs	r3, #184	; 0xb8
 800270a:	009b      	lsls	r3, r3, #2
 800270c:	5ce2      	ldrb	r2, [r4, r3]
 800270e:	2a01      	cmp	r2, #1
 8002710:	d104      	bne.n	800271c <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 8002712:	2100      	movs	r1, #0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002714:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 8002716:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002718:	f000 fdf3 	bl	8003302 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 800271c:	0020      	movs	r0, r4
 800271e:	f003 fc13 	bl	8005f48 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002722:	6823      	ldr	r3, [r4, #0]
 8002724:	4996      	ldr	r1, [pc, #600]	; (8002980 <HAL_PCD_IRQHandler+0x2f8>)
 8002726:	3306      	adds	r3, #6
 8002728:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800272a:	400a      	ands	r2, r1
 800272c:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 800272e:	6820      	ldr	r0, [r4, #0]
 8002730:	f002 fa4f 	bl	8004bd2 <USB_ReadInterrupts>
 8002734:	0503      	lsls	r3, r0, #20
 8002736:	d511      	bpl.n	800275c <HAL_PCD_IRQHandler+0xd4>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002738:	2108      	movs	r1, #8
 800273a:	6823      	ldr	r3, [r4, #0]
 800273c:	1c9a      	adds	r2, r3, #2
 800273e:	8fd0      	ldrh	r0, [r2, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002740:	3306      	adds	r3, #6
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002742:	4301      	orrs	r1, r0
 8002744:	87d1      	strh	r1, [r2, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002746:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8002748:	488e      	ldr	r0, [pc, #568]	; (8002984 <HAL_PCD_IRQHandler+0x2fc>)
 800274a:	4001      	ands	r1, r0
 800274c:	87d9      	strh	r1, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800274e:	2304      	movs	r3, #4
 8002750:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
    HAL_PCD_SuspendCallback(hpcd);
 8002752:	0020      	movs	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002754:	430b      	orrs	r3, r1
 8002756:	87d3      	strh	r3, [r2, #62]	; 0x3e
    HAL_PCD_SuspendCallback(hpcd);
 8002758:	f003 fbe4 	bl	8005f24 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 800275c:	6820      	ldr	r0, [r4, #0]
 800275e:	f002 fa38 	bl	8004bd2 <USB_ReadInterrupts>
 8002762:	2580      	movs	r5, #128	; 0x80
 8002764:	4228      	tst	r0, r5
 8002766:	d021      	beq.n	80027ac <HAL_PCD_IRQHandler+0x124>
    if (hpcd->LPM_State == LPM_L0)
 8002768:	20b8      	movs	r0, #184	; 0xb8
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800276a:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 800276c:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800276e:	1d99      	adds	r1, r3, #6
 8002770:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8002772:	43aa      	bics	r2, r5
 8002774:	87ca      	strh	r2, [r1, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L0)
 8002776:	5c22      	ldrb	r2, [r4, r0]
 8002778:	2a00      	cmp	r2, #0
 800277a:	d001      	beq.n	8002780 <HAL_PCD_IRQHandler+0xf8>
 800277c:	f000 fc95 	bl	80030aa <HAL_PCD_IRQHandler+0xa22>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002780:	1c99      	adds	r1, r3, #2
 8002782:	8fcd      	ldrh	r5, [r1, #62]	; 0x3e
 8002784:	3204      	adds	r2, #4
 8002786:	432a      	orrs	r2, r5
 8002788:	87ca      	strh	r2, [r1, #62]	; 0x3e
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800278a:	2208      	movs	r2, #8
 800278c:	8fcd      	ldrh	r5, [r1, #62]	; 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800278e:	3354      	adds	r3, #84	; 0x54
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002790:	432a      	orrs	r2, r5
 8002792:	87ca      	strh	r2, [r1, #62]	; 0x3e
      hpcd->LPM_State = LPM_L1;
 8002794:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002796:	223c      	movs	r2, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 8002798:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800279a:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800279c:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800279e:	089b      	lsrs	r3, r3, #2
 80027a0:	4013      	ands	r3, r2
 80027a2:	22b9      	movs	r2, #185	; 0xb9
 80027a4:	0092      	lsls	r2, r2, #2
 80027a6:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 80027a8:	f000 fdab 	bl	8003302 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 80027ac:	6820      	ldr	r0, [r4, #0]
 80027ae:	f002 fa10 	bl	8004bd2 <USB_ReadInterrupts>
 80027b2:	0583      	lsls	r3, r0, #22
 80027b4:	d508      	bpl.n	80027c8 <HAL_PCD_IRQHandler+0x140>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80027b6:	6823      	ldr	r3, [r4, #0]
 80027b8:	4973      	ldr	r1, [pc, #460]	; (8002988 <HAL_PCD_IRQHandler+0x300>)
 80027ba:	3306      	adds	r3, #6
 80027bc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 80027be:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 80027c0:	400a      	ands	r2, r1
 80027c2:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 80027c4:	f003 fb95 	bl	8005ef2 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 80027c8:	6820      	ldr	r0, [r4, #0]
 80027ca:	f002 fa02 	bl	8004bd2 <USB_ReadInterrupts>
 80027ce:	05c3      	lsls	r3, r0, #23
 80027d0:	d505      	bpl.n	80027de <HAL_PCD_IRQHandler+0x156>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 80027d2:	6823      	ldr	r3, [r4, #0]
 80027d4:	496d      	ldr	r1, [pc, #436]	; (800298c <HAL_PCD_IRQHandler+0x304>)
 80027d6:	3306      	adds	r3, #6
 80027d8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80027da:	400a      	ands	r2, r1
 80027dc:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 80027de:	b005      	add	sp, #20
 80027e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80027e2:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 80027e4:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80027e6:	4019      	ands	r1, r3
 80027e8:	9100      	str	r1, [sp, #0]

    if (epindex == 0U)
 80027ea:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 80027ec:	b29a      	uxth	r2, r3
    if (epindex == 0U)
 80027ee:	420b      	tst	r3, r1
 80027f0:	d000      	beq.n	80027f4 <HAL_PCD_IRQHandler+0x16c>
 80027f2:	e0dd      	b.n	80029b0 <HAL_PCD_IRQHandler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80027f4:	2310      	movs	r3, #16
 80027f6:	0011      	movs	r1, r2
 80027f8:	4019      	ands	r1, r3
 80027fa:	421a      	tst	r2, r3
 80027fc:	d130      	bne.n	8002860 <HAL_PCD_IRQHandler+0x1d8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80027fe:	8803      	ldrh	r3, [r0, #0]
 8002800:	4a63      	ldr	r2, [pc, #396]	; (8002990 <HAL_PCD_IRQHandler+0x308>)
 8002802:	4013      	ands	r3, r2
 8002804:	2280      	movs	r2, #128	; 0x80
 8002806:	0212      	lsls	r2, r2, #8
 8002808:	4313      	orrs	r3, r2
 800280a:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800280c:	0003      	movs	r3, r0
 800280e:	3350      	adds	r3, #80	; 0x50
 8002810:	881a      	ldrh	r2, [r3, #0]
 8002812:	0023      	movs	r3, r4
 8002814:	3328      	adds	r3, #40	; 0x28
 8002816:	781b      	ldrb	r3, [r3, #0]
 8002818:	00db      	lsls	r3, r3, #3
 800281a:	18c3      	adds	r3, r0, r3
 800281c:	189b      	adds	r3, r3, r2
 800281e:	4a5d      	ldr	r2, [pc, #372]	; (8002994 <HAL_PCD_IRQHandler+0x30c>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002820:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002822:	189b      	adds	r3, r3, r2
 8002824:	881b      	ldrh	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 8002826:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002828:	059b      	lsls	r3, r3, #22
 800282a:	0d9b      	lsrs	r3, r3, #22
 800282c:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 800282e:	18d3      	adds	r3, r2, r3
 8002830:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002832:	f003 fb53 	bl	8005edc <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002836:	1d63      	adds	r3, r4, #5
 8002838:	7fda      	ldrb	r2, [r3, #31]
 800283a:	2a00      	cmp	r2, #0
 800283c:	d009      	beq.n	8002852 <HAL_PCD_IRQHandler+0x1ca>
 800283e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002840:	2800      	cmp	r0, #0
 8002842:	d106      	bne.n	8002852 <HAL_PCD_IRQHandler+0x1ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002844:	2280      	movs	r2, #128	; 0x80
 8002846:	7fd9      	ldrb	r1, [r3, #31]
 8002848:	4311      	orrs	r1, r2
 800284a:	6822      	ldr	r2, [r4, #0]
 800284c:	324c      	adds	r2, #76	; 0x4c
 800284e:	8011      	strh	r1, [r2, #0]
          hpcd->USB_Address = 0U;
 8002850:	77d8      	strb	r0, [r3, #31]
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002852:	6820      	ldr	r0, [r4, #0]
 8002854:	1d82      	adds	r2, r0, #6
 8002856:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8002858:	b21b      	sxth	r3, r3
 800285a:	2b00      	cmp	r3, #0
 800285c:	dbc1      	blt.n	80027e2 <HAL_PCD_IRQHandler+0x15a>
 800285e:	e71c      	b.n	800269a <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002860:	8802      	ldrh	r2, [r0, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002862:	2180      	movs	r1, #128	; 0x80
 8002864:	0016      	movs	r6, r2
 8002866:	0109      	lsls	r1, r1, #4
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002868:	b293      	uxth	r3, r2
        if ((wEPVal & USB_EP_SETUP) != 0U)
 800286a:	400e      	ands	r6, r1
 800286c:	420a      	tst	r2, r1
 800286e:	d022      	beq.n	80028b6 <HAL_PCD_IRQHandler+0x22e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002870:	0003      	movs	r3, r0
 8002872:	3350      	adds	r3, #80	; 0x50
 8002874:	881a      	ldrh	r2, [r3, #0]
 8002876:	23b4      	movs	r3, #180	; 0xb4
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	5ce3      	ldrb	r3, [r4, r3]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 800287c:	21ac      	movs	r1, #172	; 0xac
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 800287e:	00db      	lsls	r3, r3, #3
 8002880:	18c3      	adds	r3, r0, r3
 8002882:	189b      	adds	r3, r3, r2
 8002884:	4a44      	ldr	r2, [pc, #272]	; (8002998 <HAL_PCD_IRQHandler+0x310>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002886:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002888:	189b      	adds	r3, r3, r2
 800288a:	0022      	movs	r2, r4
 800288c:	881b      	ldrh	r3, [r3, #0]
 800288e:	3269      	adds	r2, #105	; 0x69
 8002890:	059b      	lsls	r3, r3, #22
 8002892:	0d9b      	lsrs	r3, r3, #22
 8002894:	32ff      	adds	r2, #255	; 0xff
 8002896:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002898:	1861      	adds	r1, r4, r1
 800289a:	88d2      	ldrh	r2, [r2, #6]
 800289c:	f002 fc5c 	bl	8005158 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028a0:	6822      	ldr	r2, [r4, #0]
 80028a2:	493e      	ldr	r1, [pc, #248]	; (800299c <HAL_PCD_IRQHandler+0x314>)
 80028a4:	8813      	ldrh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 80028a6:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028a8:	400b      	ands	r3, r1
 80028aa:	2180      	movs	r1, #128	; 0x80
 80028ac:	430b      	orrs	r3, r1
 80028ae:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 80028b0:	f003 fafe 	bl	8005eb0 <HAL_PCD_SetupStageCallback>
 80028b4:	e7cd      	b.n	8002852 <HAL_PCD_IRQHandler+0x1ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80028b6:	b21b      	sxth	r3, r3
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	daca      	bge.n	8002852 <HAL_PCD_IRQHandler+0x1ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028bc:	8803      	ldrh	r3, [r0, #0]
 80028be:	4a37      	ldr	r2, [pc, #220]	; (800299c <HAL_PCD_IRQHandler+0x314>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028c0:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 80028c2:	4013      	ands	r3, r2
 80028c4:	2280      	movs	r2, #128	; 0x80
 80028c6:	4313      	orrs	r3, r2
 80028c8:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80028ca:	0003      	movs	r3, r0
 80028cc:	3350      	adds	r3, #80	; 0x50
 80028ce:	881a      	ldrh	r2, [r3, #0]
 80028d0:	23b4      	movs	r3, #180	; 0xb4
 80028d2:	005b      	lsls	r3, r3, #1
 80028d4:	5ce3      	ldrb	r3, [r4, r3]
 80028d6:	3569      	adds	r5, #105	; 0x69
 80028d8:	00db      	lsls	r3, r3, #3
 80028da:	18c3      	adds	r3, r0, r3
 80028dc:	189b      	adds	r3, r3, r2
 80028de:	4a2e      	ldr	r2, [pc, #184]	; (8002998 <HAL_PCD_IRQHandler+0x310>)
 80028e0:	35ff      	adds	r5, #255	; 0xff
 80028e2:	189b      	adds	r3, r3, r2
 80028e4:	881b      	ldrh	r3, [r3, #0]
 80028e6:	059b      	lsls	r3, r3, #22
 80028e8:	0d9b      	lsrs	r3, r3, #22
 80028ea:	61eb      	str	r3, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 80028ec:	d00d      	beq.n	800290a <HAL_PCD_IRQHandler+0x282>
 80028ee:	6969      	ldr	r1, [r5, #20]
 80028f0:	2900      	cmp	r1, #0
 80028f2:	d00a      	beq.n	800290a <HAL_PCD_IRQHandler+0x282>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80028f4:	88ea      	ldrh	r2, [r5, #6]
 80028f6:	f002 fc2f 	bl	8005158 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 80028fa:	696b      	ldr	r3, [r5, #20]
 80028fc:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80028fe:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 8002900:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002902:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8002904:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002906:	f003 fadc 	bl	8005ec2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 800290a:	6821      	ldr	r1, [r4, #0]
 800290c:	880b      	ldrh	r3, [r1, #0]
 800290e:	051b      	lsls	r3, r3, #20
 8002910:	d49f      	bmi.n	8002852 <HAL_PCD_IRQHandler+0x1ca>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002912:	000b      	movs	r3, r1
 8002914:	4a20      	ldr	r2, [pc, #128]	; (8002998 <HAL_PCD_IRQHandler+0x310>)
 8002916:	3350      	adds	r3, #80	; 0x50
 8002918:	881b      	ldrh	r3, [r3, #0]
 800291a:	188a      	adds	r2, r1, r2
 800291c:	18d2      	adds	r2, r2, r3
 800291e:	692b      	ldr	r3, [r5, #16]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d109      	bne.n	8002938 <HAL_PCD_IRQHandler+0x2b0>
 8002924:	8813      	ldrh	r3, [r2, #0]
 8002926:	481e      	ldr	r0, [pc, #120]	; (80029a0 <HAL_PCD_IRQHandler+0x318>)
 8002928:	4003      	ands	r3, r0
 800292a:	2080      	movs	r0, #128	; 0x80
 800292c:	8013      	strh	r3, [r2, #0]
 800292e:	8813      	ldrh	r3, [r2, #0]
 8002930:	0200      	lsls	r0, r0, #8
 8002932:	4303      	orrs	r3, r0
 8002934:	8013      	strh	r3, [r2, #0]
 8002936:	e008      	b.n	800294a <HAL_PCD_IRQHandler+0x2c2>
 8002938:	2b3e      	cmp	r3, #62	; 0x3e
 800293a:	d810      	bhi.n	800295e <HAL_PCD_IRQHandler+0x2d6>
 800293c:	2501      	movs	r5, #1
 800293e:	0858      	lsrs	r0, r3, #1
 8002940:	402b      	ands	r3, r5
 8002942:	18c0      	adds	r0, r0, r3
 8002944:	0280      	lsls	r0, r0, #10
 8002946:	b280      	uxth	r0, r0
 8002948:	8010      	strh	r0, [r2, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 800294a:	880b      	ldrh	r3, [r1, #0]
 800294c:	4a15      	ldr	r2, [pc, #84]	; (80029a4 <HAL_PCD_IRQHandler+0x31c>)
 800294e:	401a      	ands	r2, r3
 8002950:	23c0      	movs	r3, #192	; 0xc0
 8002952:	019b      	lsls	r3, r3, #6
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002954:	4053      	eors	r3, r2
 8002956:	4a14      	ldr	r2, [pc, #80]	; (80029a8 <HAL_PCD_IRQHandler+0x320>)
 8002958:	4313      	orrs	r3, r2
 800295a:	800b      	strh	r3, [r1, #0]

  return HAL_OK;
 800295c:	e779      	b.n	8002852 <HAL_PCD_IRQHandler+0x1ca>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 800295e:	251f      	movs	r5, #31
 8002960:	0958      	lsrs	r0, r3, #5
 8002962:	402b      	ands	r3, r5
 8002964:	425d      	negs	r5, r3
 8002966:	416b      	adcs	r3, r5
 8002968:	1ac0      	subs	r0, r0, r3
 800296a:	4b10      	ldr	r3, [pc, #64]	; (80029ac <HAL_PCD_IRQHandler+0x324>)
 800296c:	0280      	lsls	r0, r0, #10
 800296e:	4303      	orrs	r3, r0
 8002970:	b29b      	uxth	r3, r3
 8002972:	e7df      	b.n	8002934 <HAL_PCD_IRQHandler+0x2ac>
 8002974:	fffffbff 	.word	0xfffffbff
 8002978:	ffffbfff 	.word	0xffffbfff
 800297c:	ffffdfff 	.word	0xffffdfff
 8002980:	ffffefff 	.word	0xffffefff
 8002984:	fffff7ff 	.word	0xfffff7ff
 8002988:	fffffdff 	.word	0xfffffdff
 800298c:	fffffeff 	.word	0xfffffeff
 8002990:	ffff8f0f 	.word	0xffff8f0f
 8002994:	00000402 	.word	0x00000402
 8002998:	00000406 	.word	0x00000406
 800299c:	00000f8f 	.word	0x00000f8f
 80029a0:	ffff83ff 	.word	0xffff83ff
 80029a4:	ffffbf8f 	.word	0xffffbf8f
 80029a8:	00008080 	.word	0x00008080
 80029ac:	ffff8000 	.word	0xffff8000
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80029b0:	9b00      	ldr	r3, [sp, #0]
 80029b2:	009f      	lsls	r7, r3, #2
 80029b4:	19c2      	adds	r2, r0, r7
 80029b6:	8813      	ldrh	r3, [r2, #0]
 80029b8:	b299      	uxth	r1, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029ba:	b21b      	sxth	r3, r3
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 80029bc:	9101      	str	r1, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 80029be:	2b00      	cmp	r3, #0
 80029c0:	db00      	blt.n	80029c4 <HAL_PCD_IRQHandler+0x33c>
 80029c2:	e0f2      	b.n	8002baa <HAL_PCD_IRQHandler+0x522>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 80029c4:	8813      	ldrh	r3, [r2, #0]
 80029c6:	49c7      	ldr	r1, [pc, #796]	; (8002ce4 <HAL_PCD_IRQHandler+0x65c>)
 80029c8:	400b      	ands	r3, r1
 80029ca:	2180      	movs	r1, #128	; 0x80
 80029cc:	430b      	orrs	r3, r1
 80029ce:	8013      	strh	r3, [r2, #0]
        if (ep->doublebuffer == 0U)
 80029d0:	2328      	movs	r3, #40	; 0x28
 80029d2:	9a00      	ldr	r2, [sp, #0]
 80029d4:	4353      	muls	r3, r2
 80029d6:	18e3      	adds	r3, r4, r3
 80029d8:	001a      	movs	r2, r3
 80029da:	001d      	movs	r5, r3
 80029dc:	3275      	adds	r2, #117	; 0x75
 80029de:	32ff      	adds	r2, #255	; 0xff
 80029e0:	7812      	ldrb	r2, [r2, #0]
 80029e2:	3569      	adds	r5, #105	; 0x69
 80029e4:	35ff      	adds	r5, #255	; 0xff
 80029e6:	2a00      	cmp	r2, #0
 80029e8:	d11a      	bne.n	8002a20 <HAL_PCD_IRQHandler+0x398>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80029ea:	0002      	movs	r2, r0
 80029ec:	3250      	adds	r2, #80	; 0x50
 80029ee:	8811      	ldrh	r1, [r2, #0]
 80029f0:	782a      	ldrb	r2, [r5, #0]
 80029f2:	00d2      	lsls	r2, r2, #3
 80029f4:	1852      	adds	r2, r2, r1
 80029f6:	49bc      	ldr	r1, [pc, #752]	; (8002ce8 <HAL_PCD_IRQHandler+0x660>)
 80029f8:	1812      	adds	r2, r2, r0
 80029fa:	1852      	adds	r2, r2, r1
 80029fc:	8812      	ldrh	r2, [r2, #0]
 80029fe:	0592      	lsls	r2, r2, #22
 8002a00:	0d95      	lsrs	r5, r2, #22
          if (count != 0U)
 8002a02:	2a00      	cmp	r2, #0
 8002a04:	d100      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x380>
 8002a06:	e0af      	b.n	8002b68 <HAL_PCD_IRQHandler+0x4e0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002a08:	001a      	movs	r2, r3
 8002a0a:	326f      	adds	r2, #111	; 0x6f
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002a0c:	337d      	adds	r3, #125	; 0x7d
 8002a0e:	33ff      	adds	r3, #255	; 0xff
 8002a10:	0019      	movs	r1, r3
 8002a12:	32ff      	adds	r2, #255	; 0xff
 8002a14:	002b      	movs	r3, r5
 8002a16:	8812      	ldrh	r2, [r2, #0]
 8002a18:	6809      	ldr	r1, [r1, #0]
 8002a1a:	f002 fb9d 	bl	8005158 <USB_ReadPMA>
 8002a1e:	e0a3      	b.n	8002b68 <HAL_PCD_IRQHandler+0x4e0>
          if (ep->type == EP_TYPE_BULK)
 8002a20:	0019      	movs	r1, r3
 8002a22:	316c      	adds	r1, #108	; 0x6c
 8002a24:	31ff      	adds	r1, #255	; 0xff
 8002a26:	7809      	ldrb	r1, [r1, #0]
 8002a28:	782a      	ldrb	r2, [r5, #0]
 8002a2a:	2902      	cmp	r1, #2
 8002a2c:	d000      	beq.n	8002a30 <HAL_PCD_IRQHandler+0x3a8>
 8002a2e:	e080      	b.n	8002b32 <HAL_PCD_IRQHandler+0x4aa>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002a30:	2680      	movs	r6, #128	; 0x80
 8002a32:	01f6      	lsls	r6, r6, #7
 8002a34:	46b4      	mov	ip, r6
 8002a36:	4665      	mov	r5, ip
 8002a38:	9e01      	ldr	r6, [sp, #4]
 8002a3a:	3381      	adds	r3, #129	; 0x81
 8002a3c:	402e      	ands	r6, r5
 8002a3e:	9603      	str	r6, [sp, #12]
 8002a40:	0006      	movs	r6, r0
 8002a42:	3650      	adds	r6, #80	; 0x50
 8002a44:	9602      	str	r6, [sp, #8]
 8002a46:	4666      	mov	r6, ip
 8002a48:	9d01      	ldr	r5, [sp, #4]
 8002a4a:	33ff      	adds	r3, #255	; 0xff
 8002a4c:	6819      	ldr	r1, [r3, #0]
 8002a4e:	4235      	tst	r5, r6
 8002a50:	d037      	beq.n	8002ac2 <HAL_PCD_IRQHandler+0x43a>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002a52:	9d02      	ldr	r5, [sp, #8]
 8002a54:	882e      	ldrh	r6, [r5, #0]
 8002a56:	00d5      	lsls	r5, r2, #3
 8002a58:	1976      	adds	r6, r6, r5
 8002a5a:	4da4      	ldr	r5, [pc, #656]	; (8002cec <HAL_PCD_IRQHandler+0x664>)
 8002a5c:	1836      	adds	r6, r6, r0
 8002a5e:	1976      	adds	r6, r6, r5
 8002a60:	8835      	ldrh	r5, [r6, #0]
 8002a62:	05ad      	lsls	r5, r5, #22
 8002a64:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 8002a66:	428d      	cmp	r5, r1
 8002a68:	d90d      	bls.n	8002a86 <HAL_PCD_IRQHandler+0x3fe>
 8002a6a:	2100      	movs	r1, #0
 8002a6c:	6019      	str	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002a6e:	0092      	lsls	r2, r2, #2
 8002a70:	1882      	adds	r2, r0, r2
 8002a72:	8813      	ldrh	r3, [r2, #0]
 8002a74:	499e      	ldr	r1, [pc, #632]	; (8002cf0 <HAL_PCD_IRQHandler+0x668>)
 8002a76:	4019      	ands	r1, r3
 8002a78:	2380      	movs	r3, #128	; 0x80
 8002a7a:	019b      	lsls	r3, r3, #6
 8002a7c:	404b      	eors	r3, r1
 8002a7e:	499d      	ldr	r1, [pc, #628]	; (8002cf4 <HAL_PCD_IRQHandler+0x66c>)
 8002a80:	430b      	orrs	r3, r1
 8002a82:	8013      	strh	r3, [r2, #0]
 8002a84:	e002      	b.n	8002a8c <HAL_PCD_IRQHandler+0x404>
      ep->xfer_len -= count;
 8002a86:	1b49      	subs	r1, r1, r5
 8002a88:	6019      	str	r1, [r3, #0]
    if (ep->xfer_len == 0U)
 8002a8a:	d0f0      	beq.n	8002a6e <HAL_PCD_IRQHandler+0x3e6>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002a8c:	9b01      	ldr	r3, [sp, #4]
 8002a8e:	065b      	lsls	r3, r3, #25
 8002a90:	d50e      	bpl.n	8002ab0 <HAL_PCD_IRQHandler+0x428>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002a92:	2328      	movs	r3, #40	; 0x28
 8002a94:	9a00      	ldr	r2, [sp, #0]
 8002a96:	4998      	ldr	r1, [pc, #608]	; (8002cf8 <HAL_PCD_IRQHandler+0x670>)
 8002a98:	4353      	muls	r3, r2
 8002a9a:	18e3      	adds	r3, r4, r3
 8002a9c:	3369      	adds	r3, #105	; 0x69
 8002a9e:	33ff      	adds	r3, #255	; 0xff
 8002aa0:	781b      	ldrb	r3, [r3, #0]
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	18c3      	adds	r3, r0, r3
 8002aa6:	881a      	ldrh	r2, [r3, #0]
 8002aa8:	400a      	ands	r2, r1
 8002aaa:	4994      	ldr	r1, [pc, #592]	; (8002cfc <HAL_PCD_IRQHandler+0x674>)
 8002aac:	430a      	orrs	r2, r1
 8002aae:	801a      	strh	r2, [r3, #0]
    if (count != 0U)
 8002ab0:	2d00      	cmp	r5, #0
 8002ab2:	d059      	beq.n	8002b68 <HAL_PCD_IRQHandler+0x4e0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002ab4:	2328      	movs	r3, #40	; 0x28
 8002ab6:	9a00      	ldr	r2, [sp, #0]
 8002ab8:	4353      	muls	r3, r2
 8002aba:	18e3      	adds	r3, r4, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002abc:	001a      	movs	r2, r3
 8002abe:	3271      	adds	r2, #113	; 0x71
 8002ac0:	e7a4      	b.n	8002a0c <HAL_PCD_IRQHandler+0x384>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002ac2:	9d02      	ldr	r5, [sp, #8]
 8002ac4:	882e      	ldrh	r6, [r5, #0]
 8002ac6:	00d5      	lsls	r5, r2, #3
 8002ac8:	1976      	adds	r6, r6, r5
 8002aca:	4d87      	ldr	r5, [pc, #540]	; (8002ce8 <HAL_PCD_IRQHandler+0x660>)
 8002acc:	1836      	adds	r6, r6, r0
 8002ace:	1976      	adds	r6, r6, r5
 8002ad0:	8835      	ldrh	r5, [r6, #0]
 8002ad2:	05ad      	lsls	r5, r5, #22
 8002ad4:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 8002ad6:	428d      	cmp	r5, r1
 8002ad8:	d90d      	bls.n	8002af6 <HAL_PCD_IRQHandler+0x46e>
 8002ada:	9903      	ldr	r1, [sp, #12]
 8002adc:	6019      	str	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002ade:	0092      	lsls	r2, r2, #2
 8002ae0:	1882      	adds	r2, r0, r2
 8002ae2:	8813      	ldrh	r3, [r2, #0]
 8002ae4:	4982      	ldr	r1, [pc, #520]	; (8002cf0 <HAL_PCD_IRQHandler+0x668>)
 8002ae6:	4019      	ands	r1, r3
 8002ae8:	2380      	movs	r3, #128	; 0x80
 8002aea:	019b      	lsls	r3, r3, #6
 8002aec:	404b      	eors	r3, r1
 8002aee:	4981      	ldr	r1, [pc, #516]	; (8002cf4 <HAL_PCD_IRQHandler+0x66c>)
 8002af0:	430b      	orrs	r3, r1
 8002af2:	8013      	strh	r3, [r2, #0]
 8002af4:	e002      	b.n	8002afc <HAL_PCD_IRQHandler+0x474>
      ep->xfer_len -= count;
 8002af6:	1b49      	subs	r1, r1, r5
 8002af8:	6019      	str	r1, [r3, #0]
    if (ep->xfer_len == 0U)
 8002afa:	d0f0      	beq.n	8002ade <HAL_PCD_IRQHandler+0x456>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002afc:	9b01      	ldr	r3, [sp, #4]
 8002afe:	065b      	lsls	r3, r3, #25
 8002b00:	d40e      	bmi.n	8002b20 <HAL_PCD_IRQHandler+0x498>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b02:	2328      	movs	r3, #40	; 0x28
 8002b04:	9a00      	ldr	r2, [sp, #0]
 8002b06:	497c      	ldr	r1, [pc, #496]	; (8002cf8 <HAL_PCD_IRQHandler+0x670>)
 8002b08:	4353      	muls	r3, r2
 8002b0a:	18e3      	adds	r3, r4, r3
 8002b0c:	3369      	adds	r3, #105	; 0x69
 8002b0e:	33ff      	adds	r3, #255	; 0xff
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	009b      	lsls	r3, r3, #2
 8002b14:	18c3      	adds	r3, r0, r3
 8002b16:	881a      	ldrh	r2, [r3, #0]
 8002b18:	400a      	ands	r2, r1
 8002b1a:	4978      	ldr	r1, [pc, #480]	; (8002cfc <HAL_PCD_IRQHandler+0x674>)
 8002b1c:	430a      	orrs	r2, r1
 8002b1e:	801a      	strh	r2, [r3, #0]
    if (count != 0U)
 8002b20:	2d00      	cmp	r5, #0
 8002b22:	d021      	beq.n	8002b68 <HAL_PCD_IRQHandler+0x4e0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b24:	2328      	movs	r3, #40	; 0x28
 8002b26:	9a00      	ldr	r2, [sp, #0]
 8002b28:	4353      	muls	r3, r2
 8002b2a:	18e3      	adds	r3, r4, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002b2c:	001a      	movs	r2, r3
 8002b2e:	3273      	adds	r2, #115	; 0x73
 8002b30:	e76c      	b.n	8002a0c <HAL_PCD_IRQHandler+0x384>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002b32:	0092      	lsls	r2, r2, #2
 8002b34:	1882      	adds	r2, r0, r2
 8002b36:	8816      	ldrh	r6, [r2, #0]
 8002b38:	496f      	ldr	r1, [pc, #444]	; (8002cf8 <HAL_PCD_IRQHandler+0x670>)
 8002b3a:	4031      	ands	r1, r6
 8002b3c:	4e6f      	ldr	r6, [pc, #444]	; (8002cfc <HAL_PCD_IRQHandler+0x674>)
 8002b3e:	4331      	orrs	r1, r6
 8002b40:	8011      	strh	r1, [r2, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b42:	782a      	ldrb	r2, [r5, #0]
 8002b44:	0091      	lsls	r1, r2, #2
 8002b46:	1841      	adds	r1, r0, r1
 8002b48:	880d      	ldrh	r5, [r1, #0]
 8002b4a:	0001      	movs	r1, r0
 8002b4c:	3150      	adds	r1, #80	; 0x50
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b4e:	8809      	ldrh	r1, [r1, #0]
 8002b50:	00d2      	lsls	r2, r2, #3
 8002b52:	1852      	adds	r2, r2, r1
 8002b54:	1812      	adds	r2, r2, r0
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002b56:	046d      	lsls	r5, r5, #17
 8002b58:	d55f      	bpl.n	8002c1a <HAL_PCD_IRQHandler+0x592>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002b5a:	4964      	ldr	r1, [pc, #400]	; (8002cec <HAL_PCD_IRQHandler+0x664>)
 8002b5c:	1852      	adds	r2, r2, r1
 8002b5e:	8812      	ldrh	r2, [r2, #0]
 8002b60:	0592      	lsls	r2, r2, #22
 8002b62:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 8002b64:	2a00      	cmp	r2, #0
 8002b66:	d1a9      	bne.n	8002abc <HAL_PCD_IRQHandler+0x434>
        ep->xfer_count += count;
 8002b68:	2328      	movs	r3, #40	; 0x28
 8002b6a:	9900      	ldr	r1, [sp, #0]
 8002b6c:	4359      	muls	r1, r3
 8002b6e:	1862      	adds	r2, r4, r1
 8002b70:	0016      	movs	r6, r2
 8002b72:	3685      	adds	r6, #133	; 0x85
 8002b74:	36ff      	adds	r6, #255	; 0xff
 8002b76:	6830      	ldr	r0, [r6, #0]
        ep->xfer_buff += count;
 8002b78:	3e08      	subs	r6, #8
        ep->xfer_count += count;
 8002b7a:	1940      	adds	r0, r0, r5
 8002b7c:	60b0      	str	r0, [r6, #8]
        ep->xfer_buff += count;
 8002b7e:	6830      	ldr	r0, [r6, #0]
 8002b80:	1940      	adds	r0, r0, r5
 8002b82:	6030      	str	r0, [r6, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002b84:	0010      	movs	r0, r2
 8002b86:	3081      	adds	r0, #129	; 0x81
 8002b88:	30ff      	adds	r0, #255	; 0xff
 8002b8a:	6800      	ldr	r0, [r0, #0]
 8002b8c:	2800      	cmp	r0, #0
 8002b8e:	d003      	beq.n	8002b98 <HAL_PCD_IRQHandler+0x510>
 8002b90:	32fc      	adds	r2, #252	; 0xfc
 8002b92:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002b94:	4295      	cmp	r5, r2
 8002b96:	d248      	bcs.n	8002c2a <HAL_PCD_IRQHandler+0x5a2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002b98:	9a00      	ldr	r2, [sp, #0]
 8002b9a:	0020      	movs	r0, r4
 8002b9c:	4353      	muls	r3, r2
 8002b9e:	18e3      	adds	r3, r4, r3
 8002ba0:	3369      	adds	r3, #105	; 0x69
 8002ba2:	33ff      	adds	r3, #255	; 0xff
 8002ba4:	7819      	ldrb	r1, [r3, #0]
 8002ba6:	f003 f98c 	bl	8005ec2 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002baa:	2280      	movs	r2, #128	; 0x80
 8002bac:	9b01      	ldr	r3, [sp, #4]
 8002bae:	4213      	tst	r3, r2
 8002bb0:	d100      	bne.n	8002bb4 <HAL_PCD_IRQHandler+0x52c>
 8002bb2:	e64e      	b.n	8002852 <HAL_PCD_IRQHandler+0x1ca>
 8002bb4:	6820      	ldr	r0, [r4, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002bb6:	4b52      	ldr	r3, [pc, #328]	; (8002d00 <HAL_PCD_IRQHandler+0x678>)
 8002bb8:	19c1      	adds	r1, r0, r7
 8002bba:	880a      	ldrh	r2, [r1, #0]
 8002bbc:	9d00      	ldr	r5, [sp, #0]
 8002bbe:	401a      	ands	r2, r3
 8002bc0:	4b50      	ldr	r3, [pc, #320]	; (8002d04 <HAL_PCD_IRQHandler+0x67c>)
 8002bc2:	431a      	orrs	r2, r3
 8002bc4:	b292      	uxth	r2, r2
 8002bc6:	800a      	strh	r2, [r1, #0]
        if (ep->type != EP_TYPE_BULK)
 8002bc8:	2228      	movs	r2, #40	; 0x28
 8002bca:	4355      	muls	r5, r2
 8002bcc:	1965      	adds	r5, r4, r5
 8002bce:	002a      	movs	r2, r5
 8002bd0:	002e      	movs	r6, r5
 8002bd2:	322b      	adds	r2, #43	; 0x2b
 8002bd4:	7812      	ldrb	r2, [r2, #0]
 8002bd6:	3628      	adds	r6, #40	; 0x28
 8002bd8:	2a02      	cmp	r2, #2
 8002bda:	d057      	beq.n	8002c8c <HAL_PCD_IRQHandler+0x604>
          ep->xfer_len = 0U;
 8002bdc:	2200      	movs	r2, #0
          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002bde:	2140      	movs	r1, #64	; 0x40
          ep->xfer_len = 0U;
 8002be0:	642a      	str	r2, [r5, #64]	; 0x40
 8002be2:	4694      	mov	ip, r2
          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002be4:	9f01      	ldr	r7, [sp, #4]
 8002be6:	9a01      	ldr	r2, [sp, #4]
 8002be8:	400f      	ands	r7, r1
 8002bea:	3529      	adds	r5, #41	; 0x29
 8002bec:	420a      	tst	r2, r1
 8002bee:	d034      	beq.n	8002c5a <HAL_PCD_IRQHandler+0x5d2>
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002bf0:	782d      	ldrb	r5, [r5, #0]
 8002bf2:	7831      	ldrb	r1, [r6, #0]
 8002bf4:	4565      	cmp	r5, ip
 8002bf6:	d11f      	bne.n	8002c38 <HAL_PCD_IRQHandler+0x5b0>
 8002bf8:	0002      	movs	r2, r0
 8002bfa:	4d3c      	ldr	r5, [pc, #240]	; (8002cec <HAL_PCD_IRQHandler+0x664>)
 8002bfc:	3250      	adds	r2, #80	; 0x50
 8002bfe:	8812      	ldrh	r2, [r2, #0]
 8002c00:	1940      	adds	r0, r0, r5
 8002c02:	1880      	adds	r0, r0, r2
 8002c04:	00c9      	lsls	r1, r1, #3
 8002c06:	1840      	adds	r0, r0, r1
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c08:	8802      	ldrh	r2, [r0, #0]
 8002c0a:	493f      	ldr	r1, [pc, #252]	; (8002d08 <HAL_PCD_IRQHandler+0x680>)
 8002c0c:	400a      	ands	r2, r1
 8002c0e:	8002      	strh	r2, [r0, #0]
 8002c10:	8802      	ldrh	r2, [r0, #0]
 8002c12:	4313      	orrs	r3, r2
 8002c14:	b29b      	uxth	r3, r3
 8002c16:	8003      	strh	r3, [r0, #0]
 8002c18:	e01a      	b.n	8002c50 <HAL_PCD_IRQHandler+0x5c8>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002c1a:	4933      	ldr	r1, [pc, #204]	; (8002ce8 <HAL_PCD_IRQHandler+0x660>)
 8002c1c:	1852      	adds	r2, r2, r1
 8002c1e:	8812      	ldrh	r2, [r2, #0]
 8002c20:	0592      	lsls	r2, r2, #22
 8002c22:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 8002c24:	2a00      	cmp	r2, #0
 8002c26:	d09f      	beq.n	8002b68 <HAL_PCD_IRQHandler+0x4e0>
 8002c28:	e780      	b.n	8002b2c <HAL_PCD_IRQHandler+0x4a4>
        ep = &hpcd->OUT_ep[epindex];
 8002c2a:	3169      	adds	r1, #105	; 0x69
 8002c2c:	31ff      	adds	r1, #255	; 0xff
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002c2e:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002c30:	1861      	adds	r1, r4, r1
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002c32:	f001 ffe7 	bl	8004c04 <USB_EPStartXfer>
 8002c36:	e7b8      	b.n	8002baa <HAL_PCD_IRQHandler+0x522>
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c38:	2d01      	cmp	r5, #1
 8002c3a:	d109      	bne.n	8002c50 <HAL_PCD_IRQHandler+0x5c8>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	4a2b      	ldr	r2, [pc, #172]	; (8002cec <HAL_PCD_IRQHandler+0x664>)
 8002c40:	3350      	adds	r3, #80	; 0x50
 8002c42:	881b      	ldrh	r3, [r3, #0]
 8002c44:	1880      	adds	r0, r0, r2
 8002c46:	18c0      	adds	r0, r0, r3
 8002c48:	4663      	mov	r3, ip
 8002c4a:	00c9      	lsls	r1, r1, #3
 8002c4c:	1841      	adds	r1, r0, r1
 8002c4e:	800b      	strh	r3, [r1, #0]
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c50:	0020      	movs	r0, r4
 8002c52:	7831      	ldrb	r1, [r6, #0]
 8002c54:	f003 f942 	bl	8005edc <HAL_PCD_DataInStageCallback>
 8002c58:	e5fb      	b.n	8002852 <HAL_PCD_IRQHandler+0x1ca>
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002c5a:	7829      	ldrb	r1, [r5, #0]
 8002c5c:	7832      	ldrb	r2, [r6, #0]
 8002c5e:	2900      	cmp	r1, #0
 8002c60:	d108      	bne.n	8002c74 <HAL_PCD_IRQHandler+0x5ec>
 8002c62:	0001      	movs	r1, r0
 8002c64:	4d20      	ldr	r5, [pc, #128]	; (8002ce8 <HAL_PCD_IRQHandler+0x660>)
 8002c66:	3150      	adds	r1, #80	; 0x50
 8002c68:	8809      	ldrh	r1, [r1, #0]
 8002c6a:	1940      	adds	r0, r0, r5
 8002c6c:	1840      	adds	r0, r0, r1
 8002c6e:	00d2      	lsls	r2, r2, #3
 8002c70:	1880      	adds	r0, r0, r2
 8002c72:	e7c9      	b.n	8002c08 <HAL_PCD_IRQHandler+0x580>
 8002c74:	2901      	cmp	r1, #1
 8002c76:	d1eb      	bne.n	8002c50 <HAL_PCD_IRQHandler+0x5c8>
 8002c78:	0003      	movs	r3, r0
 8002c7a:	491b      	ldr	r1, [pc, #108]	; (8002ce8 <HAL_PCD_IRQHandler+0x660>)
 8002c7c:	3350      	adds	r3, #80	; 0x50
 8002c7e:	881b      	ldrh	r3, [r3, #0]
 8002c80:	1840      	adds	r0, r0, r1
 8002c82:	18c0      	adds	r0, r0, r3
 8002c84:	00d2      	lsls	r2, r2, #3
 8002c86:	1882      	adds	r2, r0, r2
 8002c88:	8017      	strh	r7, [r2, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002c8a:	e7e1      	b.n	8002c50 <HAL_PCD_IRQHandler+0x5c8>
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8002c8c:	2780      	movs	r7, #128	; 0x80
 8002c8e:	9901      	ldr	r1, [sp, #4]
 8002c90:	007f      	lsls	r7, r7, #1
 8002c92:	4039      	ands	r1, r7
 8002c94:	7833      	ldrb	r3, [r6, #0]
 8002c96:	468c      	mov	ip, r1
 8002c98:	9901      	ldr	r1, [sp, #4]
 8002c9a:	9303      	str	r3, [sp, #12]
 8002c9c:	00da      	lsls	r2, r3, #3
 8002c9e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8002ca0:	4239      	tst	r1, r7
 8002ca2:	d133      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x684>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002ca4:	0007      	movs	r7, r0
 8002ca6:	3750      	adds	r7, #80	; 0x50
 8002ca8:	883f      	ldrh	r7, [r7, #0]
 8002caa:	4910      	ldr	r1, [pc, #64]	; (8002cec <HAL_PCD_IRQHandler+0x664>)
 8002cac:	19c7      	adds	r7, r0, r7
 8002cae:	18ba      	adds	r2, r7, r2
 8002cb0:	1852      	adds	r2, r2, r1
 8002cb2:	8812      	ldrh	r2, [r2, #0]
 8002cb4:	0592      	lsls	r2, r2, #22
          if (ep->xfer_len > TxByteNbre)
 8002cb6:	0d92      	lsrs	r2, r2, #22
 8002cb8:	429a      	cmp	r2, r3
 8002cba:	d302      	bcc.n	8002cc2 <HAL_PCD_IRQHandler+0x63a>
 8002cbc:	4663      	mov	r3, ip
 8002cbe:	642b      	str	r3, [r5, #64]	; 0x40
 8002cc0:	e7c6      	b.n	8002c50 <HAL_PCD_IRQHandler+0x5c8>
        ep = &hpcd->IN_ep[epindex];
 8002cc2:	2128      	movs	r1, #40	; 0x28
            ep->xfer_len -= TxByteNbre;
 8002cc4:	1a9b      	subs	r3, r3, r2
 8002cc6:	642b      	str	r3, [r5, #64]	; 0x40
            ep->xfer_buff += TxByteNbre;
 8002cc8:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 8002cca:	189b      	adds	r3, r3, r2
 8002ccc:	63eb      	str	r3, [r5, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 8002cce:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8002cd0:	189a      	adds	r2, r3, r2
        ep = &hpcd->IN_ep[epindex];
 8002cd2:	9b00      	ldr	r3, [sp, #0]
            ep->xfer_count += TxByteNbre;
 8002cd4:	646a      	str	r2, [r5, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8002cd6:	3301      	adds	r3, #1
 8002cd8:	4359      	muls	r1, r3
 8002cda:	1861      	adds	r1, r4, r1
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 8002cdc:	f001 ff92 	bl	8004c04 <USB_EPStartXfer>
 8002ce0:	e5b7      	b.n	8002852 <HAL_PCD_IRQHandler+0x1ca>
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	00000f8f 	.word	0x00000f8f
 8002ce8:	00000406 	.word	0x00000406
 8002cec:	00000402 	.word	0x00000402
 8002cf0:	ffffbf8f 	.word	0xffffbf8f
 8002cf4:	00008080 	.word	0x00008080
 8002cf8:	ffff8f8f 	.word	0xffff8f8f
 8002cfc:	000080c0 	.word	0x000080c0
 8002d00:	ffff8f0f 	.word	0xffff8f0f
 8002d04:	ffff8000 	.word	0xffff8000
 8002d08:	ffff83ff 	.word	0xffff83ff
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002d0c:	2750      	movs	r7, #80	; 0x50
 8002d0e:	2640      	movs	r6, #64	; 0x40
 8002d10:	46bc      	mov	ip, r7
 8002d12:	9901      	ldr	r1, [sp, #4]
 8002d14:	9f01      	ldr	r7, [sp, #4]
 8002d16:	4031      	ands	r1, r6
 8002d18:	4484      	add	ip, r0
 8002d1a:	4237      	tst	r7, r6
 8002d1c:	d100      	bne.n	8002d20 <HAL_PCD_IRQHandler+0x698>
 8002d1e:	e0dd      	b.n	8002edc <HAL_PCD_IRQHandler+0x854>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d20:	4661      	mov	r1, ip
 8002d22:	4ec8      	ldr	r6, [pc, #800]	; (8003044 <HAL_PCD_IRQHandler+0x9bc>)
 8002d24:	8809      	ldrh	r1, [r1, #0]
 8002d26:	1986      	adds	r6, r0, r6
 8002d28:	1871      	adds	r1, r6, r1
 8002d2a:	5a89      	ldrh	r1, [r1, r2]
      ep->xfer_len = 0U;
 8002d2c:	2700      	movs	r7, #0
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002d2e:	0589      	lsls	r1, r1, #22
 8002d30:	9602      	str	r6, [sp, #8]
    if (ep->xfer_len > TxByteNbre)
 8002d32:	0d89      	lsrs	r1, r1, #22
 8002d34:	4299      	cmp	r1, r3
 8002d36:	d200      	bcs.n	8002d3a <HAL_PCD_IRQHandler+0x6b2>
      ep->xfer_len -= TxByteNbre;
 8002d38:	1a5f      	subs	r7, r3, r1
 8002d3a:	2328      	movs	r3, #40	; 0x28
 8002d3c:	9e00      	ldr	r6, [sp, #0]
 8002d3e:	4373      	muls	r3, r6
 8002d40:	2680      	movs	r6, #128	; 0x80
 8002d42:	18e3      	adds	r3, r4, r3
 8002d44:	641f      	str	r7, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002d46:	9b01      	ldr	r3, [sp, #4]
 8002d48:	01f6      	lsls	r6, r6, #7
 8002d4a:	4033      	ands	r3, r6
 8002d4c:	001e      	movs	r6, r3
 8002d4e:	2f00      	cmp	r7, #0
 8002d50:	d153      	bne.n	8002dfa <HAL_PCD_IRQHandler+0x772>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d52:	0029      	movs	r1, r5
 8002d54:	3129      	adds	r1, #41	; 0x29
 8002d56:	780b      	ldrb	r3, [r1, #0]
 8002d58:	9100      	str	r1, [sp, #0]
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d136      	bne.n	8002dcc <HAL_PCD_IRQHandler+0x744>
 8002d5e:	4663      	mov	r3, ip
 8002d60:	9f02      	ldr	r7, [sp, #8]
 8002d62:	881b      	ldrh	r3, [r3, #0]
 8002d64:	18fb      	adds	r3, r7, r3
 8002d66:	189a      	adds	r2, r3, r2
 8002d68:	8813      	ldrh	r3, [r2, #0]
 8002d6a:	4fb7      	ldr	r7, [pc, #732]	; (8003048 <HAL_PCD_IRQHandler+0x9c0>)
 8002d6c:	403b      	ands	r3, r7
 8002d6e:	8013      	strh	r3, [r2, #0]
 8002d70:	8813      	ldrh	r3, [r2, #0]
 8002d72:	4fb6      	ldr	r7, [pc, #728]	; (800304c <HAL_PCD_IRQHandler+0x9c4>)
 8002d74:	433b      	orrs	r3, r7
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002d7a:	002f      	movs	r7, r5
 8002d7c:	9b00      	ldr	r3, [sp, #0]
 8002d7e:	3728      	adds	r7, #40	; 0x28
 8002d80:	781a      	ldrb	r2, [r3, #0]
 8002d82:	783b      	ldrb	r3, [r7, #0]
 8002d84:	2a00      	cmp	r2, #0
 8002d86:	d12b      	bne.n	8002de0 <HAL_PCD_IRQHandler+0x758>
 8002d88:	4662      	mov	r2, ip
 8002d8a:	49b1      	ldr	r1, [pc, #708]	; (8003050 <HAL_PCD_IRQHandler+0x9c8>)
 8002d8c:	8812      	ldrh	r2, [r2, #0]
 8002d8e:	1840      	adds	r0, r0, r1
 8002d90:	1880      	adds	r0, r0, r2
 8002d92:	00db      	lsls	r3, r3, #3
 8002d94:	18c0      	adds	r0, r0, r3
 8002d96:	8803      	ldrh	r3, [r0, #0]
 8002d98:	4aab      	ldr	r2, [pc, #684]	; (8003048 <HAL_PCD_IRQHandler+0x9c0>)
 8002d9a:	4013      	ands	r3, r2
 8002d9c:	8003      	strh	r3, [r0, #0]
 8002d9e:	8801      	ldrh	r1, [r0, #0]
 8002da0:	4baa      	ldr	r3, [pc, #680]	; (800304c <HAL_PCD_IRQHandler+0x9c4>)
 8002da2:	4319      	orrs	r1, r3
 8002da4:	b289      	uxth	r1, r1
 8002da6:	8001      	strh	r1, [r0, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002da8:	0020      	movs	r0, r4
 8002daa:	7839      	ldrb	r1, [r7, #0]
 8002dac:	f003 f896 	bl	8005edc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002db0:	2e00      	cmp	r6, #0
 8002db2:	d100      	bne.n	8002db6 <HAL_PCD_IRQHandler+0x72e>
 8002db4:	e0dc      	b.n	8002f70 <HAL_PCD_IRQHandler+0x8e8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002db6:	783b      	ldrb	r3, [r7, #0]
 8002db8:	6822      	ldr	r2, [r4, #0]
 8002dba:	009b      	lsls	r3, r3, #2
 8002dbc:	18d2      	adds	r2, r2, r3
 8002dbe:	8813      	ldrh	r3, [r2, #0]
 8002dc0:	49a4      	ldr	r1, [pc, #656]	; (8003054 <HAL_PCD_IRQHandler+0x9cc>)
 8002dc2:	400b      	ands	r3, r1
 8002dc4:	49a4      	ldr	r1, [pc, #656]	; (8003058 <HAL_PCD_IRQHandler+0x9d0>)
 8002dc6:	430b      	orrs	r3, r1
 8002dc8:	8013      	strh	r3, [r2, #0]
 8002dca:	e0d1      	b.n	8002f70 <HAL_PCD_IRQHandler+0x8e8>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d1d4      	bne.n	8002d7a <HAL_PCD_IRQHandler+0x6f2>
 8002dd0:	0003      	movs	r3, r0
 8002dd2:	3350      	adds	r3, #80	; 0x50
 8002dd4:	881b      	ldrh	r3, [r3, #0]
 8002dd6:	9902      	ldr	r1, [sp, #8]
 8002dd8:	18cb      	adds	r3, r1, r3
 8002dda:	189b      	adds	r3, r3, r2
 8002ddc:	801f      	strh	r7, [r3, #0]
 8002dde:	e7cc      	b.n	8002d7a <HAL_PCD_IRQHandler+0x6f2>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002de0:	2a01      	cmp	r2, #1
 8002de2:	d1e1      	bne.n	8002da8 <HAL_PCD_IRQHandler+0x720>
 8002de4:	0002      	movs	r2, r0
 8002de6:	499a      	ldr	r1, [pc, #616]	; (8003050 <HAL_PCD_IRQHandler+0x9c8>)
 8002de8:	3250      	adds	r2, #80	; 0x50
 8002dea:	8812      	ldrh	r2, [r2, #0]
 8002dec:	1840      	adds	r0, r0, r1
 8002dee:	1880      	adds	r0, r0, r2
 8002df0:	2200      	movs	r2, #0
 8002df2:	00db      	lsls	r3, r3, #3
 8002df4:	18c3      	adds	r3, r0, r3
 8002df6:	801a      	strh	r2, [r3, #0]
 8002df8:	e7d6      	b.n	8002da8 <HAL_PCD_IRQHandler+0x720>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d008      	beq.n	8002e10 <HAL_PCD_IRQHandler+0x788>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002dfe:	9b03      	ldr	r3, [sp, #12]
 8002e00:	009a      	lsls	r2, r3, #2
 8002e02:	1882      	adds	r2, r0, r2
 8002e04:	8816      	ldrh	r6, [r2, #0]
 8002e06:	4b93      	ldr	r3, [pc, #588]	; (8003054 <HAL_PCD_IRQHandler+0x9cc>)
 8002e08:	4033      	ands	r3, r6
 8002e0a:	4e93      	ldr	r6, [pc, #588]	; (8003058 <HAL_PCD_IRQHandler+0x9d0>)
 8002e0c:	4333      	orrs	r3, r6
 8002e0e:	8013      	strh	r3, [r2, #0]
      if (ep->xfer_fill_db == 1U)
 8002e10:	2328      	movs	r3, #40	; 0x28
 8002e12:	9a00      	ldr	r2, [sp, #0]
 8002e14:	4353      	muls	r3, r2
 8002e16:	18e3      	adds	r3, r4, r3
 8002e18:	001f      	movs	r7, r3
 8002e1a:	374c      	adds	r7, #76	; 0x4c
 8002e1c:	783a      	ldrb	r2, [r7, #0]
 8002e1e:	2a01      	cmp	r2, #1
 8002e20:	d000      	beq.n	8002e24 <HAL_PCD_IRQHandler+0x79c>
 8002e22:	e0a5      	b.n	8002f70 <HAL_PCD_IRQHandler+0x8e8>
        ep->xfer_buff += TxByteNbre;
 8002e24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e26:	6b9e      	ldr	r6, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8002e28:	4694      	mov	ip, r2
 8002e2a:	448c      	add	ip, r1
 8002e2c:	4662      	mov	r2, ip
 8002e2e:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8002e30:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e32:	1852      	adds	r2, r2, r1
 8002e34:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002e36:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002e38:	42b2      	cmp	r2, r6
 8002e3a:	d325      	bcc.n	8002e88 <HAL_PCD_IRQHandler+0x800>
          ep->xfer_len_db -= len;
 8002e3c:	1b92      	subs	r2, r2, r6
 8002e3e:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e40:	002b      	movs	r3, r5
 8002e42:	002f      	movs	r7, r5
 8002e44:	3329      	adds	r3, #41	; 0x29
 8002e46:	781a      	ldrb	r2, [r3, #0]
 8002e48:	3728      	adds	r7, #40	; 0x28
 8002e4a:	b2b3      	uxth	r3, r6
 8002e4c:	2a00      	cmp	r2, #0
 8002e4e:	d139      	bne.n	8002ec4 <HAL_PCD_IRQHandler+0x83c>
 8002e50:	0002      	movs	r2, r0
 8002e52:	3250      	adds	r2, #80	; 0x50
 8002e54:	8811      	ldrh	r1, [r2, #0]
 8002e56:	783a      	ldrb	r2, [r7, #0]
 8002e58:	9f02      	ldr	r7, [sp, #8]
 8002e5a:	00d2      	lsls	r2, r2, #3
 8002e5c:	1879      	adds	r1, r7, r1
 8002e5e:	1852      	adds	r2, r2, r1
 8002e60:	2e00      	cmp	r6, #0
 8002e62:	d11b      	bne.n	8002e9c <HAL_PCD_IRQHandler+0x814>
 8002e64:	8811      	ldrh	r1, [r2, #0]
 8002e66:	4e78      	ldr	r6, [pc, #480]	; (8003048 <HAL_PCD_IRQHandler+0x9c0>)
 8002e68:	4031      	ands	r1, r6
 8002e6a:	8011      	strh	r1, [r2, #0]
 8002e6c:	8817      	ldrh	r7, [r2, #0]
 8002e6e:	4977      	ldr	r1, [pc, #476]	; (800304c <HAL_PCD_IRQHandler+0x9c4>)
 8002e70:	430f      	orrs	r7, r1
 8002e72:	b2bf      	uxth	r7, r7
 8002e74:	8017      	strh	r7, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 8002e76:	2128      	movs	r1, #40	; 0x28
 8002e78:	9a00      	ldr	r2, [sp, #0]
 8002e7a:	4351      	muls	r1, r2
 8002e7c:	1861      	adds	r1, r4, r1
 8002e7e:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 8002e80:	4661      	mov	r1, ip
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8002e82:	f001 feaa 	bl	8004bda <USB_WritePMA>
 8002e86:	e073      	b.n	8002f70 <HAL_PCD_IRQHandler+0x8e8>
        else if (ep->xfer_len_db == 0U)
 8002e88:	2a00      	cmp	r2, #0
 8002e8a:	d102      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x80a>
    if (ep->xfer_len > TxByteNbre)
 8002e8c:	000e      	movs	r6, r1
          ep->xfer_fill_db = 0U;
 8002e8e:	703a      	strb	r2, [r7, #0]
 8002e90:	e7d6      	b.n	8002e40 <HAL_PCD_IRQHandler+0x7b8>
          ep->xfer_fill_db = 0U;
 8002e92:	2100      	movs	r1, #0
          ep->xfer_len_db = 0U;
 8002e94:	0016      	movs	r6, r2
          ep->xfer_fill_db = 0U;
 8002e96:	7039      	strb	r1, [r7, #0]
          ep->xfer_len_db = 0U;
 8002e98:	6499      	str	r1, [r3, #72]	; 0x48
 8002e9a:	e7d1      	b.n	8002e40 <HAL_PCD_IRQHandler+0x7b8>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002e9c:	2e3e      	cmp	r6, #62	; 0x3e
 8002e9e:	d807      	bhi.n	8002eb0 <HAL_PCD_IRQHandler+0x828>
 8002ea0:	2701      	movs	r7, #1
 8002ea2:	0871      	lsrs	r1, r6, #1
 8002ea4:	403e      	ands	r6, r7
 8002ea6:	1989      	adds	r1, r1, r6
 8002ea8:	0289      	lsls	r1, r1, #10
 8002eaa:	b289      	uxth	r1, r1
 8002eac:	8011      	strh	r1, [r2, #0]
 8002eae:	e7e2      	b.n	8002e76 <HAL_PCD_IRQHandler+0x7ee>
 8002eb0:	271f      	movs	r7, #31
 8002eb2:	0971      	lsrs	r1, r6, #5
 8002eb4:	403e      	ands	r6, r7
 8002eb6:	4277      	negs	r7, r6
 8002eb8:	4177      	adcs	r7, r6
 8002eba:	4e64      	ldr	r6, [pc, #400]	; (800304c <HAL_PCD_IRQHandler+0x9c4>)
 8002ebc:	1bc9      	subs	r1, r1, r7
 8002ebe:	0289      	lsls	r1, r1, #10
 8002ec0:	4331      	orrs	r1, r6
 8002ec2:	e7f2      	b.n	8002eaa <HAL_PCD_IRQHandler+0x822>
 8002ec4:	2a01      	cmp	r2, #1
 8002ec6:	d1d6      	bne.n	8002e76 <HAL_PCD_IRQHandler+0x7ee>
 8002ec8:	0002      	movs	r2, r0
 8002eca:	3250      	adds	r2, #80	; 0x50
 8002ecc:	8812      	ldrh	r2, [r2, #0]
 8002ece:	7839      	ldrb	r1, [r7, #0]
 8002ed0:	9e02      	ldr	r6, [sp, #8]
 8002ed2:	00c9      	lsls	r1, r1, #3
 8002ed4:	18b2      	adds	r2, r6, r2
 8002ed6:	188a      	adds	r2, r1, r2
 8002ed8:	8013      	strh	r3, [r2, #0]
 8002eda:	e7cc      	b.n	8002e76 <HAL_PCD_IRQHandler+0x7ee>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002edc:	4666      	mov	r6, ip
 8002ede:	4f5c      	ldr	r7, [pc, #368]	; (8003050 <HAL_PCD_IRQHandler+0x9c8>)
 8002ee0:	8836      	ldrh	r6, [r6, #0]
 8002ee2:	19c7      	adds	r7, r0, r7
 8002ee4:	19be      	adds	r6, r7, r6
 8002ee6:	9702      	str	r7, [sp, #8]
 8002ee8:	5ab7      	ldrh	r7, [r6, r2]
 8002eea:	05bf      	lsls	r7, r7, #22
    if (ep->xfer_len >= TxByteNbre)
 8002eec:	0dbf      	lsrs	r7, r7, #22
 8002eee:	429f      	cmp	r7, r3
 8002ef0:	d800      	bhi.n	8002ef4 <HAL_PCD_IRQHandler+0x86c>
      ep->xfer_len -= TxByteNbre;
 8002ef2:	1bd9      	subs	r1, r3, r7
 8002ef4:	2328      	movs	r3, #40	; 0x28
 8002ef6:	9e00      	ldr	r6, [sp, #0]
 8002ef8:	4373      	muls	r3, r6
 8002efa:	2680      	movs	r6, #128	; 0x80
 8002efc:	18e3      	adds	r3, r4, r3
 8002efe:	6419      	str	r1, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8002f00:	9b01      	ldr	r3, [sp, #4]
 8002f02:	01f6      	lsls	r6, r6, #7
 8002f04:	4033      	ands	r3, r6
 8002f06:	001e      	movs	r6, r3
 8002f08:	2900      	cmp	r1, #0
 8002f0a:	d151      	bne.n	8002fb0 <HAL_PCD_IRQHandler+0x928>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f0c:	002b      	movs	r3, r5
 8002f0e:	3329      	adds	r3, #41	; 0x29
 8002f10:	781b      	ldrb	r3, [r3, #0]
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d136      	bne.n	8002f84 <HAL_PCD_IRQHandler+0x8fc>
 8002f16:	4663      	mov	r3, ip
 8002f18:	8819      	ldrh	r1, [r3, #0]
 8002f1a:	4b4a      	ldr	r3, [pc, #296]	; (8003044 <HAL_PCD_IRQHandler+0x9bc>)
 8002f1c:	18c3      	adds	r3, r0, r3
 8002f1e:	185b      	adds	r3, r3, r1
 8002f20:	189a      	adds	r2, r3, r2
 8002f22:	8813      	ldrh	r3, [r2, #0]
 8002f24:	4948      	ldr	r1, [pc, #288]	; (8003048 <HAL_PCD_IRQHandler+0x9c0>)
 8002f26:	400b      	ands	r3, r1
 8002f28:	8013      	strh	r3, [r2, #0]
 8002f2a:	8813      	ldrh	r3, [r2, #0]
 8002f2c:	4947      	ldr	r1, [pc, #284]	; (800304c <HAL_PCD_IRQHandler+0x9c4>)
 8002f2e:	430b      	orrs	r3, r1
 8002f30:	b29b      	uxth	r3, r3
 8002f32:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f34:	002b      	movs	r3, r5
 8002f36:	002f      	movs	r7, r5
 8002f38:	3329      	adds	r3, #41	; 0x29
 8002f3a:	781a      	ldrb	r2, [r3, #0]
 8002f3c:	3728      	adds	r7, #40	; 0x28
 8002f3e:	783b      	ldrb	r3, [r7, #0]
 8002f40:	2a00      	cmp	r2, #0
 8002f42:	d12a      	bne.n	8002f9a <HAL_PCD_IRQHandler+0x912>
 8002f44:	4662      	mov	r2, ip
 8002f46:	9902      	ldr	r1, [sp, #8]
 8002f48:	8812      	ldrh	r2, [r2, #0]
 8002f4a:	00db      	lsls	r3, r3, #3
 8002f4c:	188a      	adds	r2, r1, r2
 8002f4e:	189b      	adds	r3, r3, r2
 8002f50:	881a      	ldrh	r2, [r3, #0]
 8002f52:	493d      	ldr	r1, [pc, #244]	; (8003048 <HAL_PCD_IRQHandler+0x9c0>)
 8002f54:	400a      	ands	r2, r1
 8002f56:	801a      	strh	r2, [r3, #0]
 8002f58:	8819      	ldrh	r1, [r3, #0]
 8002f5a:	4a3c      	ldr	r2, [pc, #240]	; (800304c <HAL_PCD_IRQHandler+0x9c4>)
 8002f5c:	4311      	orrs	r1, r2
 8002f5e:	b289      	uxth	r1, r1
 8002f60:	8019      	strh	r1, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002f62:	0020      	movs	r0, r4
 8002f64:	7839      	ldrb	r1, [r7, #0]
 8002f66:	f002 ffb9 	bl	8005edc <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002f6a:	2e00      	cmp	r6, #0
 8002f6c:	d100      	bne.n	8002f70 <HAL_PCD_IRQHandler+0x8e8>
 8002f6e:	e722      	b.n	8002db6 <HAL_PCD_IRQHandler+0x72e>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002f70:	3528      	adds	r5, #40	; 0x28
 8002f72:	782b      	ldrb	r3, [r5, #0]
 8002f74:	6822      	ldr	r2, [r4, #0]
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	18d1      	adds	r1, r2, r3
 8002f7a:	880b      	ldrh	r3, [r1, #0]
 8002f7c:	4a37      	ldr	r2, [pc, #220]	; (800305c <HAL_PCD_IRQHandler+0x9d4>)
 8002f7e:	401a      	ands	r2, r3
 8002f80:	2330      	movs	r3, #48	; 0x30
 8002f82:	e4e7      	b.n	8002954 <HAL_PCD_IRQHandler+0x2cc>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d1d5      	bne.n	8002f34 <HAL_PCD_IRQHandler+0x8ac>
 8002f88:	0003      	movs	r3, r0
 8002f8a:	3350      	adds	r3, #80	; 0x50
 8002f8c:	881f      	ldrh	r7, [r3, #0]
 8002f8e:	4b2d      	ldr	r3, [pc, #180]	; (8003044 <HAL_PCD_IRQHandler+0x9bc>)
 8002f90:	18c3      	adds	r3, r0, r3
 8002f92:	19db      	adds	r3, r3, r7
 8002f94:	189b      	adds	r3, r3, r2
 8002f96:	8019      	strh	r1, [r3, #0]
 8002f98:	e7cc      	b.n	8002f34 <HAL_PCD_IRQHandler+0x8ac>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f9a:	2a01      	cmp	r2, #1
 8002f9c:	d1e1      	bne.n	8002f62 <HAL_PCD_IRQHandler+0x8da>
 8002f9e:	3050      	adds	r0, #80	; 0x50
 8002fa0:	8802      	ldrh	r2, [r0, #0]
 8002fa2:	9902      	ldr	r1, [sp, #8]
 8002fa4:	00db      	lsls	r3, r3, #3
 8002fa6:	188a      	adds	r2, r1, r2
 8002fa8:	189b      	adds	r3, r3, r2
 8002faa:	2200      	movs	r2, #0
 8002fac:	801a      	strh	r2, [r3, #0]
 8002fae:	e7d8      	b.n	8002f62 <HAL_PCD_IRQHandler+0x8da>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d108      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x93e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8002fb4:	9b03      	ldr	r3, [sp, #12]
 8002fb6:	4a27      	ldr	r2, [pc, #156]	; (8003054 <HAL_PCD_IRQHandler+0x9cc>)
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	18c3      	adds	r3, r0, r3
 8002fbc:	8819      	ldrh	r1, [r3, #0]
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	4925      	ldr	r1, [pc, #148]	; (8003058 <HAL_PCD_IRQHandler+0x9d0>)
 8002fc2:	430a      	orrs	r2, r1
 8002fc4:	801a      	strh	r2, [r3, #0]
      if (ep->xfer_fill_db == 1U)
 8002fc6:	2328      	movs	r3, #40	; 0x28
 8002fc8:	9a00      	ldr	r2, [sp, #0]
 8002fca:	4353      	muls	r3, r2
 8002fcc:	224c      	movs	r2, #76	; 0x4c
 8002fce:	4694      	mov	ip, r2
 8002fd0:	18e3      	adds	r3, r4, r3
 8002fd2:	449c      	add	ip, r3
 8002fd4:	4662      	mov	r2, ip
 8002fd6:	7812      	ldrb	r2, [r2, #0]
 8002fd8:	2a01      	cmp	r2, #1
 8002fda:	d1c9      	bne.n	8002f70 <HAL_PCD_IRQHandler+0x8e8>
        ep->xfer_buff += TxByteNbre;
 8002fdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fde:	6c9e      	ldr	r6, [r3, #72]	; 0x48
        ep->xfer_buff += TxByteNbre;
 8002fe0:	19d1      	adds	r1, r2, r7
        ep->xfer_count += TxByteNbre;
 8002fe2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8002fe4:	63d9      	str	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8002fe6:	19d2      	adds	r2, r2, r7
 8002fe8:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8002fea:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002fec:	4296      	cmp	r6, r2
 8002fee:	d31c      	bcc.n	800302a <HAL_PCD_IRQHandler+0x9a2>
          ep->xfer_len_db -= len;
 8002ff0:	1ab6      	subs	r6, r6, r2
 8002ff2:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8002ff4:	002b      	movs	r3, r5
 8002ff6:	002e      	movs	r6, r5
 8002ff8:	3329      	adds	r3, #41	; 0x29
 8002ffa:	781f      	ldrb	r7, [r3, #0]
 8002ffc:	b293      	uxth	r3, r2
 8002ffe:	9301      	str	r3, [sp, #4]
 8003000:	3628      	adds	r6, #40	; 0x28
 8003002:	2f00      	cmp	r7, #0
 8003004:	d144      	bne.n	8003090 <HAL_PCD_IRQHandler+0xa08>
 8003006:	0007      	movs	r7, r0
 8003008:	3750      	adds	r7, #80	; 0x50
 800300a:	883f      	ldrh	r7, [r7, #0]
 800300c:	7836      	ldrb	r6, [r6, #0]
 800300e:	9b02      	ldr	r3, [sp, #8]
 8003010:	00f6      	lsls	r6, r6, #3
 8003012:	19df      	adds	r7, r3, r7
 8003014:	19f6      	adds	r6, r6, r7
 8003016:	2a00      	cmp	r2, #0
 8003018:	d122      	bne.n	8003060 <HAL_PCD_IRQHandler+0x9d8>
 800301a:	8832      	ldrh	r2, [r6, #0]
 800301c:	4f0a      	ldr	r7, [pc, #40]	; (8003048 <HAL_PCD_IRQHandler+0x9c0>)
 800301e:	403a      	ands	r2, r7
 8003020:	8032      	strh	r2, [r6, #0]
 8003022:	8837      	ldrh	r7, [r6, #0]
 8003024:	4b09      	ldr	r3, [pc, #36]	; (800304c <HAL_PCD_IRQHandler+0x9c4>)
 8003026:	431f      	orrs	r7, r3
 8003028:	e021      	b.n	800306e <HAL_PCD_IRQHandler+0x9e6>
        else if (ep->xfer_len_db == 0U)
 800302a:	2e00      	cmp	r6, #0
 800302c:	d103      	bne.n	8003036 <HAL_PCD_IRQHandler+0x9ae>
          ep->xfer_fill_db = 0U;
 800302e:	4663      	mov	r3, ip
    if (ep->xfer_len >= TxByteNbre)
 8003030:	003a      	movs	r2, r7
          ep->xfer_fill_db = 0U;
 8003032:	701e      	strb	r6, [r3, #0]
 8003034:	e7de      	b.n	8002ff4 <HAL_PCD_IRQHandler+0x96c>
          ep->xfer_len_db = 0U;
 8003036:	2200      	movs	r2, #0
 8003038:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800303a:	4663      	mov	r3, ip
 800303c:	701a      	strb	r2, [r3, #0]
 800303e:	0032      	movs	r2, r6
 8003040:	e7d8      	b.n	8002ff4 <HAL_PCD_IRQHandler+0x96c>
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	00000402 	.word	0x00000402
 8003048:	ffff83ff 	.word	0xffff83ff
 800304c:	ffff8000 	.word	0xffff8000
 8003050:	00000406 	.word	0x00000406
 8003054:	ffff8f8f 	.word	0xffff8f8f
 8003058:	0000c080 	.word	0x0000c080
 800305c:	ffff8fbf 	.word	0xffff8fbf
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003060:	2a3e      	cmp	r2, #62	; 0x3e
 8003062:	d80d      	bhi.n	8003080 <HAL_PCD_IRQHandler+0x9f8>
 8003064:	2301      	movs	r3, #1
 8003066:	0857      	lsrs	r7, r2, #1
 8003068:	401a      	ands	r2, r3
 800306a:	18bf      	adds	r7, r7, r2
 800306c:	02bf      	lsls	r7, r7, #10
 800306e:	b2bf      	uxth	r7, r7
 8003070:	8037      	strh	r7, [r6, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 8003072:	2228      	movs	r2, #40	; 0x28
 8003074:	9b00      	ldr	r3, [sp, #0]
 8003076:	435a      	muls	r2, r3
 8003078:	18a2      	adds	r2, r4, r2
 800307a:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800307c:	9b01      	ldr	r3, [sp, #4]
 800307e:	e700      	b.n	8002e82 <HAL_PCD_IRQHandler+0x7fa>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003080:	231f      	movs	r3, #31
 8003082:	0957      	lsrs	r7, r2, #5
 8003084:	401a      	ands	r2, r3
 8003086:	4253      	negs	r3, r2
 8003088:	4153      	adcs	r3, r2
 800308a:	1aff      	subs	r7, r7, r3
 800308c:	02bf      	lsls	r7, r7, #10
 800308e:	e7c9      	b.n	8003024 <HAL_PCD_IRQHandler+0x99c>
 8003090:	2f01      	cmp	r7, #1
 8003092:	d1ee      	bne.n	8003072 <HAL_PCD_IRQHandler+0x9ea>
 8003094:	0002      	movs	r2, r0
 8003096:	3250      	adds	r2, #80	; 0x50
 8003098:	8812      	ldrh	r2, [r2, #0]
 800309a:	7836      	ldrb	r6, [r6, #0]
 800309c:	9b02      	ldr	r3, [sp, #8]
 800309e:	00f6      	lsls	r6, r6, #3
 80030a0:	189a      	adds	r2, r3, r2
 80030a2:	9b01      	ldr	r3, [sp, #4]
 80030a4:	18b2      	adds	r2, r6, r2
 80030a6:	8013      	strh	r3, [r2, #0]
 80030a8:	e7e3      	b.n	8003072 <HAL_PCD_IRQHandler+0x9ea>
      HAL_PCD_SuspendCallback(hpcd);
 80030aa:	0020      	movs	r0, r4
 80030ac:	f002 ff3a 	bl	8005f24 <HAL_PCD_SuspendCallback>
 80030b0:	f7ff fb7c 	bl	80027ac <HAL_PCD_IRQHandler+0x124>

080030b4 <HAL_PCD_EP_Open>:
{
 80030b4:	b570      	push	{r4, r5, r6, lr}
 80030b6:	0005      	movs	r5, r0
 80030b8:	2007      	movs	r0, #7
 80030ba:	4008      	ands	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 80030bc:	b249      	sxtb	r1, r1
 80030be:	2428      	movs	r4, #40	; 0x28
 80030c0:	2900      	cmp	r1, #0
 80030c2:	da1d      	bge.n	8003100 <HAL_PCD_EP_Open+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030c4:	1c41      	adds	r1, r0, #1
 80030c6:	4361      	muls	r1, r4
    ep->is_in = 1U;
 80030c8:	3c27      	subs	r4, #39	; 0x27
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80030ca:	1869      	adds	r1, r5, r1
    ep->is_in = 1U;
 80030cc:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
 80030ce:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 80030d0:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030d2:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 80030d4:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 80030d6:	2a00      	cmp	r2, #0
 80030d8:	d000      	beq.n	80030dc <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 80030da:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 80030dc:	2b02      	cmp	r3, #2
 80030de:	d101      	bne.n	80030e4 <HAL_PCD_EP_Open+0x30>
    ep->data_pid_start = 0U;
 80030e0:	2300      	movs	r3, #0
 80030e2:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 80030e4:	24aa      	movs	r4, #170	; 0xaa
 80030e6:	00a4      	lsls	r4, r4, #2
 80030e8:	5d2b      	ldrb	r3, [r5, r4]
 80030ea:	2002      	movs	r0, #2
 80030ec:	2b01      	cmp	r3, #1
 80030ee:	d006      	beq.n	80030fe <HAL_PCD_EP_Open+0x4a>
 80030f0:	2301      	movs	r3, #1
 80030f2:	552b      	strb	r3, [r5, r4]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80030f4:	6828      	ldr	r0, [r5, #0]
 80030f6:	f001 fb29 	bl	800474c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80030fa:	2000      	movs	r0, #0
 80030fc:	5528      	strb	r0, [r5, r4]
}
 80030fe:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003100:	4344      	muls	r4, r0
 8003102:	0021      	movs	r1, r4
    ep->is_in = 0U;
 8003104:	2600      	movs	r6, #0
 8003106:	192c      	adds	r4, r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003108:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 800310a:	346a      	adds	r4, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800310c:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 800310e:	34ff      	adds	r4, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003110:	1869      	adds	r1, r5, r1
    ep->is_in = 0U;
 8003112:	7026      	strb	r6, [r4, #0]
 8003114:	e7db      	b.n	80030ce <HAL_PCD_EP_Open+0x1a>

08003116 <HAL_PCD_EP_Close>:
{
 8003116:	b570      	push	{r4, r5, r6, lr}
 8003118:	0004      	movs	r4, r0
 800311a:	2007      	movs	r0, #7
 800311c:	4008      	ands	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800311e:	b249      	sxtb	r1, r1
 8003120:	2328      	movs	r3, #40	; 0x28
 8003122:	2900      	cmp	r1, #0
 8003124:	da13      	bge.n	800314e <HAL_PCD_EP_Close+0x38>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003126:	1c41      	adds	r1, r0, #1
 8003128:	4359      	muls	r1, r3
    ep->is_in = 1U;
 800312a:	3b27      	subs	r3, #39	; 0x27
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800312c:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 800312e:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8003130:	25aa      	movs	r5, #170	; 0xaa
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003132:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8003134:	00ad      	lsls	r5, r5, #2
 8003136:	5d63      	ldrb	r3, [r4, r5]
 8003138:	2002      	movs	r0, #2
 800313a:	2b01      	cmp	r3, #1
 800313c:	d006      	beq.n	800314c <HAL_PCD_EP_Close+0x36>
 800313e:	2301      	movs	r3, #1
 8003140:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003142:	6820      	ldr	r0, [r4, #0]
 8003144:	f001 fc40 	bl	80049c8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003148:	2000      	movs	r0, #0
 800314a:	5560      	strb	r0, [r4, r5]
}
 800314c:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800314e:	4343      	muls	r3, r0
 8003150:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8003152:	18e2      	adds	r2, r4, r3
 8003154:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003156:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 8003158:	326a      	adds	r2, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800315a:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 800315c:	32ff      	adds	r2, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800315e:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003160:	7013      	strb	r3, [r2, #0]
 8003162:	e7e5      	b.n	8003130 <HAL_PCD_EP_Close+0x1a>

08003164 <HAL_PCD_EP_Receive>:
{
 8003164:	b570      	push	{r4, r5, r6, lr}
 8003166:	2407      	movs	r4, #7
 8003168:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 800316a:	3421      	adds	r4, #33	; 0x21
 800316c:	434c      	muls	r4, r1
 800316e:	1905      	adds	r5, r0, r4
 8003170:	002e      	movs	r6, r5
 8003172:	367d      	adds	r6, #125	; 0x7d
 8003174:	36ff      	adds	r6, #255	; 0xff
 8003176:	6032      	str	r2, [r6, #0]
  ep->xfer_len = len;
 8003178:	002a      	movs	r2, r5
 800317a:	3281      	adds	r2, #129	; 0x81
 800317c:	32ff      	adds	r2, #255	; 0xff
 800317e:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 8003180:	002b      	movs	r3, r5
 8003182:	2600      	movs	r6, #0
 8003184:	3385      	adds	r3, #133	; 0x85
 8003186:	33ff      	adds	r3, #255	; 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 8003188:	3569      	adds	r5, #105	; 0x69
  ep->xfer_count = 0U;
 800318a:	601e      	str	r6, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 800318c:	35ff      	adds	r5, #255	; 0xff
  ep->is_in = 0U;
 800318e:	3b1b      	subs	r3, #27
 8003190:	701e      	strb	r6, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003192:	7029      	strb	r1, [r5, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003194:	0021      	movs	r1, r4
 8003196:	3169      	adds	r1, #105	; 0x69
 8003198:	31ff      	adds	r1, #255	; 0xff
 800319a:	1841      	adds	r1, r0, r1
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 800319c:	6800      	ldr	r0, [r0, #0]
 800319e:	f001 fd31 	bl	8004c04 <USB_EPStartXfer>
}
 80031a2:	0030      	movs	r0, r6
 80031a4:	bd70      	pop	{r4, r5, r6, pc}

080031a6 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80031a6:	2307      	movs	r3, #7
 80031a8:	400b      	ands	r3, r1
 80031aa:	2128      	movs	r1, #40	; 0x28
 80031ac:	4359      	muls	r1, r3
 80031ae:	1840      	adds	r0, r0, r1
 80031b0:	3085      	adds	r0, #133	; 0x85
 80031b2:	30ff      	adds	r0, #255	; 0xff
 80031b4:	6800      	ldr	r0, [r0, #0]
}
 80031b6:	4770      	bx	lr

080031b8 <HAL_PCD_EP_Transmit>:
{
 80031b8:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 80031ba:	2628      	movs	r6, #40	; 0x28
 80031bc:	2407      	movs	r4, #7
 80031be:	4021      	ands	r1, r4
 80031c0:	0034      	movs	r4, r6
 80031c2:	434c      	muls	r4, r1
 80031c4:	1904      	adds	r4, r0, r4
  ep->xfer_fill_db = 1U;
 80031c6:	0025      	movs	r5, r4
  ep->xfer_buff = pBuf;
 80031c8:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 80031ca:	2201      	movs	r2, #1
 80031cc:	354c      	adds	r5, #76	; 0x4c
  ep->xfer_len = len;
 80031ce:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 80031d0:	702a      	strb	r2, [r5, #0]
  ep->xfer_count = 0U;
 80031d2:	2500      	movs	r5, #0
  ep->xfer_len_db = len;
 80031d4:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->is_in = 1U;
 80031d6:	0023      	movs	r3, r4
  ep->xfer_count = 0U;
 80031d8:	6465      	str	r5, [r4, #68]	; 0x44
  ep->is_in = 1U;
 80031da:	3329      	adds	r3, #41	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 80031dc:	19a4      	adds	r4, r4, r6
  ep->is_in = 1U;
 80031de:	701a      	strb	r2, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80031e0:	7021      	strb	r1, [r4, #0]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80031e2:	1889      	adds	r1, r1, r2
 80031e4:	4371      	muls	r1, r6
 80031e6:	1841      	adds	r1, r0, r1
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80031e8:	6800      	ldr	r0, [r0, #0]
 80031ea:	f001 fd0b 	bl	8004c04 <USB_EPStartXfer>
}
 80031ee:	0028      	movs	r0, r5
 80031f0:	bd70      	pop	{r4, r5, r6, pc}

080031f2 <HAL_PCD_EP_SetStall>:
{
 80031f2:	b570      	push	{r4, r5, r6, lr}
 80031f4:	0004      	movs	r4, r0
 80031f6:	2507      	movs	r5, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031f8:	6863      	ldr	r3, [r4, #4]
    return HAL_ERROR;
 80031fa:	2001      	movs	r0, #1
 80031fc:	400d      	ands	r5, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80031fe:	429d      	cmp	r5, r3
 8003200:	d816      	bhi.n	8003230 <HAL_PCD_EP_SetStall+0x3e>
  if ((0x80U & ep_addr) == 0x80U)
 8003202:	b24a      	sxtb	r2, r1
 8003204:	2328      	movs	r3, #40	; 0x28
 8003206:	2a00      	cmp	r2, #0
 8003208:	da13      	bge.n	8003232 <HAL_PCD_EP_SetStall+0x40>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800320a:	1829      	adds	r1, r5, r0
 800320c:	4359      	muls	r1, r3
 800320e:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8003210:	7048      	strb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003212:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8003214:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8003216:	25aa      	movs	r5, #170	; 0xaa
  ep->is_stall = 1U;
 8003218:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800321a:	00ad      	lsls	r5, r5, #2
 800321c:	5d62      	ldrb	r2, [r4, r5]
 800321e:	2002      	movs	r0, #2
 8003220:	429a      	cmp	r2, r3
 8003222:	d005      	beq.n	8003230 <HAL_PCD_EP_SetStall+0x3e>
 8003224:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003226:	6820      	ldr	r0, [r4, #0]
 8003228:	f001 fc64 	bl	8004af4 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800322c:	2000      	movs	r0, #0
 800322e:	5560      	strb	r0, [r4, r5]
}
 8003230:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003232:	434b      	muls	r3, r1
 8003234:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8003236:	18e2      	adds	r2, r4, r3
 8003238:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800323a:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 800323c:	326a      	adds	r2, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr];
 800323e:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 8003240:	32ff      	adds	r2, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 8003242:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003244:	7013      	strb	r3, [r2, #0]
 8003246:	e7e4      	b.n	8003212 <HAL_PCD_EP_SetStall+0x20>

08003248 <HAL_PCD_EP_ClrStall>:
{
 8003248:	b570      	push	{r4, r5, r6, lr}
 800324a:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800324c:	230f      	movs	r3, #15
 800324e:	6862      	ldr	r2, [r4, #4]
    return HAL_ERROR;
 8003250:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003252:	400b      	ands	r3, r1
 8003254:	4293      	cmp	r3, r2
 8003256:	d81a      	bhi.n	800328e <HAL_PCD_EP_ClrStall+0x46>
  if ((0x80U & ep_addr) == 0x80U)
 8003258:	3006      	adds	r0, #6
 800325a:	4008      	ands	r0, r1
 800325c:	b249      	sxtb	r1, r1
 800325e:	2328      	movs	r3, #40	; 0x28
 8003260:	2900      	cmp	r1, #0
 8003262:	da15      	bge.n	8003290 <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003264:	1c41      	adds	r1, r0, #1
 8003266:	4359      	muls	r1, r3
    ep->is_in = 1U;
 8003268:	3b27      	subs	r3, #39	; 0x27
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800326a:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 800326c:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 800326e:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 8003270:	26aa      	movs	r6, #170	; 0xaa
  ep->num = ep_addr & EP_ADDR_MSK;
 8003272:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 0U;
 8003274:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 8003276:	00b6      	lsls	r6, r6, #2
 8003278:	5da3      	ldrb	r3, [r4, r6]
 800327a:	2002      	movs	r0, #2
 800327c:	2b01      	cmp	r3, #1
 800327e:	d006      	beq.n	800328e <HAL_PCD_EP_ClrStall+0x46>
 8003280:	2301      	movs	r3, #1
 8003282:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003284:	6820      	ldr	r0, [r4, #0]
 8003286:	f001 fc53 	bl	8004b30 <USB_EPClearStall>
  return HAL_OK;
 800328a:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 800328c:	55a5      	strb	r5, [r4, r6]
}
 800328e:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003290:	4343      	muls	r3, r0
 8003292:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8003294:	18e2      	adds	r2, r4, r3
 8003296:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003298:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 800329a:	326a      	adds	r2, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800329c:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 800329e:	32ff      	adds	r2, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032a0:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80032a2:	7013      	strb	r3, [r2, #0]
 80032a4:	e7e3      	b.n	800326e <HAL_PCD_EP_ClrStall+0x26>

080032a6 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 80032a6:	b510      	push	{r4, lr}
 80032a8:	000c      	movs	r4, r1
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 80032aa:	0621      	lsls	r1, r4, #24
 80032ac:	d50c      	bpl.n	80032c8 <HAL_PCDEx_PMAConfig+0x22>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80032ae:	2107      	movs	r1, #7
 80032b0:	4021      	ands	r1, r4
 80032b2:	2428      	movs	r4, #40	; 0x28
 80032b4:	3101      	adds	r1, #1
 80032b6:	4361      	muls	r1, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80032b8:	1840      	adds	r0, r0, r1
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 80032ba:	b299      	uxth	r1, r3
 80032bc:	2a00      	cmp	r2, #0
 80032be:	d108      	bne.n	80032d2 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 80032c0:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 80032c2:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 80032c4:	2000      	movs	r0, #0
 80032c6:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 80032c8:	2128      	movs	r1, #40	; 0x28
 80032ca:	4361      	muls	r1, r4
 80032cc:	3169      	adds	r1, #105	; 0x69
 80032ce:	31ff      	adds	r1, #255	; 0xff
 80032d0:	e7f2      	b.n	80032b8 <HAL_PCDEx_PMAConfig+0x12>
    ep->doublebuffer = 1U;
 80032d2:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80032d4:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 80032d6:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80032d8:	e7f4      	b.n	80032c4 <HAL_PCDEx_PMAConfig+0x1e>

080032da <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 80032da:	6803      	ldr	r3, [r0, #0]
{
 80032dc:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 80032de:	20ba      	movs	r0, #186	; 0xba
 80032e0:	2101      	movs	r1, #1
{
 80032e2:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 80032e4:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 80032e6:	24b8      	movs	r4, #184	; 0xb8
  hpcd->lpm_active = 1U;
 80032e8:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 80032ea:	2000      	movs	r0, #0
 80032ec:	00a4      	lsls	r4, r4, #2
 80032ee:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80032f0:	3354      	adds	r3, #84	; 0x54
 80032f2:	881a      	ldrh	r2, [r3, #0]
 80032f4:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80032f6:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80032f8:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80032fa:	8819      	ldrh	r1, [r3, #0]
 80032fc:	430a      	orrs	r2, r1
 80032fe:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8003300:	bd10      	pop	{r4, pc}

08003302 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003302:	4770      	bx	lr

08003304 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	0004      	movs	r4, r0
 8003308:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800330a:	2800      	cmp	r0, #0
 800330c:	d04e      	beq.n	80033ac <HAL_RCC_OscConfig+0xa8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800330e:	6803      	ldr	r3, [r0, #0]
 8003310:	07db      	lsls	r3, r3, #31
 8003312:	d433      	bmi.n	800337c <HAL_RCC_OscConfig+0x78>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003314:	6823      	ldr	r3, [r4, #0]
 8003316:	079b      	lsls	r3, r3, #30
 8003318:	d500      	bpl.n	800331c <HAL_RCC_OscConfig+0x18>
 800331a:	e08a      	b.n	8003432 <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800331c:	6823      	ldr	r3, [r4, #0]
 800331e:	071b      	lsls	r3, r3, #28
 8003320:	d500      	bpl.n	8003324 <HAL_RCC_OscConfig+0x20>
 8003322:	e0ca      	b.n	80034ba <HAL_RCC_OscConfig+0x1b6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003324:	6823      	ldr	r3, [r4, #0]
 8003326:	075b      	lsls	r3, r3, #29
 8003328:	d500      	bpl.n	800332c <HAL_RCC_OscConfig+0x28>
 800332a:	e0ed      	b.n	8003508 <HAL_RCC_OscConfig+0x204>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800332c:	6823      	ldr	r3, [r4, #0]
 800332e:	06db      	lsls	r3, r3, #27
 8003330:	d51a      	bpl.n	8003368 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003332:	6962      	ldr	r2, [r4, #20]
 8003334:	2304      	movs	r3, #4
 8003336:	4dbc      	ldr	r5, [pc, #752]	; (8003628 <HAL_RCC_OscConfig+0x324>)
 8003338:	2a01      	cmp	r2, #1
 800333a:	d000      	beq.n	800333e <HAL_RCC_OscConfig+0x3a>
 800333c:	e158      	b.n	80035f0 <HAL_RCC_OscConfig+0x2ec>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800333e:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003340:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003342:	430b      	orrs	r3, r1
 8003344:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 8003346:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003348:	431a      	orrs	r2, r3
 800334a:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800334c:	f7fe fc80 	bl	8001c50 <HAL_GetTick>
 8003350:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 8003352:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003354:	423b      	tst	r3, r7
 8003356:	d100      	bne.n	800335a <HAL_RCC_OscConfig+0x56>
 8003358:	e143      	b.n	80035e2 <HAL_RCC_OscConfig+0x2de>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 800335a:	21f8      	movs	r1, #248	; 0xf8
 800335c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 800335e:	69a3      	ldr	r3, [r4, #24]
 8003360:	438a      	bics	r2, r1
 8003362:	00db      	lsls	r3, r3, #3
 8003364:	4313      	orrs	r3, r2
 8003366:	636b      	str	r3, [r5, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003368:	6823      	ldr	r3, [r4, #0]
 800336a:	069b      	lsls	r3, r3, #26
 800336c:	d500      	bpl.n	8003370 <HAL_RCC_OscConfig+0x6c>
 800336e:	e167      	b.n	8003640 <HAL_RCC_OscConfig+0x33c>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003372:	2b00      	cmp	r3, #0
 8003374:	d000      	beq.n	8003378 <HAL_RCC_OscConfig+0x74>
 8003376:	e1a4      	b.n	80036c2 <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }

  return HAL_OK;
 8003378:	2000      	movs	r0, #0
 800337a:	e02f      	b.n	80033dc <HAL_RCC_OscConfig+0xd8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 800337c:	210c      	movs	r1, #12
 800337e:	4daa      	ldr	r5, [pc, #680]	; (8003628 <HAL_RCC_OscConfig+0x324>)
 8003380:	686a      	ldr	r2, [r5, #4]
 8003382:	400a      	ands	r2, r1
 8003384:	2a04      	cmp	r2, #4
 8003386:	d00b      	beq.n	80033a0 <HAL_RCC_OscConfig+0x9c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003388:	686b      	ldr	r3, [r5, #4]
 800338a:	400b      	ands	r3, r1
 800338c:	2b08      	cmp	r3, #8
 800338e:	d10f      	bne.n	80033b0 <HAL_RCC_OscConfig+0xac>
 8003390:	22c0      	movs	r2, #192	; 0xc0
 8003392:	686b      	ldr	r3, [r5, #4]
 8003394:	0252      	lsls	r2, r2, #9
 8003396:	4013      	ands	r3, r2
 8003398:	2280      	movs	r2, #128	; 0x80
 800339a:	0252      	lsls	r2, r2, #9
 800339c:	4293      	cmp	r3, r2
 800339e:	d107      	bne.n	80033b0 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a0:	682b      	ldr	r3, [r5, #0]
 80033a2:	039b      	lsls	r3, r3, #14
 80033a4:	d5b6      	bpl.n	8003314 <HAL_RCC_OscConfig+0x10>
 80033a6:	6863      	ldr	r3, [r4, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d1b3      	bne.n	8003314 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 80033ac:	2001      	movs	r0, #1
 80033ae:	e015      	b.n	80033dc <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033b0:	6863      	ldr	r3, [r4, #4]
 80033b2:	2b01      	cmp	r3, #1
 80033b4:	d114      	bne.n	80033e0 <HAL_RCC_OscConfig+0xdc>
 80033b6:	2380      	movs	r3, #128	; 0x80
 80033b8:	682a      	ldr	r2, [r5, #0]
 80033ba:	025b      	lsls	r3, r3, #9
 80033bc:	4313      	orrs	r3, r2
 80033be:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033c0:	f7fe fc46 	bl	8001c50 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c4:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 80033c6:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c8:	02bf      	lsls	r7, r7, #10
 80033ca:	682b      	ldr	r3, [r5, #0]
 80033cc:	423b      	tst	r3, r7
 80033ce:	d1a1      	bne.n	8003314 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d0:	f7fe fc3e 	bl	8001c50 <HAL_GetTick>
 80033d4:	1b80      	subs	r0, r0, r6
 80033d6:	2864      	cmp	r0, #100	; 0x64
 80033d8:	d9f7      	bls.n	80033ca <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 80033da:	2003      	movs	r0, #3
}
 80033dc:	b005      	add	sp, #20
 80033de:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d116      	bne.n	8003412 <HAL_RCC_OscConfig+0x10e>
 80033e4:	682b      	ldr	r3, [r5, #0]
 80033e6:	4a91      	ldr	r2, [pc, #580]	; (800362c <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033e8:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033ea:	4013      	ands	r3, r2
 80033ec:	602b      	str	r3, [r5, #0]
 80033ee:	682b      	ldr	r3, [r5, #0]
 80033f0:	4a8f      	ldr	r2, [pc, #572]	; (8003630 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033f2:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033f4:	4013      	ands	r3, r2
 80033f6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80033f8:	f7fe fc2a 	bl	8001c50 <HAL_GetTick>
 80033fc:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033fe:	682b      	ldr	r3, [r5, #0]
 8003400:	423b      	tst	r3, r7
 8003402:	d100      	bne.n	8003406 <HAL_RCC_OscConfig+0x102>
 8003404:	e786      	b.n	8003314 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003406:	f7fe fc23 	bl	8001c50 <HAL_GetTick>
 800340a:	1b80      	subs	r0, r0, r6
 800340c:	2864      	cmp	r0, #100	; 0x64
 800340e:	d9f6      	bls.n	80033fe <HAL_RCC_OscConfig+0xfa>
 8003410:	e7e3      	b.n	80033da <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003412:	2b05      	cmp	r3, #5
 8003414:	d105      	bne.n	8003422 <HAL_RCC_OscConfig+0x11e>
 8003416:	2380      	movs	r3, #128	; 0x80
 8003418:	682a      	ldr	r2, [r5, #0]
 800341a:	02db      	lsls	r3, r3, #11
 800341c:	4313      	orrs	r3, r2
 800341e:	602b      	str	r3, [r5, #0]
 8003420:	e7c9      	b.n	80033b6 <HAL_RCC_OscConfig+0xb2>
 8003422:	682b      	ldr	r3, [r5, #0]
 8003424:	4a81      	ldr	r2, [pc, #516]	; (800362c <HAL_RCC_OscConfig+0x328>)
 8003426:	4013      	ands	r3, r2
 8003428:	602b      	str	r3, [r5, #0]
 800342a:	682b      	ldr	r3, [r5, #0]
 800342c:	4a80      	ldr	r2, [pc, #512]	; (8003630 <HAL_RCC_OscConfig+0x32c>)
 800342e:	4013      	ands	r3, r2
 8003430:	e7c5      	b.n	80033be <HAL_RCC_OscConfig+0xba>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003432:	220c      	movs	r2, #12
 8003434:	4d7c      	ldr	r5, [pc, #496]	; (8003628 <HAL_RCC_OscConfig+0x324>)
 8003436:	686b      	ldr	r3, [r5, #4]
 8003438:	4213      	tst	r3, r2
 800343a:	d00b      	beq.n	8003454 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800343c:	686b      	ldr	r3, [r5, #4]
 800343e:	4013      	ands	r3, r2
 8003440:	2b08      	cmp	r3, #8
 8003442:	d115      	bne.n	8003470 <HAL_RCC_OscConfig+0x16c>
 8003444:	22c0      	movs	r2, #192	; 0xc0
 8003446:	686b      	ldr	r3, [r5, #4]
 8003448:	0252      	lsls	r2, r2, #9
 800344a:	4013      	ands	r3, r2
 800344c:	2280      	movs	r2, #128	; 0x80
 800344e:	0212      	lsls	r2, r2, #8
 8003450:	4293      	cmp	r3, r2
 8003452:	d10d      	bne.n	8003470 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003454:	682b      	ldr	r3, [r5, #0]
 8003456:	079b      	lsls	r3, r3, #30
 8003458:	d502      	bpl.n	8003460 <HAL_RCC_OscConfig+0x15c>
 800345a:	68e3      	ldr	r3, [r4, #12]
 800345c:	2b01      	cmp	r3, #1
 800345e:	d1a5      	bne.n	80033ac <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003460:	21f8      	movs	r1, #248	; 0xf8
 8003462:	682a      	ldr	r2, [r5, #0]
 8003464:	6923      	ldr	r3, [r4, #16]
 8003466:	438a      	bics	r2, r1
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4313      	orrs	r3, r2
 800346c:	602b      	str	r3, [r5, #0]
 800346e:	e755      	b.n	800331c <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003470:	68e2      	ldr	r2, [r4, #12]
 8003472:	2301      	movs	r3, #1
 8003474:	2a00      	cmp	r2, #0
 8003476:	d00f      	beq.n	8003498 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 8003478:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800347a:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 800347c:	4313      	orrs	r3, r2
 800347e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003480:	f7fe fbe6 	bl	8001c50 <HAL_GetTick>
 8003484:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003486:	682b      	ldr	r3, [r5, #0]
 8003488:	423b      	tst	r3, r7
 800348a:	d1e9      	bne.n	8003460 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800348c:	f7fe fbe0 	bl	8001c50 <HAL_GetTick>
 8003490:	1b80      	subs	r0, r0, r6
 8003492:	2802      	cmp	r0, #2
 8003494:	d9f7      	bls.n	8003486 <HAL_RCC_OscConfig+0x182>
 8003496:	e7a0      	b.n	80033da <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI_DISABLE();
 8003498:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349a:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 800349c:	439a      	bics	r2, r3
 800349e:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 80034a0:	f7fe fbd6 	bl	8001c50 <HAL_GetTick>
 80034a4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034a6:	682b      	ldr	r3, [r5, #0]
 80034a8:	423b      	tst	r3, r7
 80034aa:	d100      	bne.n	80034ae <HAL_RCC_OscConfig+0x1aa>
 80034ac:	e736      	b.n	800331c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80034ae:	f7fe fbcf 	bl	8001c50 <HAL_GetTick>
 80034b2:	1b80      	subs	r0, r0, r6
 80034b4:	2802      	cmp	r0, #2
 80034b6:	d9f6      	bls.n	80034a6 <HAL_RCC_OscConfig+0x1a2>
 80034b8:	e78f      	b.n	80033da <HAL_RCC_OscConfig+0xd6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034ba:	69e2      	ldr	r2, [r4, #28]
 80034bc:	2301      	movs	r3, #1
 80034be:	4d5a      	ldr	r5, [pc, #360]	; (8003628 <HAL_RCC_OscConfig+0x324>)
 80034c0:	2a00      	cmp	r2, #0
 80034c2:	d010      	beq.n	80034e6 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 80034c4:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c6:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 80034c8:	4313      	orrs	r3, r2
 80034ca:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80034cc:	f7fe fbc0 	bl	8001c50 <HAL_GetTick>
 80034d0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80034d4:	423b      	tst	r3, r7
 80034d6:	d000      	beq.n	80034da <HAL_RCC_OscConfig+0x1d6>
 80034d8:	e724      	b.n	8003324 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034da:	f7fe fbb9 	bl	8001c50 <HAL_GetTick>
 80034de:	1b80      	subs	r0, r0, r6
 80034e0:	2802      	cmp	r0, #2
 80034e2:	d9f6      	bls.n	80034d2 <HAL_RCC_OscConfig+0x1ce>
 80034e4:	e779      	b.n	80033da <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_LSI_DISABLE();
 80034e6:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034e8:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 80034ea:	439a      	bics	r2, r3
 80034ec:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 80034ee:	f7fe fbaf 	bl	8001c50 <HAL_GetTick>
 80034f2:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f4:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80034f6:	423b      	tst	r3, r7
 80034f8:	d100      	bne.n	80034fc <HAL_RCC_OscConfig+0x1f8>
 80034fa:	e713      	b.n	8003324 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034fc:	f7fe fba8 	bl	8001c50 <HAL_GetTick>
 8003500:	1b80      	subs	r0, r0, r6
 8003502:	2802      	cmp	r0, #2
 8003504:	d9f6      	bls.n	80034f4 <HAL_RCC_OscConfig+0x1f0>
 8003506:	e768      	b.n	80033da <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003508:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800350a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800350c:	4d46      	ldr	r5, [pc, #280]	; (8003628 <HAL_RCC_OscConfig+0x324>)
 800350e:	0552      	lsls	r2, r2, #21
 8003510:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003512:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003514:	4213      	tst	r3, r2
 8003516:	d108      	bne.n	800352a <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003518:	69eb      	ldr	r3, [r5, #28]
 800351a:	4313      	orrs	r3, r2
 800351c:	61eb      	str	r3, [r5, #28]
 800351e:	69eb      	ldr	r3, [r5, #28]
 8003520:	4013      	ands	r3, r2
 8003522:	9303      	str	r3, [sp, #12]
 8003524:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003526:	2301      	movs	r3, #1
 8003528:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800352a:	2780      	movs	r7, #128	; 0x80
 800352c:	4e41      	ldr	r6, [pc, #260]	; (8003634 <HAL_RCC_OscConfig+0x330>)
 800352e:	007f      	lsls	r7, r7, #1
 8003530:	6833      	ldr	r3, [r6, #0]
 8003532:	423b      	tst	r3, r7
 8003534:	d006      	beq.n	8003544 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003536:	68a3      	ldr	r3, [r4, #8]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d113      	bne.n	8003564 <HAL_RCC_OscConfig+0x260>
 800353c:	6a2a      	ldr	r2, [r5, #32]
 800353e:	4313      	orrs	r3, r2
 8003540:	622b      	str	r3, [r5, #32]
 8003542:	e030      	b.n	80035a6 <HAL_RCC_OscConfig+0x2a2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003544:	6833      	ldr	r3, [r6, #0]
 8003546:	433b      	orrs	r3, r7
 8003548:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 800354a:	f7fe fb81 	bl	8001c50 <HAL_GetTick>
 800354e:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003550:	6833      	ldr	r3, [r6, #0]
 8003552:	423b      	tst	r3, r7
 8003554:	d1ef      	bne.n	8003536 <HAL_RCC_OscConfig+0x232>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003556:	f7fe fb7b 	bl	8001c50 <HAL_GetTick>
 800355a:	9b01      	ldr	r3, [sp, #4]
 800355c:	1ac0      	subs	r0, r0, r3
 800355e:	2864      	cmp	r0, #100	; 0x64
 8003560:	d9f6      	bls.n	8003550 <HAL_RCC_OscConfig+0x24c>
 8003562:	e73a      	b.n	80033da <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003564:	2201      	movs	r2, #1
 8003566:	2b00      	cmp	r3, #0
 8003568:	d114      	bne.n	8003594 <HAL_RCC_OscConfig+0x290>
 800356a:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800356c:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800356e:	4393      	bics	r3, r2
 8003570:	622b      	str	r3, [r5, #32]
 8003572:	6a2b      	ldr	r3, [r5, #32]
 8003574:	3203      	adds	r2, #3
 8003576:	4393      	bics	r3, r2
 8003578:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 800357a:	f7fe fb69 	bl	8001c50 <HAL_GetTick>
 800357e:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003580:	6a2b      	ldr	r3, [r5, #32]
 8003582:	423b      	tst	r3, r7
 8003584:	d016      	beq.n	80035b4 <HAL_RCC_OscConfig+0x2b0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003586:	f7fe fb63 	bl	8001c50 <HAL_GetTick>
 800358a:	4b2b      	ldr	r3, [pc, #172]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 800358c:	1b80      	subs	r0, r0, r6
 800358e:	4298      	cmp	r0, r3
 8003590:	d9f6      	bls.n	8003580 <HAL_RCC_OscConfig+0x27c>
 8003592:	e722      	b.n	80033da <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003594:	2b05      	cmp	r3, #5
 8003596:	d116      	bne.n	80035c6 <HAL_RCC_OscConfig+0x2c2>
 8003598:	6a29      	ldr	r1, [r5, #32]
 800359a:	3b01      	subs	r3, #1
 800359c:	430b      	orrs	r3, r1
 800359e:	622b      	str	r3, [r5, #32]
 80035a0:	6a2b      	ldr	r3, [r5, #32]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 80035a6:	f7fe fb53 	bl	8001c50 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035aa:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 80035ac:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ae:	6a2b      	ldr	r3, [r5, #32]
 80035b0:	423b      	tst	r3, r7
 80035b2:	d00f      	beq.n	80035d4 <HAL_RCC_OscConfig+0x2d0>
    if(pwrclkchanged == SET)
 80035b4:	9b00      	ldr	r3, [sp, #0]
 80035b6:	2b01      	cmp	r3, #1
 80035b8:	d000      	beq.n	80035bc <HAL_RCC_OscConfig+0x2b8>
 80035ba:	e6b7      	b.n	800332c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 80035bc:	69eb      	ldr	r3, [r5, #28]
 80035be:	4a1f      	ldr	r2, [pc, #124]	; (800363c <HAL_RCC_OscConfig+0x338>)
 80035c0:	4013      	ands	r3, r2
 80035c2:	61eb      	str	r3, [r5, #28]
 80035c4:	e6b2      	b.n	800332c <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035c6:	6a2b      	ldr	r3, [r5, #32]
 80035c8:	4393      	bics	r3, r2
 80035ca:	2204      	movs	r2, #4
 80035cc:	622b      	str	r3, [r5, #32]
 80035ce:	6a2b      	ldr	r3, [r5, #32]
 80035d0:	4393      	bics	r3, r2
 80035d2:	e7b5      	b.n	8003540 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fe fb3c 	bl	8001c50 <HAL_GetTick>
 80035d8:	4b17      	ldr	r3, [pc, #92]	; (8003638 <HAL_RCC_OscConfig+0x334>)
 80035da:	1b80      	subs	r0, r0, r6
 80035dc:	4298      	cmp	r0, r3
 80035de:	d9e6      	bls.n	80035ae <HAL_RCC_OscConfig+0x2aa>
 80035e0:	e6fb      	b.n	80033da <HAL_RCC_OscConfig+0xd6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 80035e2:	f7fe fb35 	bl	8001c50 <HAL_GetTick>
 80035e6:	1b80      	subs	r0, r0, r6
 80035e8:	2802      	cmp	r0, #2
 80035ea:	d800      	bhi.n	80035ee <HAL_RCC_OscConfig+0x2ea>
 80035ec:	e6b1      	b.n	8003352 <HAL_RCC_OscConfig+0x4e>
 80035ee:	e6f4      	b.n	80033da <HAL_RCC_OscConfig+0xd6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 80035f0:	3205      	adds	r2, #5
 80035f2:	d103      	bne.n	80035fc <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_ENABLE();
 80035f4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80035f6:	439a      	bics	r2, r3
 80035f8:	636a      	str	r2, [r5, #52]	; 0x34
 80035fa:	e6ae      	b.n	800335a <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 80035fc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 80035fe:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003600:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8003602:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8003604:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003606:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003608:	4393      	bics	r3, r2
 800360a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800360c:	f7fe fb20 	bl	8001c50 <HAL_GetTick>
 8003610:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003612:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003614:	423b      	tst	r3, r7
 8003616:	d100      	bne.n	800361a <HAL_RCC_OscConfig+0x316>
 8003618:	e6a6      	b.n	8003368 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800361a:	f7fe fb19 	bl	8001c50 <HAL_GetTick>
 800361e:	1b80      	subs	r0, r0, r6
 8003620:	2802      	cmp	r0, #2
 8003622:	d9f6      	bls.n	8003612 <HAL_RCC_OscConfig+0x30e>
 8003624:	e6d9      	b.n	80033da <HAL_RCC_OscConfig+0xd6>
 8003626:	46c0      	nop			; (mov r8, r8)
 8003628:	40021000 	.word	0x40021000
 800362c:	fffeffff 	.word	0xfffeffff
 8003630:	fffbffff 	.word	0xfffbffff
 8003634:	40007000 	.word	0x40007000
 8003638:	00001388 	.word	0x00001388
 800363c:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003640:	210c      	movs	r1, #12
 8003642:	4d54      	ldr	r5, [pc, #336]	; (8003794 <HAL_RCC_OscConfig+0x490>)
 8003644:	686a      	ldr	r2, [r5, #4]
 8003646:	400a      	ands	r2, r1
 8003648:	428a      	cmp	r2, r1
 800364a:	d009      	beq.n	8003660 <HAL_RCC_OscConfig+0x35c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 800364c:	686b      	ldr	r3, [r5, #4]
 800364e:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 8003650:	2b08      	cmp	r3, #8
 8003652:	d10e      	bne.n	8003672 <HAL_RCC_OscConfig+0x36e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 8003654:	22c0      	movs	r2, #192	; 0xc0
 8003656:	686b      	ldr	r3, [r5, #4]
 8003658:	0252      	lsls	r2, r2, #9
 800365a:	4013      	ands	r3, r2
 800365c:	4293      	cmp	r3, r2
 800365e:	d108      	bne.n	8003672 <HAL_RCC_OscConfig+0x36e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 8003660:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003662:	03db      	lsls	r3, r3, #15
 8003664:	d400      	bmi.n	8003668 <HAL_RCC_OscConfig+0x364>
 8003666:	e683      	b.n	8003370 <HAL_RCC_OscConfig+0x6c>
 8003668:	6a23      	ldr	r3, [r4, #32]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d000      	beq.n	8003670 <HAL_RCC_OscConfig+0x36c>
 800366e:	e69d      	b.n	80033ac <HAL_RCC_OscConfig+0xa8>
 8003670:	e67e      	b.n	8003370 <HAL_RCC_OscConfig+0x6c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003672:	6a23      	ldr	r3, [r4, #32]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d011      	beq.n	800369c <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 8003678:	2680      	movs	r6, #128	; 0x80
 800367a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800367c:	0276      	lsls	r6, r6, #9
 800367e:	4333      	orrs	r3, r6
 8003680:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8003682:	f7fe fae5 	bl	8001c50 <HAL_GetTick>
 8003686:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003688:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800368a:	4233      	tst	r3, r6
 800368c:	d000      	beq.n	8003690 <HAL_RCC_OscConfig+0x38c>
 800368e:	e66f      	b.n	8003370 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003690:	f7fe fade 	bl	8001c50 <HAL_GetTick>
 8003694:	1bc0      	subs	r0, r0, r7
 8003696:	2802      	cmp	r0, #2
 8003698:	d9f6      	bls.n	8003688 <HAL_RCC_OscConfig+0x384>
 800369a:	e69e      	b.n	80033da <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI48_DISABLE();
 800369c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 800369e:	4a3e      	ldr	r2, [pc, #248]	; (8003798 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80036a0:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 80036a2:	4013      	ands	r3, r2
 80036a4:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80036a6:	f7fe fad3 	bl	8001c50 <HAL_GetTick>
 80036aa:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 80036ac:	027f      	lsls	r7, r7, #9
 80036ae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80036b0:	423b      	tst	r3, r7
 80036b2:	d100      	bne.n	80036b6 <HAL_RCC_OscConfig+0x3b2>
 80036b4:	e65c      	b.n	8003370 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036b6:	f7fe facb 	bl	8001c50 <HAL_GetTick>
 80036ba:	1b80      	subs	r0, r0, r6
 80036bc:	2802      	cmp	r0, #2
 80036be:	d9f6      	bls.n	80036ae <HAL_RCC_OscConfig+0x3aa>
 80036c0:	e68b      	b.n	80033da <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036c2:	200c      	movs	r0, #12
 80036c4:	4a33      	ldr	r2, [pc, #204]	; (8003794 <HAL_RCC_OscConfig+0x490>)
 80036c6:	6851      	ldr	r1, [r2, #4]
 80036c8:	0015      	movs	r5, r2
 80036ca:	4001      	ands	r1, r0
 80036cc:	2908      	cmp	r1, #8
 80036ce:	d047      	beq.n	8003760 <HAL_RCC_OscConfig+0x45c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036d0:	4a32      	ldr	r2, [pc, #200]	; (800379c <HAL_RCC_OscConfig+0x498>)
 80036d2:	2b02      	cmp	r3, #2
 80036d4:	d132      	bne.n	800373c <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_DISABLE();
 80036d6:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d8:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 80036da:	4013      	ands	r3, r2
 80036dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80036de:	f7fe fab7 	bl	8001c50 <HAL_GetTick>
 80036e2:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036e4:	04bf      	lsls	r7, r7, #18
 80036e6:	682b      	ldr	r3, [r5, #0]
 80036e8:	423b      	tst	r3, r7
 80036ea:	d121      	bne.n	8003730 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036ec:	220f      	movs	r2, #15
 80036ee:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036f0:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f2:	4393      	bics	r3, r2
 80036f4:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80036f6:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036f8:	4313      	orrs	r3, r2
 80036fa:	62eb      	str	r3, [r5, #44]	; 0x2c
 80036fc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 80036fe:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003700:	686a      	ldr	r2, [r5, #4]
 8003702:	430b      	orrs	r3, r1
 8003704:	4926      	ldr	r1, [pc, #152]	; (80037a0 <HAL_RCC_OscConfig+0x49c>)
 8003706:	400a      	ands	r2, r1
 8003708:	4313      	orrs	r3, r2
 800370a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800370c:	2380      	movs	r3, #128	; 0x80
 800370e:	682a      	ldr	r2, [r5, #0]
 8003710:	045b      	lsls	r3, r3, #17
 8003712:	4313      	orrs	r3, r2
 8003714:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003716:	f7fe fa9b 	bl	8001c50 <HAL_GetTick>
 800371a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800371c:	682b      	ldr	r3, [r5, #0]
 800371e:	4233      	tst	r3, r6
 8003720:	d000      	beq.n	8003724 <HAL_RCC_OscConfig+0x420>
 8003722:	e629      	b.n	8003378 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003724:	f7fe fa94 	bl	8001c50 <HAL_GetTick>
 8003728:	1b00      	subs	r0, r0, r4
 800372a:	2802      	cmp	r0, #2
 800372c:	d9f6      	bls.n	800371c <HAL_RCC_OscConfig+0x418>
 800372e:	e654      	b.n	80033da <HAL_RCC_OscConfig+0xd6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003730:	f7fe fa8e 	bl	8001c50 <HAL_GetTick>
 8003734:	1b80      	subs	r0, r0, r6
 8003736:	2802      	cmp	r0, #2
 8003738:	d9d5      	bls.n	80036e6 <HAL_RCC_OscConfig+0x3e2>
 800373a:	e64e      	b.n	80033da <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 800373c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800373e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003740:	4013      	ands	r3, r2
 8003742:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003744:	f7fe fa84 	bl	8001c50 <HAL_GetTick>
 8003748:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800374a:	04b6      	lsls	r6, r6, #18
 800374c:	682b      	ldr	r3, [r5, #0]
 800374e:	4233      	tst	r3, r6
 8003750:	d100      	bne.n	8003754 <HAL_RCC_OscConfig+0x450>
 8003752:	e611      	b.n	8003378 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003754:	f7fe fa7c 	bl	8001c50 <HAL_GetTick>
 8003758:	1b00      	subs	r0, r0, r4
 800375a:	2802      	cmp	r0, #2
 800375c:	d9f6      	bls.n	800374c <HAL_RCC_OscConfig+0x448>
 800375e:	e63c      	b.n	80033da <HAL_RCC_OscConfig+0xd6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003760:	2b01      	cmp	r3, #1
 8003762:	d100      	bne.n	8003766 <HAL_RCC_OscConfig+0x462>
 8003764:	e622      	b.n	80033ac <HAL_RCC_OscConfig+0xa8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003766:	21c0      	movs	r1, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8003768:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800376a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800376c:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 800376e:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003770:	4019      	ands	r1, r3
 8003772:	4281      	cmp	r1, r0
 8003774:	d000      	beq.n	8003778 <HAL_RCC_OscConfig+0x474>
 8003776:	e619      	b.n	80033ac <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003778:	210f      	movs	r1, #15
 800377a:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800377c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 800377e:	428a      	cmp	r2, r1
 8003780:	d000      	beq.n	8003784 <HAL_RCC_OscConfig+0x480>
 8003782:	e613      	b.n	80033ac <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003784:	22f0      	movs	r2, #240	; 0xf0
 8003786:	0392      	lsls	r2, r2, #14
 8003788:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 800378a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800378c:	4293      	cmp	r3, r2
 800378e:	d100      	bne.n	8003792 <HAL_RCC_OscConfig+0x48e>
 8003790:	e5f2      	b.n	8003378 <HAL_RCC_OscConfig+0x74>
 8003792:	e60b      	b.n	80033ac <HAL_RCC_OscConfig+0xa8>
 8003794:	40021000 	.word	0x40021000
 8003798:	fffeffff 	.word	0xfffeffff
 800379c:	feffffff 	.word	0xfeffffff
 80037a0:	ffc27fff 	.word	0xffc27fff

080037a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80037a4:	b530      	push	{r4, r5, lr}
 80037a6:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80037a8:	2210      	movs	r2, #16
 80037aa:	4919      	ldr	r1, [pc, #100]	; (8003810 <HAL_RCC_GetSysClockFreq+0x6c>)
 80037ac:	4668      	mov	r0, sp
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80037ae:	ad04      	add	r5, sp, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 80037b0:	f002 fcf4 	bl	800619c <memcpy>
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 80037b4:	2210      	movs	r2, #16
 80037b6:	0028      	movs	r0, r5
 80037b8:	4916      	ldr	r1, [pc, #88]	; (8003814 <HAL_RCC_GetSysClockFreq+0x70>)
 80037ba:	f002 fcef 	bl	800619c <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80037be:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 80037c0:	4a15      	ldr	r2, [pc, #84]	; (8003818 <HAL_RCC_GetSysClockFreq+0x74>)
 80037c2:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 80037c4:	4018      	ands	r0, r3
 80037c6:	2808      	cmp	r0, #8
 80037c8:	d009      	beq.n	80037de <HAL_RCC_GetSysClockFreq+0x3a>
 80037ca:	380c      	subs	r0, #12
 80037cc:	1e43      	subs	r3, r0, #1
 80037ce:	4198      	sbcs	r0, r3
 80037d0:	4b12      	ldr	r3, [pc, #72]	; (800381c <HAL_RCC_GetSysClockFreq+0x78>)
 80037d2:	4240      	negs	r0, r0
 80037d4:	4018      	ands	r0, r3
 80037d6:	4b12      	ldr	r3, [pc, #72]	; (8003820 <HAL_RCC_GetSysClockFreq+0x7c>)
 80037d8:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 80037da:	b009      	add	sp, #36	; 0x24
 80037dc:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80037de:	200f      	movs	r0, #15
 80037e0:	466c      	mov	r4, sp
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80037e2:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80037e4:	0c99      	lsrs	r1, r3, #18
 80037e6:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80037e8:	4002      	ands	r2, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 80037ea:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 80037ec:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 80037ee:	22c0      	movs	r2, #192	; 0xc0
 80037f0:	2080      	movs	r0, #128	; 0x80
 80037f2:	0252      	lsls	r2, r2, #9
 80037f4:	4013      	ands	r3, r2
 80037f6:	0240      	lsls	r0, r0, #9
 80037f8:	4283      	cmp	r3, r0
 80037fa:	d101      	bne.n	8003800 <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80037fc:	4809      	ldr	r0, [pc, #36]	; (8003824 <HAL_RCC_GetSysClockFreq+0x80>)
 80037fe:	e002      	b.n	8003806 <HAL_RCC_GetSysClockFreq+0x62>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003800:	4293      	cmp	r3, r2
 8003802:	d1fb      	bne.n	80037fc <HAL_RCC_GetSysClockFreq+0x58>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003804:	4806      	ldr	r0, [pc, #24]	; (8003820 <HAL_RCC_GetSysClockFreq+0x7c>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003806:	f7fc fcb9 	bl	800017c <__udivsi3>
 800380a:	4360      	muls	r0, r4
 800380c:	e7e5      	b.n	80037da <HAL_RCC_GetSysClockFreq+0x36>
 800380e:	46c0      	nop			; (mov r8, r8)
 8003810:	08006ee6 	.word	0x08006ee6
 8003814:	08006ef7 	.word	0x08006ef7
 8003818:	40021000 	.word	0x40021000
 800381c:	fd9da600 	.word	0xfd9da600
 8003820:	02dc6c00 	.word	0x02dc6c00
 8003824:	007a1200 	.word	0x007a1200

08003828 <HAL_RCC_ClockConfig>:
{
 8003828:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800382a:	0005      	movs	r5, r0
 800382c:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 800382e:	2800      	cmp	r0, #0
 8003830:	d101      	bne.n	8003836 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8003832:	2001      	movs	r0, #1
}
 8003834:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003836:	2201      	movs	r2, #1
 8003838:	4c3b      	ldr	r4, [pc, #236]	; (8003928 <HAL_RCC_ClockConfig+0x100>)
 800383a:	6823      	ldr	r3, [r4, #0]
 800383c:	4013      	ands	r3, r2
 800383e:	428b      	cmp	r3, r1
 8003840:	d31c      	bcc.n	800387c <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003842:	6829      	ldr	r1, [r5, #0]
 8003844:	078b      	lsls	r3, r1, #30
 8003846:	d422      	bmi.n	800388e <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003848:	07cb      	lsls	r3, r1, #31
 800384a:	d42f      	bmi.n	80038ac <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800384c:	2301      	movs	r3, #1
 800384e:	6822      	ldr	r2, [r4, #0]
 8003850:	401a      	ands	r2, r3
 8003852:	42ba      	cmp	r2, r7
 8003854:	d859      	bhi.n	800390a <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003856:	682b      	ldr	r3, [r5, #0]
 8003858:	4c34      	ldr	r4, [pc, #208]	; (800392c <HAL_RCC_ClockConfig+0x104>)
 800385a:	075b      	lsls	r3, r3, #29
 800385c:	d45c      	bmi.n	8003918 <HAL_RCC_ClockConfig+0xf0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800385e:	f7ff ffa1 	bl	80037a4 <HAL_RCC_GetSysClockFreq>
 8003862:	6863      	ldr	r3, [r4, #4]
 8003864:	4a32      	ldr	r2, [pc, #200]	; (8003930 <HAL_RCC_ClockConfig+0x108>)
 8003866:	061b      	lsls	r3, r3, #24
 8003868:	0f1b      	lsrs	r3, r3, #28
 800386a:	5cd3      	ldrb	r3, [r2, r3]
 800386c:	40d8      	lsrs	r0, r3
 800386e:	4b31      	ldr	r3, [pc, #196]	; (8003934 <HAL_RCC_ClockConfig+0x10c>)
 8003870:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003872:	2000      	movs	r0, #0
 8003874:	f7fe f928 	bl	8001ac8 <HAL_InitTick>
  return HAL_OK;
 8003878:	2000      	movs	r0, #0
 800387a:	e7db      	b.n	8003834 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800387c:	6823      	ldr	r3, [r4, #0]
 800387e:	4393      	bics	r3, r2
 8003880:	430b      	orrs	r3, r1
 8003882:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003884:	6823      	ldr	r3, [r4, #0]
 8003886:	4013      	ands	r3, r2
 8003888:	428b      	cmp	r3, r1
 800388a:	d1d2      	bne.n	8003832 <HAL_RCC_ClockConfig+0xa>
 800388c:	e7d9      	b.n	8003842 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800388e:	4a27      	ldr	r2, [pc, #156]	; (800392c <HAL_RCC_ClockConfig+0x104>)
 8003890:	074b      	lsls	r3, r1, #29
 8003892:	d504      	bpl.n	800389e <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003894:	23e0      	movs	r3, #224	; 0xe0
 8003896:	6850      	ldr	r0, [r2, #4]
 8003898:	00db      	lsls	r3, r3, #3
 800389a:	4303      	orrs	r3, r0
 800389c:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800389e:	20f0      	movs	r0, #240	; 0xf0
 80038a0:	6853      	ldr	r3, [r2, #4]
 80038a2:	4383      	bics	r3, r0
 80038a4:	68a8      	ldr	r0, [r5, #8]
 80038a6:	4303      	orrs	r3, r0
 80038a8:	6053      	str	r3, [r2, #4]
 80038aa:	e7cd      	b.n	8003848 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ac:	686a      	ldr	r2, [r5, #4]
 80038ae:	4e1f      	ldr	r6, [pc, #124]	; (800392c <HAL_RCC_ClockConfig+0x104>)
 80038b0:	2a01      	cmp	r2, #1
 80038b2:	d11a      	bne.n	80038ea <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038b4:	6833      	ldr	r3, [r6, #0]
 80038b6:	039b      	lsls	r3, r3, #14
 80038b8:	d5bb      	bpl.n	8003832 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038ba:	2103      	movs	r1, #3
 80038bc:	6873      	ldr	r3, [r6, #4]
 80038be:	438b      	bics	r3, r1
 80038c0:	4313      	orrs	r3, r2
 80038c2:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 80038c4:	f7fe f9c4 	bl	8001c50 <HAL_GetTick>
 80038c8:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	230c      	movs	r3, #12
 80038cc:	6872      	ldr	r2, [r6, #4]
 80038ce:	401a      	ands	r2, r3
 80038d0:	686b      	ldr	r3, [r5, #4]
 80038d2:	009b      	lsls	r3, r3, #2
 80038d4:	429a      	cmp	r2, r3
 80038d6:	d0b9      	beq.n	800384c <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038d8:	f7fe f9ba 	bl	8001c50 <HAL_GetTick>
 80038dc:	9b01      	ldr	r3, [sp, #4]
 80038de:	1ac0      	subs	r0, r0, r3
 80038e0:	4b15      	ldr	r3, [pc, #84]	; (8003938 <HAL_RCC_ClockConfig+0x110>)
 80038e2:	4298      	cmp	r0, r3
 80038e4:	d9f1      	bls.n	80038ca <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 80038e6:	2003      	movs	r0, #3
 80038e8:	e7a4      	b.n	8003834 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ea:	2a02      	cmp	r2, #2
 80038ec:	d103      	bne.n	80038f6 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038ee:	6833      	ldr	r3, [r6, #0]
 80038f0:	019b      	lsls	r3, r3, #6
 80038f2:	d4e2      	bmi.n	80038ba <HAL_RCC_ClockConfig+0x92>
 80038f4:	e79d      	b.n	8003832 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 80038f6:	2a03      	cmp	r2, #3
 80038f8:	d103      	bne.n	8003902 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80038fa:	6b73      	ldr	r3, [r6, #52]	; 0x34
 80038fc:	03db      	lsls	r3, r3, #15
 80038fe:	d4dc      	bmi.n	80038ba <HAL_RCC_ClockConfig+0x92>
 8003900:	e797      	b.n	8003832 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	6833      	ldr	r3, [r6, #0]
 8003904:	079b      	lsls	r3, r3, #30
 8003906:	d4d8      	bmi.n	80038ba <HAL_RCC_ClockConfig+0x92>
 8003908:	e793      	b.n	8003832 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800390a:	6822      	ldr	r2, [r4, #0]
 800390c:	439a      	bics	r2, r3
 800390e:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003910:	6822      	ldr	r2, [r4, #0]
 8003912:	421a      	tst	r2, r3
 8003914:	d09f      	beq.n	8003856 <HAL_RCC_ClockConfig+0x2e>
 8003916:	e78c      	b.n	8003832 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003918:	6863      	ldr	r3, [r4, #4]
 800391a:	4a08      	ldr	r2, [pc, #32]	; (800393c <HAL_RCC_ClockConfig+0x114>)
 800391c:	4013      	ands	r3, r2
 800391e:	68ea      	ldr	r2, [r5, #12]
 8003920:	4313      	orrs	r3, r2
 8003922:	6063      	str	r3, [r4, #4]
 8003924:	e79b      	b.n	800385e <HAL_RCC_ClockConfig+0x36>
 8003926:	46c0      	nop			; (mov r8, r8)
 8003928:	40022000 	.word	0x40022000
 800392c:	40021000 	.word	0x40021000
 8003930:	08006d95 	.word	0x08006d95
 8003934:	20000004 	.word	0x20000004
 8003938:	00001388 	.word	0x00001388
 800393c:	fffff8ff 	.word	0xfffff8ff

08003940 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003940:	4b04      	ldr	r3, [pc, #16]	; (8003954 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003942:	4a05      	ldr	r2, [pc, #20]	; (8003958 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	055b      	lsls	r3, r3, #21
 8003948:	0f5b      	lsrs	r3, r3, #29
 800394a:	5cd3      	ldrb	r3, [r2, r3]
 800394c:	4a03      	ldr	r2, [pc, #12]	; (800395c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800394e:	6810      	ldr	r0, [r2, #0]
 8003950:	40d8      	lsrs	r0, r3
}    
 8003952:	4770      	bx	lr
 8003954:	40021000 	.word	0x40021000
 8003958:	08006da5 	.word	0x08006da5
 800395c:	20000004 	.word	0x20000004

08003960 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003960:	2307      	movs	r3, #7
{
 8003962:	b510      	push	{r4, lr}
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003964:	2403      	movs	r4, #3
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003966:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003968:	4b09      	ldr	r3, [pc, #36]	; (8003990 <HAL_RCC_GetClockConfig+0x30>)
 800396a:	685a      	ldr	r2, [r3, #4]
 800396c:	4022      	ands	r2, r4
 800396e:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003970:	685a      	ldr	r2, [r3, #4]
 8003972:	34ed      	adds	r4, #237	; 0xed
 8003974:	4022      	ands	r2, r4
 8003976:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003978:	22e0      	movs	r2, #224	; 0xe0
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	00d2      	lsls	r2, r2, #3
 800397e:	4013      	ands	r3, r2
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003980:	2201      	movs	r2, #1
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003982:	60c3      	str	r3, [r0, #12]
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003984:	4b03      	ldr	r3, [pc, #12]	; (8003994 <HAL_RCC_GetClockConfig+0x34>)
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	4013      	ands	r3, r2
 800398a:	600b      	str	r3, [r1, #0]
}
 800398c:	bd10      	pop	{r4, pc}
 800398e:	46c0      	nop			; (mov r8, r8)
 8003990:	40021000 	.word	0x40021000
 8003994:	40022000 	.word	0x40022000

08003998 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003998:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800399a:	6803      	ldr	r3, [r0, #0]
{
 800399c:	0005      	movs	r5, r0
 800399e:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80039a0:	03db      	lsls	r3, r3, #15
 80039a2:	d52a      	bpl.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a4:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 80039a6:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039a8:	4c41      	ldr	r4, [pc, #260]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 80039aa:	0552      	lsls	r2, r2, #21
 80039ac:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 80039ae:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039b0:	4213      	tst	r3, r2
 80039b2:	d108      	bne.n	80039c6 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 80039b4:	69e3      	ldr	r3, [r4, #28]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	61e3      	str	r3, [r4, #28]
 80039ba:	69e3      	ldr	r3, [r4, #28]
 80039bc:	4013      	ands	r3, r2
 80039be:	9303      	str	r3, [sp, #12]
 80039c0:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 80039c2:	2301      	movs	r3, #1
 80039c4:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80039c6:	2780      	movs	r7, #128	; 0x80
 80039c8:	4e3a      	ldr	r6, [pc, #232]	; (8003ab4 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 80039ca:	007f      	lsls	r7, r7, #1
 80039cc:	6833      	ldr	r3, [r6, #0]
 80039ce:	423b      	tst	r3, r7
 80039d0:	d03a      	beq.n	8003a48 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80039d2:	6a22      	ldr	r2, [r4, #32]
 80039d4:	23c0      	movs	r3, #192	; 0xc0
 80039d6:	0011      	movs	r1, r2
 80039d8:	009b      	lsls	r3, r3, #2
 80039da:	4e37      	ldr	r6, [pc, #220]	; (8003ab8 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 80039dc:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80039de:	421a      	tst	r2, r3
 80039e0:	d144      	bne.n	8003a6c <HAL_RCCEx_PeriphCLKConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039e2:	6a23      	ldr	r3, [r4, #32]
 80039e4:	401e      	ands	r6, r3
 80039e6:	686b      	ldr	r3, [r5, #4]
 80039e8:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80039ea:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80039ec:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 80039ee:	2b01      	cmp	r3, #1
 80039f0:	d103      	bne.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80039f2:	69e3      	ldr	r3, [r4, #28]
 80039f4:	4a31      	ldr	r2, [pc, #196]	; (8003abc <HAL_RCCEx_PeriphCLKConfig+0x124>)
 80039f6:	4013      	ands	r3, r2
 80039f8:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80039fa:	682a      	ldr	r2, [r5, #0]
 80039fc:	07d3      	lsls	r3, r2, #31
 80039fe:	d506      	bpl.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003a00:	2003      	movs	r0, #3
 8003a02:	492b      	ldr	r1, [pc, #172]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003a04:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003a06:	4383      	bics	r3, r0
 8003a08:	68a8      	ldr	r0, [r5, #8]
 8003a0a:	4303      	orrs	r3, r0
 8003a0c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003a0e:	0693      	lsls	r3, r2, #26
 8003a10:	d506      	bpl.n	8003a20 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003a12:	2010      	movs	r0, #16
 8003a14:	4926      	ldr	r1, [pc, #152]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003a16:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003a18:	4383      	bics	r3, r0
 8003a1a:	68e8      	ldr	r0, [r5, #12]
 8003a1c:	4303      	orrs	r3, r0
 8003a1e:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003a20:	0393      	lsls	r3, r2, #14
 8003a22:	d506      	bpl.n	8003a32 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003a24:	2080      	movs	r0, #128	; 0x80
 8003a26:	4922      	ldr	r1, [pc, #136]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003a28:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003a2a:	4383      	bics	r3, r0
 8003a2c:	6968      	ldr	r0, [r5, #20]
 8003a2e:	4303      	orrs	r3, r0
 8003a30:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003a32:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003a34:	0553      	lsls	r3, r2, #21
 8003a36:	d517      	bpl.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003a38:	2140      	movs	r1, #64	; 0x40
 8003a3a:	4a1d      	ldr	r2, [pc, #116]	; (8003ab0 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003a3c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003a3e:	438b      	bics	r3, r1
 8003a40:	6929      	ldr	r1, [r5, #16]
 8003a42:	430b      	orrs	r3, r1
 8003a44:	6313      	str	r3, [r2, #48]	; 0x30
 8003a46:	e00f      	b.n	8003a68 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a48:	6833      	ldr	r3, [r6, #0]
 8003a4a:	433b      	orrs	r3, r7
 8003a4c:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003a4e:	f7fe f8ff 	bl	8001c50 <HAL_GetTick>
 8003a52:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a54:	6833      	ldr	r3, [r6, #0]
 8003a56:	423b      	tst	r3, r7
 8003a58:	d1bb      	bne.n	80039d2 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a5a:	f7fe f8f9 	bl	8001c50 <HAL_GetTick>
 8003a5e:	9b01      	ldr	r3, [sp, #4]
 8003a60:	1ac0      	subs	r0, r0, r3
 8003a62:	2864      	cmp	r0, #100	; 0x64
 8003a64:	d9f6      	bls.n	8003a54 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8003a66:	2003      	movs	r0, #3
}
 8003a68:	b005      	add	sp, #20
 8003a6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003a6c:	686a      	ldr	r2, [r5, #4]
 8003a6e:	4013      	ands	r3, r2
 8003a70:	428b      	cmp	r3, r1
 8003a72:	d0b6      	beq.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a74:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a76:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a78:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a7a:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8003a7c:	025b      	lsls	r3, r3, #9
 8003a7e:	4303      	orrs	r3, r0
 8003a80:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a82:	6a23      	ldr	r3, [r4, #32]
 8003a84:	480e      	ldr	r0, [pc, #56]	; (8003ac0 <HAL_RCCEx_PeriphCLKConfig+0x128>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003a86:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003a88:	4003      	ands	r3, r0
 8003a8a:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8003a8c:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003a8e:	07d3      	lsls	r3, r2, #31
 8003a90:	d5a7      	bpl.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8003a92:	f7fe f8dd 	bl	8001c50 <HAL_GetTick>
 8003a96:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003a98:	2202      	movs	r2, #2
 8003a9a:	6a23      	ldr	r3, [r4, #32]
 8003a9c:	4213      	tst	r3, r2
 8003a9e:	d1a0      	bne.n	80039e2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003aa0:	f7fe f8d6 	bl	8001c50 <HAL_GetTick>
 8003aa4:	4b07      	ldr	r3, [pc, #28]	; (8003ac4 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003aa6:	1bc0      	subs	r0, r0, r7
 8003aa8:	4298      	cmp	r0, r3
 8003aaa:	d9f5      	bls.n	8003a98 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003aac:	e7db      	b.n	8003a66 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003aae:	46c0      	nop			; (mov r8, r8)
 8003ab0:	40021000 	.word	0x40021000
 8003ab4:	40007000 	.word	0x40007000
 8003ab8:	fffffcff 	.word	0xfffffcff
 8003abc:	efffffff 	.word	0xefffffff
 8003ac0:	fffeffff 	.word	0xfffeffff
 8003ac4:	00001388 	.word	0x00001388

08003ac8 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003ac8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003aca:	000e      	movs	r6, r1
 8003acc:	b085      	sub	sp, #20
 8003ace:	0015      	movs	r5, r2
 8003ad0:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ad2:	f7fe f8bd 	bl	8001c50 <HAL_GetTick>
 8003ad6:	19ad      	adds	r5, r5, r6
 8003ad8:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8003ada:	f7fe f8b9 	bl	8001c50 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ade:	2780      	movs	r7, #128	; 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ae0:	4b25      	ldr	r3, [pc, #148]	; (8003b78 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8003ae2:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	015b      	lsls	r3, r3, #5
 8003ae8:	0d1b      	lsrs	r3, r3, #20
 8003aea:	436b      	muls	r3, r5
 8003aec:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003aee:	6822      	ldr	r2, [r4, #0]
 8003af0:	6893      	ldr	r3, [r2, #8]
 8003af2:	0018      	movs	r0, r3
 8003af4:	4038      	ands	r0, r7
 8003af6:	423b      	tst	r3, r7
 8003af8:	d032      	beq.n	8003b60 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003afa:	1c73      	adds	r3, r6, #1
 8003afc:	d0f8      	beq.n	8003af0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003afe:	f7fe f8a7 	bl	8001c50 <HAL_GetTick>
 8003b02:	9b01      	ldr	r3, [sp, #4]
 8003b04:	1ac0      	subs	r0, r0, r3
 8003b06:	42a8      	cmp	r0, r5
 8003b08:	d32c      	bcc.n	8003b64 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b0a:	21e0      	movs	r1, #224	; 0xe0
 8003b0c:	6823      	ldr	r3, [r4, #0]
 8003b0e:	685a      	ldr	r2, [r3, #4]
 8003b10:	438a      	bics	r2, r1
 8003b12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b14:	2282      	movs	r2, #130	; 0x82
 8003b16:	6861      	ldr	r1, [r4, #4]
 8003b18:	0052      	lsls	r2, r2, #1
 8003b1a:	4291      	cmp	r1, r2
 8003b1c:	d10c      	bne.n	8003b38 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 8003b1e:	2180      	movs	r1, #128	; 0x80
 8003b20:	68a2      	ldr	r2, [r4, #8]
 8003b22:	0209      	lsls	r1, r1, #8
 8003b24:	428a      	cmp	r2, r1
 8003b26:	d003      	beq.n	8003b30 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b28:	2180      	movs	r1, #128	; 0x80
 8003b2a:	00c9      	lsls	r1, r1, #3
 8003b2c:	428a      	cmp	r2, r1
 8003b2e:	d103      	bne.n	8003b38 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b30:	2140      	movs	r1, #64	; 0x40
 8003b32:	681a      	ldr	r2, [r3, #0]
 8003b34:	438a      	bics	r2, r1
 8003b36:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b38:	2180      	movs	r1, #128	; 0x80
 8003b3a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003b3c:	0189      	lsls	r1, r1, #6
 8003b3e:	428a      	cmp	r2, r1
 8003b40:	d106      	bne.n	8003b50 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        {
          SPI_RESET_CRC(hspi);
 8003b42:	6819      	ldr	r1, [r3, #0]
 8003b44:	480d      	ldr	r0, [pc, #52]	; (8003b7c <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8003b46:	4001      	ands	r1, r0
 8003b48:	6019      	str	r1, [r3, #0]
 8003b4a:	6819      	ldr	r1, [r3, #0]
 8003b4c:	430a      	orrs	r2, r1
 8003b4e:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b50:	0023      	movs	r3, r4
 8003b52:	2201      	movs	r2, #1
 8003b54:	335d      	adds	r3, #93	; 0x5d
 8003b56:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b58:	2300      	movs	r3, #0
 8003b5a:	2003      	movs	r0, #3
 8003b5c:	345c      	adds	r4, #92	; 0x5c
 8003b5e:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8003b60:	b005      	add	sp, #20
 8003b62:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8003b64:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8003b66:	1e5a      	subs	r2, r3, #1
 8003b68:	4193      	sbcs	r3, r2
 8003b6a:	425b      	negs	r3, r3
 8003b6c:	401d      	ands	r5, r3
      count--;
 8003b6e:	9b03      	ldr	r3, [sp, #12]
 8003b70:	3b01      	subs	r3, #1
 8003b72:	9303      	str	r3, [sp, #12]
 8003b74:	e7bb      	b.n	8003aee <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8003b76:	46c0      	nop			; (mov r8, r8)
 8003b78:	20000004 	.word	0x20000004
 8003b7c:	ffffdfff 	.word	0xffffdfff

08003b80 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003b80:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b82:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003b84:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003b86:	b085      	sub	sp, #20
 8003b88:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 8003b8a:	ab02      	add	r3, sp, #8
 8003b8c:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003b8e:	0004      	movs	r4, r0
 8003b90:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003b92:	f7fe f85d 	bl	8001c50 <HAL_GetTick>
 8003b96:	19ed      	adds	r5, r5, r7
 8003b98:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8003b9a:	f7fe f859 	bl	8001c50 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003b9e:	2223      	movs	r2, #35	; 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ba0:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8003ba2:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003ba4:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003ba6:	4b2a      	ldr	r3, [pc, #168]	; (8003c50 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4353      	muls	r3, r2
 8003bac:	0d1b      	lsrs	r3, r3, #20
 8003bae:	436b      	muls	r3, r5
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }      
      count--;
 8003bb0:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 8003bb2:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8003bb4:	ab02      	add	r3, sp, #8
 8003bb6:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8003bb8:	688b      	ldr	r3, [r1, #8]
 8003bba:	0018      	movs	r0, r3
 8003bbc:	4030      	ands	r0, r6
 8003bbe:	4233      	tst	r3, r6
 8003bc0:	d03b      	beq.n	8003c3a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003bc2:	23c0      	movs	r3, #192	; 0xc0
 8003bc4:	00db      	lsls	r3, r3, #3
 8003bc6:	429e      	cmp	r6, r3
 8003bc8:	d104      	bne.n	8003bd4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 8003bca:	9b01      	ldr	r3, [sp, #4]
 8003bcc:	7b1b      	ldrb	r3, [r3, #12]
 8003bce:	b2db      	uxtb	r3, r3
 8003bd0:	7013      	strb	r3, [r2, #0]
      UNUSED(tmpreg8);
 8003bd2:	7813      	ldrb	r3, [r2, #0]
    if (Timeout != HAL_MAX_DELAY)
 8003bd4:	1c7b      	adds	r3, r7, #1
 8003bd6:	d0ef      	beq.n	8003bb8 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003bd8:	f7fe f83a 	bl	8001c50 <HAL_GetTick>
 8003bdc:	9b00      	ldr	r3, [sp, #0]
 8003bde:	1ac0      	subs	r0, r0, r3
 8003be0:	42a8      	cmp	r0, r5
 8003be2:	d32c      	bcc.n	8003c3e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003be4:	21e0      	movs	r1, #224	; 0xe0
 8003be6:	6823      	ldr	r3, [r4, #0]
 8003be8:	685a      	ldr	r2, [r3, #4]
 8003bea:	438a      	bics	r2, r1
 8003bec:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003bee:	2282      	movs	r2, #130	; 0x82
 8003bf0:	6861      	ldr	r1, [r4, #4]
 8003bf2:	0052      	lsls	r2, r2, #1
 8003bf4:	4291      	cmp	r1, r2
 8003bf6:	d10c      	bne.n	8003c12 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 8003bf8:	2180      	movs	r1, #128	; 0x80
 8003bfa:	68a2      	ldr	r2, [r4, #8]
 8003bfc:	0209      	lsls	r1, r1, #8
 8003bfe:	428a      	cmp	r2, r1
 8003c00:	d003      	beq.n	8003c0a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c02:	2180      	movs	r1, #128	; 0x80
 8003c04:	00c9      	lsls	r1, r1, #3
 8003c06:	428a      	cmp	r2, r1
 8003c08:	d103      	bne.n	8003c12 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
          __HAL_SPI_DISABLE(hspi);
 8003c0a:	2140      	movs	r1, #64	; 0x40
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	438a      	bics	r2, r1
 8003c10:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c12:	2180      	movs	r1, #128	; 0x80
 8003c14:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003c16:	0189      	lsls	r1, r1, #6
 8003c18:	428a      	cmp	r2, r1
 8003c1a:	d106      	bne.n	8003c2a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
          SPI_RESET_CRC(hspi);
 8003c1c:	6819      	ldr	r1, [r3, #0]
 8003c1e:	480d      	ldr	r0, [pc, #52]	; (8003c54 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 8003c20:	4001      	ands	r1, r0
 8003c22:	6019      	str	r1, [r3, #0]
 8003c24:	6819      	ldr	r1, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003c2a:	0023      	movs	r3, r4
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	335d      	adds	r3, #93	; 0x5d
 8003c30:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8003c32:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8003c34:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8003c36:	345c      	adds	r4, #92	; 0x5c
 8003c38:	7023      	strb	r3, [r4, #0]
    }
  }

  return HAL_OK;
}
 8003c3a:	b005      	add	sp, #20
 8003c3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8003c3e:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8003c40:	1e5a      	subs	r2, r3, #1
 8003c42:	4193      	sbcs	r3, r2
 8003c44:	425b      	negs	r3, r3
 8003c46:	401d      	ands	r5, r3
      count--;
 8003c48:	9b03      	ldr	r3, [sp, #12]
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	e7b0      	b.n	8003bb0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x30>
 8003c4e:	46c0      	nop			; (mov r8, r8)
 8003c50:	20000004 	.word	0x20000004
 8003c54:	ffffdfff 	.word	0xffffdfff

08003c58 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003c58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c5a:	2382      	movs	r3, #130	; 0x82
{
 8003c5c:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c5e:	6842      	ldr	r2, [r0, #4]
{
 8003c60:	0004      	movs	r4, r0
 8003c62:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c64:	005b      	lsls	r3, r3, #1
 8003c66:	429a      	cmp	r2, r3
 8003c68:	d10d      	bne.n	8003c86 <SPI_EndRxTransaction+0x2e>
 8003c6a:	2280      	movs	r2, #128	; 0x80
 8003c6c:	6883      	ldr	r3, [r0, #8]
 8003c6e:	0212      	lsls	r2, r2, #8
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d003      	beq.n	8003c7c <SPI_EndRxTransaction+0x24>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c74:	2280      	movs	r2, #128	; 0x80
 8003c76:	00d2      	lsls	r2, r2, #3
 8003c78:	4293      	cmp	r3, r2
 8003c7a:	d104      	bne.n	8003c86 <SPI_EndRxTransaction+0x2e>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003c7c:	2140      	movs	r1, #64	; 0x40
 8003c7e:	6822      	ldr	r2, [r4, #0]
 8003c80:	6813      	ldr	r3, [r2, #0]
 8003c82:	438b      	bics	r3, r1
 8003c84:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c86:	003a      	movs	r2, r7
 8003c88:	0031      	movs	r1, r6
 8003c8a:	0020      	movs	r0, r4
 8003c8c:	f7ff ff1c 	bl	8003ac8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003c90:	1e05      	subs	r5, r0, #0
 8003c92:	d005      	beq.n	8003ca0 <SPI_EndRxTransaction+0x48>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c94:	2320      	movs	r3, #32
 8003c96:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c98:	2503      	movs	r5, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c9a:	4313      	orrs	r3, r2
 8003c9c:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003c9e:	e016      	b.n	8003cce <SPI_EndRxTransaction+0x76>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ca0:	2382      	movs	r3, #130	; 0x82
 8003ca2:	6862      	ldr	r2, [r4, #4]
 8003ca4:	005b      	lsls	r3, r3, #1
 8003ca6:	429a      	cmp	r2, r3
 8003ca8:	d111      	bne.n	8003cce <SPI_EndRxTransaction+0x76>
 8003caa:	2280      	movs	r2, #128	; 0x80
 8003cac:	68a3      	ldr	r3, [r4, #8]
 8003cae:	0212      	lsls	r2, r2, #8
 8003cb0:	4293      	cmp	r3, r2
 8003cb2:	d003      	beq.n	8003cbc <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003cb4:	2280      	movs	r2, #128	; 0x80
 8003cb6:	00d2      	lsls	r2, r2, #3
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d108      	bne.n	8003cce <SPI_EndRxTransaction+0x76>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cbc:	21c0      	movs	r1, #192	; 0xc0
 8003cbe:	003b      	movs	r3, r7
 8003cc0:	0032      	movs	r2, r6
 8003cc2:	0020      	movs	r0, r4
 8003cc4:	00c9      	lsls	r1, r1, #3
 8003cc6:	f7ff ff5b 	bl	8003b80 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003cca:	2800      	cmp	r0, #0
 8003ccc:	d1e2      	bne.n	8003c94 <SPI_EndRxTransaction+0x3c>
}
 8003cce:	0028      	movs	r0, r5
 8003cd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003cd2 <SPI_EndRxTxTransaction>:
{
 8003cd2:	b570      	push	{r4, r5, r6, lr}
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cd4:	0013      	movs	r3, r2
{
 8003cd6:	000d      	movs	r5, r1
 8003cd8:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003cda:	000a      	movs	r2, r1
 8003cdc:	21c0      	movs	r1, #192	; 0xc0
 8003cde:	0149      	lsls	r1, r1, #5
{
 8003ce0:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003ce2:	f7ff ff4d 	bl	8003b80 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003ce6:	2800      	cmp	r0, #0
 8003ce8:	d005      	beq.n	8003cf6 <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cea:	2320      	movs	r3, #32
 8003cec:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cee:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003cf0:	4313      	orrs	r3, r2
 8003cf2:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003cf4:	e00f      	b.n	8003d16 <SPI_EndRxTxTransaction+0x44>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003cf6:	0032      	movs	r2, r6
 8003cf8:	0029      	movs	r1, r5
 8003cfa:	0020      	movs	r0, r4
 8003cfc:	f7ff fee4 	bl	8003ac8 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003d00:	2800      	cmp	r0, #0
 8003d02:	d1f2      	bne.n	8003cea <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003d04:	21c0      	movs	r1, #192	; 0xc0
 8003d06:	0033      	movs	r3, r6
 8003d08:	002a      	movs	r2, r5
 8003d0a:	0020      	movs	r0, r4
 8003d0c:	00c9      	lsls	r1, r1, #3
 8003d0e:	f7ff ff37 	bl	8003b80 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8003d12:	2800      	cmp	r0, #0
 8003d14:	d1e9      	bne.n	8003cea <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8003d16:	bd70      	pop	{r4, r5, r6, pc}

08003d18 <HAL_SPI_Init>:
{
 8003d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d1a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003d1c:	2001      	movs	r0, #1
  if (hspi == NULL)
 8003d1e:	2c00      	cmp	r4, #0
 8003d20:	d067      	beq.n	8003df2 <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003d22:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d165      	bne.n	8003df4 <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d28:	2282      	movs	r2, #130	; 0x82
 8003d2a:	6861      	ldr	r1, [r4, #4]
 8003d2c:	0052      	lsls	r2, r2, #1
 8003d2e:	4291      	cmp	r1, r2
 8003d30:	d000      	beq.n	8003d34 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003d32:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d34:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d36:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d38:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d3a:	355d      	adds	r5, #93	; 0x5d
 8003d3c:	782b      	ldrb	r3, [r5, #0]
 8003d3e:	b2da      	uxtb	r2, r3
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d105      	bne.n	8003d50 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 8003d44:	0023      	movs	r3, r4
 8003d46:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 8003d48:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8003d4a:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 8003d4c:	f7fd fe66 	bl	8001a1c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003d50:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8003d52:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8003d54:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8003d56:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d58:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 8003d5a:	6813      	ldr	r3, [r2, #0]
 8003d5c:	438b      	bics	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d5e:	21e0      	movs	r1, #224	; 0xe0
  __HAL_SPI_DISABLE(hspi);
 8003d60:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003d62:	00c9      	lsls	r1, r1, #3
 8003d64:	2300      	movs	r3, #0
 8003d66:	428d      	cmp	r5, r1
 8003d68:	d848      	bhi.n	8003dfc <HAL_SPI_Init+0xe4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8003d6a:	2080      	movs	r0, #128	; 0x80
 8003d6c:	0140      	lsls	r0, r0, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003d6e:	428d      	cmp	r5, r1
 8003d70:	d000      	beq.n	8003d74 <HAL_SPI_Init+0x5c>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d72:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003d74:	2382      	movs	r3, #130	; 0x82
 8003d76:	6866      	ldr	r6, [r4, #4]
 8003d78:	005b      	lsls	r3, r3, #1
 8003d7a:	4033      	ands	r3, r6
 8003d7c:	2684      	movs	r6, #132	; 0x84
 8003d7e:	68a7      	ldr	r7, [r4, #8]
 8003d80:	0236      	lsls	r6, r6, #8
 8003d82:	403e      	ands	r6, r7
 8003d84:	4333      	orrs	r3, r6
 8003d86:	2602      	movs	r6, #2
 8003d88:	6927      	ldr	r7, [r4, #16]
 8003d8a:	69a1      	ldr	r1, [r4, #24]
 8003d8c:	403e      	ands	r6, r7
 8003d8e:	4333      	orrs	r3, r6
 8003d90:	2601      	movs	r6, #1
 8003d92:	6967      	ldr	r7, [r4, #20]
 8003d94:	46b4      	mov	ip, r6
 8003d96:	4037      	ands	r7, r6
 8003d98:	433b      	orrs	r3, r7
 8003d9a:	2780      	movs	r7, #128	; 0x80
 8003d9c:	00bf      	lsls	r7, r7, #2
 8003d9e:	400f      	ands	r7, r1
 8003da0:	433b      	orrs	r3, r7
 8003da2:	2738      	movs	r7, #56	; 0x38
 8003da4:	69e6      	ldr	r6, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003da6:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003da8:	4037      	ands	r7, r6
 8003daa:	433b      	orrs	r3, r7
 8003dac:	2780      	movs	r7, #128	; 0x80
 8003dae:	6a26      	ldr	r6, [r4, #32]
 8003db0:	4037      	ands	r7, r6
 8003db2:	433b      	orrs	r3, r7
 8003db4:	2780      	movs	r7, #128	; 0x80
 8003db6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003db8:	01bf      	lsls	r7, r7, #6
 8003dba:	4037      	ands	r7, r6
 8003dbc:	433b      	orrs	r3, r7
 8003dbe:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8003dc0:	2310      	movs	r3, #16
 8003dc2:	2708      	movs	r7, #8
 8003dc4:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8003dc6:	4033      	ands	r3, r6
 8003dc8:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8003dca:	4037      	ands	r7, r6
 8003dcc:	433b      	orrs	r3, r7
 8003dce:	27f0      	movs	r7, #240	; 0xf0
 8003dd0:	013f      	lsls	r7, r7, #4
 8003dd2:	403d      	ands	r5, r7
 8003dd4:	431d      	orrs	r5, r3
 8003dd6:	2304      	movs	r3, #4
 8003dd8:	4019      	ands	r1, r3
 8003dda:	4329      	orrs	r1, r5
 8003ddc:	4308      	orrs	r0, r1
 8003dde:	6050      	str	r0, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003de0:	69d3      	ldr	r3, [r2, #28]
 8003de2:	4908      	ldr	r1, [pc, #32]	; (8003e04 <HAL_SPI_Init+0xec>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003de4:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003de6:	400b      	ands	r3, r1
 8003de8:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 8003dea:	4663      	mov	r3, ip
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003dec:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8003dee:	345d      	adds	r4, #93	; 0x5d
 8003df0:	7023      	strb	r3, [r4, #0]
}
 8003df2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003df4:	2300      	movs	r3, #0
 8003df6:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003df8:	6163      	str	r3, [r4, #20]
 8003dfa:	e79b      	b.n	8003d34 <HAL_SPI_Init+0x1c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003dfc:	21f0      	movs	r1, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8003dfe:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8003e00:	0109      	lsls	r1, r1, #4
 8003e02:	e7b4      	b.n	8003d6e <HAL_SPI_Init+0x56>
 8003e04:	fffff7ff 	.word	0xfffff7ff

08003e08 <HAL_SPI_DeInit>:
{
 8003e08:	b570      	push	{r4, r5, r6, lr}
 8003e0a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8003e0c:	2001      	movs	r0, #1
  if (hspi == NULL)
 8003e0e:	2c00      	cmp	r4, #0
 8003e10:	d010      	beq.n	8003e34 <HAL_SPI_DeInit+0x2c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8003e12:	0025      	movs	r5, r4
 8003e14:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8003e16:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8003e18:	355d      	adds	r5, #93	; 0x5d
 8003e1a:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 8003e1c:	6822      	ldr	r2, [r4, #0]
  HAL_SPI_MspDeInit(hspi);
 8003e1e:	0020      	movs	r0, r4
  __HAL_SPI_DISABLE(hspi);
 8003e20:	6813      	ldr	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8003e22:	345c      	adds	r4, #92	; 0x5c
  __HAL_SPI_DISABLE(hspi);
 8003e24:	438b      	bics	r3, r1
 8003e26:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8003e28:	f7fd fe34 	bl	8001a94 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e2c:	2000      	movs	r0, #0
 8003e2e:	6060      	str	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_RESET;
 8003e30:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 8003e32:	7020      	strb	r0, [r4, #0]
}
 8003e34:	bd70      	pop	{r4, r5, r6, pc}

08003e36 <HAL_SPI_Transmit>:
{
 8003e36:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e38:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8003e3a:	0003      	movs	r3, r0
{
 8003e3c:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 8003e3e:	335c      	adds	r3, #92	; 0x5c
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	781b      	ldrb	r3, [r3, #0]
{
 8003e44:	0004      	movs	r4, r0
 8003e46:	000d      	movs	r5, r1
 8003e48:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8003e4a:	2002      	movs	r0, #2
 8003e4c:	2b01      	cmp	r3, #1
 8003e4e:	d100      	bne.n	8003e52 <HAL_SPI_Transmit+0x1c>
 8003e50:	e07d      	b.n	8003f4e <HAL_SPI_Transmit+0x118>
 8003e52:	2301      	movs	r3, #1
 8003e54:	9a01      	ldr	r2, [sp, #4]
 8003e56:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8003e58:	f7fd fefa 	bl	8001c50 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003e5c:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8003e5e:	9000      	str	r0, [sp, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 8003e60:	335d      	adds	r3, #93	; 0x5d
 8003e62:	781a      	ldrb	r2, [r3, #0]
 8003e64:	b2d0      	uxtb	r0, r2
 8003e66:	2a01      	cmp	r2, #1
 8003e68:	d000      	beq.n	8003e6c <HAL_SPI_Transmit+0x36>
 8003e6a:	e09f      	b.n	8003fac <HAL_SPI_Transmit+0x176>
  if ((pData == NULL) || (Size == 0U))
 8003e6c:	2d00      	cmp	r5, #0
 8003e6e:	d068      	beq.n	8003f42 <HAL_SPI_Transmit+0x10c>
 8003e70:	2f00      	cmp	r7, #0
 8003e72:	d066      	beq.n	8003f42 <HAL_SPI_Transmit+0x10c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003e74:	3202      	adds	r2, #2
 8003e76:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e78:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 8003e7a:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e7c:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003e7e:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003e80:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8003e82:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8003e84:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 8003e86:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 8003e88:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003e8a:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003e8c:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 8003e8e:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e90:	2380      	movs	r3, #128	; 0x80
 8003e92:	68a1      	ldr	r1, [r4, #8]
 8003e94:	6822      	ldr	r2, [r4, #0]
 8003e96:	021b      	lsls	r3, r3, #8
 8003e98:	4299      	cmp	r1, r3
 8003e9a:	d108      	bne.n	8003eae <HAL_SPI_Transmit+0x78>
    __HAL_SPI_DISABLE(hspi);
 8003e9c:	2140      	movs	r1, #64	; 0x40
 8003e9e:	6813      	ldr	r3, [r2, #0]
 8003ea0:	438b      	bics	r3, r1
 8003ea2:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8003ea4:	2380      	movs	r3, #128	; 0x80
 8003ea6:	6811      	ldr	r1, [r2, #0]
 8003ea8:	01db      	lsls	r3, r3, #7
 8003eaa:	430b      	orrs	r3, r1
 8003eac:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003eae:	2340      	movs	r3, #64	; 0x40
 8003eb0:	6811      	ldr	r1, [r2, #0]
 8003eb2:	4219      	tst	r1, r3
 8003eb4:	d102      	bne.n	8003ebc <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8003eb6:	6811      	ldr	r1, [r2, #0]
 8003eb8:	430b      	orrs	r3, r1
 8003eba:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003ebc:	21e0      	movs	r1, #224	; 0xe0
 8003ebe:	68e0      	ldr	r0, [r4, #12]
 8003ec0:	6863      	ldr	r3, [r4, #4]
 8003ec2:	00c9      	lsls	r1, r1, #3
 8003ec4:	4288      	cmp	r0, r1
 8003ec6:	d944      	bls.n	8003f52 <HAL_SPI_Transmit+0x11c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d001      	beq.n	8003ed0 <HAL_SPI_Transmit+0x9a>
 8003ecc:	2f01      	cmp	r7, #1
 8003ece:	d107      	bne.n	8003ee0 <HAL_SPI_Transmit+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ed0:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed2:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ed4:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8003ed6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ed8:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29b      	uxth	r3, r3
 8003ede:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003ee0:	2502      	movs	r5, #2
 8003ee2:	e00c      	b.n	8003efe <HAL_SPI_Transmit+0xc8>
 8003ee4:	6822      	ldr	r2, [r4, #0]
 8003ee6:	6893      	ldr	r3, [r2, #8]
 8003ee8:	422b      	tst	r3, r5
 8003eea:	d021      	beq.n	8003f30 <HAL_SPI_Transmit+0xfa>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003eec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003eee:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef0:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003ef2:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003ef4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003ef6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003ef8:	3b01      	subs	r3, #1
 8003efa:	b29b      	uxth	r3, r3
 8003efc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003efe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1ef      	bne.n	8003ee4 <HAL_SPI_Transmit+0xae>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f04:	0031      	movs	r1, r6
 8003f06:	0020      	movs	r0, r4
 8003f08:	9a00      	ldr	r2, [sp, #0]
 8003f0a:	f7ff fee2 	bl	8003cd2 <SPI_EndRxTxTransaction>
 8003f0e:	2800      	cmp	r0, #0
 8003f10:	d149      	bne.n	8003fa6 <HAL_SPI_Transmit+0x170>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003f12:	68a3      	ldr	r3, [r4, #8]
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d106      	bne.n	8003f26 <HAL_SPI_Transmit+0xf0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f18:	9303      	str	r3, [sp, #12]
 8003f1a:	6823      	ldr	r3, [r4, #0]
 8003f1c:	68da      	ldr	r2, [r3, #12]
 8003f1e:	9203      	str	r2, [sp, #12]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	9303      	str	r3, [sp, #12]
 8003f24:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f26:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8003f28:	1e43      	subs	r3, r0, #1
 8003f2a:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 8003f2c:	b2c0      	uxtb	r0, r0
error:
 8003f2e:	e008      	b.n	8003f42 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f30:	f7fd fe8e 	bl	8001c50 <HAL_GetTick>
 8003f34:	9b00      	ldr	r3, [sp, #0]
 8003f36:	1ac0      	subs	r0, r0, r3
 8003f38:	42b0      	cmp	r0, r6
 8003f3a:	d3e0      	bcc.n	8003efe <HAL_SPI_Transmit+0xc8>
 8003f3c:	1c73      	adds	r3, r6, #1
 8003f3e:	d0de      	beq.n	8003efe <HAL_SPI_Transmit+0xc8>
          errorcode = HAL_TIMEOUT;
 8003f40:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003f42:	2301      	movs	r3, #1
 8003f44:	345d      	adds	r4, #93	; 0x5d
 8003f46:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 8003f48:	2300      	movs	r3, #0
 8003f4a:	9a01      	ldr	r2, [sp, #4]
 8003f4c:	7013      	strb	r3, [r2, #0]
}
 8003f4e:	b005      	add	sp, #20
 8003f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d001      	beq.n	8003f5a <HAL_SPI_Transmit+0x124>
 8003f56:	2f01      	cmp	r7, #1
 8003f58:	d108      	bne.n	8003f6c <HAL_SPI_Transmit+0x136>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f5a:	782b      	ldrb	r3, [r5, #0]
 8003f5c:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f5e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f60:	3301      	adds	r3, #1
 8003f62:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8003f64:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003f66:	3b01      	subs	r3, #1
 8003f68:	b29b      	uxth	r3, r3
 8003f6a:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003f6c:	2502      	movs	r5, #2
 8003f6e:	e00d      	b.n	8003f8c <HAL_SPI_Transmit+0x156>
 8003f70:	6823      	ldr	r3, [r4, #0]
 8003f72:	689a      	ldr	r2, [r3, #8]
 8003f74:	422a      	tst	r2, r5
 8003f76:	d00d      	beq.n	8003f94 <HAL_SPI_Transmit+0x15e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003f78:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003f7a:	7812      	ldrb	r2, [r2, #0]
 8003f7c:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003f7e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003f80:	3301      	adds	r3, #1
 8003f82:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8003f84:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003f86:	3b01      	subs	r3, #1
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 8003f8c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d1ee      	bne.n	8003f70 <HAL_SPI_Transmit+0x13a>
 8003f92:	e7b7      	b.n	8003f04 <HAL_SPI_Transmit+0xce>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f94:	f7fd fe5c 	bl	8001c50 <HAL_GetTick>
 8003f98:	9b00      	ldr	r3, [sp, #0]
 8003f9a:	1ac0      	subs	r0, r0, r3
 8003f9c:	42b0      	cmp	r0, r6
 8003f9e:	d3f5      	bcc.n	8003f8c <HAL_SPI_Transmit+0x156>
 8003fa0:	1c73      	adds	r3, r6, #1
 8003fa2:	d0f3      	beq.n	8003f8c <HAL_SPI_Transmit+0x156>
 8003fa4:	e7cc      	b.n	8003f40 <HAL_SPI_Transmit+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003fa6:	2320      	movs	r3, #32
 8003fa8:	6623      	str	r3, [r4, #96]	; 0x60
 8003faa:	e7b2      	b.n	8003f12 <HAL_SPI_Transmit+0xdc>
    errorcode = HAL_BUSY;
 8003fac:	2002      	movs	r0, #2
 8003fae:	e7c8      	b.n	8003f42 <HAL_SPI_Transmit+0x10c>

08003fb0 <HAL_SPI_TransmitReceive>:
{
 8003fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003fb2:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8003fb4:	0003      	movs	r3, r0
 8003fb6:	335c      	adds	r3, #92	; 0x5c
{
 8003fb8:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 8003fba:	781a      	ldrb	r2, [r3, #0]
{
 8003fbc:	0004      	movs	r4, r0
 8003fbe:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8003fc0:	2002      	movs	r0, #2
 8003fc2:	2a01      	cmp	r2, #1
 8003fc4:	d100      	bne.n	8003fc8 <HAL_SPI_TransmitReceive+0x18>
 8003fc6:	e0aa      	b.n	800411e <HAL_SPI_TransmitReceive+0x16e>
 8003fc8:	2201      	movs	r2, #1
 8003fca:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8003fcc:	f7fd fe40 	bl	8001c50 <HAL_GetTick>
  tmp_state           = hspi->State;
 8003fd0:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8003fd2:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8003fd4:	335d      	adds	r3, #93	; 0x5d
 8003fd6:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8003fd8:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8003fda:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d00c      	beq.n	8003ffa <HAL_SPI_TransmitReceive+0x4a>
 8003fe0:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8003fe2:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003fe4:	005b      	lsls	r3, r3, #1
 8003fe6:	4299      	cmp	r1, r3
 8003fe8:	d000      	beq.n	8003fec <HAL_SPI_TransmitReceive+0x3c>
 8003fea:	e091      	b.n	8004110 <HAL_SPI_TransmitReceive+0x160>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8003fec:	68a3      	ldr	r3, [r4, #8]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d000      	beq.n	8003ff4 <HAL_SPI_TransmitReceive+0x44>
 8003ff2:	e08d      	b.n	8004110 <HAL_SPI_TransmitReceive+0x160>
 8003ff4:	2a04      	cmp	r2, #4
 8003ff6:	d000      	beq.n	8003ffa <HAL_SPI_TransmitReceive+0x4a>
 8003ff8:	e08a      	b.n	8004110 <HAL_SPI_TransmitReceive+0x160>
    errorcode = HAL_ERROR;
 8003ffa:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ffc:	2d00      	cmp	r5, #0
 8003ffe:	d100      	bne.n	8004002 <HAL_SPI_TransmitReceive+0x52>
 8004000:	e086      	b.n	8004110 <HAL_SPI_TransmitReceive+0x160>
 8004002:	2f00      	cmp	r7, #0
 8004004:	d100      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x58>
 8004006:	e083      	b.n	8004110 <HAL_SPI_TransmitReceive+0x160>
 8004008:	2e00      	cmp	r6, #0
 800400a:	d100      	bne.n	800400e <HAL_SPI_TransmitReceive+0x5e>
 800400c:	e080      	b.n	8004110 <HAL_SPI_TransmitReceive+0x160>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800400e:	0023      	movs	r3, r4
 8004010:	335d      	adds	r3, #93	; 0x5d
 8004012:	781a      	ldrb	r2, [r3, #0]
 8004014:	2a04      	cmp	r2, #4
 8004016:	d001      	beq.n	800401c <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004018:	2205      	movs	r2, #5
 800401a:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 800401c:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800401e:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 8004020:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004022:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004024:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004026:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004028:	1da2      	adds	r2, r4, #6
 800402a:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800402c:	22e0      	movs	r2, #224	; 0xe0
 800402e:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8004030:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004032:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004034:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004036:	6823      	ldr	r3, [r4, #0]
 8004038:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800403a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800403c:	00d2      	lsls	r2, r2, #3
 800403e:	4290      	cmp	r0, r2
 8004040:	d930      	bls.n	80040a4 <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004042:	685a      	ldr	r2, [r3, #4]
 8004044:	4f5c      	ldr	r7, [pc, #368]	; (80041b8 <HAL_SPI_TransmitReceive+0x208>)
 8004046:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004048:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800404a:	2240      	movs	r2, #64	; 0x40
 800404c:	681f      	ldr	r7, [r3, #0]
 800404e:	4217      	tst	r7, r2
 8004050:	d102      	bne.n	8004058 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 8004052:	681f      	ldr	r7, [r3, #0]
 8004054:	433a      	orrs	r2, r7
 8004056:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004058:	22e0      	movs	r2, #224	; 0xe0
 800405a:	00d2      	lsls	r2, r2, #3
 800405c:	4290      	cmp	r0, r2
 800405e:	d95f      	bls.n	8004120 <HAL_SPI_TransmitReceive+0x170>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004060:	2900      	cmp	r1, #0
 8004062:	d001      	beq.n	8004068 <HAL_SPI_TransmitReceive+0xb8>
 8004064:	2e01      	cmp	r6, #1
 8004066:	d107      	bne.n	8004078 <HAL_SPI_TransmitReceive+0xc8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004068:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800406a:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800406c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800406e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004070:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004072:	3b01      	subs	r3, #1
 8004074:	b29b      	uxth	r3, r3
 8004076:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8004078:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800407a:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800407c:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800407e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004080:	2b00      	cmp	r3, #0
 8004082:	d114      	bne.n	80040ae <HAL_SPI_TransmitReceive+0xfe>
 8004084:	0023      	movs	r3, r4
 8004086:	3308      	adds	r3, #8
 8004088:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800408a:	2b00      	cmp	r3, #0
 800408c:	d10f      	bne.n	80040ae <HAL_SPI_TransmitReceive+0xfe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800408e:	0020      	movs	r0, r4
 8004090:	9a01      	ldr	r2, [sp, #4]
 8004092:	9908      	ldr	r1, [sp, #32]
 8004094:	f7ff fe1d 	bl	8003cd2 <SPI_EndRxTxTransaction>
 8004098:	2800      	cmp	r0, #0
 800409a:	d039      	beq.n	8004110 <HAL_SPI_TransmitReceive+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800409c:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 800409e:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80040a0:	6623      	str	r3, [r4, #96]	; 0x60
 80040a2:	e035      	b.n	8004110 <HAL_SPI_TransmitReceive+0x160>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80040a4:	2280      	movs	r2, #128	; 0x80
 80040a6:	685f      	ldr	r7, [r3, #4]
 80040a8:	0152      	lsls	r2, r2, #5
 80040aa:	433a      	orrs	r2, r7
 80040ac:	e7cc      	b.n	8004048 <HAL_SPI_TransmitReceive+0x98>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040ae:	6820      	ldr	r0, [r4, #0]
 80040b0:	6883      	ldr	r3, [r0, #8]
 80040b2:	423b      	tst	r3, r7
 80040b4:	d00e      	beq.n	80040d4 <HAL_SPI_TransmitReceive+0x124>
 80040b6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d00b      	beq.n	80040d4 <HAL_SPI_TransmitReceive+0x124>
 80040bc:	2d01      	cmp	r5, #1
 80040be:	d109      	bne.n	80040d4 <HAL_SPI_TransmitReceive+0x124>
        txallowed = 0U;
 80040c0:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80040c4:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040c6:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040c8:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80040ca:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80040cc:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80040ce:	3b01      	subs	r3, #1
 80040d0:	b29b      	uxth	r3, r3
 80040d2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80040d4:	6883      	ldr	r3, [r0, #8]
 80040d6:	0019      	movs	r1, r3
 80040d8:	4031      	ands	r1, r6
 80040da:	4233      	tst	r3, r6
 80040dc:	d00e      	beq.n	80040fc <HAL_SPI_TransmitReceive+0x14c>
 80040de:	0022      	movs	r2, r4
 80040e0:	3208      	adds	r2, #8
 80040e2:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d009      	beq.n	80040fc <HAL_SPI_TransmitReceive+0x14c>
        txallowed = 1U;
 80040e8:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80040ea:	68c0      	ldr	r0, [r0, #12]
 80040ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80040ee:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80040f0:	3302      	adds	r3, #2
 80040f2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80040f4:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 80040f6:	3b01      	subs	r3, #1
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80040fc:	f7fd fda8 	bl	8001c50 <HAL_GetTick>
 8004100:	9b01      	ldr	r3, [sp, #4]
 8004102:	1ac0      	subs	r0, r0, r3
 8004104:	9b08      	ldr	r3, [sp, #32]
 8004106:	4298      	cmp	r0, r3
 8004108:	d3b9      	bcc.n	800407e <HAL_SPI_TransmitReceive+0xce>
 800410a:	3301      	adds	r3, #1
 800410c:	d0b7      	beq.n	800407e <HAL_SPI_TransmitReceive+0xce>
        errorcode = HAL_TIMEOUT;
 800410e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004110:	0023      	movs	r3, r4
 8004112:	2201      	movs	r2, #1
 8004114:	335d      	adds	r3, #93	; 0x5d
 8004116:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8004118:	2300      	movs	r3, #0
 800411a:	345c      	adds	r4, #92	; 0x5c
 800411c:	7023      	strb	r3, [r4, #0]
}
 800411e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004120:	2900      	cmp	r1, #0
 8004122:	d001      	beq.n	8004128 <HAL_SPI_TransmitReceive+0x178>
 8004124:	2e01      	cmp	r6, #1
 8004126:	d108      	bne.n	800413a <HAL_SPI_TransmitReceive+0x18a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004128:	782a      	ldrb	r2, [r5, #0]
 800412a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800412c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800412e:	3301      	adds	r3, #1
 8004130:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004132:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004134:	3b01      	subs	r3, #1
 8004136:	b29b      	uxth	r3, r3
 8004138:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800413a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800413c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800413e:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004140:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004142:	2b00      	cmp	r3, #0
 8004144:	d104      	bne.n	8004150 <HAL_SPI_TransmitReceive+0x1a0>
 8004146:	0023      	movs	r3, r4
 8004148:	3308      	adds	r3, #8
 800414a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414c:	2b00      	cmp	r3, #0
 800414e:	d09e      	beq.n	800408e <HAL_SPI_TransmitReceive+0xde>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004150:	6823      	ldr	r3, [r4, #0]
 8004152:	689a      	ldr	r2, [r3, #8]
 8004154:	423a      	tst	r2, r7
 8004156:	d00f      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x1c8>
 8004158:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 800415a:	2a00      	cmp	r2, #0
 800415c:	d00c      	beq.n	8004178 <HAL_SPI_TransmitReceive+0x1c8>
 800415e:	2d01      	cmp	r5, #1
 8004160:	d10a      	bne.n	8004178 <HAL_SPI_TransmitReceive+0x1c8>
        txallowed = 0U;
 8004162:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004164:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004166:	7812      	ldrb	r2, [r2, #0]
 8004168:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 800416a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800416c:	3301      	adds	r3, #1
 800416e:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004170:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004172:	3b01      	subs	r3, #1
 8004174:	b29b      	uxth	r3, r3
 8004176:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004178:	6823      	ldr	r3, [r4, #0]
 800417a:	689a      	ldr	r2, [r3, #8]
 800417c:	0011      	movs	r1, r2
 800417e:	4031      	ands	r1, r6
 8004180:	4232      	tst	r2, r6
 8004182:	d00f      	beq.n	80041a4 <HAL_SPI_TransmitReceive+0x1f4>
 8004184:	0022      	movs	r2, r4
 8004186:	3208      	adds	r2, #8
 8004188:	8fd0      	ldrh	r0, [r2, #62]	; 0x3e
 800418a:	2800      	cmp	r0, #0
 800418c:	d00a      	beq.n	80041a4 <HAL_SPI_TransmitReceive+0x1f4>
        txallowed = 1U;
 800418e:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004190:	7b1b      	ldrb	r3, [r3, #12]
 8004192:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8004194:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 8004196:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004198:	3301      	adds	r3, #1
 800419a:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 800419c:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 800419e:	3b01      	subs	r3, #1
 80041a0:	b29b      	uxth	r3, r3
 80041a2:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80041a4:	f7fd fd54 	bl	8001c50 <HAL_GetTick>
 80041a8:	9b01      	ldr	r3, [sp, #4]
 80041aa:	1ac0      	subs	r0, r0, r3
 80041ac:	9b08      	ldr	r3, [sp, #32]
 80041ae:	4298      	cmp	r0, r3
 80041b0:	d3c6      	bcc.n	8004140 <HAL_SPI_TransmitReceive+0x190>
 80041b2:	3301      	adds	r3, #1
 80041b4:	d0c4      	beq.n	8004140 <HAL_SPI_TransmitReceive+0x190>
 80041b6:	e7aa      	b.n	800410e <HAL_SPI_TransmitReceive+0x15e>
 80041b8:	ffffefff 	.word	0xffffefff

080041bc <HAL_SPI_Receive>:
{
 80041bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80041be:	001d      	movs	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041c0:	2382      	movs	r3, #130	; 0x82
{
 80041c2:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041c4:	6842      	ldr	r2, [r0, #4]
{
 80041c6:	0004      	movs	r4, r0
 80041c8:	000f      	movs	r7, r1
 80041ca:	b087      	sub	sp, #28
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80041cc:	005b      	lsls	r3, r3, #1
 80041ce:	429a      	cmp	r2, r3
 80041d0:	d10d      	bne.n	80041ee <HAL_SPI_Receive+0x32>
 80041d2:	6883      	ldr	r3, [r0, #8]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d10a      	bne.n	80041ee <HAL_SPI_Receive+0x32>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80041d8:	0003      	movs	r3, r0
 80041da:	2204      	movs	r2, #4
 80041dc:	335d      	adds	r3, #93	; 0x5d
 80041de:	701a      	strb	r2, [r3, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80041e0:	0033      	movs	r3, r6
 80041e2:	000a      	movs	r2, r1
 80041e4:	9500      	str	r5, [sp, #0]
 80041e6:	f7ff fee3 	bl	8003fb0 <HAL_SPI_TransmitReceive>
}
 80041ea:	b007      	add	sp, #28
 80041ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 80041ee:	0023      	movs	r3, r4
 80041f0:	335c      	adds	r3, #92	; 0x5c
 80041f2:	9304      	str	r3, [sp, #16]
 80041f4:	781b      	ldrb	r3, [r3, #0]
 80041f6:	2002      	movs	r0, #2
 80041f8:	2b01      	cmp	r3, #1
 80041fa:	d0f6      	beq.n	80041ea <HAL_SPI_Receive+0x2e>
 80041fc:	2301      	movs	r3, #1
 80041fe:	9a04      	ldr	r2, [sp, #16]
 8004200:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8004202:	f7fd fd25 	bl	8001c50 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004206:	0023      	movs	r3, r4
 8004208:	335d      	adds	r3, #93	; 0x5d
  tickstart = HAL_GetTick();
 800420a:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 800420c:	9305      	str	r3, [sp, #20]
 800420e:	781b      	ldrb	r3, [r3, #0]
 8004210:	b2d8      	uxtb	r0, r3
 8004212:	2b01      	cmp	r3, #1
 8004214:	d000      	beq.n	8004218 <HAL_SPI_Receive+0x5c>
 8004216:	e087      	b.n	8004328 <HAL_SPI_Receive+0x16c>
  if ((pData == NULL) || (Size == 0U))
 8004218:	2f00      	cmp	r7, #0
 800421a:	d061      	beq.n	80042e0 <HAL_SPI_Receive+0x124>
 800421c:	2e00      	cmp	r6, #0
 800421e:	d05f      	beq.n	80042e0 <HAL_SPI_Receive+0x124>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004220:	9a05      	ldr	r2, [sp, #20]
 8004222:	3303      	adds	r3, #3
 8004224:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004226:	2300      	movs	r3, #0
  hspi->RxXferSize  = Size;
 8004228:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800422a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800422c:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800422e:	3202      	adds	r2, #2
  hspi->RxXferSize  = Size;
 8004230:	8796      	strh	r6, [r2, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004232:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004234:	22e0      	movs	r2, #224	; 0xe0
 8004236:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004238:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800423a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800423c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800423e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004240:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004242:	00d2      	lsls	r2, r2, #3
 8004244:	6823      	ldr	r3, [r4, #0]
 8004246:	4291      	cmp	r1, r2
 8004248:	d92d      	bls.n	80042a6 <HAL_SPI_Receive+0xea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800424a:	685a      	ldr	r2, [r3, #4]
 800424c:	4837      	ldr	r0, [pc, #220]	; (800432c <HAL_SPI_Receive+0x170>)
 800424e:	4002      	ands	r2, r0
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004250:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004252:	2280      	movs	r2, #128	; 0x80
 8004254:	68a0      	ldr	r0, [r4, #8]
 8004256:	0212      	lsls	r2, r2, #8
 8004258:	4290      	cmp	r0, r2
 800425a:	d107      	bne.n	800426c <HAL_SPI_Receive+0xb0>
    __HAL_SPI_DISABLE(hspi);
 800425c:	2040      	movs	r0, #64	; 0x40
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	4382      	bics	r2, r0
 8004262:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004264:	681a      	ldr	r2, [r3, #0]
 8004266:	4832      	ldr	r0, [pc, #200]	; (8004330 <HAL_SPI_Receive+0x174>)
 8004268:	4002      	ands	r2, r0
 800426a:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800426c:	2240      	movs	r2, #64	; 0x40
 800426e:	6818      	ldr	r0, [r3, #0]
 8004270:	4210      	tst	r0, r2
 8004272:	d102      	bne.n	800427a <HAL_SPI_Receive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 8004274:	6818      	ldr	r0, [r3, #0]
 8004276:	4302      	orrs	r2, r0
 8004278:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 800427a:	23e0      	movs	r3, #224	; 0xe0
 800427c:	0026      	movs	r6, r4
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800427e:	2701      	movs	r7, #1
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8004280:	00db      	lsls	r3, r3, #3
 8004282:	3608      	adds	r6, #8
 8004284:	4299      	cmp	r1, r3
 8004286:	d83f      	bhi.n	8004308 <HAL_SPI_Receive+0x14c>
    while (hspi->RxXferCount > 0U)
 8004288:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 800428a:	2b00      	cmp	r3, #0
 800428c:	d110      	bne.n	80042b0 <HAL_SPI_Receive+0xf4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800428e:	0029      	movs	r1, r5
 8004290:	0020      	movs	r0, r4
 8004292:	9a03      	ldr	r2, [sp, #12]
 8004294:	f7ff fce0 	bl	8003c58 <SPI_EndRxTransaction>
 8004298:	2800      	cmp	r0, #0
 800429a:	d142      	bne.n	8004322 <HAL_SPI_Receive+0x166>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800429c:	6e20      	ldr	r0, [r4, #96]	; 0x60
 800429e:	1e43      	subs	r3, r0, #1
 80042a0:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 80042a2:	b2c0      	uxtb	r0, r0
error :
 80042a4:	e01c      	b.n	80042e0 <HAL_SPI_Receive+0x124>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80042a6:	2280      	movs	r2, #128	; 0x80
 80042a8:	6858      	ldr	r0, [r3, #4]
 80042aa:	0152      	lsls	r2, r2, #5
 80042ac:	4302      	orrs	r2, r0
 80042ae:	e7cf      	b.n	8004250 <HAL_SPI_Receive+0x94>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042b0:	6823      	ldr	r3, [r4, #0]
 80042b2:	689a      	ldr	r2, [r3, #8]
 80042b4:	423a      	tst	r2, r7
 80042b6:	d00a      	beq.n	80042ce <HAL_SPI_Receive+0x112>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80042b8:	7b1b      	ldrb	r3, [r3, #12]
 80042ba:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80042bc:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80042be:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042c0:	3301      	adds	r3, #1
 80042c2:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80042c4:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	87f3      	strh	r3, [r6, #62]	; 0x3e
 80042cc:	e7dc      	b.n	8004288 <HAL_SPI_Receive+0xcc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042ce:	f7fd fcbf 	bl	8001c50 <HAL_GetTick>
 80042d2:	9b03      	ldr	r3, [sp, #12]
 80042d4:	1ac0      	subs	r0, r0, r3
 80042d6:	42a8      	cmp	r0, r5
 80042d8:	d3d6      	bcc.n	8004288 <HAL_SPI_Receive+0xcc>
 80042da:	1c6b      	adds	r3, r5, #1
 80042dc:	d0d4      	beq.n	8004288 <HAL_SPI_Receive+0xcc>
          errorcode = HAL_TIMEOUT;
 80042de:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80042e0:	2301      	movs	r3, #1
 80042e2:	9a05      	ldr	r2, [sp, #20]
 80042e4:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 80042e6:	2300      	movs	r3, #0
 80042e8:	9a04      	ldr	r2, [sp, #16]
 80042ea:	7013      	strb	r3, [r2, #0]
  return errorcode;
 80042ec:	e77d      	b.n	80041ea <HAL_SPI_Receive+0x2e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80042ee:	6823      	ldr	r3, [r4, #0]
 80042f0:	689a      	ldr	r2, [r3, #8]
 80042f2:	423a      	tst	r2, r7
 80042f4:	d00c      	beq.n	8004310 <HAL_SPI_Receive+0x154>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80042f6:	68da      	ldr	r2, [r3, #12]
 80042f8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80042fa:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80042fc:	3302      	adds	r3, #2
 80042fe:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004300:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8004302:	3b01      	subs	r3, #1
 8004304:	b29b      	uxth	r3, r3
 8004306:	87f3      	strh	r3, [r6, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004308:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1ef      	bne.n	80042ee <HAL_SPI_Receive+0x132>
 800430e:	e7be      	b.n	800428e <HAL_SPI_Receive+0xd2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004310:	f7fd fc9e 	bl	8001c50 <HAL_GetTick>
 8004314:	9b03      	ldr	r3, [sp, #12]
 8004316:	1ac0      	subs	r0, r0, r3
 8004318:	42a8      	cmp	r0, r5
 800431a:	d3f5      	bcc.n	8004308 <HAL_SPI_Receive+0x14c>
 800431c:	1c6b      	adds	r3, r5, #1
 800431e:	d0f3      	beq.n	8004308 <HAL_SPI_Receive+0x14c>
 8004320:	e7dd      	b.n	80042de <HAL_SPI_Receive+0x122>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004322:	2320      	movs	r3, #32
 8004324:	6623      	str	r3, [r4, #96]	; 0x60
 8004326:	e7b9      	b.n	800429c <HAL_SPI_Receive+0xe0>
    errorcode = HAL_BUSY;
 8004328:	2002      	movs	r0, #2
 800432a:	e7d9      	b.n	80042e0 <HAL_SPI_Receive+0x124>
 800432c:	ffffefff 	.word	0xffffefff
 8004330:	ffffbfff 	.word	0xffffbfff

08004334 <HAL_SPI_ErrorCallback>:
 8004334:	4770      	bx	lr
	...

08004338 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8004338:	6803      	ldr	r3, [r0, #0]
{
 800433a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800433c:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800433e:	6858      	ldr	r0, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 8004340:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8004342:	2501      	movs	r5, #1
 8004344:	0991      	lsrs	r1, r2, #6
 8004346:	000f      	movs	r7, r1
{
 8004348:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800434a:	402f      	ands	r7, r5
 800434c:	4229      	tst	r1, r5
 800434e:	d109      	bne.n	8004364 <HAL_SPI_IRQHandler+0x2c>
 8004350:	422a      	tst	r2, r5
 8004352:	d007      	beq.n	8004364 <HAL_SPI_IRQHandler+0x2c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8004354:	0986      	lsrs	r6, r0, #6
 8004356:	422e      	tst	r6, r5
 8004358:	d004      	beq.n	8004364 <HAL_SPI_IRQHandler+0x2c>
    hspi->RxISR(hspi);
 800435a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hspi->TxISR(hspi);
 800435c:	0020      	movs	r0, r4
 800435e:	4798      	blx	r3
}
 8004360:	b005      	add	sp, #20
 8004362:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8004364:	2501      	movs	r5, #1
 8004366:	0796      	lsls	r6, r2, #30
 8004368:	d504      	bpl.n	8004374 <HAL_SPI_IRQHandler+0x3c>
 800436a:	09c6      	lsrs	r6, r0, #7
 800436c:	422e      	tst	r6, r5
 800436e:	d001      	beq.n	8004374 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 8004370:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8004372:	e7f3      	b.n	800435c <HAL_SPI_IRQHandler+0x24>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004374:	2501      	movs	r5, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8004376:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8004378:	4331      	orrs	r1, r6
 800437a:	0a12      	lsrs	r2, r2, #8
 800437c:	402a      	ands	r2, r5
 800437e:	4029      	ands	r1, r5
 8004380:	4311      	orrs	r1, r2
 8004382:	d0ed      	beq.n	8004360 <HAL_SPI_IRQHandler+0x28>
 8004384:	0941      	lsrs	r1, r0, #5
 8004386:	4229      	tst	r1, r5
 8004388:	d0ea      	beq.n	8004360 <HAL_SPI_IRQHandler+0x28>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800438a:	2f00      	cmp	r7, #0
 800438c:	d00f      	beq.n	80043ae <HAL_SPI_IRQHandler+0x76>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800438e:	0021      	movs	r1, r4
 8004390:	315d      	adds	r1, #93	; 0x5d
 8004392:	7809      	ldrb	r1, [r1, #0]
 8004394:	2903      	cmp	r1, #3
 8004396:	d050      	beq.n	800443a <HAL_SPI_IRQHandler+0x102>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8004398:	2104      	movs	r1, #4
 800439a:	6e25      	ldr	r5, [r4, #96]	; 0x60
 800439c:	4329      	orrs	r1, r5
 800439e:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80043a0:	2100      	movs	r1, #0
 80043a2:	9100      	str	r1, [sp, #0]
 80043a4:	68d9      	ldr	r1, [r3, #12]
 80043a6:	9100      	str	r1, [sp, #0]
 80043a8:	6899      	ldr	r1, [r3, #8]
 80043aa:	9100      	str	r1, [sp, #0]
 80043ac:	9900      	ldr	r1, [sp, #0]
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80043ae:	2101      	movs	r1, #1
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80043b0:	420e      	tst	r6, r1
 80043b2:	d00b      	beq.n	80043cc <HAL_SPI_IRQHandler+0x94>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80043b4:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80043b6:	4329      	orrs	r1, r5
 80043b8:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80043ba:	2100      	movs	r1, #0
 80043bc:	2540      	movs	r5, #64	; 0x40
 80043be:	9102      	str	r1, [sp, #8]
 80043c0:	6899      	ldr	r1, [r3, #8]
 80043c2:	9102      	str	r1, [sp, #8]
 80043c4:	6819      	ldr	r1, [r3, #0]
 80043c6:	43a9      	bics	r1, r5
 80043c8:	6019      	str	r1, [r3, #0]
 80043ca:	9902      	ldr	r1, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80043cc:	2a00      	cmp	r2, #0
 80043ce:	d008      	beq.n	80043e2 <HAL_SPI_IRQHandler+0xaa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80043d0:	2208      	movs	r2, #8
 80043d2:	6e21      	ldr	r1, [r4, #96]	; 0x60
 80043d4:	430a      	orrs	r2, r1
 80043d6:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80043d8:	2200      	movs	r2, #0
 80043da:	9203      	str	r2, [sp, #12]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	9203      	str	r2, [sp, #12]
 80043e0:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80043e2:	6e22      	ldr	r2, [r4, #96]	; 0x60
 80043e4:	2a00      	cmp	r2, #0
 80043e6:	d0bb      	beq.n	8004360 <HAL_SPI_IRQHandler+0x28>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 80043e8:	21e0      	movs	r1, #224	; 0xe0
 80043ea:	685a      	ldr	r2, [r3, #4]
 80043ec:	438a      	bics	r2, r1
 80043ee:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 80043f0:	0022      	movs	r2, r4
 80043f2:	39df      	subs	r1, #223	; 0xdf
 80043f4:	325d      	adds	r2, #93	; 0x5d
 80043f6:	7011      	strb	r1, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 80043f8:	3102      	adds	r1, #2
 80043fa:	4208      	tst	r0, r1
 80043fc:	d025      	beq.n	800444a <HAL_SPI_IRQHandler+0x112>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 80043fe:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8004400:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004402:	438a      	bics	r2, r1
 8004404:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8004406:	2800      	cmp	r0, #0
 8004408:	d009      	beq.n	800441e <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800440a:	4b12      	ldr	r3, [pc, #72]	; (8004454 <HAL_SPI_IRQHandler+0x11c>)
 800440c:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800440e:	f7fd fda9 	bl	8001f64 <HAL_DMA_Abort_IT>
 8004412:	2800      	cmp	r0, #0
 8004414:	d003      	beq.n	800441e <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004416:	2340      	movs	r3, #64	; 0x40
 8004418:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800441a:	4313      	orrs	r3, r2
 800441c:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800441e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004420:	2800      	cmp	r0, #0
 8004422:	d09d      	beq.n	8004360 <HAL_SPI_IRQHandler+0x28>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004424:	4b0b      	ldr	r3, [pc, #44]	; (8004454 <HAL_SPI_IRQHandler+0x11c>)
 8004426:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004428:	f7fd fd9c 	bl	8001f64 <HAL_DMA_Abort_IT>
 800442c:	2800      	cmp	r0, #0
 800442e:	d097      	beq.n	8004360 <HAL_SPI_IRQHandler+0x28>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004430:	2340      	movs	r3, #64	; 0x40
 8004432:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004434:	4313      	orrs	r3, r2
 8004436:	6623      	str	r3, [r4, #96]	; 0x60
 8004438:	e792      	b.n	8004360 <HAL_SPI_IRQHandler+0x28>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800443a:	2200      	movs	r2, #0
 800443c:	9201      	str	r2, [sp, #4]
 800443e:	68da      	ldr	r2, [r3, #12]
 8004440:	9201      	str	r2, [sp, #4]
 8004442:	689b      	ldr	r3, [r3, #8]
 8004444:	9301      	str	r3, [sp, #4]
 8004446:	9b01      	ldr	r3, [sp, #4]
        return;
 8004448:	e78a      	b.n	8004360 <HAL_SPI_IRQHandler+0x28>
        HAL_SPI_ErrorCallback(hspi);
 800444a:	0020      	movs	r0, r4
 800444c:	f7ff ff72 	bl	8004334 <HAL_SPI_ErrorCallback>
 8004450:	e786      	b.n	8004360 <HAL_SPI_IRQHandler+0x28>
 8004452:	46c0      	nop			; (mov r8, r8)
 8004454:	08004459 	.word	0x08004459

08004458 <SPI_DMAAbortOnError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004458:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 800445a:	2300      	movs	r3, #0
 800445c:	0002      	movs	r2, r0
{
 800445e:	b510      	push	{r4, lr}
  hspi->RxXferCount = 0U;
 8004460:	3208      	adds	r2, #8
 8004462:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 8004464:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 8004466:	f7ff ff65 	bl	8004334 <HAL_SPI_ErrorCallback>
}
 800446a:	bd10      	pop	{r4, pc}

0800446c <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800446c:	4770      	bx	lr
	...

08004470 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004470:	0002      	movs	r2, r0
{
 8004472:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 8004474:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 8004476:	323d      	adds	r2, #61	; 0x3d
 8004478:	7811      	ldrb	r1, [r2, #0]
 800447a:	4281      	cmp	r1, r0
 800447c:	d119      	bne.n	80044b2 <HAL_TIM_Base_Start_IT+0x42>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800447e:	2102      	movs	r1, #2
 8004480:	7011      	strb	r1, [r2, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	68da      	ldr	r2, [r3, #12]
 8004486:	4302      	orrs	r2, r0
 8004488:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800448a:	4a0d      	ldr	r2, [pc, #52]	; (80044c0 <HAL_TIM_Base_Start_IT+0x50>)
 800448c:	4293      	cmp	r3, r2
 800448e:	d006      	beq.n	800449e <HAL_TIM_Base_Start_IT+0x2e>
 8004490:	2280      	movs	r2, #128	; 0x80
 8004492:	05d2      	lsls	r2, r2, #23
 8004494:	4293      	cmp	r3, r2
 8004496:	d002      	beq.n	800449e <HAL_TIM_Base_Start_IT+0x2e>
 8004498:	4a0a      	ldr	r2, [pc, #40]	; (80044c4 <HAL_TIM_Base_Start_IT+0x54>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d10a      	bne.n	80044b4 <HAL_TIM_Base_Start_IT+0x44>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800449e:	2107      	movs	r1, #7
 80044a0:	689a      	ldr	r2, [r3, #8]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 80044a2:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044a4:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80044a6:	2a06      	cmp	r2, #6
 80044a8:	d003      	beq.n	80044b2 <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 80044aa:	2201      	movs	r2, #1
 80044ac:	6819      	ldr	r1, [r3, #0]
 80044ae:	430a      	orrs	r2, r1
 80044b0:	601a      	str	r2, [r3, #0]
}
 80044b2:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	4310      	orrs	r0, r2
 80044b8:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 80044ba:	2000      	movs	r0, #0
 80044bc:	e7f9      	b.n	80044b2 <HAL_TIM_Base_Start_IT+0x42>
 80044be:	46c0      	nop			; (mov r8, r8)
 80044c0:	40012c00 	.word	0x40012c00
 80044c4:	40000400 	.word	0x40000400

080044c8 <HAL_TIM_OC_DelayElapsedCallback>:
 80044c8:	4770      	bx	lr

080044ca <HAL_TIM_IC_CaptureCallback>:
 80044ca:	4770      	bx	lr

080044cc <HAL_TIM_PWM_PulseFinishedCallback>:
 80044cc:	4770      	bx	lr

080044ce <HAL_TIM_TriggerCallback>:
 80044ce:	4770      	bx	lr

080044d0 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044d0:	2202      	movs	r2, #2
 80044d2:	6803      	ldr	r3, [r0, #0]
{
 80044d4:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044d6:	6919      	ldr	r1, [r3, #16]
{
 80044d8:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80044da:	4211      	tst	r1, r2
 80044dc:	d00e      	beq.n	80044fc <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80044de:	68d9      	ldr	r1, [r3, #12]
 80044e0:	4211      	tst	r1, r2
 80044e2:	d00b      	beq.n	80044fc <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80044e4:	3a05      	subs	r2, #5
 80044e6:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80044e8:	3204      	adds	r2, #4
 80044ea:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80044ec:	699b      	ldr	r3, [r3, #24]
 80044ee:	079b      	lsls	r3, r3, #30
 80044f0:	d100      	bne.n	80044f4 <HAL_TIM_IRQHandler+0x24>
 80044f2:	e079      	b.n	80045e8 <HAL_TIM_IRQHandler+0x118>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80044f4:	f7ff ffe9 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044f8:	2300      	movs	r3, #0
 80044fa:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80044fc:	2204      	movs	r2, #4
 80044fe:	6823      	ldr	r3, [r4, #0]
 8004500:	6919      	ldr	r1, [r3, #16]
 8004502:	4211      	tst	r1, r2
 8004504:	d010      	beq.n	8004528 <HAL_TIM_IRQHandler+0x58>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004506:	68d9      	ldr	r1, [r3, #12]
 8004508:	4211      	tst	r1, r2
 800450a:	d00d      	beq.n	8004528 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800450c:	3a09      	subs	r2, #9
 800450e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004510:	3207      	adds	r2, #7
 8004512:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004514:	699a      	ldr	r2, [r3, #24]
 8004516:	23c0      	movs	r3, #192	; 0xc0
 8004518:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800451a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800451c:	421a      	tst	r2, r3
 800451e:	d069      	beq.n	80045f4 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8004520:	f7ff ffd3 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004524:	2300      	movs	r3, #0
 8004526:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004528:	2208      	movs	r2, #8
 800452a:	6823      	ldr	r3, [r4, #0]
 800452c:	6919      	ldr	r1, [r3, #16]
 800452e:	4211      	tst	r1, r2
 8004530:	d00e      	beq.n	8004550 <HAL_TIM_IRQHandler+0x80>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004532:	68d9      	ldr	r1, [r3, #12]
 8004534:	4211      	tst	r1, r2
 8004536:	d00b      	beq.n	8004550 <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004538:	3a11      	subs	r2, #17
 800453a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800453c:	320d      	adds	r2, #13
 800453e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004540:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004542:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004544:	079b      	lsls	r3, r3, #30
 8004546:	d05b      	beq.n	8004600 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 8004548:	f7ff ffbf 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800454c:	2300      	movs	r3, #0
 800454e:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004550:	2210      	movs	r2, #16
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	6919      	ldr	r1, [r3, #16]
 8004556:	4211      	tst	r1, r2
 8004558:	d010      	beq.n	800457c <HAL_TIM_IRQHandler+0xac>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800455a:	68d9      	ldr	r1, [r3, #12]
 800455c:	4211      	tst	r1, r2
 800455e:	d00d      	beq.n	800457c <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004560:	3a21      	subs	r2, #33	; 0x21
 8004562:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004564:	3219      	adds	r2, #25
 8004566:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004568:	69da      	ldr	r2, [r3, #28]
 800456a:	23c0      	movs	r3, #192	; 0xc0
 800456c:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800456e:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004570:	421a      	tst	r2, r3
 8004572:	d04b      	beq.n	800460c <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 8004574:	f7ff ffa9 	bl	80044ca <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004578:	2300      	movs	r3, #0
 800457a:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800457c:	2201      	movs	r2, #1
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	6919      	ldr	r1, [r3, #16]
 8004582:	4211      	tst	r1, r2
 8004584:	d007      	beq.n	8004596 <HAL_TIM_IRQHandler+0xc6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004586:	68d9      	ldr	r1, [r3, #12]
 8004588:	4211      	tst	r1, r2
 800458a:	d004      	beq.n	8004596 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800458c:	3a03      	subs	r2, #3
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800458e:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004590:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8004592:	f7fc fc97 	bl	8000ec4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004596:	2280      	movs	r2, #128	; 0x80
 8004598:	6823      	ldr	r3, [r4, #0]
 800459a:	6919      	ldr	r1, [r3, #16]
 800459c:	4211      	tst	r1, r2
 800459e:	d008      	beq.n	80045b2 <HAL_TIM_IRQHandler+0xe2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80045a0:	68d9      	ldr	r1, [r3, #12]
 80045a2:	4211      	tst	r1, r2
 80045a4:	d005      	beq.n	80045b2 <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045a6:	3a02      	subs	r2, #2
 80045a8:	3aff      	subs	r2, #255	; 0xff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80045aa:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80045ac:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 80045ae:	f000 f8a4 	bl	80046fa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80045b2:	2240      	movs	r2, #64	; 0x40
 80045b4:	6823      	ldr	r3, [r4, #0]
 80045b6:	6919      	ldr	r1, [r3, #16]
 80045b8:	4211      	tst	r1, r2
 80045ba:	d007      	beq.n	80045cc <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80045bc:	68d9      	ldr	r1, [r3, #12]
 80045be:	4211      	tst	r1, r2
 80045c0:	d004      	beq.n	80045cc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045c2:	3a81      	subs	r2, #129	; 0x81
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045c4:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80045c6:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80045c8:	f7ff ff81 	bl	80044ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80045cc:	2220      	movs	r2, #32
 80045ce:	6823      	ldr	r3, [r4, #0]
 80045d0:	6919      	ldr	r1, [r3, #16]
 80045d2:	4211      	tst	r1, r2
 80045d4:	d007      	beq.n	80045e6 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80045d6:	68d9      	ldr	r1, [r3, #12]
 80045d8:	4211      	tst	r1, r2
 80045da:	d004      	beq.n	80045e6 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045dc:	3a41      	subs	r2, #65	; 0x41
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045de:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80045e0:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 80045e2:	f000 f889 	bl	80046f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045e6:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045e8:	f7ff ff6e 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045ec:	0020      	movs	r0, r4
 80045ee:	f7ff ff6d 	bl	80044cc <HAL_TIM_PWM_PulseFinishedCallback>
 80045f2:	e781      	b.n	80044f8 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f4:	f7ff ff68 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f8:	0020      	movs	r0, r4
 80045fa:	f7ff ff67 	bl	80044cc <HAL_TIM_PWM_PulseFinishedCallback>
 80045fe:	e791      	b.n	8004524 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004600:	f7ff ff62 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004604:	0020      	movs	r0, r4
 8004606:	f7ff ff61 	bl	80044cc <HAL_TIM_PWM_PulseFinishedCallback>
 800460a:	e79f      	b.n	800454c <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800460c:	f7ff ff5c 	bl	80044c8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004610:	0020      	movs	r0, r4
 8004612:	f7ff ff5b 	bl	80044cc <HAL_TIM_PWM_PulseFinishedCallback>
 8004616:	e7af      	b.n	8004578 <HAL_TIM_IRQHandler+0xa8>

08004618 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004618:	4a1d      	ldr	r2, [pc, #116]	; (8004690 <TIM_Base_SetConfig+0x78>)
{
 800461a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800461c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800461e:	4290      	cmp	r0, r2
 8004620:	d006      	beq.n	8004630 <TIM_Base_SetConfig+0x18>
 8004622:	2480      	movs	r4, #128	; 0x80
 8004624:	05e4      	lsls	r4, r4, #23
 8004626:	42a0      	cmp	r0, r4
 8004628:	d002      	beq.n	8004630 <TIM_Base_SetConfig+0x18>
 800462a:	4c1a      	ldr	r4, [pc, #104]	; (8004694 <TIM_Base_SetConfig+0x7c>)
 800462c:	42a0      	cmp	r0, r4
 800462e:	d10c      	bne.n	800464a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004630:	2470      	movs	r4, #112	; 0x70
 8004632:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004634:	684c      	ldr	r4, [r1, #4]
 8004636:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004638:	4290      	cmp	r0, r2
 800463a:	d00f      	beq.n	800465c <TIM_Base_SetConfig+0x44>
 800463c:	2480      	movs	r4, #128	; 0x80
 800463e:	05e4      	lsls	r4, r4, #23
 8004640:	42a0      	cmp	r0, r4
 8004642:	d00b      	beq.n	800465c <TIM_Base_SetConfig+0x44>
 8004644:	4c13      	ldr	r4, [pc, #76]	; (8004694 <TIM_Base_SetConfig+0x7c>)
 8004646:	42a0      	cmp	r0, r4
 8004648:	d008      	beq.n	800465c <TIM_Base_SetConfig+0x44>
 800464a:	4c13      	ldr	r4, [pc, #76]	; (8004698 <TIM_Base_SetConfig+0x80>)
 800464c:	42a0      	cmp	r0, r4
 800464e:	d005      	beq.n	800465c <TIM_Base_SetConfig+0x44>
 8004650:	4c12      	ldr	r4, [pc, #72]	; (800469c <TIM_Base_SetConfig+0x84>)
 8004652:	42a0      	cmp	r0, r4
 8004654:	d002      	beq.n	800465c <TIM_Base_SetConfig+0x44>
 8004656:	4c12      	ldr	r4, [pc, #72]	; (80046a0 <TIM_Base_SetConfig+0x88>)
 8004658:	42a0      	cmp	r0, r4
 800465a:	d103      	bne.n	8004664 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800465c:	4c11      	ldr	r4, [pc, #68]	; (80046a4 <TIM_Base_SetConfig+0x8c>)
 800465e:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004660:	68cc      	ldr	r4, [r1, #12]
 8004662:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004664:	2480      	movs	r4, #128	; 0x80
 8004666:	43a3      	bics	r3, r4
 8004668:	694c      	ldr	r4, [r1, #20]
 800466a:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 800466c:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800466e:	688b      	ldr	r3, [r1, #8]
 8004670:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004672:	680b      	ldr	r3, [r1, #0]
 8004674:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004676:	4290      	cmp	r0, r2
 8004678:	d005      	beq.n	8004686 <TIM_Base_SetConfig+0x6e>
 800467a:	4b08      	ldr	r3, [pc, #32]	; (800469c <TIM_Base_SetConfig+0x84>)
 800467c:	4298      	cmp	r0, r3
 800467e:	d002      	beq.n	8004686 <TIM_Base_SetConfig+0x6e>
 8004680:	4b07      	ldr	r3, [pc, #28]	; (80046a0 <TIM_Base_SetConfig+0x88>)
 8004682:	4298      	cmp	r0, r3
 8004684:	d101      	bne.n	800468a <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004686:	690b      	ldr	r3, [r1, #16]
 8004688:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800468a:	2301      	movs	r3, #1
 800468c:	6143      	str	r3, [r0, #20]
}
 800468e:	bd10      	pop	{r4, pc}
 8004690:	40012c00 	.word	0x40012c00
 8004694:	40000400 	.word	0x40000400
 8004698:	40002000 	.word	0x40002000
 800469c:	40014400 	.word	0x40014400
 80046a0:	40014800 	.word	0x40014800
 80046a4:	fffffcff 	.word	0xfffffcff

080046a8 <HAL_TIM_Base_Init>:
{
 80046a8:	b570      	push	{r4, r5, r6, lr}
 80046aa:	0004      	movs	r4, r0
    return HAL_ERROR;
 80046ac:	2001      	movs	r0, #1
  if (htim == NULL)
 80046ae:	2c00      	cmp	r4, #0
 80046b0:	d021      	beq.n	80046f6 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 80046b2:	0025      	movs	r5, r4
 80046b4:	353d      	adds	r5, #61	; 0x3d
 80046b6:	782b      	ldrb	r3, [r5, #0]
 80046b8:	b2da      	uxtb	r2, r3
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d105      	bne.n	80046ca <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 80046be:	0023      	movs	r3, r4
 80046c0:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80046c2:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 80046c4:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 80046c6:	f7ff fed1 	bl	800446c <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80046ca:	2302      	movs	r3, #2
 80046cc:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80046ce:	6820      	ldr	r0, [r4, #0]
 80046d0:	1d21      	adds	r1, r4, #4
 80046d2:	f7ff ffa1 	bl	8004618 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046d6:	0022      	movs	r2, r4
 80046d8:	2301      	movs	r3, #1
  return HAL_OK;
 80046da:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80046dc:	3246      	adds	r2, #70	; 0x46
 80046de:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e0:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046e2:	3a08      	subs	r2, #8
 80046e4:	7013      	strb	r3, [r2, #0]
 80046e6:	7053      	strb	r3, [r2, #1]
 80046e8:	7093      	strb	r3, [r2, #2]
 80046ea:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80046ec:	7113      	strb	r3, [r2, #4]
 80046ee:	7153      	strb	r3, [r2, #5]
 80046f0:	7193      	strb	r3, [r2, #6]
 80046f2:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 80046f4:	702b      	strb	r3, [r5, #0]
}
 80046f6:	bd70      	pop	{r4, r5, r6, pc}

080046f8 <HAL_TIMEx_CommutCallback>:
 80046f8:	4770      	bx	lr

080046fa <HAL_TIMEx_BreakCallback>:
 80046fa:	4770      	bx	lr

080046fc <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80046fc:	1d82      	adds	r2, r0, #6
{
 80046fe:	0003      	movs	r3, r0
  USBx->ISTR = 0U;
 8004700:	2000      	movs	r0, #0
 8004702:	87d0      	strh	r0, [r2, #62]	; 0x3e
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004704:	4a01      	ldr	r2, [pc, #4]	; (800470c <USB_EnableGlobalInt+0x10>)
 8004706:	3302      	adds	r3, #2
 8004708:	87da      	strh	r2, [r3, #62]	; 0x3e

  return HAL_OK;
}
 800470a:	4770      	bx	lr
 800470c:	ffffbf80 	.word	0xffffbf80

08004710 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004710:	3002      	adds	r0, #2
 8004712:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004714:	4a02      	ldr	r2, [pc, #8]	; (8004720 <USB_DisableGlobalInt+0x10>)
 8004716:	4013      	ands	r3, r2
 8004718:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 800471a:	2000      	movs	r0, #0
 800471c:	4770      	bx	lr
 800471e:	46c0      	nop			; (mov r8, r8)
 8004720:	0000407f 	.word	0x0000407f

08004724 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004724:	b084      	sub	sp, #16
 8004726:	b510      	push	{r4, lr}
 8004728:	0004      	movs	r4, r0
 800472a:	9204      	str	r2, [sp, #16]
 800472c:	9305      	str	r3, [sp, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 800472e:	2201      	movs	r2, #1
 8004730:	1c83      	adds	r3, r0, #2

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004732:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004734:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->CNTR = 0U;
 8004736:	87d8      	strh	r0, [r3, #62]	; 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004738:	1da3      	adds	r3, r4, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 800473a:	3450      	adds	r4, #80	; 0x50
  USBx->ISTR = 0U;
 800473c:	87d8      	strh	r0, [r3, #62]	; 0x3e
{
 800473e:	9103      	str	r1, [sp, #12]
  USBx->BTABLE = BTABLE_ADDRESS;
 8004740:	8020      	strh	r0, [r4, #0]

  return HAL_OK;
}
 8004742:	bc10      	pop	{r4}
 8004744:	bc08      	pop	{r3}
 8004746:	b004      	add	sp, #16
 8004748:	4718      	bx	r3
	...

0800474c <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 800474c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800474e:	780d      	ldrb	r5, [r1, #0]
{
 8004750:	0003      	movs	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004752:	00ad      	lsls	r5, r5, #2
 8004754:	1945      	adds	r5, r0, r5
 8004756:	882c      	ldrh	r4, [r5, #0]
 8004758:	4a8e      	ldr	r2, [pc, #568]	; (8004994 <USB_ActivateEndpoint+0x248>)

  /* initialize Endpoint */
  switch (ep->type)
 800475a:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 800475c:	4014      	ands	r4, r2
  switch (ep->type)
 800475e:	2803      	cmp	r0, #3
 8004760:	d84b      	bhi.n	80047fa <USB_ActivateEndpoint+0xae>
 8004762:	f7fb fced 	bl	8000140 <__gnu_thumb1_case_uqi>
 8004766:	4802      	.short	0x4802
 8004768:	4346      	.short	0x4346
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 800476a:	2280      	movs	r2, #128	; 0x80
 800476c:	0092      	lsls	r2, r2, #2
 800476e:	4314      	orrs	r4, r2
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004770:	4a89      	ldr	r2, [pc, #548]	; (8004998 <USB_ActivateEndpoint+0x24c>)

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004772:	4f8a      	ldr	r7, [pc, #552]	; (800499c <USB_ActivateEndpoint+0x250>)
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004774:	4314      	orrs	r4, r2
 8004776:	b2a4      	uxth	r4, r4
 8004778:	802c      	strh	r4, [r5, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 800477a:	780e      	ldrb	r6, [r1, #0]
 800477c:	46bc      	mov	ip, r7
 800477e:	00b5      	lsls	r5, r6, #2
 8004780:	195d      	adds	r5, r3, r5
 8004782:	882c      	ldrh	r4, [r5, #0]
 8004784:	403c      	ands	r4, r7
 8004786:	4334      	orrs	r4, r6
 8004788:	001e      	movs	r6, r3
 800478a:	4314      	orrs	r4, r2
 800478c:	b2a4      	uxth	r4, r4
 800478e:	802c      	strh	r4, [r5, #0]

  if (ep->doublebuffer == 0U)
 8004790:	7b0d      	ldrb	r5, [r1, #12]
 8004792:	780c      	ldrb	r4, [r1, #0]
 8004794:	3650      	adds	r6, #80	; 0x50
 8004796:	2d00      	cmp	r5, #0
 8004798:	d000      	beq.n	800479c <USB_ActivateEndpoint+0x50>
 800479a:	e076      	b.n	800488a <USB_ActivateEndpoint+0x13e>
  {
    if (ep->is_in != 0U)
 800479c:	00e4      	lsls	r4, r4, #3
 800479e:	18e4      	adds	r4, r4, r3
 80047a0:	88cd      	ldrh	r5, [r1, #6]
 80047a2:	9401      	str	r4, [sp, #4]
 80047a4:	784c      	ldrb	r4, [r1, #1]
 80047a6:	086d      	lsrs	r5, r5, #1
 80047a8:	006d      	lsls	r5, r5, #1
 80047aa:	2c00      	cmp	r4, #0
 80047ac:	d02a      	beq.n	8004804 <USB_ActivateEndpoint+0xb8>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 80047ae:	8836      	ldrh	r6, [r6, #0]
 80047b0:	9c01      	ldr	r4, [sp, #4]
 80047b2:	1934      	adds	r4, r6, r4
 80047b4:	2680      	movs	r6, #128	; 0x80
 80047b6:	00f6      	lsls	r6, r6, #3
 80047b8:	19a4      	adds	r4, r4, r6
 80047ba:	8025      	strh	r5, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80047bc:	780c      	ldrb	r4, [r1, #0]
 80047be:	00a4      	lsls	r4, r4, #2
 80047c0:	191c      	adds	r4, r3, r4
 80047c2:	8825      	ldrh	r5, [r4, #0]
 80047c4:	066d      	lsls	r5, r5, #25
 80047c6:	d504      	bpl.n	80047d2 <USB_ActivateEndpoint+0x86>
 80047c8:	8825      	ldrh	r5, [r4, #0]
 80047ca:	402f      	ands	r7, r5
 80047cc:	4d74      	ldr	r5, [pc, #464]	; (80049a0 <USB_ActivateEndpoint+0x254>)
 80047ce:	432f      	orrs	r7, r5
 80047d0:	8027      	strh	r7, [r4, #0]

      if (ep->type != EP_TYPE_ISOC)
 80047d2:	780c      	ldrb	r4, [r1, #0]
 80047d4:	78c9      	ldrb	r1, [r1, #3]
 80047d6:	00a4      	lsls	r4, r4, #2
 80047d8:	191b      	adds	r3, r3, r4
 80047da:	4c72      	ldr	r4, [pc, #456]	; (80049a4 <USB_ActivateEndpoint+0x258>)
 80047dc:	2901      	cmp	r1, #1
 80047de:	d00e      	beq.n	80047fe <USB_ActivateEndpoint+0xb2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80047e0:	8819      	ldrh	r1, [r3, #0]
 80047e2:	400c      	ands	r4, r1
 80047e4:	2120      	movs	r1, #32
      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80047e6:	4061      	eors	r1, r4
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80047e8:	430a      	orrs	r2, r1
 80047ea:	e09f      	b.n	800492c <USB_ActivateEndpoint+0x1e0>
      wEpRegVal |= USB_EP_INTERRUPT;
 80047ec:	22c0      	movs	r2, #192	; 0xc0
 80047ee:	00d2      	lsls	r2, r2, #3
 80047f0:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 80047f2:	2000      	movs	r0, #0
      break;
 80047f4:	e7bc      	b.n	8004770 <USB_ActivateEndpoint+0x24>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80047f6:	2280      	movs	r2, #128	; 0x80
 80047f8:	e7f9      	b.n	80047ee <USB_ActivateEndpoint+0xa2>
      ret = HAL_ERROR;
 80047fa:	2001      	movs	r0, #1
 80047fc:	e7b8      	b.n	8004770 <USB_ActivateEndpoint+0x24>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80047fe:	8819      	ldrh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004800:	4021      	ands	r1, r4
 8004802:	e7f1      	b.n	80047e8 <USB_ActivateEndpoint+0x9c>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004804:	8837      	ldrh	r7, [r6, #0]
 8004806:	9c01      	ldr	r4, [sp, #4]
 8004808:	193c      	adds	r4, r7, r4
 800480a:	4f67      	ldr	r7, [pc, #412]	; (80049a8 <USB_ActivateEndpoint+0x25c>)
 800480c:	19e4      	adds	r4, r4, r7
 800480e:	8025      	strh	r5, [r4, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004810:	780c      	ldrb	r4, [r1, #0]
 8004812:	8835      	ldrh	r5, [r6, #0]
 8004814:	00e4      	lsls	r4, r4, #3
 8004816:	4e65      	ldr	r6, [pc, #404]	; (80049ac <USB_ActivateEndpoint+0x260>)
 8004818:	18e4      	adds	r4, r4, r3
 800481a:	19a4      	adds	r4, r4, r6
 800481c:	1964      	adds	r4, r4, r5
 800481e:	690d      	ldr	r5, [r1, #16]
 8004820:	2d00      	cmp	r5, #0
 8004822:	d11d      	bne.n	8004860 <USB_ActivateEndpoint+0x114>
 8004824:	8825      	ldrh	r5, [r4, #0]
 8004826:	4e62      	ldr	r6, [pc, #392]	; (80049b0 <USB_ActivateEndpoint+0x264>)
 8004828:	4035      	ands	r5, r6
 800482a:	2680      	movs	r6, #128	; 0x80
 800482c:	8025      	strh	r5, [r4, #0]
 800482e:	8825      	ldrh	r5, [r4, #0]
 8004830:	0236      	lsls	r6, r6, #8
 8004832:	4335      	orrs	r5, r6
 8004834:	8025      	strh	r5, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004836:	780c      	ldrb	r4, [r1, #0]
 8004838:	00a4      	lsls	r4, r4, #2
 800483a:	191c      	adds	r4, r3, r4
 800483c:	8825      	ldrh	r5, [r4, #0]
 800483e:	046d      	lsls	r5, r5, #17
 8004840:	d505      	bpl.n	800484e <USB_ActivateEndpoint+0x102>
 8004842:	4666      	mov	r6, ip
 8004844:	8825      	ldrh	r5, [r4, #0]
 8004846:	4035      	ands	r5, r6
 8004848:	4e5a      	ldr	r6, [pc, #360]	; (80049b4 <USB_ActivateEndpoint+0x268>)
 800484a:	4335      	orrs	r5, r6
 800484c:	8025      	strh	r5, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800484e:	7809      	ldrb	r1, [r1, #0]
 8004850:	4c59      	ldr	r4, [pc, #356]	; (80049b8 <USB_ActivateEndpoint+0x26c>)
 8004852:	0089      	lsls	r1, r1, #2
 8004854:	185b      	adds	r3, r3, r1
 8004856:	8819      	ldrh	r1, [r3, #0]
 8004858:	400c      	ands	r4, r1
 800485a:	21c0      	movs	r1, #192	; 0xc0
 800485c:	0189      	lsls	r1, r1, #6
 800485e:	e7c2      	b.n	80047e6 <USB_ActivateEndpoint+0x9a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004860:	2d3e      	cmp	r5, #62	; 0x3e
 8004862:	d806      	bhi.n	8004872 <USB_ActivateEndpoint+0x126>
 8004864:	2701      	movs	r7, #1
 8004866:	086e      	lsrs	r6, r5, #1
 8004868:	403d      	ands	r5, r7
 800486a:	1976      	adds	r6, r6, r5
 800486c:	02b6      	lsls	r6, r6, #10
 800486e:	b2b5      	uxth	r5, r6
 8004870:	e7e0      	b.n	8004834 <USB_ActivateEndpoint+0xe8>
 8004872:	271f      	movs	r7, #31
 8004874:	096e      	lsrs	r6, r5, #5
 8004876:	403d      	ands	r5, r7
 8004878:	426f      	negs	r7, r5
 800487a:	417d      	adcs	r5, r7
 800487c:	1b76      	subs	r6, r6, r5
 800487e:	02b5      	lsls	r5, r6, #10
 8004880:	4e4e      	ldr	r6, [pc, #312]	; (80049bc <USB_ActivateEndpoint+0x270>)
 8004882:	432e      	orrs	r6, r5
 8004884:	b2b6      	uxth	r6, r6
 8004886:	8026      	strh	r6, [r4, #0]
 8004888:	e7d5      	b.n	8004836 <USB_ActivateEndpoint+0xea>
    if (ep->type == EP_TYPE_BULK)
 800488a:	78cd      	ldrb	r5, [r1, #3]
 800488c:	00a4      	lsls	r4, r4, #2
 800488e:	191c      	adds	r4, r3, r4
 8004890:	2d02      	cmp	r5, #2
 8004892:	d14e      	bne.n	8004932 <USB_ActivateEndpoint+0x1e6>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004894:	8825      	ldrh	r5, [r4, #0]
 8004896:	403d      	ands	r5, r7
 8004898:	4f49      	ldr	r7, [pc, #292]	; (80049c0 <USB_ActivateEndpoint+0x274>)
 800489a:	433d      	orrs	r5, r7
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 800489c:	2780      	movs	r7, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 800489e:	8025      	strh	r5, [r4, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80048a0:	780c      	ldrb	r4, [r1, #0]
 80048a2:	8835      	ldrh	r5, [r6, #0]
 80048a4:	00e4      	lsls	r4, r4, #3
 80048a6:	00ff      	lsls	r7, r7, #3
 80048a8:	191c      	adds	r4, r3, r4
 80048aa:	19e4      	adds	r4, r4, r7
 80048ac:	1964      	adds	r4, r4, r5
 80048ae:	890d      	ldrh	r5, [r1, #8]
 80048b0:	086d      	lsrs	r5, r5, #1
 80048b2:	006d      	lsls	r5, r5, #1
 80048b4:	8025      	strh	r5, [r4, #0]
 80048b6:	780c      	ldrb	r4, [r1, #0]
 80048b8:	8835      	ldrh	r5, [r6, #0]
 80048ba:	00e4      	lsls	r4, r4, #3
 80048bc:	4e3a      	ldr	r6, [pc, #232]	; (80049a8 <USB_ActivateEndpoint+0x25c>)
 80048be:	191c      	adds	r4, r3, r4
 80048c0:	19a4      	adds	r4, r4, r6
 80048c2:	2680      	movs	r6, #128	; 0x80
 80048c4:	1964      	adds	r4, r4, r5
 80048c6:	894d      	ldrh	r5, [r1, #10]
 80048c8:	01f6      	lsls	r6, r6, #7
 80048ca:	086d      	lsrs	r5, r5, #1
 80048cc:	006d      	lsls	r5, r5, #1
 80048ce:	8025      	strh	r5, [r4, #0]
    if (ep->is_in == 0U)
 80048d0:	780c      	ldrb	r4, [r1, #0]
 80048d2:	784f      	ldrb	r7, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048d4:	00a4      	lsls	r4, r4, #2
 80048d6:	4d33      	ldr	r5, [pc, #204]	; (80049a4 <USB_ActivateEndpoint+0x258>)
 80048d8:	191c      	adds	r4, r3, r4
    if (ep->is_in == 0U)
 80048da:	2f00      	cmp	r7, #0
 80048dc:	d12f      	bne.n	800493e <USB_ActivateEndpoint+0x1f2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80048de:	8827      	ldrh	r7, [r4, #0]
 80048e0:	4237      	tst	r7, r6
 80048e2:	d005      	beq.n	80048f0 <USB_ActivateEndpoint+0x1a4>
 80048e4:	4667      	mov	r7, ip
 80048e6:	8826      	ldrh	r6, [r4, #0]
 80048e8:	403e      	ands	r6, r7
 80048ea:	4f32      	ldr	r7, [pc, #200]	; (80049b4 <USB_ActivateEndpoint+0x268>)
 80048ec:	433e      	orrs	r6, r7
 80048ee:	8026      	strh	r6, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80048f0:	780c      	ldrb	r4, [r1, #0]
 80048f2:	00a4      	lsls	r4, r4, #2
 80048f4:	191c      	adds	r4, r3, r4
 80048f6:	8826      	ldrh	r6, [r4, #0]
 80048f8:	0676      	lsls	r6, r6, #25
 80048fa:	d505      	bpl.n	8004908 <USB_ActivateEndpoint+0x1bc>
 80048fc:	4667      	mov	r7, ip
 80048fe:	8826      	ldrh	r6, [r4, #0]
 8004900:	403e      	ands	r6, r7
 8004902:	4f27      	ldr	r7, [pc, #156]	; (80049a0 <USB_ActivateEndpoint+0x254>)
 8004904:	433e      	orrs	r6, r7
 8004906:	8026      	strh	r6, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004908:	780e      	ldrb	r6, [r1, #0]
 800490a:	4c2b      	ldr	r4, [pc, #172]	; (80049b8 <USB_ActivateEndpoint+0x26c>)
 800490c:	00b6      	lsls	r6, r6, #2
 800490e:	199e      	adds	r6, r3, r6
 8004910:	8837      	ldrh	r7, [r6, #0]
 8004912:	4027      	ands	r7, r4
 8004914:	24c0      	movs	r4, #192	; 0xc0
 8004916:	01a4      	lsls	r4, r4, #6
 8004918:	407c      	eors	r4, r7
 800491a:	4314      	orrs	r4, r2
 800491c:	b2a4      	uxth	r4, r4
 800491e:	8034      	strh	r4, [r6, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004920:	7809      	ldrb	r1, [r1, #0]
 8004922:	0089      	lsls	r1, r1, #2
 8004924:	185b      	adds	r3, r3, r1
 8004926:	8819      	ldrh	r1, [r3, #0]
 8004928:	400d      	ands	r5, r1
 800492a:	432a      	orrs	r2, r5
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 800492c:	b292      	uxth	r2, r2
 800492e:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
}
 8004930:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004932:	8825      	ldrh	r5, [r4, #0]
 8004934:	4f23      	ldr	r7, [pc, #140]	; (80049c4 <USB_ActivateEndpoint+0x278>)
 8004936:	403d      	ands	r5, r7
 8004938:	4315      	orrs	r5, r2
 800493a:	b2ad      	uxth	r5, r5
 800493c:	e7ae      	b.n	800489c <USB_ActivateEndpoint+0x150>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 800493e:	8827      	ldrh	r7, [r4, #0]
 8004940:	4237      	tst	r7, r6
 8004942:	d005      	beq.n	8004950 <USB_ActivateEndpoint+0x204>
 8004944:	4667      	mov	r7, ip
 8004946:	8826      	ldrh	r6, [r4, #0]
 8004948:	403e      	ands	r6, r7
 800494a:	4f1a      	ldr	r7, [pc, #104]	; (80049b4 <USB_ActivateEndpoint+0x268>)
 800494c:	433e      	orrs	r6, r7
 800494e:	8026      	strh	r6, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004950:	780c      	ldrb	r4, [r1, #0]
 8004952:	00a4      	lsls	r4, r4, #2
 8004954:	191c      	adds	r4, r3, r4
 8004956:	8826      	ldrh	r6, [r4, #0]
 8004958:	0676      	lsls	r6, r6, #25
 800495a:	d505      	bpl.n	8004968 <USB_ActivateEndpoint+0x21c>
 800495c:	4667      	mov	r7, ip
 800495e:	8826      	ldrh	r6, [r4, #0]
 8004960:	403e      	ands	r6, r7
 8004962:	4f0f      	ldr	r7, [pc, #60]	; (80049a0 <USB_ActivateEndpoint+0x254>)
 8004964:	433e      	orrs	r6, r7
 8004966:	8026      	strh	r6, [r4, #0]
      if (ep->type != EP_TYPE_ISOC)
 8004968:	780c      	ldrb	r4, [r1, #0]
 800496a:	78ce      	ldrb	r6, [r1, #3]
 800496c:	00a4      	lsls	r4, r4, #2
 800496e:	191c      	adds	r4, r3, r4
 8004970:	2e01      	cmp	r6, #1
 8004972:	d00c      	beq.n	800498e <USB_ActivateEndpoint+0x242>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004974:	8826      	ldrh	r6, [r4, #0]
 8004976:	402e      	ands	r6, r5
 8004978:	2520      	movs	r5, #32
 800497a:	4075      	eors	r5, r6
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800497c:	4315      	orrs	r5, r2
 800497e:	b2ad      	uxth	r5, r5
 8004980:	8025      	strh	r5, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004982:	7809      	ldrb	r1, [r1, #0]
 8004984:	4c0c      	ldr	r4, [pc, #48]	; (80049b8 <USB_ActivateEndpoint+0x26c>)
 8004986:	0089      	lsls	r1, r1, #2
 8004988:	185b      	adds	r3, r3, r1
 800498a:	8819      	ldrh	r1, [r3, #0]
 800498c:	e738      	b.n	8004800 <USB_ActivateEndpoint+0xb4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 800498e:	8826      	ldrh	r6, [r4, #0]
 8004990:	4035      	ands	r5, r6
 8004992:	e7f3      	b.n	800497c <USB_ActivateEndpoint+0x230>
 8004994:	ffff898f 	.word	0xffff898f
 8004998:	ffff8080 	.word	0xffff8080
 800499c:	ffff8f8f 	.word	0xffff8f8f
 80049a0:	000080c0 	.word	0x000080c0
 80049a4:	ffff8fbf 	.word	0xffff8fbf
 80049a8:	00000404 	.word	0x00000404
 80049ac:	00000406 	.word	0x00000406
 80049b0:	ffff83ff 	.word	0xffff83ff
 80049b4:	0000c080 	.word	0x0000c080
 80049b8:	ffffbf8f 	.word	0xffffbf8f
 80049bc:	ffff8000 	.word	0xffff8000
 80049c0:	00008180 	.word	0x00008180
 80049c4:	ffff8e8f 	.word	0xffff8e8f

080049c8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 80049c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80049ca:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 80049cc:	7b0d      	ldrb	r5, [r1, #12]
 80049ce:	009b      	lsls	r3, r3, #2
 80049d0:	784c      	ldrb	r4, [r1, #1]
 80049d2:	4a40      	ldr	r2, [pc, #256]	; (8004ad4 <USB_DeactivateEndpoint+0x10c>)
 80049d4:	18c3      	adds	r3, r0, r3
 80049d6:	2d00      	cmp	r5, #0
 80049d8:	d121      	bne.n	8004a1e <USB_DeactivateEndpoint+0x56>
  {
    if (ep->is_in != 0U)
 80049da:	2c00      	cmp	r4, #0
 80049dc:	d010      	beq.n	8004a00 <USB_DeactivateEndpoint+0x38>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 80049de:	881c      	ldrh	r4, [r3, #0]
 80049e0:	0664      	lsls	r4, r4, #25
 80049e2:	d505      	bpl.n	80049f0 <USB_DeactivateEndpoint+0x28>
 80049e4:	881c      	ldrh	r4, [r3, #0]
 80049e6:	4d3c      	ldr	r5, [pc, #240]	; (8004ad8 <USB_DeactivateEndpoint+0x110>)
 80049e8:	402c      	ands	r4, r5
 80049ea:	4d3c      	ldr	r5, [pc, #240]	; (8004adc <USB_DeactivateEndpoint+0x114>)
 80049ec:	432c      	orrs	r4, r5
 80049ee:	801c      	strh	r4, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 80049f0:	780b      	ldrb	r3, [r1, #0]
 80049f2:	493b      	ldr	r1, [pc, #236]	; (8004ae0 <USB_DeactivateEndpoint+0x118>)
 80049f4:	009b      	lsls	r3, r3, #2
 80049f6:	18c0      	adds	r0, r0, r3
 80049f8:	8803      	ldrh	r3, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 80049fa:	400b      	ands	r3, r1
 80049fc:	431a      	orrs	r2, r3
 80049fe:	e03f      	b.n	8004a80 <USB_DeactivateEndpoint+0xb8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a00:	881c      	ldrh	r4, [r3, #0]
 8004a02:	0464      	lsls	r4, r4, #17
 8004a04:	d505      	bpl.n	8004a12 <USB_DeactivateEndpoint+0x4a>
 8004a06:	881c      	ldrh	r4, [r3, #0]
 8004a08:	4d33      	ldr	r5, [pc, #204]	; (8004ad8 <USB_DeactivateEndpoint+0x110>)
 8004a0a:	402c      	ands	r4, r5
 8004a0c:	4d35      	ldr	r5, [pc, #212]	; (8004ae4 <USB_DeactivateEndpoint+0x11c>)
 8004a0e:	432c      	orrs	r4, r5
 8004a10:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a12:	780b      	ldrb	r3, [r1, #0]
 8004a14:	4934      	ldr	r1, [pc, #208]	; (8004ae8 <USB_DeactivateEndpoint+0x120>)
 8004a16:	009b      	lsls	r3, r3, #2
 8004a18:	18c0      	adds	r0, r0, r3
 8004a1a:	8803      	ldrh	r3, [r0, #0]
 8004a1c:	e7ed      	b.n	80049fa <USB_DeactivateEndpoint+0x32>
    if (ep->is_in == 0U)
 8004a1e:	2680      	movs	r6, #128	; 0x80
 8004a20:	4d2d      	ldr	r5, [pc, #180]	; (8004ad8 <USB_DeactivateEndpoint+0x110>)
 8004a22:	4f2f      	ldr	r7, [pc, #188]	; (8004ae0 <USB_DeactivateEndpoint+0x118>)
 8004a24:	01f6      	lsls	r6, r6, #7
 8004a26:	2c00      	cmp	r4, #0
 8004a28:	d12e      	bne.n	8004a88 <USB_DeactivateEndpoint+0xc0>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a2a:	881c      	ldrh	r4, [r3, #0]
 8004a2c:	4234      	tst	r4, r6
 8004a2e:	d004      	beq.n	8004a3a <USB_DeactivateEndpoint+0x72>
 8004a30:	881c      	ldrh	r4, [r3, #0]
 8004a32:	4e2c      	ldr	r6, [pc, #176]	; (8004ae4 <USB_DeactivateEndpoint+0x11c>)
 8004a34:	402c      	ands	r4, r5
 8004a36:	4334      	orrs	r4, r6
 8004a38:	801c      	strh	r4, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a3a:	780b      	ldrb	r3, [r1, #0]
 8004a3c:	4c2b      	ldr	r4, [pc, #172]	; (8004aec <USB_DeactivateEndpoint+0x124>)
 8004a3e:	009b      	lsls	r3, r3, #2
 8004a40:	18c3      	adds	r3, r0, r3
 8004a42:	881e      	ldrh	r6, [r3, #0]
 8004a44:	0676      	lsls	r6, r6, #25
 8004a46:	d504      	bpl.n	8004a52 <USB_DeactivateEndpoint+0x8a>
 8004a48:	881e      	ldrh	r6, [r3, #0]
 8004a4a:	402e      	ands	r6, r5
 8004a4c:	4326      	orrs	r6, r4
 8004a4e:	b2b6      	uxth	r6, r6
 8004a50:	801e      	strh	r6, [r3, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8004a52:	780b      	ldrb	r3, [r1, #0]
 8004a54:	009b      	lsls	r3, r3, #2
 8004a56:	18c3      	adds	r3, r0, r3
 8004a58:	881e      	ldrh	r6, [r3, #0]
 8004a5a:	4035      	ands	r5, r6
 8004a5c:	432c      	orrs	r4, r5
 8004a5e:	b2a4      	uxth	r4, r4
 8004a60:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a62:	780c      	ldrb	r4, [r1, #0]
 8004a64:	4d20      	ldr	r5, [pc, #128]	; (8004ae8 <USB_DeactivateEndpoint+0x120>)
 8004a66:	00a4      	lsls	r4, r4, #2
 8004a68:	1904      	adds	r4, r0, r4
 8004a6a:	8823      	ldrh	r3, [r4, #0]
 8004a6c:	402b      	ands	r3, r5
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	b29b      	uxth	r3, r3
 8004a72:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004a74:	780b      	ldrb	r3, [r1, #0]
 8004a76:	009b      	lsls	r3, r3, #2
 8004a78:	18c0      	adds	r0, r0, r3
 8004a7a:	8803      	ldrh	r3, [r0, #0]
 8004a7c:	401f      	ands	r7, r3
 8004a7e:	433a      	orrs	r2, r7
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004a80:	b292      	uxth	r2, r2
 8004a82:	8002      	strh	r2, [r0, #0]
    }
  }

  return HAL_OK;
}
 8004a84:	2000      	movs	r0, #0
 8004a86:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004a88:	881c      	ldrh	r4, [r3, #0]
 8004a8a:	4234      	tst	r4, r6
 8004a8c:	d005      	beq.n	8004a9a <USB_DeactivateEndpoint+0xd2>
 8004a8e:	881e      	ldrh	r6, [r3, #0]
 8004a90:	4c17      	ldr	r4, [pc, #92]	; (8004af0 <USB_DeactivateEndpoint+0x128>)
 8004a92:	402e      	ands	r6, r5
 8004a94:	4326      	orrs	r6, r4
 8004a96:	b2b6      	uxth	r6, r6
 8004a98:	801e      	strh	r6, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004a9a:	780b      	ldrb	r3, [r1, #0]
 8004a9c:	009b      	lsls	r3, r3, #2
 8004a9e:	18c3      	adds	r3, r0, r3
 8004aa0:	881e      	ldrh	r6, [r3, #0]
 8004aa2:	0674      	lsls	r4, r6, #25
 8004aa4:	d504      	bpl.n	8004ab0 <USB_DeactivateEndpoint+0xe8>
 8004aa6:	881e      	ldrh	r6, [r3, #0]
 8004aa8:	4c0c      	ldr	r4, [pc, #48]	; (8004adc <USB_DeactivateEndpoint+0x114>)
 8004aaa:	402e      	ands	r6, r5
 8004aac:	4326      	orrs	r6, r4
 8004aae:	801e      	strh	r6, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004ab0:	780b      	ldrb	r3, [r1, #0]
 8004ab2:	4c0f      	ldr	r4, [pc, #60]	; (8004af0 <USB_DeactivateEndpoint+0x128>)
 8004ab4:	009b      	lsls	r3, r3, #2
 8004ab6:	18c3      	adds	r3, r0, r3
 8004ab8:	881e      	ldrh	r6, [r3, #0]
 8004aba:	4035      	ands	r5, r6
 8004abc:	432c      	orrs	r4, r5
 8004abe:	b2a4      	uxth	r4, r4
 8004ac0:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004ac2:	780b      	ldrb	r3, [r1, #0]
 8004ac4:	009b      	lsls	r3, r3, #2
 8004ac6:	18c3      	adds	r3, r0, r3
 8004ac8:	881c      	ldrh	r4, [r3, #0]
 8004aca:	4027      	ands	r7, r4
 8004acc:	4317      	orrs	r7, r2
 8004ace:	b2bf      	uxth	r7, r7
 8004ad0:	801f      	strh	r7, [r3, #0]
 8004ad2:	e79e      	b.n	8004a12 <USB_DeactivateEndpoint+0x4a>
 8004ad4:	ffff8080 	.word	0xffff8080
 8004ad8:	ffff8f8f 	.word	0xffff8f8f
 8004adc:	000080c0 	.word	0x000080c0
 8004ae0:	ffff8fbf 	.word	0xffff8fbf
 8004ae4:	0000c080 	.word	0x0000c080
 8004ae8:	ffffbf8f 	.word	0xffffbf8f
 8004aec:	ffff80c0 	.word	0xffff80c0
 8004af0:	ffffc080 	.word	0xffffc080

08004af4 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8004af4:	780b      	ldrb	r3, [r1, #0]
 8004af6:	4a0b      	ldr	r2, [pc, #44]	; (8004b24 <USB_EPSetStall+0x30>)
 8004af8:	009b      	lsls	r3, r3, #2
 8004afa:	18c0      	adds	r0, r0, r3
 8004afc:	784b      	ldrb	r3, [r1, #1]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d009      	beq.n	8004b16 <USB_EPSetStall+0x22>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004b02:	8803      	ldrh	r3, [r0, #0]
 8004b04:	4908      	ldr	r1, [pc, #32]	; (8004b28 <USB_EPSetStall+0x34>)
 8004b06:	4019      	ands	r1, r3
 8004b08:	2310      	movs	r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004b0a:	404b      	eors	r3, r1
 8004b0c:	4313      	orrs	r3, r2
 8004b0e:	b29b      	uxth	r3, r3
 8004b10:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8004b12:	2000      	movs	r0, #0
 8004b14:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004b16:	8803      	ldrh	r3, [r0, #0]
 8004b18:	4904      	ldr	r1, [pc, #16]	; (8004b2c <USB_EPSetStall+0x38>)
 8004b1a:	4019      	ands	r1, r3
 8004b1c:	2380      	movs	r3, #128	; 0x80
 8004b1e:	015b      	lsls	r3, r3, #5
 8004b20:	e7f3      	b.n	8004b0a <USB_EPSetStall+0x16>
 8004b22:	46c0      	nop			; (mov r8, r8)
 8004b24:	ffff8080 	.word	0xffff8080
 8004b28:	ffff8fbf 	.word	0xffff8fbf
 8004b2c:	ffffbf8f 	.word	0xffffbf8f

08004b30 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004b30:	7b0b      	ldrb	r3, [r1, #12]
{
 8004b32:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d11c      	bne.n	8004b72 <USB_EPClearStall+0x42>
  {
    if (ep->is_in != 0U)
 8004b38:	780b      	ldrb	r3, [r1, #0]
 8004b3a:	784a      	ldrb	r2, [r1, #1]
 8004b3c:	009b      	lsls	r3, r3, #2
 8004b3e:	18c3      	adds	r3, r0, r3
 8004b40:	2a00      	cmp	r2, #0
 8004b42:	d018      	beq.n	8004b76 <USB_EPClearStall+0x46>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b44:	881a      	ldrh	r2, [r3, #0]
 8004b46:	0652      	lsls	r2, r2, #25
 8004b48:	d505      	bpl.n	8004b56 <USB_EPClearStall+0x26>
 8004b4a:	881a      	ldrh	r2, [r3, #0]
 8004b4c:	4c13      	ldr	r4, [pc, #76]	; (8004b9c <USB_EPClearStall+0x6c>)
 8004b4e:	4022      	ands	r2, r4
 8004b50:	4c13      	ldr	r4, [pc, #76]	; (8004ba0 <USB_EPClearStall+0x70>)
 8004b52:	4322      	orrs	r2, r4
 8004b54:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b56:	78cb      	ldrb	r3, [r1, #3]
 8004b58:	2b01      	cmp	r3, #1
 8004b5a:	d00a      	beq.n	8004b72 <USB_EPClearStall+0x42>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b5c:	780b      	ldrb	r3, [r1, #0]
 8004b5e:	4a11      	ldr	r2, [pc, #68]	; (8004ba4 <USB_EPClearStall+0x74>)
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	18c0      	adds	r0, r0, r3
 8004b64:	8803      	ldrh	r3, [r0, #0]
 8004b66:	401a      	ands	r2, r3
 8004b68:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b6a:	4053      	eors	r3, r2
 8004b6c:	4a0e      	ldr	r2, [pc, #56]	; (8004ba8 <USB_EPClearStall+0x78>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 8004b72:	2000      	movs	r0, #0
 8004b74:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b76:	881a      	ldrh	r2, [r3, #0]
 8004b78:	0452      	lsls	r2, r2, #17
 8004b7a:	d505      	bpl.n	8004b88 <USB_EPClearStall+0x58>
 8004b7c:	881a      	ldrh	r2, [r3, #0]
 8004b7e:	4c07      	ldr	r4, [pc, #28]	; (8004b9c <USB_EPClearStall+0x6c>)
 8004b80:	4022      	ands	r2, r4
 8004b82:	4c0a      	ldr	r4, [pc, #40]	; (8004bac <USB_EPClearStall+0x7c>)
 8004b84:	4322      	orrs	r2, r4
 8004b86:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b88:	780b      	ldrb	r3, [r1, #0]
 8004b8a:	4a09      	ldr	r2, [pc, #36]	; (8004bb0 <USB_EPClearStall+0x80>)
 8004b8c:	009b      	lsls	r3, r3, #2
 8004b8e:	18c0      	adds	r0, r0, r3
 8004b90:	8803      	ldrh	r3, [r0, #0]
 8004b92:	401a      	ands	r2, r3
 8004b94:	23c0      	movs	r3, #192	; 0xc0
 8004b96:	019b      	lsls	r3, r3, #6
 8004b98:	e7e7      	b.n	8004b6a <USB_EPClearStall+0x3a>
 8004b9a:	46c0      	nop			; (mov r8, r8)
 8004b9c:	ffff8f8f 	.word	0xffff8f8f
 8004ba0:	000080c0 	.word	0x000080c0
 8004ba4:	ffff8fbf 	.word	0xffff8fbf
 8004ba8:	00008080 	.word	0x00008080
 8004bac:	0000c080 	.word	0x0000c080
 8004bb0:	ffffbf8f 	.word	0xffffbf8f

08004bb4 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004bb4:	2900      	cmp	r1, #0
 8004bb6:	d102      	bne.n	8004bbe <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004bb8:	2380      	movs	r3, #128	; 0x80
 8004bba:	304c      	adds	r0, #76	; 0x4c
 8004bbc:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8004bbe:	2000      	movs	r0, #0
 8004bc0:	4770      	bx	lr

08004bc2 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8004bc2:	2280      	movs	r2, #128	; 0x80
 8004bc4:	3058      	adds	r0, #88	; 0x58
 8004bc6:	8803      	ldrh	r3, [r0, #0]
 8004bc8:	0212      	lsls	r2, r2, #8
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8004bce:	2000      	movs	r0, #0
 8004bd0:	4770      	bx	lr

08004bd2 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004bd2:	3006      	adds	r0, #6
 8004bd4:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8004bd6:	b280      	uxth	r0, r0
  return tmpreg;
}
 8004bd8:	4770      	bx	lr

08004bda <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004bda:	b530      	push	{r4, r5, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004bdc:	2480      	movs	r4, #128	; 0x80
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004bde:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004be0:	00e4      	lsls	r4, r4, #3
 8004be2:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004be4:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004be6:	1880      	adds	r0, r0, r2

  for (i = n; i != 0U; i--)
 8004be8:	005b      	lsls	r3, r3, #1
 8004bea:	18cb      	adds	r3, r1, r3
 8004bec:	1a40      	subs	r0, r0, r1
 8004bee:	1844      	adds	r4, r0, r1
 8004bf0:	4299      	cmp	r1, r3
 8004bf2:	d100      	bne.n	8004bf6 <USB_WritePMA+0x1c>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8004bf4:	bd30      	pop	{r4, r5, pc}
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004bf6:	784a      	ldrb	r2, [r1, #1]
 8004bf8:	780d      	ldrb	r5, [r1, #0]
 8004bfa:	0212      	lsls	r2, r2, #8
 8004bfc:	432a      	orrs	r2, r5
    *pdwVal = (uint16_t)temp2;
 8004bfe:	8022      	strh	r2, [r4, #0]
    pBuf++;
 8004c00:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8004c02:	e7f4      	b.n	8004bee <USB_WritePMA+0x14>

08004c04 <USB_EPStartXfer>:
{
 8004c04:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c06:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 8004c08:	7849      	ldrb	r1, [r1, #1]
{
 8004c0a:	0005      	movs	r5, r0
 8004c0c:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8004c0e:	2901      	cmp	r1, #1
 8004c10:	d000      	beq.n	8004c14 <USB_EPStartXfer+0x10>
 8004c12:	e171      	b.n	8004ef8 <USB_EPStartXfer+0x2f4>
    if (ep->xfer_len > ep->maxpacket)
 8004c14:	6927      	ldr	r7, [r4, #16]
 8004c16:	69a6      	ldr	r6, [r4, #24]
 8004c18:	42be      	cmp	r6, r7
 8004c1a:	d900      	bls.n	8004c1e <USB_EPStartXfer+0x1a>
 8004c1c:	003e      	movs	r6, r7
    if (ep->doublebuffer == 0U)
 8004c1e:	6963      	ldr	r3, [r4, #20]
 8004c20:	9301      	str	r3, [sp, #4]
 8004c22:	2a00      	cmp	r2, #0
 8004c24:	d11e      	bne.n	8004c64 <USB_EPStartXfer+0x60>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004c26:	b2b6      	uxth	r6, r6
 8004c28:	0033      	movs	r3, r6
 8004c2a:	88e2      	ldrh	r2, [r4, #6]
 8004c2c:	9901      	ldr	r1, [sp, #4]
 8004c2e:	0028      	movs	r0, r5
 8004c30:	f7ff ffd3 	bl	8004bda <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004c34:	002b      	movs	r3, r5
 8004c36:	4ac0      	ldr	r2, [pc, #768]	; (8004f38 <USB_EPStartXfer+0x334>)
 8004c38:	3350      	adds	r3, #80	; 0x50
 8004c3a:	8819      	ldrh	r1, [r3, #0]
 8004c3c:	7823      	ldrb	r3, [r4, #0]
 8004c3e:	18aa      	adds	r2, r5, r2
 8004c40:	00db      	lsls	r3, r3, #3
 8004c42:	1852      	adds	r2, r2, r1
 8004c44:	189b      	adds	r3, r3, r2
 8004c46:	801e      	strh	r6, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004c48:	7820      	ldrb	r0, [r4, #0]
 8004c4a:	4abc      	ldr	r2, [pc, #752]	; (8004f3c <USB_EPStartXfer+0x338>)
 8004c4c:	0080      	lsls	r0, r0, #2
 8004c4e:	182d      	adds	r5, r5, r0
 8004c50:	882b      	ldrh	r3, [r5, #0]
 8004c52:	401a      	ands	r2, r3
 8004c54:	2330      	movs	r3, #48	; 0x30
 8004c56:	4053      	eors	r3, r2
 8004c58:	4ab9      	ldr	r2, [pc, #740]	; (8004f40 <USB_EPStartXfer+0x33c>)
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	b29b      	uxth	r3, r3
  return HAL_OK;
 8004c5e:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c60:	802b      	strh	r3, [r5, #0]
}
 8004c62:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 8004c64:	7820      	ldrb	r0, [r4, #0]
 8004c66:	78e1      	ldrb	r1, [r4, #3]
 8004c68:	0082      	lsls	r2, r0, #2
 8004c6a:	6a23      	ldr	r3, [r4, #32]
 8004c6c:	18aa      	adds	r2, r5, r2
 8004c6e:	2902      	cmp	r1, #2
 8004c70:	d000      	beq.n	8004c74 <USB_EPStartXfer+0x70>
 8004c72:	e129      	b.n	8004ec8 <USB_EPStartXfer+0x2c4>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004c74:	8810      	ldrh	r0, [r2, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 8004c76:	429f      	cmp	r7, r3
 8004c78:	d300      	bcc.n	8004c7c <USB_EPStartXfer+0x78>
 8004c7a:	e112      	b.n	8004ea2 <USB_EPStartXfer+0x29e>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004c7c:	4fb1      	ldr	r7, [pc, #708]	; (8004f44 <USB_EPStartXfer+0x340>)
          ep->xfer_len_db -= len;
 8004c7e:	1b9b      	subs	r3, r3, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004c80:	4038      	ands	r0, r7
 8004c82:	4fb1      	ldr	r7, [pc, #708]	; (8004f48 <USB_EPStartXfer+0x344>)
 8004c84:	4338      	orrs	r0, r7
 8004c86:	8010      	strh	r0, [r2, #0]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c88:	7820      	ldrb	r0, [r4, #0]
          ep->xfer_len_db -= len;
 8004c8a:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004c8c:	0083      	lsls	r3, r0, #2
 8004c8e:	18eb      	adds	r3, r5, r3
 8004c90:	881f      	ldrh	r7, [r3, #0]
 8004c92:	7862      	ldrb	r2, [r4, #1]
 8004c94:	b2b3      	uxth	r3, r6
 8004c96:	0679      	lsls	r1, r7, #25
 8004c98:	d400      	bmi.n	8004c9c <USB_EPStartXfer+0x98>
 8004c9a:	e082      	b.n	8004da2 <USB_EPStartXfer+0x19e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004c9c:	2a00      	cmp	r2, #0
 8004c9e:	d152      	bne.n	8004d46 <USB_EPStartXfer+0x142>
 8004ca0:	002a      	movs	r2, r5
 8004ca2:	3250      	adds	r2, #80	; 0x50
 8004ca4:	8817      	ldrh	r7, [r2, #0]
 8004ca6:	4aa9      	ldr	r2, [pc, #676]	; (8004f4c <USB_EPStartXfer+0x348>)
 8004ca8:	00c0      	lsls	r0, r0, #3
 8004caa:	18aa      	adds	r2, r5, r2
 8004cac:	19d2      	adds	r2, r2, r7
 8004cae:	1812      	adds	r2, r2, r0
 8004cb0:	2e00      	cmp	r6, #0
 8004cb2:	d135      	bne.n	8004d20 <USB_EPStartXfer+0x11c>
 8004cb4:	8810      	ldrh	r0, [r2, #0]
 8004cb6:	4fa6      	ldr	r7, [pc, #664]	; (8004f50 <USB_EPStartXfer+0x34c>)
 8004cb8:	4038      	ands	r0, r7
 8004cba:	2780      	movs	r7, #128	; 0x80
 8004cbc:	8010      	strh	r0, [r2, #0]
 8004cbe:	8810      	ldrh	r0, [r2, #0]
 8004cc0:	023f      	lsls	r7, r7, #8
 8004cc2:	4338      	orrs	r0, r7
 8004cc4:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004cc6:	0028      	movs	r0, r5
 8004cc8:	8962      	ldrh	r2, [r4, #10]
 8004cca:	9901      	ldr	r1, [sp, #4]
 8004ccc:	f7ff ff85 	bl	8004bda <USB_WritePMA>
            ep->xfer_buff += len;
 8004cd0:	6963      	ldr	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004cd2:	6a22      	ldr	r2, [r4, #32]
 8004cd4:	6920      	ldr	r0, [r4, #16]
            ep->xfer_buff += len;
 8004cd6:	1999      	adds	r1, r3, r6
 8004cd8:	6161      	str	r1, [r4, #20]
              ep->xfer_len_db = 0U;
 8004cda:	2300      	movs	r3, #0
            if (ep->xfer_len_db > ep->maxpacket)
 8004cdc:	4282      	cmp	r2, r0
 8004cde:	d901      	bls.n	8004ce4 <USB_EPStartXfer+0xe0>
              ep->xfer_len_db -= len;
 8004ce0:	1b93      	subs	r3, r2, r6
 8004ce2:	0032      	movs	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004ce4:	7860      	ldrb	r0, [r4, #1]
 8004ce6:	6223      	str	r3, [r4, #32]
 8004ce8:	b293      	uxth	r3, r2
 8004cea:	2800      	cmp	r0, #0
 8004cec:	d14c      	bne.n	8004d88 <USB_EPStartXfer+0x184>
 8004cee:	0028      	movs	r0, r5
 8004cf0:	3050      	adds	r0, #80	; 0x50
 8004cf2:	8807      	ldrh	r7, [r0, #0]
 8004cf4:	4890      	ldr	r0, [pc, #576]	; (8004f38 <USB_EPStartXfer+0x334>)
 8004cf6:	7826      	ldrb	r6, [r4, #0]
 8004cf8:	1828      	adds	r0, r5, r0
 8004cfa:	00f6      	lsls	r6, r6, #3
 8004cfc:	19c0      	adds	r0, r0, r7
 8004cfe:	1830      	adds	r0, r6, r0
 8004d00:	2a00      	cmp	r2, #0
 8004d02:	d12c      	bne.n	8004d5e <USB_EPStartXfer+0x15a>
 8004d04:	8802      	ldrh	r2, [r0, #0]
 8004d06:	4e92      	ldr	r6, [pc, #584]	; (8004f50 <USB_EPStartXfer+0x34c>)
 8004d08:	4032      	ands	r2, r6
 8004d0a:	2680      	movs	r6, #128	; 0x80
 8004d0c:	8002      	strh	r2, [r0, #0]
 8004d0e:	8802      	ldrh	r2, [r0, #0]
 8004d10:	0236      	lsls	r6, r6, #8
 8004d12:	4332      	orrs	r2, r6
 8004d14:	8002      	strh	r2, [r0, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d16:	8922      	ldrh	r2, [r4, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004d18:	0028      	movs	r0, r5
 8004d1a:	f7ff ff5e 	bl	8004bda <USB_WritePMA>
 8004d1e:	e793      	b.n	8004c48 <USB_EPStartXfer+0x44>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004d20:	2e3e      	cmp	r6, #62	; 0x3e
 8004d22:	d806      	bhi.n	8004d32 <USB_EPStartXfer+0x12e>
 8004d24:	2701      	movs	r7, #1
 8004d26:	0870      	lsrs	r0, r6, #1
 8004d28:	4037      	ands	r7, r6
 8004d2a:	19c0      	adds	r0, r0, r7
 8004d2c:	0280      	lsls	r0, r0, #10
 8004d2e:	b280      	uxth	r0, r0
 8004d30:	e7c8      	b.n	8004cc4 <USB_EPStartXfer+0xc0>
 8004d32:	271f      	movs	r7, #31
 8004d34:	4037      	ands	r7, r6
 8004d36:	4279      	negs	r1, r7
 8004d38:	4179      	adcs	r1, r7
 8004d3a:	0970      	lsrs	r0, r6, #5
 8004d3c:	1a40      	subs	r0, r0, r1
 8004d3e:	0287      	lsls	r7, r0, #10
 8004d40:	4884      	ldr	r0, [pc, #528]	; (8004f54 <USB_EPStartXfer+0x350>)
 8004d42:	4338      	orrs	r0, r7
 8004d44:	e7f3      	b.n	8004d2e <USB_EPStartXfer+0x12a>
 8004d46:	2a01      	cmp	r2, #1
 8004d48:	d1bd      	bne.n	8004cc6 <USB_EPStartXfer+0xc2>
 8004d4a:	002a      	movs	r2, r5
 8004d4c:	497f      	ldr	r1, [pc, #508]	; (8004f4c <USB_EPStartXfer+0x348>)
 8004d4e:	3250      	adds	r2, #80	; 0x50
 8004d50:	8812      	ldrh	r2, [r2, #0]
 8004d52:	186f      	adds	r7, r5, r1
 8004d54:	18bf      	adds	r7, r7, r2
 8004d56:	00c0      	lsls	r0, r0, #3
 8004d58:	1838      	adds	r0, r7, r0
 8004d5a:	8003      	strh	r3, [r0, #0]
 8004d5c:	e7b3      	b.n	8004cc6 <USB_EPStartXfer+0xc2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004d5e:	2a3e      	cmp	r2, #62	; 0x3e
 8004d60:	d806      	bhi.n	8004d70 <USB_EPStartXfer+0x16c>
 8004d62:	2701      	movs	r7, #1
 8004d64:	0856      	lsrs	r6, r2, #1
 8004d66:	403a      	ands	r2, r7
 8004d68:	18b6      	adds	r6, r6, r2
 8004d6a:	02b6      	lsls	r6, r6, #10
 8004d6c:	b2b2      	uxth	r2, r6
 8004d6e:	e7d1      	b.n	8004d14 <USB_EPStartXfer+0x110>
 8004d70:	271f      	movs	r7, #31
 8004d72:	0956      	lsrs	r6, r2, #5
 8004d74:	403a      	ands	r2, r7
 8004d76:	4257      	negs	r7, r2
 8004d78:	417a      	adcs	r2, r7
 8004d7a:	1ab6      	subs	r6, r6, r2
 8004d7c:	02b2      	lsls	r2, r6, #10
 8004d7e:	4e75      	ldr	r6, [pc, #468]	; (8004f54 <USB_EPStartXfer+0x350>)
 8004d80:	4316      	orrs	r6, r2
 8004d82:	b2b6      	uxth	r6, r6
 8004d84:	8006      	strh	r6, [r0, #0]
 8004d86:	e7c6      	b.n	8004d16 <USB_EPStartXfer+0x112>
 8004d88:	2801      	cmp	r0, #1
 8004d8a:	d1c4      	bne.n	8004d16 <USB_EPStartXfer+0x112>
 8004d8c:	002a      	movs	r2, r5
 8004d8e:	486a      	ldr	r0, [pc, #424]	; (8004f38 <USB_EPStartXfer+0x334>)
 8004d90:	3250      	adds	r2, #80	; 0x50
 8004d92:	8816      	ldrh	r6, [r2, #0]
 8004d94:	7822      	ldrb	r2, [r4, #0]
 8004d96:	1828      	adds	r0, r5, r0
 8004d98:	00d2      	lsls	r2, r2, #3
 8004d9a:	1980      	adds	r0, r0, r6
 8004d9c:	1812      	adds	r2, r2, r0
 8004d9e:	8013      	strh	r3, [r2, #0]
 8004da0:	e7b9      	b.n	8004d16 <USB_EPStartXfer+0x112>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004da2:	2a00      	cmp	r2, #0
 8004da4:	d14f      	bne.n	8004e46 <USB_EPStartXfer+0x242>
 8004da6:	002a      	movs	r2, r5
 8004da8:	3250      	adds	r2, #80	; 0x50
 8004daa:	8817      	ldrh	r7, [r2, #0]
 8004dac:	4a62      	ldr	r2, [pc, #392]	; (8004f38 <USB_EPStartXfer+0x334>)
 8004dae:	00c0      	lsls	r0, r0, #3
 8004db0:	18aa      	adds	r2, r5, r2
 8004db2:	19d2      	adds	r2, r2, r7
 8004db4:	1812      	adds	r2, r2, r0
 8004db6:	2e00      	cmp	r6, #0
 8004db8:	d132      	bne.n	8004e20 <USB_EPStartXfer+0x21c>
 8004dba:	8810      	ldrh	r0, [r2, #0]
 8004dbc:	4f64      	ldr	r7, [pc, #400]	; (8004f50 <USB_EPStartXfer+0x34c>)
 8004dbe:	4038      	ands	r0, r7
 8004dc0:	2780      	movs	r7, #128	; 0x80
 8004dc2:	8010      	strh	r0, [r2, #0]
 8004dc4:	8810      	ldrh	r0, [r2, #0]
 8004dc6:	023f      	lsls	r7, r7, #8
 8004dc8:	4338      	orrs	r0, r7
 8004dca:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004dcc:	0028      	movs	r0, r5
 8004dce:	8922      	ldrh	r2, [r4, #8]
 8004dd0:	9901      	ldr	r1, [sp, #4]
 8004dd2:	f7ff ff02 	bl	8004bda <USB_WritePMA>
            ep->xfer_buff += len;
 8004dd6:	6963      	ldr	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8004dd8:	6a22      	ldr	r2, [r4, #32]
 8004dda:	6920      	ldr	r0, [r4, #16]
            ep->xfer_buff += len;
 8004ddc:	1999      	adds	r1, r3, r6
 8004dde:	6161      	str	r1, [r4, #20]
              ep->xfer_len_db = 0U;
 8004de0:	2300      	movs	r3, #0
            if (ep->xfer_len_db > ep->maxpacket)
 8004de2:	4282      	cmp	r2, r0
 8004de4:	d901      	bls.n	8004dea <USB_EPStartXfer+0x1e6>
              ep->xfer_len_db -= len;
 8004de6:	1b93      	subs	r3, r2, r6
 8004de8:	0032      	movs	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004dea:	7860      	ldrb	r0, [r4, #1]
 8004dec:	6223      	str	r3, [r4, #32]
 8004dee:	b293      	uxth	r3, r2
 8004df0:	2800      	cmp	r0, #0
 8004df2:	d149      	bne.n	8004e88 <USB_EPStartXfer+0x284>
 8004df4:	0028      	movs	r0, r5
 8004df6:	3050      	adds	r0, #80	; 0x50
 8004df8:	8807      	ldrh	r7, [r0, #0]
 8004dfa:	4854      	ldr	r0, [pc, #336]	; (8004f4c <USB_EPStartXfer+0x348>)
 8004dfc:	7826      	ldrb	r6, [r4, #0]
 8004dfe:	1828      	adds	r0, r5, r0
 8004e00:	00f6      	lsls	r6, r6, #3
 8004e02:	19c0      	adds	r0, r0, r7
 8004e04:	1830      	adds	r0, r6, r0
 8004e06:	2a00      	cmp	r2, #0
 8004e08:	d129      	bne.n	8004e5e <USB_EPStartXfer+0x25a>
 8004e0a:	8802      	ldrh	r2, [r0, #0]
 8004e0c:	4e50      	ldr	r6, [pc, #320]	; (8004f50 <USB_EPStartXfer+0x34c>)
 8004e0e:	4032      	ands	r2, r6
 8004e10:	2680      	movs	r6, #128	; 0x80
 8004e12:	8002      	strh	r2, [r0, #0]
 8004e14:	8802      	ldrh	r2, [r0, #0]
 8004e16:	0236      	lsls	r6, r6, #8
 8004e18:	4332      	orrs	r2, r6
 8004e1a:	8002      	strh	r2, [r0, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004e1c:	8962      	ldrh	r2, [r4, #10]
 8004e1e:	e77b      	b.n	8004d18 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004e20:	2e3e      	cmp	r6, #62	; 0x3e
 8004e22:	d806      	bhi.n	8004e32 <USB_EPStartXfer+0x22e>
 8004e24:	2701      	movs	r7, #1
 8004e26:	0870      	lsrs	r0, r6, #1
 8004e28:	4037      	ands	r7, r6
 8004e2a:	19c0      	adds	r0, r0, r7
 8004e2c:	0280      	lsls	r0, r0, #10
 8004e2e:	b280      	uxth	r0, r0
 8004e30:	e7cb      	b.n	8004dca <USB_EPStartXfer+0x1c6>
 8004e32:	271f      	movs	r7, #31
 8004e34:	4037      	ands	r7, r6
 8004e36:	4279      	negs	r1, r7
 8004e38:	4179      	adcs	r1, r7
 8004e3a:	0970      	lsrs	r0, r6, #5
 8004e3c:	1a40      	subs	r0, r0, r1
 8004e3e:	0287      	lsls	r7, r0, #10
 8004e40:	4844      	ldr	r0, [pc, #272]	; (8004f54 <USB_EPStartXfer+0x350>)
 8004e42:	4338      	orrs	r0, r7
 8004e44:	e7f3      	b.n	8004e2e <USB_EPStartXfer+0x22a>
 8004e46:	2a01      	cmp	r2, #1
 8004e48:	d1c0      	bne.n	8004dcc <USB_EPStartXfer+0x1c8>
 8004e4a:	002a      	movs	r2, r5
 8004e4c:	3250      	adds	r2, #80	; 0x50
 8004e4e:	8817      	ldrh	r7, [r2, #0]
 8004e50:	4a39      	ldr	r2, [pc, #228]	; (8004f38 <USB_EPStartXfer+0x334>)
 8004e52:	00c0      	lsls	r0, r0, #3
 8004e54:	18aa      	adds	r2, r5, r2
 8004e56:	19d2      	adds	r2, r2, r7
 8004e58:	1810      	adds	r0, r2, r0
 8004e5a:	8003      	strh	r3, [r0, #0]
 8004e5c:	e7b6      	b.n	8004dcc <USB_EPStartXfer+0x1c8>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004e5e:	2a3e      	cmp	r2, #62	; 0x3e
 8004e60:	d806      	bhi.n	8004e70 <USB_EPStartXfer+0x26c>
 8004e62:	2701      	movs	r7, #1
 8004e64:	0856      	lsrs	r6, r2, #1
 8004e66:	403a      	ands	r2, r7
 8004e68:	18b6      	adds	r6, r6, r2
 8004e6a:	02b6      	lsls	r6, r6, #10
 8004e6c:	b2b2      	uxth	r2, r6
 8004e6e:	e7d4      	b.n	8004e1a <USB_EPStartXfer+0x216>
 8004e70:	271f      	movs	r7, #31
 8004e72:	0956      	lsrs	r6, r2, #5
 8004e74:	403a      	ands	r2, r7
 8004e76:	4257      	negs	r7, r2
 8004e78:	417a      	adcs	r2, r7
 8004e7a:	1ab6      	subs	r6, r6, r2
 8004e7c:	02b2      	lsls	r2, r6, #10
 8004e7e:	4e35      	ldr	r6, [pc, #212]	; (8004f54 <USB_EPStartXfer+0x350>)
 8004e80:	4316      	orrs	r6, r2
 8004e82:	b2b6      	uxth	r6, r6
 8004e84:	8006      	strh	r6, [r0, #0]
 8004e86:	e7c9      	b.n	8004e1c <USB_EPStartXfer+0x218>
 8004e88:	2801      	cmp	r0, #1
 8004e8a:	d1c7      	bne.n	8004e1c <USB_EPStartXfer+0x218>
 8004e8c:	002a      	movs	r2, r5
 8004e8e:	482f      	ldr	r0, [pc, #188]	; (8004f4c <USB_EPStartXfer+0x348>)
 8004e90:	3250      	adds	r2, #80	; 0x50
 8004e92:	8816      	ldrh	r6, [r2, #0]
 8004e94:	7822      	ldrb	r2, [r4, #0]
 8004e96:	1828      	adds	r0, r5, r0
 8004e98:	00d2      	lsls	r2, r2, #3
 8004e9a:	1980      	adds	r0, r0, r6
 8004e9c:	1812      	adds	r2, r2, r0
 8004e9e:	8013      	strh	r3, [r2, #0]
 8004ea0:	e7bc      	b.n	8004e1c <USB_EPStartXfer+0x218>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8004ea2:	4e2d      	ldr	r6, [pc, #180]	; (8004f58 <USB_EPStartXfer+0x354>)
 8004ea4:	4926      	ldr	r1, [pc, #152]	; (8004f40 <USB_EPStartXfer+0x33c>)
 8004ea6:	4030      	ands	r0, r6
 8004ea8:	4308      	orrs	r0, r1
 8004eaa:	b280      	uxth	r0, r0
 8004eac:	8010      	strh	r0, [r2, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004eae:	002a      	movs	r2, r5
 8004eb0:	4921      	ldr	r1, [pc, #132]	; (8004f38 <USB_EPStartXfer+0x334>)
 8004eb2:	3250      	adds	r2, #80	; 0x50
 8004eb4:	8816      	ldrh	r6, [r2, #0]
 8004eb6:	7822      	ldrb	r2, [r4, #0]
 8004eb8:	1868      	adds	r0, r5, r1
 8004eba:	00d2      	lsls	r2, r2, #3
 8004ebc:	1980      	adds	r0, r0, r6
 8004ebe:	1812      	adds	r2, r2, r0
 8004ec0:	b29b      	uxth	r3, r3
 8004ec2:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ec4:	8922      	ldrh	r2, [r4, #8]
 8004ec6:	e00f      	b.n	8004ee8 <USB_EPStartXfer+0x2e4>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ec8:	8817      	ldrh	r7, [r2, #0]
 8004eca:	00c2      	lsls	r2, r0, #3
 8004ecc:	0028      	movs	r0, r5
        ep->xfer_len_db -= len;
 8004ece:	1b9b      	subs	r3, r3, r6
 8004ed0:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ed2:	3050      	adds	r0, #80	; 0x50
 8004ed4:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ed6:	8806      	ldrh	r6, [r0, #0]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004ed8:	0679      	lsls	r1, r7, #25
 8004eda:	d507      	bpl.n	8004eec <USB_EPStartXfer+0x2e8>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004edc:	491b      	ldr	r1, [pc, #108]	; (8004f4c <USB_EPStartXfer+0x348>)
 8004ede:	1868      	adds	r0, r5, r1
 8004ee0:	1980      	adds	r0, r0, r6
 8004ee2:	1880      	adds	r0, r0, r2
 8004ee4:	8003      	strh	r3, [r0, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ee6:	8962      	ldrh	r2, [r4, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8004ee8:	9901      	ldr	r1, [sp, #4]
 8004eea:	e715      	b.n	8004d18 <USB_EPStartXfer+0x114>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8004eec:	4912      	ldr	r1, [pc, #72]	; (8004f38 <USB_EPStartXfer+0x334>)
 8004eee:	1868      	adds	r0, r5, r1
 8004ef0:	1980      	adds	r0, r0, r6
 8004ef2:	1880      	adds	r0, r0, r2
 8004ef4:	8003      	strh	r3, [r0, #0]
 8004ef6:	e7e5      	b.n	8004ec4 <USB_EPStartXfer+0x2c0>
    if (ep->doublebuffer == 0U)
 8004ef8:	2a00      	cmp	r2, #0
 8004efa:	d12f      	bne.n	8004f5c <USB_EPStartXfer+0x358>
      if (ep->xfer_len > ep->maxpacket)
 8004efc:	69a3      	ldr	r3, [r4, #24]
 8004efe:	6921      	ldr	r1, [r4, #16]
 8004f00:	428b      	cmp	r3, r1
 8004f02:	d901      	bls.n	8004f08 <USB_EPStartXfer+0x304>
        ep->xfer_len -= len;
 8004f04:	1a5a      	subs	r2, r3, r1
 8004f06:	000b      	movs	r3, r1
 8004f08:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8004f0a:	002a      	movs	r2, r5
 8004f0c:	490f      	ldr	r1, [pc, #60]	; (8004f4c <USB_EPStartXfer+0x348>)
 8004f0e:	3250      	adds	r2, #80	; 0x50
 8004f10:	8810      	ldrh	r0, [r2, #0]
 8004f12:	7822      	ldrb	r2, [r4, #0]
 8004f14:	1869      	adds	r1, r5, r1
 8004f16:	00d2      	lsls	r2, r2, #3
 8004f18:	1809      	adds	r1, r1, r0
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8004f1a:	1889      	adds	r1, r1, r2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d000      	beq.n	8004f22 <USB_EPStartXfer+0x31e>
 8004f20:	e0e7      	b.n	80050f2 <USB_EPStartXfer+0x4ee>
 8004f22:	880b      	ldrh	r3, [r1, #0]
 8004f24:	4a0a      	ldr	r2, [pc, #40]	; (8004f50 <USB_EPStartXfer+0x34c>)
 8004f26:	4013      	ands	r3, r2
 8004f28:	2280      	movs	r2, #128	; 0x80
 8004f2a:	800b      	strh	r3, [r1, #0]
 8004f2c:	880b      	ldrh	r3, [r1, #0]
 8004f2e:	0212      	lsls	r2, r2, #8
 8004f30:	4313      	orrs	r3, r2
 8004f32:	800b      	strh	r3, [r1, #0]
 8004f34:	e077      	b.n	8005026 <USB_EPStartXfer+0x422>
 8004f36:	46c0      	nop			; (mov r8, r8)
 8004f38:	00000402 	.word	0x00000402
 8004f3c:	ffff8fbf 	.word	0xffff8fbf
 8004f40:	ffff8080 	.word	0xffff8080
 8004f44:	ffff8f8f 	.word	0xffff8f8f
 8004f48:	00008180 	.word	0x00008180
 8004f4c:	00000406 	.word	0x00000406
 8004f50:	ffff83ff 	.word	0xffff83ff
 8004f54:	ffff8000 	.word	0xffff8000
 8004f58:	ffff8e8f 	.word	0xffff8e8f
      if (ep->type == EP_TYPE_BULK)
 8004f5c:	78e3      	ldrb	r3, [r4, #3]
 8004f5e:	2b02      	cmp	r3, #2
 8004f60:	d000      	beq.n	8004f64 <USB_EPStartXfer+0x360>
 8004f62:	e085      	b.n	8005070 <USB_EPStartXfer+0x46c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8004f64:	2900      	cmp	r1, #0
 8004f66:	d11e      	bne.n	8004fa6 <USB_EPStartXfer+0x3a2>
 8004f68:	0003      	movs	r3, r0
 8004f6a:	4a72      	ldr	r2, [pc, #456]	; (8005134 <USB_EPStartXfer+0x530>)
 8004f6c:	3350      	adds	r3, #80	; 0x50
 8004f6e:	8819      	ldrh	r1, [r3, #0]
 8004f70:	7823      	ldrb	r3, [r4, #0]
 8004f72:	1882      	adds	r2, r0, r2
 8004f74:	00db      	lsls	r3, r3, #3
 8004f76:	1852      	adds	r2, r2, r1
 8004f78:	189a      	adds	r2, r3, r2
 8004f7a:	6923      	ldr	r3, [r4, #16]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d109      	bne.n	8004f94 <USB_EPStartXfer+0x390>
 8004f80:	8813      	ldrh	r3, [r2, #0]
 8004f82:	496d      	ldr	r1, [pc, #436]	; (8005138 <USB_EPStartXfer+0x534>)
 8004f84:	400b      	ands	r3, r1
 8004f86:	2180      	movs	r1, #128	; 0x80
 8004f88:	8013      	strh	r3, [r2, #0]
 8004f8a:	8813      	ldrh	r3, [r2, #0]
 8004f8c:	0209      	lsls	r1, r1, #8
 8004f8e:	430b      	orrs	r3, r1
 8004f90:	8013      	strh	r3, [r2, #0]
 8004f92:	e008      	b.n	8004fa6 <USB_EPStartXfer+0x3a2>
 8004f94:	2b3e      	cmp	r3, #62	; 0x3e
 8004f96:	d81f      	bhi.n	8004fd8 <USB_EPStartXfer+0x3d4>
 8004f98:	2001      	movs	r0, #1
 8004f9a:	0859      	lsrs	r1, r3, #1
 8004f9c:	4003      	ands	r3, r0
 8004f9e:	18c9      	adds	r1, r1, r3
 8004fa0:	0289      	lsls	r1, r1, #10
 8004fa2:	b289      	uxth	r1, r1
 8004fa4:	8011      	strh	r1, [r2, #0]
 8004fa6:	7862      	ldrb	r2, [r4, #1]
 8004fa8:	7823      	ldrb	r3, [r4, #0]
 8004faa:	2a00      	cmp	r2, #0
 8004fac:	d152      	bne.n	8005054 <USB_EPStartXfer+0x450>
 8004fae:	002a      	movs	r2, r5
 8004fb0:	3250      	adds	r2, #80	; 0x50
 8004fb2:	8811      	ldrh	r1, [r2, #0]
 8004fb4:	4a61      	ldr	r2, [pc, #388]	; (800513c <USB_EPStartXfer+0x538>)
 8004fb6:	00db      	lsls	r3, r3, #3
 8004fb8:	18aa      	adds	r2, r5, r2
 8004fba:	1852      	adds	r2, r2, r1
 8004fbc:	18d2      	adds	r2, r2, r3
 8004fbe:	6923      	ldr	r3, [r4, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d114      	bne.n	8004fee <USB_EPStartXfer+0x3ea>
 8004fc4:	8813      	ldrh	r3, [r2, #0]
 8004fc6:	495c      	ldr	r1, [pc, #368]	; (8005138 <USB_EPStartXfer+0x534>)
 8004fc8:	400b      	ands	r3, r1
 8004fca:	2180      	movs	r1, #128	; 0x80
 8004fcc:	8013      	strh	r3, [r2, #0]
 8004fce:	8813      	ldrh	r3, [r2, #0]
 8004fd0:	0209      	lsls	r1, r1, #8
 8004fd2:	430b      	orrs	r3, r1
 8004fd4:	8013      	strh	r3, [r2, #0]
 8004fd6:	e013      	b.n	8005000 <USB_EPStartXfer+0x3fc>
 8004fd8:	201f      	movs	r0, #31
 8004fda:	0959      	lsrs	r1, r3, #5
 8004fdc:	4003      	ands	r3, r0
 8004fde:	4258      	negs	r0, r3
 8004fe0:	4143      	adcs	r3, r0
 8004fe2:	1ac9      	subs	r1, r1, r3
 8004fe4:	4b56      	ldr	r3, [pc, #344]	; (8005140 <USB_EPStartXfer+0x53c>)
 8004fe6:	0289      	lsls	r1, r1, #10
 8004fe8:	430b      	orrs	r3, r1
 8004fea:	b29b      	uxth	r3, r3
 8004fec:	e7d0      	b.n	8004f90 <USB_EPStartXfer+0x38c>
 8004fee:	2b3e      	cmp	r3, #62	; 0x3e
 8004ff0:	d825      	bhi.n	800503e <USB_EPStartXfer+0x43a>
 8004ff2:	2001      	movs	r0, #1
 8004ff4:	0859      	lsrs	r1, r3, #1
 8004ff6:	4003      	ands	r3, r0
 8004ff8:	18c9      	adds	r1, r1, r3
 8004ffa:	0289      	lsls	r1, r1, #10
 8004ffc:	b289      	uxth	r1, r1
 8004ffe:	8011      	strh	r1, [r2, #0]
        if (ep->xfer_count != 0U)
 8005000:	69e3      	ldr	r3, [r4, #28]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00f      	beq.n	8005026 <USB_EPStartXfer+0x422>
 8005006:	7823      	ldrb	r3, [r4, #0]
 8005008:	494e      	ldr	r1, [pc, #312]	; (8005144 <USB_EPStartXfer+0x540>)
 800500a:	009b      	lsls	r3, r3, #2
 800500c:	18eb      	adds	r3, r5, r3
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800500e:	881a      	ldrh	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005010:	400a      	ands	r2, r1
 8005012:	428a      	cmp	r2, r1
 8005014:	d001      	beq.n	800501a <USB_EPStartXfer+0x416>
 8005016:	2a00      	cmp	r2, #0
 8005018:	d105      	bne.n	8005026 <USB_EPStartXfer+0x422>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800501a:	881a      	ldrh	r2, [r3, #0]
 800501c:	494a      	ldr	r1, [pc, #296]	; (8005148 <USB_EPStartXfer+0x544>)
 800501e:	400a      	ands	r2, r1
 8005020:	494a      	ldr	r1, [pc, #296]	; (800514c <USB_EPStartXfer+0x548>)
 8005022:	430a      	orrs	r2, r1
 8005024:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005026:	7820      	ldrb	r0, [r4, #0]
 8005028:	4a49      	ldr	r2, [pc, #292]	; (8005150 <USB_EPStartXfer+0x54c>)
 800502a:	0080      	lsls	r0, r0, #2
 800502c:	182d      	adds	r5, r5, r0
 800502e:	882b      	ldrh	r3, [r5, #0]
 8005030:	401a      	ands	r2, r3
 8005032:	23c0      	movs	r3, #192	; 0xc0
 8005034:	019b      	lsls	r3, r3, #6
 8005036:	4053      	eors	r3, r2
 8005038:	4a46      	ldr	r2, [pc, #280]	; (8005154 <USB_EPStartXfer+0x550>)
 800503a:	4313      	orrs	r3, r2
 800503c:	e60f      	b.n	8004c5e <USB_EPStartXfer+0x5a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800503e:	201f      	movs	r0, #31
 8005040:	0959      	lsrs	r1, r3, #5
 8005042:	4003      	ands	r3, r0
 8005044:	4258      	negs	r0, r3
 8005046:	4143      	adcs	r3, r0
 8005048:	1ac9      	subs	r1, r1, r3
 800504a:	4b3d      	ldr	r3, [pc, #244]	; (8005140 <USB_EPStartXfer+0x53c>)
 800504c:	0289      	lsls	r1, r1, #10
 800504e:	430b      	orrs	r3, r1
 8005050:	b29b      	uxth	r3, r3
 8005052:	e7bf      	b.n	8004fd4 <USB_EPStartXfer+0x3d0>
 8005054:	2a01      	cmp	r2, #1
 8005056:	d1d3      	bne.n	8005000 <USB_EPStartXfer+0x3fc>
 8005058:	002a      	movs	r2, r5
 800505a:	4938      	ldr	r1, [pc, #224]	; (800513c <USB_EPStartXfer+0x538>)
 800505c:	3250      	adds	r2, #80	; 0x50
 800505e:	8812      	ldrh	r2, [r2, #0]
 8005060:	1869      	adds	r1, r5, r1
 8005062:	1889      	adds	r1, r1, r2
 8005064:	6922      	ldr	r2, [r4, #16]
 8005066:	00db      	lsls	r3, r3, #3
 8005068:	18cb      	adds	r3, r1, r3
 800506a:	b292      	uxth	r2, r2
 800506c:	801a      	strh	r2, [r3, #0]
 800506e:	e7c7      	b.n	8005000 <USB_EPStartXfer+0x3fc>
        return HAL_ERROR;
 8005070:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 8005072:	4283      	cmp	r3, r0
 8005074:	d000      	beq.n	8005078 <USB_EPStartXfer+0x474>
 8005076:	e5f4      	b.n	8004c62 <USB_EPStartXfer+0x5e>
        if (ep->xfer_len > ep->maxpacket)
 8005078:	69a3      	ldr	r3, [r4, #24]
 800507a:	6922      	ldr	r2, [r4, #16]
          ep->xfer_len = 0U;
 800507c:	2000      	movs	r0, #0
        if (ep->xfer_len > ep->maxpacket)
 800507e:	4293      	cmp	r3, r2
 8005080:	d901      	bls.n	8005086 <USB_EPStartXfer+0x482>
          ep->xfer_len -= len;
 8005082:	1a98      	subs	r0, r3, r2
 8005084:	0013      	movs	r3, r2
 8005086:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8005088:	2900      	cmp	r1, #0
 800508a:	d113      	bne.n	80050b4 <USB_EPStartXfer+0x4b0>
 800508c:	002a      	movs	r2, r5
 800508e:	4929      	ldr	r1, [pc, #164]	; (8005134 <USB_EPStartXfer+0x530>)
 8005090:	3250      	adds	r2, #80	; 0x50
 8005092:	8810      	ldrh	r0, [r2, #0]
 8005094:	7822      	ldrb	r2, [r4, #0]
 8005096:	1869      	adds	r1, r5, r1
 8005098:	00d2      	lsls	r2, r2, #3
 800509a:	1809      	adds	r1, r1, r0
 800509c:	1851      	adds	r1, r2, r1
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d114      	bne.n	80050cc <USB_EPStartXfer+0x4c8>
 80050a2:	880a      	ldrh	r2, [r1, #0]
 80050a4:	4824      	ldr	r0, [pc, #144]	; (8005138 <USB_EPStartXfer+0x534>)
 80050a6:	4002      	ands	r2, r0
 80050a8:	2080      	movs	r0, #128	; 0x80
 80050aa:	800a      	strh	r2, [r1, #0]
 80050ac:	880a      	ldrh	r2, [r1, #0]
 80050ae:	0200      	lsls	r0, r0, #8
 80050b0:	4302      	orrs	r2, r0
 80050b2:	800a      	strh	r2, [r1, #0]
 80050b4:	7861      	ldrb	r1, [r4, #1]
 80050b6:	7822      	ldrb	r2, [r4, #0]
 80050b8:	2900      	cmp	r1, #0
 80050ba:	d12f      	bne.n	800511c <USB_EPStartXfer+0x518>
 80050bc:	0029      	movs	r1, r5
 80050be:	481f      	ldr	r0, [pc, #124]	; (800513c <USB_EPStartXfer+0x538>)
 80050c0:	3150      	adds	r1, #80	; 0x50
 80050c2:	8809      	ldrh	r1, [r1, #0]
 80050c4:	1828      	adds	r0, r5, r0
 80050c6:	1841      	adds	r1, r0, r1
 80050c8:	00d2      	lsls	r2, r2, #3
 80050ca:	e726      	b.n	8004f1a <USB_EPStartXfer+0x316>
 80050cc:	2b3e      	cmp	r3, #62	; 0x3e
 80050ce:	d806      	bhi.n	80050de <USB_EPStartXfer+0x4da>
 80050d0:	2001      	movs	r0, #1
 80050d2:	085a      	lsrs	r2, r3, #1
 80050d4:	4018      	ands	r0, r3
 80050d6:	1812      	adds	r2, r2, r0
 80050d8:	0292      	lsls	r2, r2, #10
 80050da:	b292      	uxth	r2, r2
 80050dc:	e7e9      	b.n	80050b2 <USB_EPStartXfer+0x4ae>
 80050de:	201f      	movs	r0, #31
 80050e0:	4018      	ands	r0, r3
 80050e2:	4246      	negs	r6, r0
 80050e4:	4170      	adcs	r0, r6
 80050e6:	095a      	lsrs	r2, r3, #5
 80050e8:	1a12      	subs	r2, r2, r0
 80050ea:	0290      	lsls	r0, r2, #10
 80050ec:	4a14      	ldr	r2, [pc, #80]	; (8005140 <USB_EPStartXfer+0x53c>)
 80050ee:	4302      	orrs	r2, r0
 80050f0:	e7f3      	b.n	80050da <USB_EPStartXfer+0x4d6>
 80050f2:	2b3e      	cmp	r3, #62	; 0x3e
 80050f4:	d807      	bhi.n	8005106 <USB_EPStartXfer+0x502>
 80050f6:	2001      	movs	r0, #1
 80050f8:	085a      	lsrs	r2, r3, #1
 80050fa:	4003      	ands	r3, r0
 80050fc:	18d2      	adds	r2, r2, r3
 80050fe:	0292      	lsls	r2, r2, #10
 8005100:	b292      	uxth	r2, r2
 8005102:	800a      	strh	r2, [r1, #0]
 8005104:	e78f      	b.n	8005026 <USB_EPStartXfer+0x422>
 8005106:	201f      	movs	r0, #31
 8005108:	095a      	lsrs	r2, r3, #5
 800510a:	4003      	ands	r3, r0
 800510c:	4258      	negs	r0, r3
 800510e:	4143      	adcs	r3, r0
 8005110:	1ad2      	subs	r2, r2, r3
 8005112:	4b0b      	ldr	r3, [pc, #44]	; (8005140 <USB_EPStartXfer+0x53c>)
 8005114:	0292      	lsls	r2, r2, #10
 8005116:	4313      	orrs	r3, r2
 8005118:	b29b      	uxth	r3, r3
 800511a:	e70a      	b.n	8004f32 <USB_EPStartXfer+0x32e>
 800511c:	2901      	cmp	r1, #1
 800511e:	d000      	beq.n	8005122 <USB_EPStartXfer+0x51e>
 8005120:	e781      	b.n	8005026 <USB_EPStartXfer+0x422>
 8005122:	0029      	movs	r1, r5
 8005124:	3150      	adds	r1, #80	; 0x50
 8005126:	8808      	ldrh	r0, [r1, #0]
 8005128:	4904      	ldr	r1, [pc, #16]	; (800513c <USB_EPStartXfer+0x538>)
 800512a:	00d2      	lsls	r2, r2, #3
 800512c:	1869      	adds	r1, r5, r1
 800512e:	1809      	adds	r1, r1, r0
 8005130:	1889      	adds	r1, r1, r2
 8005132:	e7f1      	b.n	8005118 <USB_EPStartXfer+0x514>
 8005134:	00000402 	.word	0x00000402
 8005138:	ffff83ff 	.word	0xffff83ff
 800513c:	00000406 	.word	0x00000406
 8005140:	ffff8000 	.word	0xffff8000
 8005144:	00004040 	.word	0x00004040
 8005148:	ffff8f8f 	.word	0xffff8f8f
 800514c:	000080c0 	.word	0x000080c0
 8005150:	ffffbf8f 	.word	0xffffbf8f
 8005154:	00008080 	.word	0x00008080

08005158 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8005158:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800515a:	2580      	movs	r5, #128	; 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 800515c:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 800515e:	00ed      	lsls	r5, r5, #3
 8005160:	1952      	adds	r2, r2, r5

  for (i = n; i != 0U; i--)
 8005162:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 8005164:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8005166:	1880      	adds	r0, r0, r2
  for (i = n; i != 0U; i--)
 8005168:	1a47      	subs	r7, r0, r1
 800516a:	197a      	adds	r2, r7, r5
 800516c:	2e00      	cmp	r6, #0
 800516e:	d107      	bne.n	8005180 <USB_ReadPMA+0x28>
 8005170:	0064      	lsls	r4, r4, #1
 8005172:	1900      	adds	r0, r0, r4
 8005174:	1909      	adds	r1, r1, r4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 8005176:	07db      	lsls	r3, r3, #31
 8005178:	d501      	bpl.n	800517e <USB_ReadPMA+0x26>
  {
    temp = *pdwVal;
 800517a:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 800517c:	700b      	strb	r3, [r1, #0]
  }
}
 800517e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 8005180:	8812      	ldrh	r2, [r2, #0]
  for (i = n; i != 0U; i--)
 8005182:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 8005184:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 8005186:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 8005188:	0a12      	lsrs	r2, r2, #8
 800518a:	706a      	strb	r2, [r5, #1]
    pBuf++;
 800518c:	3502      	adds	r5, #2
  for (i = n; i != 0U; i--)
 800518e:	e7ec      	b.n	800516a <USB_ReadPMA+0x12>

08005190 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005190:	23af      	movs	r3, #175	; 0xaf
 8005192:	009b      	lsls	r3, r3, #2
 8005194:	58c3      	ldr	r3, [r0, r3]
{
 8005196:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00e      	beq.n	80051ba <USBD_CDC_EP0_RxReady+0x2a>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800519c:	22ae      	movs	r2, #174	; 0xae
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 800519e:	2580      	movs	r5, #128	; 0x80
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051a0:	0092      	lsls	r2, r2, #2
 80051a2:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80051a4:	00ad      	lsls	r5, r5, #2
 80051a6:	5d60      	ldrb	r0, [r4, r5]
 80051a8:	28ff      	cmp	r0, #255	; 0xff
 80051aa:	d006      	beq.n	80051ba <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80051ac:	4a04      	ldr	r2, [pc, #16]	; (80051c0 <USBD_CDC_EP0_RxReady+0x30>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	0021      	movs	r1, r4
 80051b2:	5ca2      	ldrb	r2, [r4, r2]
 80051b4:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 80051b6:	23ff      	movs	r3, #255	; 0xff
 80051b8:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 80051ba:	2000      	movs	r0, #0
 80051bc:	bd70      	pop	{r4, r5, r6, pc}
 80051be:	46c0      	nop			; (mov r8, r8)
 80051c0:	00000201 	.word	0x00000201

080051c4 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 80051c4:	2343      	movs	r3, #67	; 0x43
 80051c6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80051c8:	4800      	ldr	r0, [pc, #0]	; (80051cc <USBD_CDC_GetFSCfgDesc+0x8>)
 80051ca:	4770      	bx	lr
 80051cc:	2000008c 	.word	0x2000008c

080051d0 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 80051d0:	2343      	movs	r3, #67	; 0x43
 80051d2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80051d4:	4800      	ldr	r0, [pc, #0]	; (80051d8 <USBD_CDC_GetHSCfgDesc+0x8>)
 80051d6:	4770      	bx	lr
 80051d8:	200000d0 	.word	0x200000d0

080051dc <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 80051dc:	2343      	movs	r3, #67	; 0x43
 80051de:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80051e0:	4800      	ldr	r0, [pc, #0]	; (80051e4 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80051e2:	4770      	bx	lr
 80051e4:	20000120 	.word	0x20000120

080051e8 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 80051e8:	230a      	movs	r3, #10
 80051ea:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80051ec:	4800      	ldr	r0, [pc, #0]	; (80051f0 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80051ee:	4770      	bx	lr
 80051f0:	20000114 	.word	0x20000114

080051f4 <USBD_CDC_DataOut>:
{
 80051f4:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051f6:	26ae      	movs	r6, #174	; 0xae
 80051f8:	00b6      	lsls	r6, r6, #2
{
 80051fa:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80051fc:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80051fe:	f000 ff8f 	bl	8006120 <USBD_LL_GetRxDataSize>
 8005202:	2383      	movs	r3, #131	; 0x83
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 8005208:	59a3      	ldr	r3, [r4, r6]
    return USBD_FAIL;
 800520a:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005210:	2383      	movs	r3, #131	; 0x83
 8005212:	2281      	movs	r2, #129	; 0x81
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	18e9      	adds	r1, r5, r3
 8005218:	33b0      	adds	r3, #176	; 0xb0
 800521a:	58e3      	ldr	r3, [r4, r3]
 800521c:	0092      	lsls	r2, r2, #2
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	58a8      	ldr	r0, [r5, r2]
 8005222:	4798      	blx	r3
    return USBD_OK;
 8005224:	2000      	movs	r0, #0
}
 8005226:	bd70      	pop	{r4, r5, r6, pc}

08005228 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005228:	23ae      	movs	r3, #174	; 0xae
{
 800522a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800522c:	009b      	lsls	r3, r3, #2
 800522e:	58c3      	ldr	r3, [r0, r3]
{
 8005230:	0005      	movs	r5, r0
 8005232:	000f      	movs	r7, r1
    return USBD_FAIL;
 8005234:	2002      	movs	r0, #2
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005236:	9301      	str	r3, [sp, #4]
  if (pdev->pClassData != NULL)
 8005238:	2b00      	cmp	r3, #0
 800523a:	d018      	beq.n	800526e <USBD_CDC_DataIn+0x46>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800523c:	2614      	movs	r6, #20
 800523e:	434e      	muls	r6, r1
 8005240:	19ae      	adds	r6, r5, r6
 8005242:	69f0      	ldr	r0, [r6, #28]
 8005244:	2800      	cmp	r0, #0
 8005246:	d013      	beq.n	8005270 <USBD_CDC_DataIn+0x48>
 8005248:	2228      	movs	r2, #40	; 0x28
 800524a:	23b0      	movs	r3, #176	; 0xb0
 800524c:	434a      	muls	r2, r1
 800524e:	009b      	lsls	r3, r3, #2
 8005250:	58eb      	ldr	r3, [r5, r3]
 8005252:	189b      	adds	r3, r3, r2
 8005254:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8005256:	f7fb f817 	bl	8000288 <__aeabi_uidivmod>
 800525a:	1e0c      	subs	r4, r1, #0
 800525c:	d108      	bne.n	8005270 <USBD_CDC_DataIn+0x48>
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 800525e:	000b      	movs	r3, r1
 8005260:	000a      	movs	r2, r1
      pdev->ep_in[epnum].total_length = 0U;
 8005262:	61f1      	str	r1, [r6, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8005264:	0028      	movs	r0, r5
 8005266:	0039      	movs	r1, r7
 8005268:	f000 ff3a 	bl	80060e0 <USBD_LL_Transmit>
    return USBD_OK;
 800526c:	0020      	movs	r0, r4
}
 800526e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 8005270:	2385      	movs	r3, #133	; 0x85
 8005272:	2000      	movs	r0, #0
 8005274:	9a01      	ldr	r2, [sp, #4]
 8005276:	009b      	lsls	r3, r3, #2
 8005278:	50d0      	str	r0, [r2, r3]
 800527a:	e7f8      	b.n	800526e <USBD_CDC_DataIn+0x46>

0800527c <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800527c:	23ae      	movs	r3, #174	; 0xae
{
 800527e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005280:	009b      	lsls	r3, r3, #2
 8005282:	58c7      	ldr	r7, [r0, r3]
  uint8_t ifalt = 0U;
 8005284:	466b      	mov	r3, sp
  uint16_t status_info = 0U;
 8005286:	466a      	mov	r2, sp
{
 8005288:	000e      	movs	r6, r1
  uint8_t ifalt = 0U;
 800528a:	1d59      	adds	r1, r3, #5
 800528c:	2300      	movs	r3, #0
{
 800528e:	0005      	movs	r5, r0
  uint8_t ifalt = 0U;
 8005290:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 8005292:	80d3      	strh	r3, [r2, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005294:	7833      	ldrb	r3, [r6, #0]
  uint16_t status_info = 0U;
 8005296:	1d90      	adds	r0, r2, #6
 8005298:	001c      	movs	r4, r3
 800529a:	2260      	movs	r2, #96	; 0x60
 800529c:	4014      	ands	r4, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800529e:	4213      	tst	r3, r2
 80052a0:	d02a      	beq.n	80052f8 <USBD_CDC_Setup+0x7c>
 80052a2:	2c20      	cmp	r4, #32
 80052a4:	d146      	bne.n	8005334 <USBD_CDC_Setup+0xb8>
      if (req->wLength)
 80052a6:	88f4      	ldrh	r4, [r6, #6]
 80052a8:	7870      	ldrb	r0, [r6, #1]
 80052aa:	2c00      	cmp	r4, #0
 80052ac:	d01c      	beq.n	80052e8 <USBD_CDC_Setup+0x6c>
        if (req->bmRequest & 0x80U)
 80052ae:	b25b      	sxtb	r3, r3
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	da0e      	bge.n	80052d2 <USBD_CDC_Setup+0x56>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80052b4:	23af      	movs	r3, #175	; 0xaf
 80052b6:	009b      	lsls	r3, r3, #2
 80052b8:	58eb      	ldr	r3, [r5, r3]
 80052ba:	0022      	movs	r2, r4
 80052bc:	0039      	movs	r1, r7
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80052c2:	0039      	movs	r1, r7
 80052c4:	0028      	movs	r0, r5
 80052c6:	88f2      	ldrh	r2, [r6, #6]
 80052c8:	f000 fcac 	bl	8005c24 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 80052cc:	2400      	movs	r4, #0
}
 80052ce:	0020      	movs	r0, r4
 80052d0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
          hcdc->CmdOpCode = req->bRequest;
 80052d2:	2380      	movs	r3, #128	; 0x80
 80052d4:	009b      	lsls	r3, r3, #2
 80052d6:	54f8      	strb	r0, [r7, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 80052d8:	4b19      	ldr	r3, [pc, #100]	; (8005340 <USBD_CDC_Setup+0xc4>)
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80052da:	0022      	movs	r2, r4
 80052dc:	0039      	movs	r1, r7
 80052de:	0028      	movs	r0, r5
          hcdc->CmdLength = (uint8_t)req->wLength;
 80052e0:	54fc      	strb	r4, [r7, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 80052e2:	f000 fcb5 	bl	8005c50 <USBD_CtlPrepareRx>
 80052e6:	e7f1      	b.n	80052cc <USBD_CDC_Setup+0x50>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 80052e8:	23af      	movs	r3, #175	; 0xaf
 80052ea:	009b      	lsls	r3, r3, #2
 80052ec:	58eb      	ldr	r3, [r5, r3]
 80052ee:	0022      	movs	r2, r4
 80052f0:	0031      	movs	r1, r6
 80052f2:	689b      	ldr	r3, [r3, #8]
 80052f4:	4798      	blx	r3
 80052f6:	e7ea      	b.n	80052ce <USBD_CDC_Setup+0x52>
      switch (req->bRequest)
 80052f8:	7873      	ldrb	r3, [r6, #1]
 80052fa:	2b0a      	cmp	r3, #10
 80052fc:	d00e      	beq.n	800531c <USBD_CDC_Setup+0xa0>
 80052fe:	2b0b      	cmp	r3, #11
 8005300:	d013      	beq.n	800532a <USBD_CDC_Setup+0xae>
 8005302:	2b00      	cmp	r3, #0
 8005304:	d116      	bne.n	8005334 <USBD_CDC_Setup+0xb8>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005306:	23a7      	movs	r3, #167	; 0xa7
 8005308:	009b      	lsls	r3, r3, #2
 800530a:	5ceb      	ldrb	r3, [r5, r3]
 800530c:	2b03      	cmp	r3, #3
 800530e:	d111      	bne.n	8005334 <USBD_CDC_Setup+0xb8>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005310:	2202      	movs	r2, #2
 8005312:	0001      	movs	r1, r0
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005314:	0028      	movs	r0, r5
 8005316:	f000 fc85 	bl	8005c24 <USBD_CtlSendData>
 800531a:	e7d8      	b.n	80052ce <USBD_CDC_Setup+0x52>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800531c:	23a7      	movs	r3, #167	; 0xa7
 800531e:	009b      	lsls	r3, r3, #2
 8005320:	5ceb      	ldrb	r3, [r5, r3]
 8005322:	2b03      	cmp	r3, #3
 8005324:	d106      	bne.n	8005334 <USBD_CDC_Setup+0xb8>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005326:	2201      	movs	r2, #1
 8005328:	e7f4      	b.n	8005314 <USBD_CDC_Setup+0x98>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800532a:	23a7      	movs	r3, #167	; 0xa7
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	5ceb      	ldrb	r3, [r5, r3]
 8005330:	2b03      	cmp	r3, #3
 8005332:	d0cc      	beq.n	80052ce <USBD_CDC_Setup+0x52>
          USBD_CtlError(pdev, req);
 8005334:	0031      	movs	r1, r6
 8005336:	0028      	movs	r0, r5
 8005338:	f000 fc4c 	bl	8005bd4 <USBD_CtlError>
          ret = USBD_FAIL;
 800533c:	2402      	movs	r4, #2
          break;
 800533e:	e7c6      	b.n	80052ce <USBD_CDC_Setup+0x52>
 8005340:	00000201 	.word	0x00000201

08005344 <USBD_CDC_DeInit>:
{
 8005344:	b570      	push	{r4, r5, r6, lr}
 8005346:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005348:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 800534a:	2181      	movs	r1, #129	; 0x81
 800534c:	f000 fe72 	bl	8006034 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005350:	2101      	movs	r1, #1
 8005352:	0020      	movs	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8005354:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 8005356:	f000 fe6d 	bl	8006034 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800535a:	0023      	movs	r3, r4
  if (pdev->pClassData != NULL)
 800535c:	26ae      	movs	r6, #174	; 0xae
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 800535e:	33fc      	adds	r3, #252	; 0xfc
 8005360:	671d      	str	r5, [r3, #112]	; 0x70
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005362:	2182      	movs	r1, #130	; 0x82
 8005364:	0020      	movs	r0, r4
  if (pdev->pClassData != NULL)
 8005366:	00b6      	lsls	r6, r6, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 8005368:	f000 fe64 	bl	8006034 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 800536c:	59a3      	ldr	r3, [r4, r6]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 800536e:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 8005370:	42ab      	cmp	r3, r5
 8005372:	d008      	beq.n	8005386 <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 8005374:	23af      	movs	r3, #175	; 0xaf
 8005376:	009b      	lsls	r3, r3, #2
 8005378:	58e3      	ldr	r3, [r4, r3]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 800537e:	59a0      	ldr	r0, [r4, r6]
 8005380:	f000 feda 	bl	8006138 <USBD_static_free>
    pdev->pClassData = NULL;
 8005384:	51a5      	str	r5, [r4, r6]
}
 8005386:	2000      	movs	r0, #0
 8005388:	bd70      	pop	{r4, r5, r6, pc}

0800538a <USBD_CDC_Init>:
{
 800538a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800538c:	0006      	movs	r6, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800538e:	7c03      	ldrb	r3, [r0, #16]
{
 8005390:	0004      	movs	r4, r0
 8005392:	36fc      	adds	r6, #252	; 0xfc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005394:	2b00      	cmp	r3, #0
 8005396:	d139      	bne.n	800540c <USBD_CDC_Init+0x82>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8005398:	2380      	movs	r3, #128	; 0x80
 800539a:	2202      	movs	r2, #2
 800539c:	009b      	lsls	r3, r3, #2
 800539e:	2181      	movs	r1, #129	; 0x81
 80053a0:	f000 fe36 	bl	8006010 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053a4:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053a6:	2380      	movs	r3, #128	; 0x80
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 80053a8:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053aa:	009b      	lsls	r3, r3, #2
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 80053ac:	0029      	movs	r1, r5
 80053ae:	2202      	movs	r2, #2
 80053b0:	0020      	movs	r0, r4
 80053b2:	f000 fe2d 	bl	8006010 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80053b6:	2308      	movs	r3, #8
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80053b8:	6735      	str	r5, [r6, #112]	; 0x70
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80053ba:	2203      	movs	r2, #3
 80053bc:	2182      	movs	r1, #130	; 0x82
 80053be:	0020      	movs	r0, r4
 80053c0:	f000 fe26 	bl	8006010 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80053c4:	2701      	movs	r7, #1
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80053c6:	2087      	movs	r0, #135	; 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80053c8:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80053ca:	0080      	lsls	r0, r0, #2
 80053cc:	f000 feb0 	bl	8006130 <USBD_static_malloc>
 80053d0:	23ae      	movs	r3, #174	; 0xae
 80053d2:	009b      	lsls	r3, r3, #2
 80053d4:	0005      	movs	r5, r0
    ret = 1U;
 80053d6:	003e      	movs	r6, r7
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80053d8:	50e0      	str	r0, [r4, r3]
  if (pdev->pClassData == NULL)
 80053da:	2800      	cmp	r0, #0
 80053dc:	d014      	beq.n	8005408 <USBD_CDC_Init+0x7e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80053de:	3304      	adds	r3, #4
 80053e0:	58e3      	ldr	r3, [r4, r3]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4798      	blx	r3
    hcdc->TxState = 0U;
 80053e6:	2385      	movs	r3, #133	; 0x85
 80053e8:	2200      	movs	r2, #0
 80053ea:	009b      	lsls	r3, r3, #2
 80053ec:	50ea      	str	r2, [r5, r3]
    hcdc->RxState = 0U;
 80053ee:	3304      	adds	r3, #4
 80053f0:	50ea      	str	r2, [r5, r3]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80053f2:	2281      	movs	r2, #129	; 0x81
 80053f4:	7c26      	ldrb	r6, [r4, #16]
 80053f6:	0092      	lsls	r2, r2, #2
 80053f8:	2e00      	cmp	r6, #0
 80053fa:	d110      	bne.n	800541e <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 80053fc:	0039      	movs	r1, r7
 80053fe:	0020      	movs	r0, r4
 8005400:	58aa      	ldr	r2, [r5, r2]
 8005402:	3b18      	subs	r3, #24
 8005404:	f000 fe7c 	bl	8006100 <USBD_LL_PrepareReceive>
}
 8005408:	0030      	movs	r0, r6
 800540a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800540c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800540e:	2340      	movs	r3, #64	; 0x40
 8005410:	2202      	movs	r2, #2
 8005412:	2181      	movs	r1, #129	; 0x81
 8005414:	f000 fdfc 	bl	8006010 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005418:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800541a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800541c:	e7c6      	b.n	80053ac <USBD_CDC_Init+0x22>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800541e:	2340      	movs	r3, #64	; 0x40
 8005420:	0039      	movs	r1, r7
 8005422:	0020      	movs	r0, r4
 8005424:	58aa      	ldr	r2, [r5, r2]
 8005426:	f000 fe6b 	bl	8006100 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800542a:	2600      	movs	r6, #0
 800542c:	e7ec      	b.n	8005408 <USBD_CDC_Init+0x7e>

0800542e <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800542e:	0003      	movs	r3, r0
  uint8_t  ret = USBD_FAIL;
 8005430:	2002      	movs	r0, #2

  if (fops != NULL)
 8005432:	2900      	cmp	r1, #0
 8005434:	d003      	beq.n	800543e <USBD_CDC_RegisterInterface+0x10>
  {
    pdev->pUserData = fops;
 8005436:	22af      	movs	r2, #175	; 0xaf
    ret = USBD_OK;
 8005438:	2000      	movs	r0, #0
    pdev->pUserData = fops;
 800543a:	0092      	lsls	r2, r2, #2
 800543c:	5099      	str	r1, [r3, r2]
  }

  return ret;
}
 800543e:	4770      	bx	lr

08005440 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005440:	23ae      	movs	r3, #174	; 0xae
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 8005446:	2082      	movs	r0, #130	; 0x82
 8005448:	0080      	lsls	r0, r0, #2
 800544a:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 800544c:	2184      	movs	r1, #132	; 0x84
 800544e:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 8005450:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 8005452:	505a      	str	r2, [r3, r1]
}
 8005454:	4770      	bx	lr

08005456 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 8005456:	23ae      	movs	r3, #174	; 0xae
 8005458:	009b      	lsls	r3, r3, #2
 800545a:	58c2      	ldr	r2, [r0, r3]
 800545c:	3bb4      	subs	r3, #180	; 0xb4

  return USBD_OK;
}
 800545e:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 8005460:	50d1      	str	r1, [r2, r3]
}
 8005462:	4770      	bx	lr

08005464 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005464:	23ae      	movs	r3, #174	; 0xae
 8005466:	009b      	lsls	r3, r3, #2
 8005468:	58c2      	ldr	r2, [r0, r3]
{
 800546a:	b510      	push	{r4, lr}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 800546c:	2302      	movs	r3, #2
  if (pdev->pClassData != NULL)
 800546e:	2a00      	cmp	r2, #0
 8005470:	d012      	beq.n	8005498 <USBD_CDC_TransmitPacket+0x34>
    if (hcdc->TxState == 0U)
 8005472:	2185      	movs	r1, #133	; 0x85
 8005474:	0089      	lsls	r1, r1, #2
 8005476:	5854      	ldr	r4, [r2, r1]
 8005478:	3b01      	subs	r3, #1
 800547a:	2c00      	cmp	r4, #0
 800547c:	d10c      	bne.n	8005498 <USBD_CDC_TransmitPacket+0x34>
      hcdc->TxState = 1U;
 800547e:	5053      	str	r3, [r2, r1]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8005480:	2384      	movs	r3, #132	; 0x84
 8005482:	009b      	lsls	r3, r3, #2
 8005484:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8005486:	390c      	subs	r1, #12
 8005488:	5852      	ldr	r2, [r2, r1]
 800548a:	3988      	subs	r1, #136	; 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 800548c:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 800548e:	39ff      	subs	r1, #255	; 0xff
 8005490:	b29b      	uxth	r3, r3
 8005492:	f000 fe25 	bl	80060e0 <USBD_LL_Transmit>
      return USBD_OK;
 8005496:	0023      	movs	r3, r4
  }
}
 8005498:	0018      	movs	r0, r3
 800549a:	bd10      	pop	{r4, pc}

0800549c <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800549c:	23ae      	movs	r3, #174	; 0xae
 800549e:	009b      	lsls	r3, r3, #2
 80054a0:	58c3      	ldr	r3, [r0, r3]
{
 80054a2:	b510      	push	{r4, lr}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 80054a4:	2402      	movs	r4, #2
  if (pdev->pClassData != NULL)
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <USBD_CDC_ReceivePacket+0x24>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 80054aa:	2281      	movs	r2, #129	; 0x81
 80054ac:	7c04      	ldrb	r4, [r0, #16]
 80054ae:	0092      	lsls	r2, r2, #2
 80054b0:	589a      	ldr	r2, [r3, r2]
 80054b2:	2c00      	cmp	r4, #0
 80054b4:	d106      	bne.n	80054c4 <USBD_CDC_ReceivePacket+0x28>
      USBD_LL_PrepareReceive(pdev,
 80054b6:	2380      	movs	r3, #128	; 0x80
 80054b8:	2101      	movs	r1, #1
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	f000 fe20 	bl	8006100 <USBD_LL_PrepareReceive>
  }
}
 80054c0:	0020      	movs	r0, r4
 80054c2:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80054c4:	2340      	movs	r3, #64	; 0x40
 80054c6:	2101      	movs	r1, #1
 80054c8:	f000 fe1a 	bl	8006100 <USBD_LL_PrepareReceive>
    return USBD_OK;
 80054cc:	2400      	movs	r4, #0
 80054ce:	e7f7      	b.n	80054c0 <USBD_CDC_ReceivePacket+0x24>

080054d0 <USBD_Init>:
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 80054d0:	2302      	movs	r3, #2
{
 80054d2:	b510      	push	{r4, lr}
  if (pdev == NULL)
 80054d4:	2800      	cmp	r0, #0
 80054d6:	d013      	beq.n	8005500 <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 80054d8:	23ad      	movs	r3, #173	; 0xad
 80054da:	009b      	lsls	r3, r3, #2
 80054dc:	58c4      	ldr	r4, [r0, r3]
 80054de:	2c00      	cmp	r4, #0
 80054e0:	d001      	beq.n	80054e6 <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 80054e2:	2400      	movs	r4, #0
 80054e4:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80054e6:	2900      	cmp	r1, #0
 80054e8:	d002      	beq.n	80054f0 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 80054ea:	23ac      	movs	r3, #172	; 0xac
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80054f0:	23a7      	movs	r3, #167	; 0xa7
 80054f2:	2101      	movs	r1, #1
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 80054f8:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80054fa:	f000 fd39 	bl	8005f70 <USBD_LL_Init>

  return USBD_OK;
 80054fe:	2300      	movs	r3, #0
}
 8005500:	0018      	movs	r0, r3
 8005502:	bd10      	pop	{r4, pc}

08005504 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005504:	0003      	movs	r3, r0
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005506:	2002      	movs	r0, #2
  if (pclass != NULL)
 8005508:	2900      	cmp	r1, #0
 800550a:	d003      	beq.n	8005514 <USBD_RegisterClass+0x10>
    pdev->pClass = pclass;
 800550c:	22ad      	movs	r2, #173	; 0xad
    status = USBD_OK;
 800550e:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 8005510:	0092      	lsls	r2, r2, #2
 8005512:	5099      	str	r1, [r3, r2]
  }

  return status;
}
 8005514:	4770      	bx	lr

08005516 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005516:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005518:	f000 fd6a 	bl	8005ff0 <USBD_LL_Start>

  return USBD_OK;
}
 800551c:	2000      	movs	r0, #0
 800551e:	bd10      	pop	{r4, pc}

08005520 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005520:	23ad      	movs	r3, #173	; 0xad
 8005522:	009b      	lsls	r3, r3, #2
 8005524:	58c3      	ldr	r3, [r0, r3]
{
 8005526:	b510      	push	{r4, lr}
  if (pdev->pClass != NULL)
 8005528:	2b00      	cmp	r3, #0
 800552a:	d101      	bne.n	8005530 <USBD_SetClassConfig+0x10>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800552c:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 800552e:	bd10      	pop	{r4, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005530:	681b      	ldr	r3, [r3, #0]
 8005532:	4798      	blx	r3
 8005534:	2800      	cmp	r0, #0
 8005536:	d0fa      	beq.n	800552e <USBD_SetClassConfig+0xe>
 8005538:	e7f8      	b.n	800552c <USBD_SetClassConfig+0xc>

0800553a <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800553a:	23ad      	movs	r3, #173	; 0xad
{
 800553c:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 800553e:	009b      	lsls	r3, r3, #2
 8005540:	58c3      	ldr	r3, [r0, r3]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	4798      	blx	r3

  return USBD_OK;
}
 8005546:	2000      	movs	r0, #0
 8005548:	bd10      	pop	{r4, pc}
	...

0800554c <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 800554c:	23aa      	movs	r3, #170	; 0xaa
 800554e:	009b      	lsls	r3, r3, #2
{
 8005550:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005552:	18c5      	adds	r5, r0, r3
{
 8005554:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005556:	0028      	movs	r0, r5
 8005558:	f000 fb28 	bl	8005bac <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800555c:	23a5      	movs	r3, #165	; 0xa5
 800555e:	2201      	movs	r2, #1
 8005560:	009b      	lsls	r3, r3, #2
 8005562:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8005564:	4b11      	ldr	r3, [pc, #68]	; (80055ac <USBD_LL_SetupStage+0x60>)
 8005566:	5ae2      	ldrh	r2, [r4, r3]
 8005568:	3b16      	subs	r3, #22
 800556a:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 800556c:	3310      	adds	r3, #16
 800556e:	5ce1      	ldrb	r1, [r4, r3]
 8005570:	231f      	movs	r3, #31
 8005572:	400b      	ands	r3, r1
 8005574:	2b01      	cmp	r3, #1
 8005576:	d009      	beq.n	800558c <USBD_LL_SetupStage+0x40>
 8005578:	2b02      	cmp	r3, #2
 800557a:	d00c      	beq.n	8005596 <USBD_LL_SetupStage+0x4a>
 800557c:	2b00      	cmp	r3, #0
 800557e:	d10f      	bne.n	80055a0 <USBD_LL_SetupStage+0x54>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8005580:	0029      	movs	r1, r5
 8005582:	0020      	movs	r0, r4
 8005584:	f000 f91e 	bl	80057c4 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 8005588:	2000      	movs	r0, #0
 800558a:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 800558c:	0029      	movs	r1, r5
 800558e:	0020      	movs	r0, r4
 8005590:	f000 fa4e 	bl	8005a30 <USBD_StdItfReq>
      break;
 8005594:	e7f8      	b.n	8005588 <USBD_LL_SetupStage+0x3c>
      USBD_StdEPReq(pdev, &pdev->request);
 8005596:	0029      	movs	r1, r5
 8005598:	0020      	movs	r0, r4
 800559a:	f000 fa71 	bl	8005a80 <USBD_StdEPReq>
      break;
 800559e:	e7f3      	b.n	8005588 <USBD_LL_SetupStage+0x3c>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80055a0:	237f      	movs	r3, #127	; 0x7f
 80055a2:	0020      	movs	r0, r4
 80055a4:	4399      	bics	r1, r3
 80055a6:	f000 fd55 	bl	8006054 <USBD_LL_StallEP>
      break;
 80055aa:	e7ed      	b.n	8005588 <USBD_LL_SetupStage+0x3c>
 80055ac:	000002ae 	.word	0x000002ae

080055b0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80055b0:	b570      	push	{r4, r5, r6, lr}
 80055b2:	000d      	movs	r5, r1
 80055b4:	0004      	movs	r4, r0
 80055b6:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80055b8:	2d00      	cmp	r5, #0
 80055ba:	d12e      	bne.n	800561a <USBD_LL_DataOutStage+0x6a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80055bc:	23a5      	movs	r3, #165	; 0xa5
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	58c2      	ldr	r2, [r0, r3]
 80055c2:	2a03      	cmp	r2, #3
 80055c4:	d122      	bne.n	800560c <USBD_LL_DataOutStage+0x5c>
    {
      if (pep->rem_length > pep->maxpacket)
 80055c6:	0002      	movs	r2, r0
 80055c8:	3255      	adds	r2, #85	; 0x55
 80055ca:	32ff      	adds	r2, #255	; 0xff
 80055cc:	68d3      	ldr	r3, [r2, #12]
 80055ce:	6910      	ldr	r0, [r2, #16]
 80055d0:	4283      	cmp	r3, r0
 80055d2:	d90a      	bls.n	80055ea <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -= pep->maxpacket;
 80055d4:	1a1b      	subs	r3, r3, r0
 80055d6:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx(pdev, pdata,
 80055d8:	b282      	uxth	r2, r0
 80055da:	4298      	cmp	r0, r3
 80055dc:	d900      	bls.n	80055e0 <USBD_LL_DataOutStage+0x30>
 80055de:	b29a      	uxth	r2, r3
 80055e0:	0020      	movs	r0, r4
 80055e2:	f000 fb45 	bl	8005c70 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80055e6:	0028      	movs	r0, r5
 80055e8:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80055ea:	23ad      	movs	r3, #173	; 0xad
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	58e3      	ldr	r3, [r4, r3]
 80055f0:	691b      	ldr	r3, [r3, #16]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d006      	beq.n	8005604 <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 80055f6:	22a7      	movs	r2, #167	; 0xa7
 80055f8:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 80055fa:	5ca2      	ldrb	r2, [r4, r2]
 80055fc:	2a03      	cmp	r2, #3
 80055fe:	d101      	bne.n	8005604 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 8005600:	0020      	movs	r0, r4
 8005602:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005604:	0020      	movs	r0, r4
 8005606:	f000 fb3b 	bl	8005c80 <USBD_CtlSendStatus>
 800560a:	e7ec      	b.n	80055e6 <USBD_LL_DataOutStage+0x36>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800560c:	2a05      	cmp	r2, #5
 800560e:	d1ea      	bne.n	80055e6 <USBD_LL_DataOutStage+0x36>
        USBD_LL_StallEP(pdev, 0U);
 8005610:	0029      	movs	r1, r5
        pdev->ep0_state = USBD_EP0_IDLE;
 8005612:	50c5      	str	r5, [r0, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005614:	f000 fd1e 	bl	8006054 <USBD_LL_StallEP>
 8005618:	e7e5      	b.n	80055e6 <USBD_LL_DataOutStage+0x36>
  else if ((pdev->pClass->DataOut != NULL) &&
 800561a:	23ad      	movs	r3, #173	; 0xad
 800561c:	009b      	lsls	r3, r3, #2
 800561e:	58c3      	ldr	r3, [r0, r3]
 8005620:	699b      	ldr	r3, [r3, #24]
 8005622:	2b00      	cmp	r3, #0
 8005624:	d008      	beq.n	8005638 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005626:	22a7      	movs	r2, #167	; 0xa7
 8005628:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 800562a:	5c82      	ldrb	r2, [r0, r2]
 800562c:	2a03      	cmp	r2, #3
 800562e:	d103      	bne.n	8005638 <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 8005630:	0029      	movs	r1, r5
 8005632:	4798      	blx	r3
  return USBD_OK;
 8005634:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8005636:	e7d6      	b.n	80055e6 <USBD_LL_DataOutStage+0x36>
    return USBD_FAIL;
 8005638:	2502      	movs	r5, #2
 800563a:	e7d4      	b.n	80055e6 <USBD_LL_DataOutStage+0x36>

0800563c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800563c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563e:	000d      	movs	r5, r1
 8005640:	0004      	movs	r4, r0
 8005642:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005644:	2d00      	cmp	r5, #0
 8005646:	d14d      	bne.n	80056e4 <USBD_LL_DataInStage+0xa8>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005648:	23a5      	movs	r3, #165	; 0xa5
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	58c3      	ldr	r3, [r0, r3]
 800564e:	2b02      	cmp	r3, #2
 8005650:	d141      	bne.n	80056d6 <USBD_LL_DataInStage+0x9a>
    {
      if (pep->rem_length > pep->maxpacket)
 8005652:	6a03      	ldr	r3, [r0, #32]
 8005654:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005656:	42b3      	cmp	r3, r6
 8005658:	d913      	bls.n	8005682 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 800565a:	1b9b      	subs	r3, r3, r6
 800565c:	6203      	str	r3, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 800565e:	b29a      	uxth	r2, r3
 8005660:	f000 faee 	bl	8005c40 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005664:	002b      	movs	r3, r5
 8005666:	002a      	movs	r2, r5
 8005668:	0029      	movs	r1, r5
 800566a:	0020      	movs	r0, r4
 800566c:	f000 fd48 	bl	8006100 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 8005670:	23a8      	movs	r3, #168	; 0xa8
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	5ce2      	ldrb	r2, [r4, r3]
 8005676:	2a01      	cmp	r2, #1
 8005678:	d101      	bne.n	800567e <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 800567a:	2200      	movs	r2, #0
 800567c:	54e2      	strb	r2, [r4, r3]
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 800567e:	0028      	movs	r0, r5
 8005680:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8005682:	69c7      	ldr	r7, [r0, #28]
 8005684:	0031      	movs	r1, r6
 8005686:	0038      	movs	r0, r7
 8005688:	f7fa fdfe 	bl	8000288 <__aeabi_uidivmod>
 800568c:	2900      	cmp	r1, #0
 800568e:	d10d      	bne.n	80056ac <USBD_LL_DataInStage+0x70>
 8005690:	42be      	cmp	r6, r7
 8005692:	d80b      	bhi.n	80056ac <USBD_LL_DataInStage+0x70>
            (pep->total_length < pdev->ep0_data_len))
 8005694:	26a6      	movs	r6, #166	; 0xa6
 8005696:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 8005698:	59a3      	ldr	r3, [r4, r6]
 800569a:	429f      	cmp	r7, r3
 800569c:	d206      	bcs.n	80056ac <USBD_LL_DataInStage+0x70>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 800569e:	002a      	movs	r2, r5
 80056a0:	0029      	movs	r1, r5
 80056a2:	0020      	movs	r0, r4
 80056a4:	f000 facc 	bl	8005c40 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80056a8:	51a5      	str	r5, [r4, r6]
 80056aa:	e7db      	b.n	8005664 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056ac:	23ad      	movs	r3, #173	; 0xad
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	58e3      	ldr	r3, [r4, r3]
 80056b2:	68db      	ldr	r3, [r3, #12]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d006      	beq.n	80056c6 <USBD_LL_DataInStage+0x8a>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056b8:	22a7      	movs	r2, #167	; 0xa7
 80056ba:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 80056bc:	5ca2      	ldrb	r2, [r4, r2]
 80056be:	2a03      	cmp	r2, #3
 80056c0:	d101      	bne.n	80056c6 <USBD_LL_DataInStage+0x8a>
            pdev->pClass->EP0_TxSent(pdev);
 80056c2:	0020      	movs	r0, r4
 80056c4:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 80056c6:	2180      	movs	r1, #128	; 0x80
 80056c8:	0020      	movs	r0, r4
 80056ca:	f000 fcc3 	bl	8006054 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80056ce:	0020      	movs	r0, r4
 80056d0:	f000 fae2 	bl	8005c98 <USBD_CtlReceiveStatus>
 80056d4:	e7cc      	b.n	8005670 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80056d6:	2204      	movs	r2, #4
 80056d8:	4393      	bics	r3, r2
 80056da:	d1c9      	bne.n	8005670 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 80056dc:	2180      	movs	r1, #128	; 0x80
 80056de:	f000 fcb9 	bl	8006054 <USBD_LL_StallEP>
 80056e2:	e7c5      	b.n	8005670 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 80056e4:	23ad      	movs	r3, #173	; 0xad
 80056e6:	009b      	lsls	r3, r3, #2
 80056e8:	58c3      	ldr	r3, [r0, r3]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d008      	beq.n	8005702 <USBD_LL_DataInStage+0xc6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 80056f0:	22a7      	movs	r2, #167	; 0xa7
 80056f2:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 80056f4:	5c82      	ldrb	r2, [r0, r2]
 80056f6:	2a03      	cmp	r2, #3
 80056f8:	d103      	bne.n	8005702 <USBD_LL_DataInStage+0xc6>
    pdev->pClass->DataIn(pdev, epnum);
 80056fa:	0029      	movs	r1, r5
 80056fc:	4798      	blx	r3
  return USBD_OK;
 80056fe:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8005700:	e7bd      	b.n	800567e <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8005702:	2502      	movs	r5, #2
 8005704:	e7bb      	b.n	800567e <USBD_LL_DataInStage+0x42>

08005706 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005706:	2200      	movs	r2, #0
{
 8005708:	b570      	push	{r4, r5, r6, lr}
 800570a:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800570c:	0011      	movs	r1, r2
 800570e:	2340      	movs	r3, #64	; 0x40
 8005710:	f000 fc7e 	bl	8006010 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005714:	0023      	movs	r3, r4
 8005716:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005718:	2640      	movs	r6, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800571a:	33fc      	adds	r3, #252	; 0xfc

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800571c:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800571e:	65dd      	str	r5, [r3, #92]	; 0x5c
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005720:	669e      	str	r6, [r3, #104]	; 0x68
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005722:	2200      	movs	r2, #0
 8005724:	0033      	movs	r3, r6
 8005726:	0020      	movs	r0, r4
 8005728:	f000 fc72 	bl	8006010 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800572c:	23a7      	movs	r3, #167	; 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 800572e:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005730:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005732:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005734:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005736:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005738:	3b08      	subs	r3, #8
 800573a:	50e1      	str	r1, [r4, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 800573c:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 800573e:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005740:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 8005742:	3314      	adds	r3, #20
 8005744:	58e3      	ldr	r3, [r4, r3]
 8005746:	428b      	cmp	r3, r1
 8005748:	d005      	beq.n	8005756 <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 800574a:	23ad      	movs	r3, #173	; 0xad
 800574c:	009b      	lsls	r3, r3, #2
 800574e:	58e3      	ldr	r3, [r4, r3]
 8005750:	0020      	movs	r0, r4
 8005752:	685b      	ldr	r3, [r3, #4]
 8005754:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005756:	2000      	movs	r0, #0
 8005758:	bd70      	pop	{r4, r5, r6, pc}

0800575a <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 800575a:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 800575c:	2000      	movs	r0, #0
 800575e:	4770      	bx	lr

08005760 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005760:	23a7      	movs	r3, #167	; 0xa7
 8005762:	009b      	lsls	r3, r3, #2
 8005764:	5cc1      	ldrb	r1, [r0, r3]
 8005766:	4a03      	ldr	r2, [pc, #12]	; (8005774 <USBD_LL_Suspend+0x14>)
 8005768:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 800576a:	2204      	movs	r2, #4
 800576c:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 800576e:	2000      	movs	r0, #0
 8005770:	4770      	bx	lr
 8005772:	46c0      	nop			; (mov r8, r8)
 8005774:	0000029d 	.word	0x0000029d

08005778 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005778:	23a7      	movs	r3, #167	; 0xa7
 800577a:	009b      	lsls	r3, r3, #2
 800577c:	5cc2      	ldrb	r2, [r0, r3]
 800577e:	2a04      	cmp	r2, #4
 8005780:	d102      	bne.n	8005788 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005782:	4a02      	ldr	r2, [pc, #8]	; (800578c <USBD_LL_Resume+0x14>)
 8005784:	5c82      	ldrb	r2, [r0, r2]
 8005786:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 8005788:	2000      	movs	r0, #0
 800578a:	4770      	bx	lr
 800578c:	0000029d 	.word	0x0000029d

08005790 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005790:	23a7      	movs	r3, #167	; 0xa7
{
 8005792:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005794:	009b      	lsls	r3, r3, #2
 8005796:	5cc3      	ldrb	r3, [r0, r3]
 8005798:	2b03      	cmp	r3, #3
 800579a:	d106      	bne.n	80057aa <USBD_LL_SOF+0x1a>
  {
    if (pdev->pClass->SOF != NULL)
 800579c:	23ad      	movs	r3, #173	; 0xad
 800579e:	009b      	lsls	r3, r3, #2
 80057a0:	58c3      	ldr	r3, [r0, r3]
 80057a2:	69db      	ldr	r3, [r3, #28]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d000      	beq.n	80057aa <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 80057a8:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 80057aa:	2000      	movs	r0, #0
 80057ac:	bd10      	pop	{r4, pc}

080057ae <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 80057ae:	b510      	push	{r4, lr}
 80057b0:	0004      	movs	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 80057b2:	2180      	movs	r1, #128	; 0x80
 80057b4:	f000 fc4e 	bl	8006054 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 80057b8:	2100      	movs	r1, #0
 80057ba:	0020      	movs	r0, r4
 80057bc:	f000 fc4a 	bl	8006054 <USBD_LL_StallEP>
}
 80057c0:	bd10      	pop	{r4, pc}
	...

080057c4 <USBD_StdDevReq>:
{
 80057c4:	2260      	movs	r2, #96	; 0x60
 80057c6:	780b      	ldrb	r3, [r1, #0]
 80057c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80057ca:	4013      	ands	r3, r2
 80057cc:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057ce:	0019      	movs	r1, r3
 80057d0:	1892      	adds	r2, r2, r2
 80057d2:	3920      	subs	r1, #32
{
 80057d4:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80057d6:	4211      	tst	r1, r2
 80057d8:	d012      	beq.n	8005800 <USBD_StdDevReq+0x3c>
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d000      	beq.n	80057e0 <USBD_StdDevReq+0x1c>
 80057de:	e096      	b.n	800590e <USBD_StdDevReq+0x14a>
      switch (req->bRequest)
 80057e0:	7868      	ldrb	r0, [r5, #1]
 80057e2:	2809      	cmp	r0, #9
 80057e4:	d900      	bls.n	80057e8 <USBD_StdDevReq+0x24>
 80057e6:	e092      	b.n	800590e <USBD_StdDevReq+0x14a>
 80057e8:	f7fa fcbe 	bl	8000168 <__gnu_thumb1_case_uhi>
 80057ec:	010e00f0 	.word	0x010e00f0
 80057f0:	01060091 	.word	0x01060091
 80057f4:	00830091 	.word	0x00830091
 80057f8:	00910012 	.word	0x00910012
 80057fc:	00a400da 	.word	0x00a400da
      pdev->pClass->Setup(pdev, req);
 8005800:	23ad      	movs	r3, #173	; 0xad
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	58c3      	ldr	r3, [r0, r3]
 8005806:	0029      	movs	r1, r5
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	4798      	blx	r3
}
 800580c:	2000      	movs	r0, #0
 800580e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  uint16_t len = 0U;
 8005810:	2300      	movs	r3, #0
 8005812:	466a      	mov	r2, sp
 8005814:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 8005816:	886b      	ldrh	r3, [r5, #2]
 8005818:	0a18      	lsrs	r0, r3, #8
 800581a:	3801      	subs	r0, #1
 800581c:	2806      	cmp	r0, #6
 800581e:	d876      	bhi.n	800590e <USBD_StdDevReq+0x14a>
 8005820:	f7fa fc8e 	bl	8000140 <__gnu_thumb1_case_uqi>
 8005824:	75261704 	.word	0x75261704
 8005828:	4075      	.short	0x4075
 800582a:	4b          	.byte	0x4b
 800582b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800582c:	23ac      	movs	r3, #172	; 0xac
 800582e:	009b      	lsls	r3, r3, #2
 8005830:	58e3      	ldr	r3, [r4, r3]
 8005832:	7c20      	ldrb	r0, [r4, #16]
 8005834:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005836:	466a      	mov	r2, sp
 8005838:	1d91      	adds	r1, r2, #6
 800583a:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 800583c:	466b      	mov	r3, sp
 800583e:	88d9      	ldrh	r1, [r3, #6]
 8005840:	2900      	cmp	r1, #0
 8005842:	d051      	beq.n	80058e8 <USBD_StdDevReq+0x124>
 8005844:	88ea      	ldrh	r2, [r5, #6]
 8005846:	2a00      	cmp	r2, #0
 8005848:	d143      	bne.n	80058d2 <USBD_StdDevReq+0x10e>
        USBD_CtlSendStatus(pdev);
 800584a:	0020      	movs	r0, r4
 800584c:	f000 fa18 	bl	8005c80 <USBD_CtlSendStatus>
 8005850:	e7dc      	b.n	800580c <USBD_StdDevReq+0x48>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005852:	23ad      	movs	r3, #173	; 0xad
 8005854:	7c22      	ldrb	r2, [r4, #16]
 8005856:	009b      	lsls	r3, r3, #2
 8005858:	58e3      	ldr	r3, [r4, r3]
 800585a:	2a00      	cmp	r2, #0
 800585c:	d106      	bne.n	800586c <USBD_StdDevReq+0xa8>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 800585e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005860:	466a      	mov	r2, sp
 8005862:	1d90      	adds	r0, r2, #6
 8005864:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005866:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005868:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 800586a:	e7e7      	b.n	800583c <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 800586c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800586e:	e7f7      	b.n	8005860 <USBD_StdDevReq+0x9c>
      switch ((uint8_t)(req->wValue))
 8005870:	b2d8      	uxtb	r0, r3
 8005872:	2805      	cmp	r0, #5
 8005874:	d84b      	bhi.n	800590e <USBD_StdDevReq+0x14a>
 8005876:	23ac      	movs	r3, #172	; 0xac
 8005878:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800587a:	58e3      	ldr	r3, [r4, r3]
 800587c:	f7fa fc60 	bl	8000140 <__gnu_thumb1_case_uqi>
 8005880:	0c0a0803 	.word	0x0c0a0803
 8005884:	100e      	.short	0x100e
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005886:	685b      	ldr	r3, [r3, #4]
 8005888:	2b00      	cmp	r3, #0
 800588a:	d040      	beq.n	800590e <USBD_StdDevReq+0x14a>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800588c:	7c20      	ldrb	r0, [r4, #16]
 800588e:	e7d2      	b.n	8005836 <USBD_StdDevReq+0x72>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005890:	689b      	ldr	r3, [r3, #8]
 8005892:	e7f9      	b.n	8005888 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005894:	68db      	ldr	r3, [r3, #12]
 8005896:	e7f7      	b.n	8005888 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005898:	691b      	ldr	r3, [r3, #16]
 800589a:	e7f5      	b.n	8005888 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 800589c:	695b      	ldr	r3, [r3, #20]
 800589e:	e7f3      	b.n	8005888 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80058a0:	699b      	ldr	r3, [r3, #24]
 80058a2:	e7f1      	b.n	8005888 <USBD_StdDevReq+0xc4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058a4:	7c23      	ldrb	r3, [r4, #16]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d131      	bne.n	800590e <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80058aa:	23ad      	movs	r3, #173	; 0xad
 80058ac:	466a      	mov	r2, sp
 80058ae:	009b      	lsls	r3, r3, #2
 80058b0:	58e3      	ldr	r3, [r4, r3]
 80058b2:	1d90      	adds	r0, r2, #6
 80058b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b6:	4798      	blx	r3
  if (err != 0U)
 80058b8:	e7c0      	b.n	800583c <USBD_StdDevReq+0x78>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80058ba:	7c23      	ldrb	r3, [r4, #16]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d126      	bne.n	800590e <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 80058c0:	23ad      	movs	r3, #173	; 0xad
 80058c2:	466a      	mov	r2, sp
 80058c4:	009b      	lsls	r3, r3, #2
 80058c6:	58e3      	ldr	r3, [r4, r3]
 80058c8:	1d90      	adds	r0, r2, #6
 80058ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058cc:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80058ce:	2307      	movs	r3, #7
 80058d0:	e7ca      	b.n	8005868 <USBD_StdDevReq+0xa4>
      len = MIN(len, req->wLength);
 80058d2:	1c0b      	adds	r3, r1, #0
 80058d4:	4291      	cmp	r1, r2
 80058d6:	d900      	bls.n	80058da <USBD_StdDevReq+0x116>
 80058d8:	1c13      	adds	r3, r2, #0
 80058da:	4669      	mov	r1, sp
 80058dc:	b29a      	uxth	r2, r3
 80058de:	80cb      	strh	r3, [r1, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80058e0:	0001      	movs	r1, r0
 80058e2:	0020      	movs	r0, r4
 80058e4:	f000 f99e 	bl	8005c24 <USBD_CtlSendData>
    if (req->wLength == 0U)
 80058e8:	88eb      	ldrh	r3, [r5, #6]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d000      	beq.n	80058f0 <USBD_StdDevReq+0x12c>
 80058ee:	e78d      	b.n	800580c <USBD_StdDevReq+0x48>
 80058f0:	e7ab      	b.n	800584a <USBD_StdDevReq+0x86>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80058f2:	88ab      	ldrh	r3, [r5, #4]
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d10a      	bne.n	800590e <USBD_StdDevReq+0x14a>
 80058f8:	88eb      	ldrh	r3, [r5, #6]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d107      	bne.n	800590e <USBD_StdDevReq+0x14a>
 80058fe:	886e      	ldrh	r6, [r5, #2]
 8005900:	2e7f      	cmp	r6, #127	; 0x7f
 8005902:	d804      	bhi.n	800590e <USBD_StdDevReq+0x14a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005904:	25a7      	movs	r5, #167	; 0xa7
 8005906:	00ad      	lsls	r5, r5, #2
 8005908:	5d63      	ldrb	r3, [r4, r5]
 800590a:	2b03      	cmp	r3, #3
 800590c:	d103      	bne.n	8005916 <USBD_StdDevReq+0x152>
        USBD_CtlError(pdev, req);
 800590e:	0020      	movs	r0, r4
 8005910:	f7ff ff4d 	bl	80057ae <USBD_CtlError.constprop.0>
        break;
 8005914:	e77a      	b.n	800580c <USBD_StdDevReq+0x48>
      pdev->dev_address = dev_addr;
 8005916:	4b44      	ldr	r3, [pc, #272]	; (8005a28 <USBD_StdDevReq+0x264>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005918:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 800591a:	54e1      	strb	r1, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 800591c:	0020      	movs	r0, r4
 800591e:	f000 fbcf 	bl	80060c0 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005922:	0020      	movs	r0, r4
 8005924:	f000 f9ac 	bl	8005c80 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005928:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 800592a:	2e00      	cmp	r6, #0
 800592c:	d100      	bne.n	8005930 <USBD_StdDevReq+0x16c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 800592e:	2301      	movs	r3, #1
 8005930:	5563      	strb	r3, [r4, r5]
 8005932:	e76b      	b.n	800580c <USBD_StdDevReq+0x48>
  cfgidx = (uint8_t)(req->wValue);
 8005934:	78a9      	ldrb	r1, [r5, #2]
 8005936:	4d3d      	ldr	r5, [pc, #244]	; (8005a2c <USBD_StdDevReq+0x268>)
 8005938:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800593a:	2901      	cmp	r1, #1
 800593c:	d8e7      	bhi.n	800590e <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 800593e:	23a7      	movs	r3, #167	; 0xa7
 8005940:	009b      	lsls	r3, r3, #2
 8005942:	5ce2      	ldrb	r2, [r4, r3]
 8005944:	2a02      	cmp	r2, #2
 8005946:	d009      	beq.n	800595c <USBD_StdDevReq+0x198>
 8005948:	2a03      	cmp	r2, #3
 800594a:	d015      	beq.n	8005978 <USBD_StdDevReq+0x1b4>
        USBD_CtlError(pdev, req);
 800594c:	0020      	movs	r0, r4
 800594e:	f7ff ff2e 	bl	80057ae <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005952:	0020      	movs	r0, r4
 8005954:	7829      	ldrb	r1, [r5, #0]
 8005956:	f7ff fdf0 	bl	800553a <USBD_ClrClassConfig>
        break;
 800595a:	e757      	b.n	800580c <USBD_StdDevReq+0x48>
        if (cfgidx)
 800595c:	2900      	cmp	r1, #0
 800595e:	d100      	bne.n	8005962 <USBD_StdDevReq+0x19e>
 8005960:	e773      	b.n	800584a <USBD_StdDevReq+0x86>
          pdev->dev_config = cfgidx;
 8005962:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005964:	2203      	movs	r2, #3
          pdev->dev_config = cfgidx;
 8005966:	6061      	str	r1, [r4, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005968:	54e2      	strb	r2, [r4, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 800596a:	0020      	movs	r0, r4
 800596c:	f7ff fdd8 	bl	8005520 <USBD_SetClassConfig>
 8005970:	2802      	cmp	r0, #2
 8005972:	d000      	beq.n	8005976 <USBD_StdDevReq+0x1b2>
 8005974:	e769      	b.n	800584a <USBD_StdDevReq+0x86>
 8005976:	e7ca      	b.n	800590e <USBD_StdDevReq+0x14a>
        if (cfgidx == 0U)
 8005978:	2900      	cmp	r1, #0
 800597a:	d106      	bne.n	800598a <USBD_StdDevReq+0x1c6>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800597c:	2202      	movs	r2, #2
          USBD_ClrClassConfig(pdev, cfgidx);
 800597e:	0020      	movs	r0, r4
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005980:	54e2      	strb	r2, [r4, r3]
          pdev->dev_config = cfgidx;
 8005982:	6061      	str	r1, [r4, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005984:	f7ff fdd9 	bl	800553a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005988:	e75f      	b.n	800584a <USBD_StdDevReq+0x86>
        else if (cfgidx != pdev->dev_config)
 800598a:	6861      	ldr	r1, [r4, #4]
 800598c:	2901      	cmp	r1, #1
 800598e:	d100      	bne.n	8005992 <USBD_StdDevReq+0x1ce>
 8005990:	e75b      	b.n	800584a <USBD_StdDevReq+0x86>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005992:	b2c9      	uxtb	r1, r1
 8005994:	0020      	movs	r0, r4
 8005996:	f7ff fdd0 	bl	800553a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 800599a:	7829      	ldrb	r1, [r5, #0]
 800599c:	6061      	str	r1, [r4, #4]
 800599e:	e7e4      	b.n	800596a <USBD_StdDevReq+0x1a6>
  if (req->wLength != 1U)
 80059a0:	88ea      	ldrh	r2, [r5, #6]
 80059a2:	2a01      	cmp	r2, #1
 80059a4:	d1b3      	bne.n	800590e <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 80059a6:	23a7      	movs	r3, #167	; 0xa7
 80059a8:	009b      	lsls	r3, r3, #2
 80059aa:	5ce3      	ldrb	r3, [r4, r3]
 80059ac:	2b02      	cmp	r3, #2
 80059ae:	d806      	bhi.n	80059be <USBD_StdDevReq+0x1fa>
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d0ac      	beq.n	800590e <USBD_StdDevReq+0x14a>
        pdev->dev_default_config = 0U;
 80059b4:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80059b6:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 80059b8:	60a3      	str	r3, [r4, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 80059ba:	3108      	adds	r1, #8
 80059bc:	e002      	b.n	80059c4 <USBD_StdDevReq+0x200>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 80059be:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 80059c0:	2b03      	cmp	r3, #3
 80059c2:	d1a4      	bne.n	800590e <USBD_StdDevReq+0x14a>
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80059c4:	0020      	movs	r0, r4
 80059c6:	f000 f92d 	bl	8005c24 <USBD_CtlSendData>
      break;
 80059ca:	e71f      	b.n	800580c <USBD_StdDevReq+0x48>
  switch (pdev->dev_state)
 80059cc:	23a7      	movs	r3, #167	; 0xa7
 80059ce:	009b      	lsls	r3, r3, #2
 80059d0:	5ce3      	ldrb	r3, [r4, r3]
 80059d2:	3b01      	subs	r3, #1
 80059d4:	2b02      	cmp	r3, #2
 80059d6:	d89a      	bhi.n	800590e <USBD_StdDevReq+0x14a>
      if (req->wLength != 0x2U)
 80059d8:	88eb      	ldrh	r3, [r5, #6]
 80059da:	2b02      	cmp	r3, #2
 80059dc:	d197      	bne.n	800590e <USBD_StdDevReq+0x14a>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80059de:	3b01      	subs	r3, #1
 80059e0:	60e3      	str	r3, [r4, #12]
      if (pdev->dev_remote_wakeup)
 80059e2:	23a9      	movs	r3, #169	; 0xa9
 80059e4:	009b      	lsls	r3, r3, #2
 80059e6:	58e3      	ldr	r3, [r4, r3]
 80059e8:	2b00      	cmp	r3, #0
 80059ea:	d001      	beq.n	80059f0 <USBD_StdDevReq+0x22c>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80059ec:	2303      	movs	r3, #3
 80059ee:	60e3      	str	r3, [r4, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 80059f0:	0021      	movs	r1, r4
 80059f2:	2202      	movs	r2, #2
 80059f4:	310c      	adds	r1, #12
 80059f6:	e7e5      	b.n	80059c4 <USBD_StdDevReq+0x200>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80059f8:	886b      	ldrh	r3, [r5, #2]
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d000      	beq.n	8005a00 <USBD_StdDevReq+0x23c>
 80059fe:	e705      	b.n	800580c <USBD_StdDevReq+0x48>
    pdev->dev_remote_wakeup = 1U;
 8005a00:	22a9      	movs	r2, #169	; 0xa9
 8005a02:	0092      	lsls	r2, r2, #2
 8005a04:	50a3      	str	r3, [r4, r2]
    USBD_CtlSendStatus(pdev);
 8005a06:	e720      	b.n	800584a <USBD_StdDevReq+0x86>
  switch (pdev->dev_state)
 8005a08:	23a7      	movs	r3, #167	; 0xa7
 8005a0a:	009b      	lsls	r3, r3, #2
 8005a0c:	5ce3      	ldrb	r3, [r4, r3]
 8005a0e:	3b01      	subs	r3, #1
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d900      	bls.n	8005a16 <USBD_StdDevReq+0x252>
 8005a14:	e77b      	b.n	800590e <USBD_StdDevReq+0x14a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005a16:	886b      	ldrh	r3, [r5, #2]
 8005a18:	2b01      	cmp	r3, #1
 8005a1a:	d000      	beq.n	8005a1e <USBD_StdDevReq+0x25a>
 8005a1c:	e6f6      	b.n	800580c <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 8005a1e:	23a9      	movs	r3, #169	; 0xa9
 8005a20:	2200      	movs	r2, #0
 8005a22:	009b      	lsls	r3, r3, #2
 8005a24:	50e2      	str	r2, [r4, r3]
 8005a26:	e710      	b.n	800584a <USBD_StdDevReq+0x86>
 8005a28:	0000029e 	.word	0x0000029e
 8005a2c:	20000248 	.word	0x20000248

08005a30 <USBD_StdItfReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a30:	2360      	movs	r3, #96	; 0x60
 8005a32:	780a      	ldrb	r2, [r1, #0]
{
 8005a34:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a36:	4013      	ands	r3, r2
{
 8005a38:	0004      	movs	r4, r0
 8005a3a:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a3c:	2b40      	cmp	r3, #64	; 0x40
 8005a3e:	d001      	beq.n	8005a44 <USBD_StdItfReq+0x14>
 8005a40:	0653      	lsls	r3, r2, #25
 8005a42:	d419      	bmi.n	8005a78 <USBD_StdItfReq+0x48>
      switch (pdev->dev_state)
 8005a44:	23a7      	movs	r3, #167	; 0xa7
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	5ce3      	ldrb	r3, [r4, r3]
 8005a4a:	3b01      	subs	r3, #1
 8005a4c:	2b02      	cmp	r3, #2
 8005a4e:	d813      	bhi.n	8005a78 <USBD_StdItfReq+0x48>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005a50:	792b      	ldrb	r3, [r5, #4]
 8005a52:	2b01      	cmp	r3, #1
 8005a54:	d810      	bhi.n	8005a78 <USBD_StdItfReq+0x48>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005a56:	23ad      	movs	r3, #173	; 0xad
 8005a58:	009b      	lsls	r3, r3, #2
 8005a5a:	58e3      	ldr	r3, [r4, r3]
 8005a5c:	0029      	movs	r1, r5
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	0020      	movs	r0, r4
 8005a62:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005a64:	88eb      	ldrh	r3, [r5, #6]
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d104      	bne.n	8005a74 <USBD_StdItfReq+0x44>
 8005a6a:	2800      	cmp	r0, #0
 8005a6c:	d102      	bne.n	8005a74 <USBD_StdItfReq+0x44>
              USBD_CtlSendStatus(pdev);
 8005a6e:	0020      	movs	r0, r4
 8005a70:	f000 f906 	bl	8005c80 <USBD_CtlSendStatus>
}
 8005a74:	2000      	movs	r0, #0
 8005a76:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8005a78:	0020      	movs	r0, r4
 8005a7a:	f7ff fe98 	bl	80057ae <USBD_CtlError.constprop.0>
          break;
 8005a7e:	e7f9      	b.n	8005a74 <USBD_StdItfReq+0x44>

08005a80 <USBD_StdEPReq>:
{
 8005a80:	780a      	ldrb	r2, [r1, #0]
 8005a82:	000b      	movs	r3, r1
 8005a84:	2160      	movs	r1, #96	; 0x60
 8005a86:	400a      	ands	r2, r1
 8005a88:	b570      	push	{r4, r5, r6, lr}
 8005a8a:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005a8c:	0010      	movs	r0, r2
 8005a8e:	1849      	adds	r1, r1, r1
 8005a90:	3820      	subs	r0, #32
 8005a92:	4208      	tst	r0, r1
 8005a94:	d029      	beq.n	8005aea <USBD_StdEPReq+0x6a>
 8005a96:	2a00      	cmp	r2, #0
 8005a98:	d137      	bne.n	8005b0a <USBD_StdEPReq+0x8a>
  ep_addr  = LOBYTE(req->wIndex);
 8005a9a:	8898      	ldrh	r0, [r3, #4]
      switch (req->bRequest)
 8005a9c:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005a9e:	b2c1      	uxtb	r1, r0
      switch (req->bRequest)
 8005aa0:	2a01      	cmp	r2, #1
 8005aa2:	d045      	beq.n	8005b30 <USBD_StdEPReq+0xb0>
 8005aa4:	2a03      	cmp	r2, #3
 8005aa6:	d029      	beq.n	8005afc <USBD_StdEPReq+0x7c>
 8005aa8:	2a00      	cmp	r2, #0
 8005aaa:	d12e      	bne.n	8005b0a <USBD_StdEPReq+0x8a>
          switch (pdev->dev_state)
 8005aac:	23a7      	movs	r3, #167	; 0xa7
 8005aae:	009b      	lsls	r3, r3, #2
 8005ab0:	5ce3      	ldrb	r3, [r4, r3]
 8005ab2:	2b02      	cmp	r3, #2
 8005ab4:	d056      	beq.n	8005b64 <USBD_StdEPReq+0xe4>
 8005ab6:	2b03      	cmp	r3, #3
 8005ab8:	d127      	bne.n	8005b0a <USBD_StdEPReq+0x8a>
              if ((ep_addr & 0x80U) == 0x80U)
 8005aba:	220f      	movs	r2, #15
 8005abc:	2314      	movs	r3, #20
 8005abe:	400a      	ands	r2, r1
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005ac0:	435a      	muls	r2, r3
 8005ac2:	18a2      	adds	r2, r4, r2
              if ((ep_addr & 0x80U) == 0x80U)
 8005ac4:	0600      	lsls	r0, r0, #24
 8005ac6:	d55d      	bpl.n	8005b84 <USBD_StdEPReq+0x104>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005ac8:	6992      	ldr	r2, [r2, #24]
 8005aca:	2a00      	cmp	r2, #0
 8005acc:	d01d      	beq.n	8005b0a <USBD_StdEPReq+0x8a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ace:	257f      	movs	r5, #127	; 0x7f
 8005ad0:	400d      	ands	r5, r1
 8005ad2:	3501      	adds	r5, #1
 8005ad4:	435d      	muls	r5, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005ad6:	237f      	movs	r3, #127	; 0x7f
 8005ad8:	000a      	movs	r2, r1
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ada:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005adc:	401a      	ands	r2, r3
 8005ade:	4219      	tst	r1, r3
 8005ae0:	d15a      	bne.n	8005b98 <USBD_StdEPReq+0x118>
                pep->status = 0x0000U;
 8005ae2:	602a      	str	r2, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005ae4:	2202      	movs	r2, #2
 8005ae6:	0029      	movs	r1, r5
 8005ae8:	e048      	b.n	8005b7c <USBD_StdEPReq+0xfc>
      pdev->pClass->Setup(pdev, req);
 8005aea:	22ad      	movs	r2, #173	; 0xad
 8005aec:	0092      	lsls	r2, r2, #2
 8005aee:	58a2      	ldr	r2, [r4, r2]
 8005af0:	0019      	movs	r1, r3
 8005af2:	0020      	movs	r0, r4
 8005af4:	6892      	ldr	r2, [r2, #8]
 8005af6:	4790      	blx	r2
}
 8005af8:	2000      	movs	r0, #0
 8005afa:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8005afc:	22a7      	movs	r2, #167	; 0xa7
 8005afe:	0092      	lsls	r2, r2, #2
 8005b00:	5ca2      	ldrb	r2, [r4, r2]
 8005b02:	2a02      	cmp	r2, #2
 8005b04:	d024      	beq.n	8005b50 <USBD_StdEPReq+0xd0>
 8005b06:	2a03      	cmp	r2, #3
 8005b08:	d003      	beq.n	8005b12 <USBD_StdEPReq+0x92>
              USBD_CtlError(pdev, req);
 8005b0a:	0020      	movs	r0, r4
 8005b0c:	f7ff fe4f 	bl	80057ae <USBD_CtlError.constprop.0>
              break;
 8005b10:	e7f2      	b.n	8005af8 <USBD_StdEPReq+0x78>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b12:	885a      	ldrh	r2, [r3, #2]
 8005b14:	2a00      	cmp	r2, #0
 8005b16:	d107      	bne.n	8005b28 <USBD_StdEPReq+0xa8>
                if ((ep_addr != 0x00U) &&
 8005b18:	064a      	lsls	r2, r1, #25
 8005b1a:	d005      	beq.n	8005b28 <USBD_StdEPReq+0xa8>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005b1c:	88db      	ldrh	r3, [r3, #6]
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d102      	bne.n	8005b28 <USBD_StdEPReq+0xa8>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005b22:	0020      	movs	r0, r4
 8005b24:	f000 fa96 	bl	8006054 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8005b28:	0020      	movs	r0, r4
 8005b2a:	f000 f8a9 	bl	8005c80 <USBD_CtlSendStatus>
              break;
 8005b2e:	e7e3      	b.n	8005af8 <USBD_StdEPReq+0x78>
          switch (pdev->dev_state)
 8005b30:	22a7      	movs	r2, #167	; 0xa7
 8005b32:	0092      	lsls	r2, r2, #2
 8005b34:	5ca2      	ldrb	r2, [r4, r2]
 8005b36:	2a02      	cmp	r2, #2
 8005b38:	d00a      	beq.n	8005b50 <USBD_StdEPReq+0xd0>
 8005b3a:	2a03      	cmp	r2, #3
 8005b3c:	d1e5      	bne.n	8005b0a <USBD_StdEPReq+0x8a>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005b3e:	885b      	ldrh	r3, [r3, #2]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d1d9      	bne.n	8005af8 <USBD_StdEPReq+0x78>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005b44:	064b      	lsls	r3, r1, #25
 8005b46:	d0ef      	beq.n	8005b28 <USBD_StdEPReq+0xa8>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005b48:	0020      	movs	r0, r4
 8005b4a:	f000 fa93 	bl	8006074 <USBD_LL_ClearStallEP>
 8005b4e:	e7eb      	b.n	8005b28 <USBD_StdEPReq+0xa8>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b50:	064b      	lsls	r3, r1, #25
 8005b52:	d0da      	beq.n	8005b0a <USBD_StdEPReq+0x8a>
                USBD_LL_StallEP(pdev, ep_addr);
 8005b54:	0020      	movs	r0, r4
 8005b56:	f000 fa7d 	bl	8006054 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005b5a:	2180      	movs	r1, #128	; 0x80
 8005b5c:	0020      	movs	r0, r4
 8005b5e:	f000 fa79 	bl	8006054 <USBD_LL_StallEP>
 8005b62:	e7c9      	b.n	8005af8 <USBD_StdEPReq+0x78>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005b64:	064b      	lsls	r3, r1, #25
 8005b66:	d1d0      	bne.n	8005b0a <USBD_StdEPReq+0x8a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b68:	0021      	movs	r1, r4
 8005b6a:	3155      	adds	r1, #85	; 0x55
 8005b6c:	31ff      	adds	r1, #255	; 0xff
 8005b6e:	0603      	lsls	r3, r0, #24
 8005b70:	d501      	bpl.n	8005b76 <USBD_StdEPReq+0xf6>
 8005b72:	3941      	subs	r1, #65	; 0x41
 8005b74:	39ff      	subs	r1, #255	; 0xff
              pep->status = 0x0000U;
 8005b76:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b78:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8005b7a:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005b7c:	0020      	movs	r0, r4
 8005b7e:	f000 f851 	bl	8005c24 <USBD_CtlSendData>
              break;
 8005b82:	e7b9      	b.n	8005af8 <USBD_StdEPReq+0x78>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005b84:	32fc      	adds	r2, #252	; 0xfc
 8005b86:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005b88:	2a00      	cmp	r2, #0
 8005b8a:	d0be      	beq.n	8005b0a <USBD_StdEPReq+0x8a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005b8c:	257f      	movs	r5, #127	; 0x7f
 8005b8e:	400d      	ands	r5, r1
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005b90:	435d      	muls	r5, r3
 8005b92:	3555      	adds	r5, #85	; 0x55
 8005b94:	35ff      	adds	r5, #255	; 0xff
 8005b96:	e79e      	b.n	8005ad6 <USBD_StdEPReq+0x56>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005b98:	0020      	movs	r0, r4
 8005b9a:	f000 fa7b 	bl	8006094 <USBD_LL_IsStallEP>
 8005b9e:	2800      	cmp	r0, #0
 8005ba0:	d002      	beq.n	8005ba8 <USBD_StdEPReq+0x128>
                pep->status = 0x0001U;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	602b      	str	r3, [r5, #0]
 8005ba6:	e79d      	b.n	8005ae4 <USBD_StdEPReq+0x64>
                pep->status = 0x0000U;
 8005ba8:	6028      	str	r0, [r5, #0]
 8005baa:	e79b      	b.n	8005ae4 <USBD_StdEPReq+0x64>

08005bac <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005bac:	780b      	ldrb	r3, [r1, #0]
 8005bae:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005bb0:	784b      	ldrb	r3, [r1, #1]
 8005bb2:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005bb4:	78ca      	ldrb	r2, [r1, #3]
 8005bb6:	788b      	ldrb	r3, [r1, #2]
 8005bb8:	0212      	lsls	r2, r2, #8
 8005bba:	189b      	adds	r3, r3, r2
 8005bbc:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005bbe:	794a      	ldrb	r2, [r1, #5]
 8005bc0:	790b      	ldrb	r3, [r1, #4]
 8005bc2:	0212      	lsls	r2, r2, #8
 8005bc4:	189b      	adds	r3, r3, r2
 8005bc6:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005bc8:	79ca      	ldrb	r2, [r1, #7]
 8005bca:	798b      	ldrb	r3, [r1, #6]
 8005bcc:	0212      	lsls	r2, r2, #8
 8005bce:	189b      	adds	r3, r3, r2
 8005bd0:	80c3      	strh	r3, [r0, #6]
}
 8005bd2:	4770      	bx	lr

08005bd4 <USBD_CtlError>:
{
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005bd8:	2180      	movs	r1, #128	; 0x80
 8005bda:	f000 fa3b 	bl	8006054 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005bde:	2100      	movs	r1, #0
 8005be0:	0020      	movs	r0, r4
 8005be2:	f000 fa37 	bl	8006054 <USBD_LL_StallEP>
}
 8005be6:	bd10      	pop	{r4, pc}

08005be8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005be8:	b570      	push	{r4, r5, r6, lr}
 8005bea:	2500      	movs	r5, #0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8005bec:	1e46      	subs	r6, r0, #1
  if (desc != NULL)
 8005bee:	42a8      	cmp	r0, r5
 8005bf0:	d00f      	beq.n	8005c12 <USBD_GetString+0x2a>
  while (*buf != '\0')
 8005bf2:	002b      	movs	r3, r5
 8005bf4:	3501      	adds	r5, #1
 8005bf6:	5d74      	ldrb	r4, [r6, r5]
 8005bf8:	2c00      	cmp	r4, #0
 8005bfa:	d1fa      	bne.n	8005bf2 <USBD_GetString+0xa>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005bfc:	b2db      	uxtb	r3, r3
 8005bfe:	3301      	adds	r3, #1
 8005c00:	005b      	lsls	r3, r3, #1
 8005c02:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005c04:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005c06:	2303      	movs	r3, #3
 8005c08:	704b      	strb	r3, [r1, #1]
 8005c0a:	3b01      	subs	r3, #1
    while (*desc != '\0')
 8005c0c:	7805      	ldrb	r5, [r0, #0]
 8005c0e:	2d00      	cmp	r5, #0
 8005c10:	d100      	bne.n	8005c14 <USBD_GetString+0x2c>
}
 8005c12:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8005c14:	1c5a      	adds	r2, r3, #1
 8005c16:	54cd      	strb	r5, [r1, r3]
 8005c18:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8005c1a:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8005c1c:	3001      	adds	r0, #1
      unicode[idx++] =  0U;
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	548c      	strb	r4, [r1, r2]
 8005c22:	e7f3      	b.n	8005c0c <USBD_GetString+0x24>

08005c24 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005c24:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005c26:	22a5      	movs	r2, #165	; 0xa5
{
 8005c28:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005c2a:	2402      	movs	r4, #2
 8005c2c:	0092      	lsls	r2, r2, #2
 8005c2e:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c30:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 8005c32:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c34:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 8005c36:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c38:	f000 fa52 	bl	80060e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005c3c:	2000      	movs	r0, #0
 8005c3e:	bd10      	pop	{r4, pc}

08005c40 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005c40:	b510      	push	{r4, lr}
 8005c42:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005c44:	000a      	movs	r2, r1
 8005c46:	2100      	movs	r1, #0
 8005c48:	f000 fa4a 	bl	80060e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005c4c:	2000      	movs	r0, #0
 8005c4e:	bd10      	pop	{r4, pc}

08005c50 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005c50:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005c52:	22a5      	movs	r2, #165	; 0xa5
{
 8005c54:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005c56:	2403      	movs	r4, #3
 8005c58:	0092      	lsls	r2, r2, #2
 8005c5a:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8005c5c:	0002      	movs	r2, r0
 8005c5e:	32fc      	adds	r2, #252	; 0xfc
 8005c60:	6613      	str	r3, [r2, #96]	; 0x60
  pdev->ep_out[0].rem_length   = len;
 8005c62:	6653      	str	r3, [r2, #100]	; 0x64

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c64:	000a      	movs	r2, r1
 8005c66:	2100      	movs	r1, #0
 8005c68:	f000 fa4a 	bl	8006100 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005c6c:	2000      	movs	r0, #0
 8005c6e:	bd10      	pop	{r4, pc}

08005c70 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005c70:	b510      	push	{r4, lr}
 8005c72:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005c74:	000a      	movs	r2, r1
 8005c76:	2100      	movs	r1, #0
 8005c78:	f000 fa42 	bl	8006100 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005c7c:	2000      	movs	r0, #0
 8005c7e:	bd10      	pop	{r4, pc}

08005c80 <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005c80:	23a5      	movs	r3, #165	; 0xa5
 8005c82:	2204      	movs	r2, #4
 8005c84:	009b      	lsls	r3, r3, #2
{
 8005c86:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005c88:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	001a      	movs	r2, r3
 8005c8e:	0019      	movs	r1, r3
 8005c90:	f000 fa26 	bl	80060e0 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005c94:	2000      	movs	r0, #0
 8005c96:	bd10      	pop	{r4, pc}

08005c98 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005c98:	23a5      	movs	r3, #165	; 0xa5
 8005c9a:	2205      	movs	r2, #5
 8005c9c:	009b      	lsls	r3, r3, #2
{
 8005c9e:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ca0:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ca2:	2300      	movs	r3, #0
 8005ca4:	001a      	movs	r2, r3
 8005ca6:	0019      	movs	r1, r3
 8005ca8:	f000 fa2a 	bl	8006100 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005cac:	2000      	movs	r0, #0
 8005cae:	bd10      	pop	{r4, pc}

08005cb0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8005cb0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8005cb2:	4c11      	ldr	r4, [pc, #68]	; (8005cf8 <MX_USB_DEVICE_Init+0x48>)
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	0020      	movs	r0, r4
 8005cb8:	4910      	ldr	r1, [pc, #64]	; (8005cfc <MX_USB_DEVICE_Init+0x4c>)
 8005cba:	f7ff fc09 	bl	80054d0 <USBD_Init>
 8005cbe:	2800      	cmp	r0, #0
 8005cc0:	d001      	beq.n	8005cc6 <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 8005cc2:	f7fb f921 	bl	8000f08 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8005cc6:	0020      	movs	r0, r4
 8005cc8:	490d      	ldr	r1, [pc, #52]	; (8005d00 <MX_USB_DEVICE_Init+0x50>)
 8005cca:	f7ff fc1b 	bl	8005504 <USBD_RegisterClass>
 8005cce:	2800      	cmp	r0, #0
 8005cd0:	d001      	beq.n	8005cd6 <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 8005cd2:	f7fb f919 	bl	8000f08 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8005cd6:	0020      	movs	r0, r4
 8005cd8:	490a      	ldr	r1, [pc, #40]	; (8005d04 <MX_USB_DEVICE_Init+0x54>)
 8005cda:	f7ff fba8 	bl	800542e <USBD_CDC_RegisterInterface>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	d001      	beq.n	8005ce6 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
 8005ce2:	f7fb f911 	bl	8000f08 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8005ce6:	0020      	movs	r0, r4
 8005ce8:	f7ff fc15 	bl	8005516 <USBD_Start>
 8005cec:	2800      	cmp	r0, #0
 8005cee:	d001      	beq.n	8005cf4 <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 8005cf0:	f7fb f90a 	bl	8000f08 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8005cf4:	bd10      	pop	{r4, pc}
 8005cf6:	46c0      	nop			; (mov r8, r8)
 8005cf8:	20000910 	.word	0x20000910
 8005cfc:	20000174 	.word	0x20000174
 8005d00:	20000054 	.word	0x20000054
 8005d04:	20000164 	.word	0x20000164

08005d08 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8005d08:	2000      	movs	r0, #0
 8005d0a:	4770      	bx	lr

08005d0c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8005d0c:	2000      	movs	r0, #0
 8005d0e:	4770      	bx	lr

08005d10 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8005d10:	b570      	push	{r4, r5, r6, lr}
 8005d12:	0004      	movs	r4, r0
  /* USER CODE BEGIN 6 */
	Test_RxPacket(Buf,*Len);
 8005d14:	6809      	ldr	r1, [r1, #0]
 8005d16:	f7fa fd77 	bl	8000808 <Test_RxPacket>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 8005d1a:	4d05      	ldr	r5, [pc, #20]	; (8005d30 <CDC_Receive_FS+0x20>)
 8005d1c:	0021      	movs	r1, r4
 8005d1e:	0028      	movs	r0, r5
 8005d20:	f7ff fb99 	bl	8005456 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8005d24:	0028      	movs	r0, r5
 8005d26:	f7ff fbb9 	bl	800549c <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8005d2a:	2000      	movs	r0, #0
 8005d2c:	bd70      	pop	{r4, r5, r6, pc}
 8005d2e:	46c0      	nop			; (mov r8, r8)
 8005d30:	20000910 	.word	0x20000910

08005d34 <CDC_Init_FS>:
{
 8005d34:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8005d36:	4c06      	ldr	r4, [pc, #24]	; (8005d50 <CDC_Init_FS+0x1c>)
 8005d38:	2200      	movs	r2, #0
 8005d3a:	0020      	movs	r0, r4
 8005d3c:	4905      	ldr	r1, [pc, #20]	; (8005d54 <CDC_Init_FS+0x20>)
 8005d3e:	f7ff fb7f 	bl	8005440 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8005d42:	0020      	movs	r0, r4
 8005d44:	4904      	ldr	r1, [pc, #16]	; (8005d58 <CDC_Init_FS+0x24>)
 8005d46:	f7ff fb86 	bl	8005456 <USBD_CDC_SetRxBuffer>
}
 8005d4a:	2000      	movs	r0, #0
 8005d4c:	bd10      	pop	{r4, pc}
 8005d4e:	46c0      	nop			; (mov r8, r8)
 8005d50:	20000910 	.word	0x20000910
 8005d54:	20000cd4 	.word	0x20000cd4
 8005d58:	20000bd4 	.word	0x20000bd4

08005d5c <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8005d5c:	000a      	movs	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d5e:	21ae      	movs	r1, #174	; 0xae
{
 8005d60:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d62:	4c08      	ldr	r4, [pc, #32]	; (8005d84 <CDC_Transmit_FS+0x28>)
 8005d64:	0089      	lsls	r1, r1, #2
{
 8005d66:	0003      	movs	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8005d68:	5860      	ldr	r0, [r4, r1]
  if (hcdc->TxState != 0){
 8005d6a:	39a4      	subs	r1, #164	; 0xa4
 8005d6c:	5841      	ldr	r1, [r0, r1]
    return USBD_BUSY;
 8005d6e:	2001      	movs	r0, #1
  if (hcdc->TxState != 0){
 8005d70:	2900      	cmp	r1, #0
 8005d72:	d106      	bne.n	8005d82 <CDC_Transmit_FS+0x26>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8005d74:	0019      	movs	r1, r3
 8005d76:	0020      	movs	r0, r4
 8005d78:	f7ff fb62 	bl	8005440 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8005d7c:	0020      	movs	r0, r4
 8005d7e:	f7ff fb71 	bl	8005464 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 8005d82:	bd10      	pop	{r4, pc}
 8005d84:	20000910 	.word	0x20000910

08005d88 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d88:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 8005d8a:	4801      	ldr	r0, [pc, #4]	; (8005d90 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 8005d8c:	800b      	strh	r3, [r1, #0]
}
 8005d8e:	4770      	bx	lr
 8005d90:	20000190 	.word	0x20000190

08005d94 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8005d94:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 8005d96:	4801      	ldr	r0, [pc, #4]	; (8005d9c <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 8005d98:	800b      	strh	r3, [r1, #0]
}
 8005d9a:	4770      	bx	lr
 8005d9c:	200001a4 	.word	0x200001a4

08005da0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8005da0:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8005da2:	2500      	movs	r5, #0
 8005da4:	0052      	lsls	r2, r2, #1
 8005da6:	188a      	adds	r2, r1, r2
    if (((value >> 28)) < 0xA)
 8005da8:	0f04      	lsrs	r4, r0, #28
 8005daa:	b2e3      	uxtb	r3, r4
 8005dac:	2c09      	cmp	r4, #9
 8005dae:	d807      	bhi.n	8005dc0 <IntToUnicode+0x20>
      pbuf[2 * idx] = (value >> 28) + '0';
 8005db0:	3330      	adds	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005db2:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8005db4:	704d      	strb	r5, [r1, #1]
 8005db6:	3102      	adds	r1, #2
    value = value << 4;
 8005db8:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 8005dba:	428a      	cmp	r2, r1
 8005dbc:	d1f4      	bne.n	8005da8 <IntToUnicode+0x8>
  }
}
 8005dbe:	bd30      	pop	{r4, r5, pc}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8005dc0:	3337      	adds	r3, #55	; 0x37
 8005dc2:	e7f6      	b.n	8005db2 <IntToUnicode+0x12>

08005dc4 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8005dc4:	231a      	movs	r3, #26
{
 8005dc6:	b570      	push	{r4, r5, r6, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8005dc8:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8005dca:	4b0b      	ldr	r3, [pc, #44]	; (8005df8 <USBD_FS_SerialStrDescriptor+0x34>)
 8005dcc:	4c0b      	ldr	r4, [pc, #44]	; (8005dfc <USBD_FS_SerialStrDescriptor+0x38>)
 8005dce:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8005dd0:	4b0b      	ldr	r3, [pc, #44]	; (8005e00 <USBD_FS_SerialStrDescriptor+0x3c>)
  deviceserial0 += deviceserial2;
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8005dd6:	2800      	cmp	r0, #0
 8005dd8:	d00b      	beq.n	8005df2 <USBD_FS_SerialStrDescriptor+0x2e>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005dda:	4b0a      	ldr	r3, [pc, #40]	; (8005e04 <USBD_FS_SerialStrDescriptor+0x40>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005ddc:	2208      	movs	r2, #8
 8005dde:	1ca1      	adds	r1, r4, #2
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8005de0:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8005de2:	f7ff ffdd 	bl	8005da0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8005de6:	0021      	movs	r1, r4
 8005de8:	2204      	movs	r2, #4
 8005dea:	0028      	movs	r0, r5
 8005dec:	3112      	adds	r1, #18
 8005dee:	f7ff ffd7 	bl	8005da0 <IntToUnicode>
}
 8005df2:	0020      	movs	r0, r4
 8005df4:	bd70      	pop	{r4, r5, r6, pc}
 8005df6:	46c0      	nop			; (mov r8, r8)
 8005df8:	1ffff7ac 	.word	0x1ffff7ac
 8005dfc:	200001a8 	.word	0x200001a8
 8005e00:	1ffff7b4 	.word	0x1ffff7b4
 8005e04:	1ffff7b0 	.word	0x1ffff7b0

08005e08 <USBD_FS_ManufacturerStrDescriptor>:
{
 8005e08:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e0a:	4c04      	ldr	r4, [pc, #16]	; (8005e1c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 8005e0c:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8005e0e:	4804      	ldr	r0, [pc, #16]	; (8005e20 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8005e10:	0021      	movs	r1, r4
 8005e12:	f7ff fee9 	bl	8005be8 <USBD_GetString>
}
 8005e16:	0020      	movs	r0, r4
 8005e18:	bd10      	pop	{r4, pc}
 8005e1a:	46c0      	nop			; (mov r8, r8)
 8005e1c:	20000dd4 	.word	0x20000dd4
 8005e20:	08006f08 	.word	0x08006f08

08005e24 <USBD_FS_ProductStrDescriptor>:
{
 8005e24:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e26:	4c04      	ldr	r4, [pc, #16]	; (8005e38 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8005e28:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8005e2a:	4804      	ldr	r0, [pc, #16]	; (8005e3c <USBD_FS_ProductStrDescriptor+0x18>)
 8005e2c:	0021      	movs	r1, r4
 8005e2e:	f7ff fedb 	bl	8005be8 <USBD_GetString>
}
 8005e32:	0020      	movs	r0, r4
 8005e34:	bd10      	pop	{r4, pc}
 8005e36:	46c0      	nop			; (mov r8, r8)
 8005e38:	20000dd4 	.word	0x20000dd4
 8005e3c:	08006f1b 	.word	0x08006f1b

08005e40 <USBD_FS_ConfigStrDescriptor>:
{
 8005e40:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e42:	4c04      	ldr	r4, [pc, #16]	; (8005e54 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 8005e44:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8005e46:	4804      	ldr	r0, [pc, #16]	; (8005e58 <USBD_FS_ConfigStrDescriptor+0x18>)
 8005e48:	0021      	movs	r1, r4
 8005e4a:	f7ff fecd 	bl	8005be8 <USBD_GetString>
}
 8005e4e:	0020      	movs	r0, r4
 8005e50:	bd10      	pop	{r4, pc}
 8005e52:	46c0      	nop			; (mov r8, r8)
 8005e54:	20000dd4 	.word	0x20000dd4
 8005e58:	08006f31 	.word	0x08006f31

08005e5c <USBD_FS_InterfaceStrDescriptor>:
{
 8005e5c:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e5e:	4c04      	ldr	r4, [pc, #16]	; (8005e70 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 8005e60:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8005e62:	4804      	ldr	r0, [pc, #16]	; (8005e74 <USBD_FS_InterfaceStrDescriptor+0x18>)
 8005e64:	0021      	movs	r1, r4
 8005e66:	f7ff febf 	bl	8005be8 <USBD_GetString>
}
 8005e6a:	0020      	movs	r0, r4
 8005e6c:	bd10      	pop	{r4, pc}
 8005e6e:	46c0      	nop			; (mov r8, r8)
 8005e70:	20000dd4 	.word	0x20000dd4
 8005e74:	08006f3c 	.word	0x08006f3c

08005e78 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8005e78:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 8005e7a:	4b0b      	ldr	r3, [pc, #44]	; (8005ea8 <HAL_PCD_MspInit+0x30>)
 8005e7c:	6802      	ldr	r2, [r0, #0]
 8005e7e:	429a      	cmp	r2, r3
 8005e80:	d111      	bne.n	8005ea6 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8005e82:	2080      	movs	r0, #128	; 0x80
 8005e84:	4a09      	ldr	r2, [pc, #36]	; (8005eac <HAL_PCD_MspInit+0x34>)
 8005e86:	0400      	lsls	r0, r0, #16
 8005e88:	69d1      	ldr	r1, [r2, #28]
 8005e8a:	4301      	orrs	r1, r0
 8005e8c:	61d1      	str	r1, [r2, #28]
 8005e8e:	69d3      	ldr	r3, [r2, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8005e90:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8005e92:	4003      	ands	r3, r0
 8005e94:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8005e96:	201f      	movs	r0, #31
 8005e98:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 8005e9a:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8005e9c:	f7fc f81c 	bl	8001ed8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8005ea0:	201f      	movs	r0, #31
 8005ea2:	f7fc f843 	bl	8001f2c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8005ea6:	bd07      	pop	{r0, r1, r2, pc}
 8005ea8:	40005c00 	.word	0x40005c00
 8005eac:	40021000 	.word	0x40021000

08005eb0 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005eb0:	23ac      	movs	r3, #172	; 0xac
{
 8005eb2:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	18c1      	adds	r1, r0, r3
 8005eb8:	3340      	adds	r3, #64	; 0x40
 8005eba:	58c0      	ldr	r0, [r0, r3]
 8005ebc:	f7ff fb46 	bl	800554c <USBD_LL_SetupStage>
}
 8005ec0:	bd10      	pop	{r4, pc}

08005ec2 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005ec2:	2328      	movs	r3, #40	; 0x28
 8005ec4:	434b      	muls	r3, r1
 8005ec6:	18c3      	adds	r3, r0, r3
 8005ec8:	337d      	adds	r3, #125	; 0x7d
 8005eca:	33ff      	adds	r3, #255	; 0xff
 8005ecc:	681a      	ldr	r2, [r3, #0]
 8005ece:	23bc      	movs	r3, #188	; 0xbc
{
 8005ed0:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8005ed2:	009b      	lsls	r3, r3, #2
 8005ed4:	58c0      	ldr	r0, [r0, r3]
 8005ed6:	f7ff fb6b 	bl	80055b0 <USBD_LL_DataOutStage>
}
 8005eda:	bd10      	pop	{r4, pc}

08005edc <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005edc:	2328      	movs	r3, #40	; 0x28
 8005ede:	434b      	muls	r3, r1
 8005ee0:	18c3      	adds	r3, r0, r3
 8005ee2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005ee4:	23bc      	movs	r3, #188	; 0xbc
{
 8005ee6:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8005ee8:	009b      	lsls	r3, r3, #2
 8005eea:	58c0      	ldr	r0, [r0, r3]
 8005eec:	f7ff fba6 	bl	800563c <USBD_LL_DataInStage>
}
 8005ef0:	bd10      	pop	{r4, pc}

08005ef2 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005ef2:	23bc      	movs	r3, #188	; 0xbc
{
 8005ef4:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8005ef6:	009b      	lsls	r3, r3, #2
 8005ef8:	58c0      	ldr	r0, [r0, r3]
 8005efa:	f7ff fc49 	bl	8005790 <USBD_LL_SOF>
}
 8005efe:	bd10      	pop	{r4, pc}

08005f00 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f00:	6883      	ldr	r3, [r0, #8]
{
 8005f02:	b570      	push	{r4, r5, r6, lr}
 8005f04:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8005f06:	2b02      	cmp	r3, #2
 8005f08:	d001      	beq.n	8005f0e <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 8005f0a:	f7fa fffd 	bl	8000f08 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8005f0e:	25bc      	movs	r5, #188	; 0xbc
 8005f10:	00ad      	lsls	r5, r5, #2
 8005f12:	2101      	movs	r1, #1
 8005f14:	5960      	ldr	r0, [r4, r5]
 8005f16:	f7ff fc20 	bl	800575a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8005f1a:	5960      	ldr	r0, [r4, r5]
 8005f1c:	f7ff fbf3 	bl	8005706 <USBD_LL_Reset>
}
 8005f20:	bd70      	pop	{r4, r5, r6, pc}
	...

08005f24 <HAL_PCD_SuspendCallback>:
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f24:	23bc      	movs	r3, #188	; 0xbc
{
 8005f26:	b510      	push	{r4, lr}
 8005f28:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	58c0      	ldr	r0, [r0, r3]
 8005f2e:	f7ff fc17 	bl	8005760 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8005f32:	69a3      	ldr	r3, [r4, #24]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d004      	beq.n	8005f42 <HAL_PCD_SuspendCallback+0x1e>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f38:	2306      	movs	r3, #6
 8005f3a:	4a02      	ldr	r2, [pc, #8]	; (8005f44 <HAL_PCD_SuspendCallback+0x20>)
 8005f3c:	6911      	ldr	r1, [r2, #16]
 8005f3e:	430b      	orrs	r3, r1
 8005f40:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8005f42:	bd10      	pop	{r4, pc}
 8005f44:	e000ed00 	.word	0xe000ed00

08005f48 <HAL_PCD_ResumeCallback>:
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 8005f48:	6983      	ldr	r3, [r0, #24]
{
 8005f4a:	b510      	push	{r4, lr}
 8005f4c:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d006      	beq.n	8005f60 <HAL_PCD_ResumeCallback+0x18>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8005f52:	2106      	movs	r1, #6
 8005f54:	4a05      	ldr	r2, [pc, #20]	; (8005f6c <HAL_PCD_ResumeCallback+0x24>)
 8005f56:	6913      	ldr	r3, [r2, #16]
 8005f58:	438b      	bics	r3, r1
 8005f5a:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 8005f5c:	f7fa fe06 	bl	8000b6c <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8005f60:	23bc      	movs	r3, #188	; 0xbc
 8005f62:	009b      	lsls	r3, r3, #2
 8005f64:	58e0      	ldr	r0, [r4, r3]
 8005f66:	f7ff fc07 	bl	8005778 <USBD_LL_Resume>
}
 8005f6a:	bd10      	pop	{r4, pc}
 8005f6c:	e000ed00 	.word	0xe000ed00

08005f70 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 8005f70:	23bc      	movs	r3, #188	; 0xbc
{
 8005f72:	b570      	push	{r4, r5, r6, lr}
 8005f74:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 8005f76:	481c      	ldr	r0, [pc, #112]	; (8005fe8 <USBD_LL_Init+0x78>)
 8005f78:	009b      	lsls	r3, r3, #2
 8005f7a:	50c4      	str	r4, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 8005f7c:	4b1b      	ldr	r3, [pc, #108]	; (8005fec <USBD_LL_Init+0x7c>)
  pdev->pData = &hpcd_USB_FS;
 8005f7e:	25b0      	movs	r5, #176	; 0xb0
  hpcd_USB_FS.Instance = USB;
 8005f80:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8005f82:	2308      	movs	r3, #8
 8005f84:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8005f86:	3b06      	subs	r3, #6
 8005f88:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8005f8a:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005f8c:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 8005f8e:	00ad      	lsls	r5, r5, #2
 8005f90:	5160      	str	r0, [r4, r5]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8005f92:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8005f94:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8005f96:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8005f98:	f7fc fae4 	bl	8002564 <HAL_PCD_Init>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d001      	beq.n	8005fa4 <USBD_LL_Init+0x34>
    Error_Handler( );
 8005fa0:	f7fa ffb2 	bl	8000f08 <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	5960      	ldr	r0, [r4, r5]
 8005fa8:	0011      	movs	r1, r2
 8005faa:	2318      	movs	r3, #24
 8005fac:	f7fd f97b 	bl	80032a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8005fb0:	5960      	ldr	r0, [r4, r5]
 8005fb2:	2358      	movs	r3, #88	; 0x58
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	2180      	movs	r1, #128	; 0x80
 8005fb8:	f7fd f975 	bl	80032a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 8005fbc:	5960      	ldr	r0, [r4, r5]
 8005fbe:	23c0      	movs	r3, #192	; 0xc0
 8005fc0:	2200      	movs	r2, #0
 8005fc2:	2181      	movs	r1, #129	; 0x81
 8005fc4:	f7fd f96f 	bl	80032a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8005fc8:	2388      	movs	r3, #136	; 0x88
 8005fca:	5960      	ldr	r0, [r4, r5]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2101      	movs	r1, #1
 8005fd0:	005b      	lsls	r3, r3, #1
 8005fd2:	f7fd f968 	bl	80032a6 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8005fd6:	2380      	movs	r3, #128	; 0x80
 8005fd8:	5960      	ldr	r0, [r4, r5]
 8005fda:	2200      	movs	r2, #0
 8005fdc:	2182      	movs	r1, #130	; 0x82
 8005fde:	005b      	lsls	r3, r3, #1
 8005fe0:	f7fd f961 	bl	80032a6 <HAL_PCDEx_PMAConfig>
}
 8005fe4:	2000      	movs	r0, #0
 8005fe6:	bd70      	pop	{r4, r5, r6, pc}
 8005fe8:	20000fd4 	.word	0x20000fd4
 8005fec:	40005c00 	.word	0x40005c00

08005ff0 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8005ff0:	23b0      	movs	r3, #176	; 0xb0
 8005ff2:	009b      	lsls	r3, r3, #2
 8005ff4:	58c0      	ldr	r0, [r0, r3]
{
 8005ff6:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8005ff8:	f7fc fb20 	bl	800263c <HAL_PCD_Start>
 8005ffc:	0003      	movs	r3, r0
 8005ffe:	2002      	movs	r0, #2
 8006000:	2b03      	cmp	r3, #3
 8006002:	d801      	bhi.n	8006008 <USBD_LL_Start+0x18>
 8006004:	4a01      	ldr	r2, [pc, #4]	; (800600c <USBD_LL_Start+0x1c>)
 8006006:	5cd0      	ldrb	r0, [r2, r3]
}
 8006008:	bd10      	pop	{r4, pc}
 800600a:	46c0      	nop			; (mov r8, r8)
 800600c:	08006f4a 	.word	0x08006f4a

08006010 <USBD_LL_OpenEP>:
{
 8006010:	b510      	push	{r4, lr}
 8006012:	0014      	movs	r4, r2
 8006014:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006016:	0023      	movs	r3, r4
 8006018:	24b0      	movs	r4, #176	; 0xb0
 800601a:	00a4      	lsls	r4, r4, #2
 800601c:	5900      	ldr	r0, [r0, r4]
 800601e:	f7fd f849 	bl	80030b4 <HAL_PCD_EP_Open>
 8006022:	0003      	movs	r3, r0
 8006024:	2002      	movs	r0, #2
 8006026:	2b03      	cmp	r3, #3
 8006028:	d801      	bhi.n	800602e <USBD_LL_OpenEP+0x1e>
 800602a:	4a01      	ldr	r2, [pc, #4]	; (8006030 <USBD_LL_OpenEP+0x20>)
 800602c:	5cd0      	ldrb	r0, [r2, r3]
}
 800602e:	bd10      	pop	{r4, pc}
 8006030:	08006f4a 	.word	0x08006f4a

08006034 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006034:	23b0      	movs	r3, #176	; 0xb0
 8006036:	009b      	lsls	r3, r3, #2
 8006038:	58c0      	ldr	r0, [r0, r3]
{
 800603a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800603c:	f7fd f86b 	bl	8003116 <HAL_PCD_EP_Close>
 8006040:	0003      	movs	r3, r0
 8006042:	2002      	movs	r0, #2
 8006044:	2b03      	cmp	r3, #3
 8006046:	d801      	bhi.n	800604c <USBD_LL_CloseEP+0x18>
 8006048:	4a01      	ldr	r2, [pc, #4]	; (8006050 <USBD_LL_CloseEP+0x1c>)
 800604a:	5cd0      	ldrb	r0, [r2, r3]
}
 800604c:	bd10      	pop	{r4, pc}
 800604e:	46c0      	nop			; (mov r8, r8)
 8006050:	08006f4a 	.word	0x08006f4a

08006054 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006054:	23b0      	movs	r3, #176	; 0xb0
 8006056:	009b      	lsls	r3, r3, #2
 8006058:	58c0      	ldr	r0, [r0, r3]
{
 800605a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800605c:	f7fd f8c9 	bl	80031f2 <HAL_PCD_EP_SetStall>
 8006060:	0003      	movs	r3, r0
 8006062:	2002      	movs	r0, #2
 8006064:	2b03      	cmp	r3, #3
 8006066:	d801      	bhi.n	800606c <USBD_LL_StallEP+0x18>
 8006068:	4a01      	ldr	r2, [pc, #4]	; (8006070 <USBD_LL_StallEP+0x1c>)
 800606a:	5cd0      	ldrb	r0, [r2, r3]
}
 800606c:	bd10      	pop	{r4, pc}
 800606e:	46c0      	nop			; (mov r8, r8)
 8006070:	08006f4a 	.word	0x08006f4a

08006074 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006074:	23b0      	movs	r3, #176	; 0xb0
 8006076:	009b      	lsls	r3, r3, #2
 8006078:	58c0      	ldr	r0, [r0, r3]
{
 800607a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800607c:	f7fd f8e4 	bl	8003248 <HAL_PCD_EP_ClrStall>
 8006080:	0003      	movs	r3, r0
 8006082:	2002      	movs	r0, #2
 8006084:	2b03      	cmp	r3, #3
 8006086:	d801      	bhi.n	800608c <USBD_LL_ClearStallEP+0x18>
 8006088:	4a01      	ldr	r2, [pc, #4]	; (8006090 <USBD_LL_ClearStallEP+0x1c>)
 800608a:	5cd0      	ldrb	r0, [r2, r3]
}
 800608c:	bd10      	pop	{r4, pc}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	08006f4a 	.word	0x08006f4a

08006094 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006094:	23b0      	movs	r3, #176	; 0xb0
  if((ep_addr & 0x80) == 0x80)
 8006096:	b24a      	sxtb	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006098:	009b      	lsls	r3, r3, #2
 800609a:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 800609c:	2a00      	cmp	r2, #0
 800609e:	da07      	bge.n	80060b0 <USBD_LL_IsStallEP+0x1c>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80060a0:	227f      	movs	r2, #127	; 0x7f
 80060a2:	4011      	ands	r1, r2
 80060a4:	3101      	adds	r1, #1
 80060a6:	3a57      	subs	r2, #87	; 0x57
 80060a8:	4351      	muls	r1, r2
 80060aa:	185b      	adds	r3, r3, r1
 80060ac:	7898      	ldrb	r0, [r3, #2]
}
 80060ae:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80060b0:	2228      	movs	r2, #40	; 0x28
 80060b2:	4351      	muls	r1, r2
 80060b4:	185b      	adds	r3, r3, r1
 80060b6:	336b      	adds	r3, #107	; 0x6b
 80060b8:	33ff      	adds	r3, #255	; 0xff
 80060ba:	7818      	ldrb	r0, [r3, #0]
 80060bc:	e7f7      	b.n	80060ae <USBD_LL_IsStallEP+0x1a>
	...

080060c0 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80060c0:	23b0      	movs	r3, #176	; 0xb0
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	58c0      	ldr	r0, [r0, r3]
{
 80060c6:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80060c8:	f7fc facb 	bl	8002662 <HAL_PCD_SetAddress>
 80060cc:	0003      	movs	r3, r0
 80060ce:	2002      	movs	r0, #2
 80060d0:	2b03      	cmp	r3, #3
 80060d2:	d801      	bhi.n	80060d8 <USBD_LL_SetUSBAddress+0x18>
 80060d4:	4a01      	ldr	r2, [pc, #4]	; (80060dc <USBD_LL_SetUSBAddress+0x1c>)
 80060d6:	5cd0      	ldrb	r0, [r2, r3]
}
 80060d8:	bd10      	pop	{r4, pc}
 80060da:	46c0      	nop			; (mov r8, r8)
 80060dc:	08006f4a 	.word	0x08006f4a

080060e0 <USBD_LL_Transmit>:
{
 80060e0:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80060e2:	24b0      	movs	r4, #176	; 0xb0
 80060e4:	00a4      	lsls	r4, r4, #2
 80060e6:	5900      	ldr	r0, [r0, r4]
 80060e8:	f7fd f866 	bl	80031b8 <HAL_PCD_EP_Transmit>
 80060ec:	0003      	movs	r3, r0
 80060ee:	2002      	movs	r0, #2
 80060f0:	2b03      	cmp	r3, #3
 80060f2:	d801      	bhi.n	80060f8 <USBD_LL_Transmit+0x18>
 80060f4:	4a01      	ldr	r2, [pc, #4]	; (80060fc <USBD_LL_Transmit+0x1c>)
 80060f6:	5cd0      	ldrb	r0, [r2, r3]
}
 80060f8:	bd10      	pop	{r4, pc}
 80060fa:	46c0      	nop			; (mov r8, r8)
 80060fc:	08006f4a 	.word	0x08006f4a

08006100 <USBD_LL_PrepareReceive>:
{
 8006100:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006102:	24b0      	movs	r4, #176	; 0xb0
 8006104:	00a4      	lsls	r4, r4, #2
 8006106:	5900      	ldr	r0, [r0, r4]
 8006108:	f7fd f82c 	bl	8003164 <HAL_PCD_EP_Receive>
 800610c:	0003      	movs	r3, r0
 800610e:	2002      	movs	r0, #2
 8006110:	2b03      	cmp	r3, #3
 8006112:	d801      	bhi.n	8006118 <USBD_LL_PrepareReceive+0x18>
 8006114:	4a01      	ldr	r2, [pc, #4]	; (800611c <USBD_LL_PrepareReceive+0x1c>)
 8006116:	5cd0      	ldrb	r0, [r2, r3]
}
 8006118:	bd10      	pop	{r4, pc}
 800611a:	46c0      	nop			; (mov r8, r8)
 800611c:	08006f4a 	.word	0x08006f4a

08006120 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006120:	23b0      	movs	r3, #176	; 0xb0
{
 8006122:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	58c0      	ldr	r0, [r0, r3]
 8006128:	f7fd f83d 	bl	80031a6 <HAL_PCD_EP_GetRxCount>
}
 800612c:	bd10      	pop	{r4, pc}
	...

08006130 <USBD_static_malloc>:
}
 8006130:	4800      	ldr	r0, [pc, #0]	; (8006134 <USBD_static_malloc+0x4>)
 8006132:	4770      	bx	lr
 8006134:	2000024c 	.word	0x2000024c

08006138 <USBD_static_free>:
}
 8006138:	4770      	bx	lr

0800613a <atoi>:
 800613a:	b510      	push	{r4, lr}
 800613c:	220a      	movs	r2, #10
 800613e:	2100      	movs	r1, #0
 8006140:	f000 f8f4 	bl	800632c <strtol>
 8006144:	bd10      	pop	{r4, pc}
	...

08006148 <__errno>:
 8006148:	4b01      	ldr	r3, [pc, #4]	; (8006150 <__errno+0x8>)
 800614a:	6818      	ldr	r0, [r3, #0]
 800614c:	4770      	bx	lr
 800614e:	46c0      	nop			; (mov r8, r8)
 8006150:	200001c4 	.word	0x200001c4

08006154 <__libc_init_array>:
 8006154:	b570      	push	{r4, r5, r6, lr}
 8006156:	2600      	movs	r6, #0
 8006158:	4d0c      	ldr	r5, [pc, #48]	; (800618c <__libc_init_array+0x38>)
 800615a:	4c0d      	ldr	r4, [pc, #52]	; (8006190 <__libc_init_array+0x3c>)
 800615c:	1b64      	subs	r4, r4, r5
 800615e:	10a4      	asrs	r4, r4, #2
 8006160:	42a6      	cmp	r6, r4
 8006162:	d109      	bne.n	8006178 <__libc_init_array+0x24>
 8006164:	2600      	movs	r6, #0
 8006166:	f000 fce9 	bl	8006b3c <_init>
 800616a:	4d0a      	ldr	r5, [pc, #40]	; (8006194 <__libc_init_array+0x40>)
 800616c:	4c0a      	ldr	r4, [pc, #40]	; (8006198 <__libc_init_array+0x44>)
 800616e:	1b64      	subs	r4, r4, r5
 8006170:	10a4      	asrs	r4, r4, #2
 8006172:	42a6      	cmp	r6, r4
 8006174:	d105      	bne.n	8006182 <__libc_init_array+0x2e>
 8006176:	bd70      	pop	{r4, r5, r6, pc}
 8006178:	00b3      	lsls	r3, r6, #2
 800617a:	58eb      	ldr	r3, [r5, r3]
 800617c:	4798      	blx	r3
 800617e:	3601      	adds	r6, #1
 8006180:	e7ee      	b.n	8006160 <__libc_init_array+0xc>
 8006182:	00b3      	lsls	r3, r6, #2
 8006184:	58eb      	ldr	r3, [r5, r3]
 8006186:	4798      	blx	r3
 8006188:	3601      	adds	r6, #1
 800618a:	e7f2      	b.n	8006172 <__libc_init_array+0x1e>
 800618c:	08007084 	.word	0x08007084
 8006190:	08007084 	.word	0x08007084
 8006194:	08007084 	.word	0x08007084
 8006198:	08007088 	.word	0x08007088

0800619c <memcpy>:
 800619c:	2300      	movs	r3, #0
 800619e:	b510      	push	{r4, lr}
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d100      	bne.n	80061a6 <memcpy+0xa>
 80061a4:	bd10      	pop	{r4, pc}
 80061a6:	5ccc      	ldrb	r4, [r1, r3]
 80061a8:	54c4      	strb	r4, [r0, r3]
 80061aa:	3301      	adds	r3, #1
 80061ac:	e7f8      	b.n	80061a0 <memcpy+0x4>

080061ae <memset>:
 80061ae:	0003      	movs	r3, r0
 80061b0:	1882      	adds	r2, r0, r2
 80061b2:	4293      	cmp	r3, r2
 80061b4:	d100      	bne.n	80061b8 <memset+0xa>
 80061b6:	4770      	bx	lr
 80061b8:	7019      	strb	r1, [r3, #0]
 80061ba:	3301      	adds	r3, #1
 80061bc:	e7f9      	b.n	80061b2 <memset+0x4>
	...

080061c0 <siprintf>:
 80061c0:	b40e      	push	{r1, r2, r3}
 80061c2:	b500      	push	{lr}
 80061c4:	490b      	ldr	r1, [pc, #44]	; (80061f4 <siprintf+0x34>)
 80061c6:	b09c      	sub	sp, #112	; 0x70
 80061c8:	ab1d      	add	r3, sp, #116	; 0x74
 80061ca:	9002      	str	r0, [sp, #8]
 80061cc:	9006      	str	r0, [sp, #24]
 80061ce:	9107      	str	r1, [sp, #28]
 80061d0:	9104      	str	r1, [sp, #16]
 80061d2:	4809      	ldr	r0, [pc, #36]	; (80061f8 <siprintf+0x38>)
 80061d4:	4909      	ldr	r1, [pc, #36]	; (80061fc <siprintf+0x3c>)
 80061d6:	cb04      	ldmia	r3!, {r2}
 80061d8:	9105      	str	r1, [sp, #20]
 80061da:	6800      	ldr	r0, [r0, #0]
 80061dc:	a902      	add	r1, sp, #8
 80061de:	9301      	str	r3, [sp, #4]
 80061e0:	f000 f912 	bl	8006408 <_svfiprintf_r>
 80061e4:	2300      	movs	r3, #0
 80061e6:	9a02      	ldr	r2, [sp, #8]
 80061e8:	7013      	strb	r3, [r2, #0]
 80061ea:	b01c      	add	sp, #112	; 0x70
 80061ec:	bc08      	pop	{r3}
 80061ee:	b003      	add	sp, #12
 80061f0:	4718      	bx	r3
 80061f2:	46c0      	nop			; (mov r8, r8)
 80061f4:	7fffffff 	.word	0x7fffffff
 80061f8:	200001c4 	.word	0x200001c4
 80061fc:	ffff0208 	.word	0xffff0208

08006200 <strcpy>:
 8006200:	0003      	movs	r3, r0
 8006202:	780a      	ldrb	r2, [r1, #0]
 8006204:	3101      	adds	r1, #1
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	3301      	adds	r3, #1
 800620a:	2a00      	cmp	r2, #0
 800620c:	d1f9      	bne.n	8006202 <strcpy+0x2>
 800620e:	4770      	bx	lr

08006210 <_strtol_l.isra.0>:
 8006210:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006212:	b087      	sub	sp, #28
 8006214:	001e      	movs	r6, r3
 8006216:	9005      	str	r0, [sp, #20]
 8006218:	9101      	str	r1, [sp, #4]
 800621a:	9202      	str	r2, [sp, #8]
 800621c:	2b01      	cmp	r3, #1
 800621e:	d045      	beq.n	80062ac <_strtol_l.isra.0+0x9c>
 8006220:	0008      	movs	r0, r1
 8006222:	2b24      	cmp	r3, #36	; 0x24
 8006224:	d842      	bhi.n	80062ac <_strtol_l.isra.0+0x9c>
 8006226:	4b3f      	ldr	r3, [pc, #252]	; (8006324 <_strtol_l.isra.0+0x114>)
 8006228:	2208      	movs	r2, #8
 800622a:	469c      	mov	ip, r3
 800622c:	0003      	movs	r3, r0
 800622e:	4661      	mov	r1, ip
 8006230:	781c      	ldrb	r4, [r3, #0]
 8006232:	1c45      	adds	r5, r0, #1
 8006234:	5d09      	ldrb	r1, [r1, r4]
 8006236:	0028      	movs	r0, r5
 8006238:	000f      	movs	r7, r1
 800623a:	4017      	ands	r7, r2
 800623c:	4211      	tst	r1, r2
 800623e:	d1f5      	bne.n	800622c <_strtol_l.isra.0+0x1c>
 8006240:	2c2d      	cmp	r4, #45	; 0x2d
 8006242:	d13a      	bne.n	80062ba <_strtol_l.isra.0+0xaa>
 8006244:	2701      	movs	r7, #1
 8006246:	782c      	ldrb	r4, [r5, #0]
 8006248:	1c9d      	adds	r5, r3, #2
 800624a:	2e00      	cmp	r6, #0
 800624c:	d065      	beq.n	800631a <_strtol_l.isra.0+0x10a>
 800624e:	2e10      	cmp	r6, #16
 8006250:	d109      	bne.n	8006266 <_strtol_l.isra.0+0x56>
 8006252:	2c30      	cmp	r4, #48	; 0x30
 8006254:	d107      	bne.n	8006266 <_strtol_l.isra.0+0x56>
 8006256:	2220      	movs	r2, #32
 8006258:	782b      	ldrb	r3, [r5, #0]
 800625a:	4393      	bics	r3, r2
 800625c:	2b58      	cmp	r3, #88	; 0x58
 800625e:	d157      	bne.n	8006310 <_strtol_l.isra.0+0x100>
 8006260:	2610      	movs	r6, #16
 8006262:	786c      	ldrb	r4, [r5, #1]
 8006264:	3502      	adds	r5, #2
 8006266:	4b30      	ldr	r3, [pc, #192]	; (8006328 <_strtol_l.isra.0+0x118>)
 8006268:	0031      	movs	r1, r6
 800626a:	18fb      	adds	r3, r7, r3
 800626c:	0018      	movs	r0, r3
 800626e:	9303      	str	r3, [sp, #12]
 8006270:	f7fa f80a 	bl	8000288 <__aeabi_uidivmod>
 8006274:	2300      	movs	r3, #0
 8006276:	2201      	movs	r2, #1
 8006278:	4684      	mov	ip, r0
 800627a:	0018      	movs	r0, r3
 800627c:	9104      	str	r1, [sp, #16]
 800627e:	4252      	negs	r2, r2
 8006280:	0021      	movs	r1, r4
 8006282:	3930      	subs	r1, #48	; 0x30
 8006284:	2909      	cmp	r1, #9
 8006286:	d81d      	bhi.n	80062c4 <_strtol_l.isra.0+0xb4>
 8006288:	000c      	movs	r4, r1
 800628a:	42a6      	cmp	r6, r4
 800628c:	dd28      	ble.n	80062e0 <_strtol_l.isra.0+0xd0>
 800628e:	2b00      	cmp	r3, #0
 8006290:	db24      	blt.n	80062dc <_strtol_l.isra.0+0xcc>
 8006292:	0013      	movs	r3, r2
 8006294:	4584      	cmp	ip, r0
 8006296:	d306      	bcc.n	80062a6 <_strtol_l.isra.0+0x96>
 8006298:	d102      	bne.n	80062a0 <_strtol_l.isra.0+0x90>
 800629a:	9904      	ldr	r1, [sp, #16]
 800629c:	42a1      	cmp	r1, r4
 800629e:	db02      	blt.n	80062a6 <_strtol_l.isra.0+0x96>
 80062a0:	2301      	movs	r3, #1
 80062a2:	4370      	muls	r0, r6
 80062a4:	1820      	adds	r0, r4, r0
 80062a6:	782c      	ldrb	r4, [r5, #0]
 80062a8:	3501      	adds	r5, #1
 80062aa:	e7e9      	b.n	8006280 <_strtol_l.isra.0+0x70>
 80062ac:	f7ff ff4c 	bl	8006148 <__errno>
 80062b0:	2316      	movs	r3, #22
 80062b2:	6003      	str	r3, [r0, #0]
 80062b4:	2000      	movs	r0, #0
 80062b6:	b007      	add	sp, #28
 80062b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062ba:	2c2b      	cmp	r4, #43	; 0x2b
 80062bc:	d1c5      	bne.n	800624a <_strtol_l.isra.0+0x3a>
 80062be:	782c      	ldrb	r4, [r5, #0]
 80062c0:	1c9d      	adds	r5, r3, #2
 80062c2:	e7c2      	b.n	800624a <_strtol_l.isra.0+0x3a>
 80062c4:	0021      	movs	r1, r4
 80062c6:	3941      	subs	r1, #65	; 0x41
 80062c8:	2919      	cmp	r1, #25
 80062ca:	d801      	bhi.n	80062d0 <_strtol_l.isra.0+0xc0>
 80062cc:	3c37      	subs	r4, #55	; 0x37
 80062ce:	e7dc      	b.n	800628a <_strtol_l.isra.0+0x7a>
 80062d0:	0021      	movs	r1, r4
 80062d2:	3961      	subs	r1, #97	; 0x61
 80062d4:	2919      	cmp	r1, #25
 80062d6:	d803      	bhi.n	80062e0 <_strtol_l.isra.0+0xd0>
 80062d8:	3c57      	subs	r4, #87	; 0x57
 80062da:	e7d6      	b.n	800628a <_strtol_l.isra.0+0x7a>
 80062dc:	0013      	movs	r3, r2
 80062de:	e7e2      	b.n	80062a6 <_strtol_l.isra.0+0x96>
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	da09      	bge.n	80062f8 <_strtol_l.isra.0+0xe8>
 80062e4:	2322      	movs	r3, #34	; 0x22
 80062e6:	9a05      	ldr	r2, [sp, #20]
 80062e8:	9803      	ldr	r0, [sp, #12]
 80062ea:	6013      	str	r3, [r2, #0]
 80062ec:	9b02      	ldr	r3, [sp, #8]
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d0e1      	beq.n	80062b6 <_strtol_l.isra.0+0xa6>
 80062f2:	1e6b      	subs	r3, r5, #1
 80062f4:	9301      	str	r3, [sp, #4]
 80062f6:	e007      	b.n	8006308 <_strtol_l.isra.0+0xf8>
 80062f8:	2f00      	cmp	r7, #0
 80062fa:	d000      	beq.n	80062fe <_strtol_l.isra.0+0xee>
 80062fc:	4240      	negs	r0, r0
 80062fe:	9a02      	ldr	r2, [sp, #8]
 8006300:	2a00      	cmp	r2, #0
 8006302:	d0d8      	beq.n	80062b6 <_strtol_l.isra.0+0xa6>
 8006304:	2b00      	cmp	r3, #0
 8006306:	d1f4      	bne.n	80062f2 <_strtol_l.isra.0+0xe2>
 8006308:	9b02      	ldr	r3, [sp, #8]
 800630a:	9a01      	ldr	r2, [sp, #4]
 800630c:	601a      	str	r2, [r3, #0]
 800630e:	e7d2      	b.n	80062b6 <_strtol_l.isra.0+0xa6>
 8006310:	2430      	movs	r4, #48	; 0x30
 8006312:	2e00      	cmp	r6, #0
 8006314:	d1a7      	bne.n	8006266 <_strtol_l.isra.0+0x56>
 8006316:	3608      	adds	r6, #8
 8006318:	e7a5      	b.n	8006266 <_strtol_l.isra.0+0x56>
 800631a:	2c30      	cmp	r4, #48	; 0x30
 800631c:	d09b      	beq.n	8006256 <_strtol_l.isra.0+0x46>
 800631e:	260a      	movs	r6, #10
 8006320:	e7a1      	b.n	8006266 <_strtol_l.isra.0+0x56>
 8006322:	46c0      	nop			; (mov r8, r8)
 8006324:	08006f4f 	.word	0x08006f4f
 8006328:	7fffffff 	.word	0x7fffffff

0800632c <strtol>:
 800632c:	b510      	push	{r4, lr}
 800632e:	0013      	movs	r3, r2
 8006330:	000a      	movs	r2, r1
 8006332:	0001      	movs	r1, r0
 8006334:	4802      	ldr	r0, [pc, #8]	; (8006340 <strtol+0x14>)
 8006336:	6800      	ldr	r0, [r0, #0]
 8006338:	f7ff ff6a 	bl	8006210 <_strtol_l.isra.0>
 800633c:	bd10      	pop	{r4, pc}
 800633e:	46c0      	nop			; (mov r8, r8)
 8006340:	200001c4 	.word	0x200001c4

08006344 <__ssputs_r>:
 8006344:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006346:	688e      	ldr	r6, [r1, #8]
 8006348:	b085      	sub	sp, #20
 800634a:	0007      	movs	r7, r0
 800634c:	000c      	movs	r4, r1
 800634e:	9203      	str	r2, [sp, #12]
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	429e      	cmp	r6, r3
 8006354:	d83c      	bhi.n	80063d0 <__ssputs_r+0x8c>
 8006356:	2390      	movs	r3, #144	; 0x90
 8006358:	898a      	ldrh	r2, [r1, #12]
 800635a:	00db      	lsls	r3, r3, #3
 800635c:	421a      	tst	r2, r3
 800635e:	d034      	beq.n	80063ca <__ssputs_r+0x86>
 8006360:	2503      	movs	r5, #3
 8006362:	6909      	ldr	r1, [r1, #16]
 8006364:	6823      	ldr	r3, [r4, #0]
 8006366:	1a5b      	subs	r3, r3, r1
 8006368:	9302      	str	r3, [sp, #8]
 800636a:	6963      	ldr	r3, [r4, #20]
 800636c:	9802      	ldr	r0, [sp, #8]
 800636e:	435d      	muls	r5, r3
 8006370:	0feb      	lsrs	r3, r5, #31
 8006372:	195d      	adds	r5, r3, r5
 8006374:	9b01      	ldr	r3, [sp, #4]
 8006376:	106d      	asrs	r5, r5, #1
 8006378:	3301      	adds	r3, #1
 800637a:	181b      	adds	r3, r3, r0
 800637c:	42ab      	cmp	r3, r5
 800637e:	d900      	bls.n	8006382 <__ssputs_r+0x3e>
 8006380:	001d      	movs	r5, r3
 8006382:	0553      	lsls	r3, r2, #21
 8006384:	d532      	bpl.n	80063ec <__ssputs_r+0xa8>
 8006386:	0029      	movs	r1, r5
 8006388:	0038      	movs	r0, r7
 800638a:	f000 fb27 	bl	80069dc <_malloc_r>
 800638e:	1e06      	subs	r6, r0, #0
 8006390:	d109      	bne.n	80063a6 <__ssputs_r+0x62>
 8006392:	230c      	movs	r3, #12
 8006394:	603b      	str	r3, [r7, #0]
 8006396:	2340      	movs	r3, #64	; 0x40
 8006398:	2001      	movs	r0, #1
 800639a:	89a2      	ldrh	r2, [r4, #12]
 800639c:	4240      	negs	r0, r0
 800639e:	4313      	orrs	r3, r2
 80063a0:	81a3      	strh	r3, [r4, #12]
 80063a2:	b005      	add	sp, #20
 80063a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80063a6:	9a02      	ldr	r2, [sp, #8]
 80063a8:	6921      	ldr	r1, [r4, #16]
 80063aa:	f7ff fef7 	bl	800619c <memcpy>
 80063ae:	89a3      	ldrh	r3, [r4, #12]
 80063b0:	4a14      	ldr	r2, [pc, #80]	; (8006404 <__ssputs_r+0xc0>)
 80063b2:	401a      	ands	r2, r3
 80063b4:	2380      	movs	r3, #128	; 0x80
 80063b6:	4313      	orrs	r3, r2
 80063b8:	81a3      	strh	r3, [r4, #12]
 80063ba:	9b02      	ldr	r3, [sp, #8]
 80063bc:	6126      	str	r6, [r4, #16]
 80063be:	18f6      	adds	r6, r6, r3
 80063c0:	6026      	str	r6, [r4, #0]
 80063c2:	6165      	str	r5, [r4, #20]
 80063c4:	9e01      	ldr	r6, [sp, #4]
 80063c6:	1aed      	subs	r5, r5, r3
 80063c8:	60a5      	str	r5, [r4, #8]
 80063ca:	9b01      	ldr	r3, [sp, #4]
 80063cc:	429e      	cmp	r6, r3
 80063ce:	d900      	bls.n	80063d2 <__ssputs_r+0x8e>
 80063d0:	9e01      	ldr	r6, [sp, #4]
 80063d2:	0032      	movs	r2, r6
 80063d4:	9903      	ldr	r1, [sp, #12]
 80063d6:	6820      	ldr	r0, [r4, #0]
 80063d8:	f000 faa3 	bl	8006922 <memmove>
 80063dc:	68a3      	ldr	r3, [r4, #8]
 80063de:	2000      	movs	r0, #0
 80063e0:	1b9b      	subs	r3, r3, r6
 80063e2:	60a3      	str	r3, [r4, #8]
 80063e4:	6823      	ldr	r3, [r4, #0]
 80063e6:	199e      	adds	r6, r3, r6
 80063e8:	6026      	str	r6, [r4, #0]
 80063ea:	e7da      	b.n	80063a2 <__ssputs_r+0x5e>
 80063ec:	002a      	movs	r2, r5
 80063ee:	0038      	movs	r0, r7
 80063f0:	f000 fb52 	bl	8006a98 <_realloc_r>
 80063f4:	1e06      	subs	r6, r0, #0
 80063f6:	d1e0      	bne.n	80063ba <__ssputs_r+0x76>
 80063f8:	0038      	movs	r0, r7
 80063fa:	6921      	ldr	r1, [r4, #16]
 80063fc:	f000 faa4 	bl	8006948 <_free_r>
 8006400:	e7c7      	b.n	8006392 <__ssputs_r+0x4e>
 8006402:	46c0      	nop			; (mov r8, r8)
 8006404:	fffffb7f 	.word	0xfffffb7f

08006408 <_svfiprintf_r>:
 8006408:	b5f0      	push	{r4, r5, r6, r7, lr}
 800640a:	b0a1      	sub	sp, #132	; 0x84
 800640c:	9003      	str	r0, [sp, #12]
 800640e:	001d      	movs	r5, r3
 8006410:	898b      	ldrh	r3, [r1, #12]
 8006412:	000f      	movs	r7, r1
 8006414:	0016      	movs	r6, r2
 8006416:	061b      	lsls	r3, r3, #24
 8006418:	d511      	bpl.n	800643e <_svfiprintf_r+0x36>
 800641a:	690b      	ldr	r3, [r1, #16]
 800641c:	2b00      	cmp	r3, #0
 800641e:	d10e      	bne.n	800643e <_svfiprintf_r+0x36>
 8006420:	2140      	movs	r1, #64	; 0x40
 8006422:	f000 fadb 	bl	80069dc <_malloc_r>
 8006426:	6038      	str	r0, [r7, #0]
 8006428:	6138      	str	r0, [r7, #16]
 800642a:	2800      	cmp	r0, #0
 800642c:	d105      	bne.n	800643a <_svfiprintf_r+0x32>
 800642e:	230c      	movs	r3, #12
 8006430:	9a03      	ldr	r2, [sp, #12]
 8006432:	3801      	subs	r0, #1
 8006434:	6013      	str	r3, [r2, #0]
 8006436:	b021      	add	sp, #132	; 0x84
 8006438:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800643a:	2340      	movs	r3, #64	; 0x40
 800643c:	617b      	str	r3, [r7, #20]
 800643e:	2300      	movs	r3, #0
 8006440:	ac08      	add	r4, sp, #32
 8006442:	6163      	str	r3, [r4, #20]
 8006444:	3320      	adds	r3, #32
 8006446:	7663      	strb	r3, [r4, #25]
 8006448:	3310      	adds	r3, #16
 800644a:	76a3      	strb	r3, [r4, #26]
 800644c:	9507      	str	r5, [sp, #28]
 800644e:	0035      	movs	r5, r6
 8006450:	782b      	ldrb	r3, [r5, #0]
 8006452:	2b00      	cmp	r3, #0
 8006454:	d001      	beq.n	800645a <_svfiprintf_r+0x52>
 8006456:	2b25      	cmp	r3, #37	; 0x25
 8006458:	d147      	bne.n	80064ea <_svfiprintf_r+0xe2>
 800645a:	1bab      	subs	r3, r5, r6
 800645c:	9305      	str	r3, [sp, #20]
 800645e:	42b5      	cmp	r5, r6
 8006460:	d00c      	beq.n	800647c <_svfiprintf_r+0x74>
 8006462:	0032      	movs	r2, r6
 8006464:	0039      	movs	r1, r7
 8006466:	9803      	ldr	r0, [sp, #12]
 8006468:	f7ff ff6c 	bl	8006344 <__ssputs_r>
 800646c:	1c43      	adds	r3, r0, #1
 800646e:	d100      	bne.n	8006472 <_svfiprintf_r+0x6a>
 8006470:	e0ae      	b.n	80065d0 <_svfiprintf_r+0x1c8>
 8006472:	6962      	ldr	r2, [r4, #20]
 8006474:	9b05      	ldr	r3, [sp, #20]
 8006476:	4694      	mov	ip, r2
 8006478:	4463      	add	r3, ip
 800647a:	6163      	str	r3, [r4, #20]
 800647c:	782b      	ldrb	r3, [r5, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	d100      	bne.n	8006484 <_svfiprintf_r+0x7c>
 8006482:	e0a5      	b.n	80065d0 <_svfiprintf_r+0x1c8>
 8006484:	2201      	movs	r2, #1
 8006486:	2300      	movs	r3, #0
 8006488:	4252      	negs	r2, r2
 800648a:	6062      	str	r2, [r4, #4]
 800648c:	a904      	add	r1, sp, #16
 800648e:	3254      	adds	r2, #84	; 0x54
 8006490:	1852      	adds	r2, r2, r1
 8006492:	1c6e      	adds	r6, r5, #1
 8006494:	6023      	str	r3, [r4, #0]
 8006496:	60e3      	str	r3, [r4, #12]
 8006498:	60a3      	str	r3, [r4, #8]
 800649a:	7013      	strb	r3, [r2, #0]
 800649c:	65a3      	str	r3, [r4, #88]	; 0x58
 800649e:	2205      	movs	r2, #5
 80064a0:	7831      	ldrb	r1, [r6, #0]
 80064a2:	4854      	ldr	r0, [pc, #336]	; (80065f4 <_svfiprintf_r+0x1ec>)
 80064a4:	f000 fa32 	bl	800690c <memchr>
 80064a8:	1c75      	adds	r5, r6, #1
 80064aa:	2800      	cmp	r0, #0
 80064ac:	d11f      	bne.n	80064ee <_svfiprintf_r+0xe6>
 80064ae:	6822      	ldr	r2, [r4, #0]
 80064b0:	06d3      	lsls	r3, r2, #27
 80064b2:	d504      	bpl.n	80064be <_svfiprintf_r+0xb6>
 80064b4:	2353      	movs	r3, #83	; 0x53
 80064b6:	a904      	add	r1, sp, #16
 80064b8:	185b      	adds	r3, r3, r1
 80064ba:	2120      	movs	r1, #32
 80064bc:	7019      	strb	r1, [r3, #0]
 80064be:	0713      	lsls	r3, r2, #28
 80064c0:	d504      	bpl.n	80064cc <_svfiprintf_r+0xc4>
 80064c2:	2353      	movs	r3, #83	; 0x53
 80064c4:	a904      	add	r1, sp, #16
 80064c6:	185b      	adds	r3, r3, r1
 80064c8:	212b      	movs	r1, #43	; 0x2b
 80064ca:	7019      	strb	r1, [r3, #0]
 80064cc:	7833      	ldrb	r3, [r6, #0]
 80064ce:	2b2a      	cmp	r3, #42	; 0x2a
 80064d0:	d016      	beq.n	8006500 <_svfiprintf_r+0xf8>
 80064d2:	0035      	movs	r5, r6
 80064d4:	2100      	movs	r1, #0
 80064d6:	200a      	movs	r0, #10
 80064d8:	68e3      	ldr	r3, [r4, #12]
 80064da:	782a      	ldrb	r2, [r5, #0]
 80064dc:	1c6e      	adds	r6, r5, #1
 80064de:	3a30      	subs	r2, #48	; 0x30
 80064e0:	2a09      	cmp	r2, #9
 80064e2:	d94e      	bls.n	8006582 <_svfiprintf_r+0x17a>
 80064e4:	2900      	cmp	r1, #0
 80064e6:	d111      	bne.n	800650c <_svfiprintf_r+0x104>
 80064e8:	e017      	b.n	800651a <_svfiprintf_r+0x112>
 80064ea:	3501      	adds	r5, #1
 80064ec:	e7b0      	b.n	8006450 <_svfiprintf_r+0x48>
 80064ee:	4b41      	ldr	r3, [pc, #260]	; (80065f4 <_svfiprintf_r+0x1ec>)
 80064f0:	6822      	ldr	r2, [r4, #0]
 80064f2:	1ac0      	subs	r0, r0, r3
 80064f4:	2301      	movs	r3, #1
 80064f6:	4083      	lsls	r3, r0
 80064f8:	4313      	orrs	r3, r2
 80064fa:	002e      	movs	r6, r5
 80064fc:	6023      	str	r3, [r4, #0]
 80064fe:	e7ce      	b.n	800649e <_svfiprintf_r+0x96>
 8006500:	9b07      	ldr	r3, [sp, #28]
 8006502:	1d19      	adds	r1, r3, #4
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	9107      	str	r1, [sp, #28]
 8006508:	2b00      	cmp	r3, #0
 800650a:	db01      	blt.n	8006510 <_svfiprintf_r+0x108>
 800650c:	930b      	str	r3, [sp, #44]	; 0x2c
 800650e:	e004      	b.n	800651a <_svfiprintf_r+0x112>
 8006510:	425b      	negs	r3, r3
 8006512:	60e3      	str	r3, [r4, #12]
 8006514:	2302      	movs	r3, #2
 8006516:	4313      	orrs	r3, r2
 8006518:	6023      	str	r3, [r4, #0]
 800651a:	782b      	ldrb	r3, [r5, #0]
 800651c:	2b2e      	cmp	r3, #46	; 0x2e
 800651e:	d10a      	bne.n	8006536 <_svfiprintf_r+0x12e>
 8006520:	786b      	ldrb	r3, [r5, #1]
 8006522:	2b2a      	cmp	r3, #42	; 0x2a
 8006524:	d135      	bne.n	8006592 <_svfiprintf_r+0x18a>
 8006526:	9b07      	ldr	r3, [sp, #28]
 8006528:	3502      	adds	r5, #2
 800652a:	1d1a      	adds	r2, r3, #4
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	9207      	str	r2, [sp, #28]
 8006530:	2b00      	cmp	r3, #0
 8006532:	db2b      	blt.n	800658c <_svfiprintf_r+0x184>
 8006534:	9309      	str	r3, [sp, #36]	; 0x24
 8006536:	4e30      	ldr	r6, [pc, #192]	; (80065f8 <_svfiprintf_r+0x1f0>)
 8006538:	2203      	movs	r2, #3
 800653a:	0030      	movs	r0, r6
 800653c:	7829      	ldrb	r1, [r5, #0]
 800653e:	f000 f9e5 	bl	800690c <memchr>
 8006542:	2800      	cmp	r0, #0
 8006544:	d006      	beq.n	8006554 <_svfiprintf_r+0x14c>
 8006546:	2340      	movs	r3, #64	; 0x40
 8006548:	1b80      	subs	r0, r0, r6
 800654a:	4083      	lsls	r3, r0
 800654c:	6822      	ldr	r2, [r4, #0]
 800654e:	3501      	adds	r5, #1
 8006550:	4313      	orrs	r3, r2
 8006552:	6023      	str	r3, [r4, #0]
 8006554:	7829      	ldrb	r1, [r5, #0]
 8006556:	2206      	movs	r2, #6
 8006558:	4828      	ldr	r0, [pc, #160]	; (80065fc <_svfiprintf_r+0x1f4>)
 800655a:	1c6e      	adds	r6, r5, #1
 800655c:	7621      	strb	r1, [r4, #24]
 800655e:	f000 f9d5 	bl	800690c <memchr>
 8006562:	2800      	cmp	r0, #0
 8006564:	d03c      	beq.n	80065e0 <_svfiprintf_r+0x1d8>
 8006566:	4b26      	ldr	r3, [pc, #152]	; (8006600 <_svfiprintf_r+0x1f8>)
 8006568:	2b00      	cmp	r3, #0
 800656a:	d125      	bne.n	80065b8 <_svfiprintf_r+0x1b0>
 800656c:	2207      	movs	r2, #7
 800656e:	9b07      	ldr	r3, [sp, #28]
 8006570:	3307      	adds	r3, #7
 8006572:	4393      	bics	r3, r2
 8006574:	3308      	adds	r3, #8
 8006576:	9307      	str	r3, [sp, #28]
 8006578:	6963      	ldr	r3, [r4, #20]
 800657a:	9a04      	ldr	r2, [sp, #16]
 800657c:	189b      	adds	r3, r3, r2
 800657e:	6163      	str	r3, [r4, #20]
 8006580:	e765      	b.n	800644e <_svfiprintf_r+0x46>
 8006582:	4343      	muls	r3, r0
 8006584:	0035      	movs	r5, r6
 8006586:	2101      	movs	r1, #1
 8006588:	189b      	adds	r3, r3, r2
 800658a:	e7a6      	b.n	80064da <_svfiprintf_r+0xd2>
 800658c:	2301      	movs	r3, #1
 800658e:	425b      	negs	r3, r3
 8006590:	e7d0      	b.n	8006534 <_svfiprintf_r+0x12c>
 8006592:	2300      	movs	r3, #0
 8006594:	200a      	movs	r0, #10
 8006596:	001a      	movs	r2, r3
 8006598:	3501      	adds	r5, #1
 800659a:	6063      	str	r3, [r4, #4]
 800659c:	7829      	ldrb	r1, [r5, #0]
 800659e:	1c6e      	adds	r6, r5, #1
 80065a0:	3930      	subs	r1, #48	; 0x30
 80065a2:	2909      	cmp	r1, #9
 80065a4:	d903      	bls.n	80065ae <_svfiprintf_r+0x1a6>
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0c5      	beq.n	8006536 <_svfiprintf_r+0x12e>
 80065aa:	9209      	str	r2, [sp, #36]	; 0x24
 80065ac:	e7c3      	b.n	8006536 <_svfiprintf_r+0x12e>
 80065ae:	4342      	muls	r2, r0
 80065b0:	0035      	movs	r5, r6
 80065b2:	2301      	movs	r3, #1
 80065b4:	1852      	adds	r2, r2, r1
 80065b6:	e7f1      	b.n	800659c <_svfiprintf_r+0x194>
 80065b8:	ab07      	add	r3, sp, #28
 80065ba:	9300      	str	r3, [sp, #0]
 80065bc:	003a      	movs	r2, r7
 80065be:	0021      	movs	r1, r4
 80065c0:	4b10      	ldr	r3, [pc, #64]	; (8006604 <_svfiprintf_r+0x1fc>)
 80065c2:	9803      	ldr	r0, [sp, #12]
 80065c4:	e000      	b.n	80065c8 <_svfiprintf_r+0x1c0>
 80065c6:	bf00      	nop
 80065c8:	9004      	str	r0, [sp, #16]
 80065ca:	9b04      	ldr	r3, [sp, #16]
 80065cc:	3301      	adds	r3, #1
 80065ce:	d1d3      	bne.n	8006578 <_svfiprintf_r+0x170>
 80065d0:	89bb      	ldrh	r3, [r7, #12]
 80065d2:	980d      	ldr	r0, [sp, #52]	; 0x34
 80065d4:	065b      	lsls	r3, r3, #25
 80065d6:	d400      	bmi.n	80065da <_svfiprintf_r+0x1d2>
 80065d8:	e72d      	b.n	8006436 <_svfiprintf_r+0x2e>
 80065da:	2001      	movs	r0, #1
 80065dc:	4240      	negs	r0, r0
 80065de:	e72a      	b.n	8006436 <_svfiprintf_r+0x2e>
 80065e0:	ab07      	add	r3, sp, #28
 80065e2:	9300      	str	r3, [sp, #0]
 80065e4:	003a      	movs	r2, r7
 80065e6:	0021      	movs	r1, r4
 80065e8:	4b06      	ldr	r3, [pc, #24]	; (8006604 <_svfiprintf_r+0x1fc>)
 80065ea:	9803      	ldr	r0, [sp, #12]
 80065ec:	f000 f87c 	bl	80066e8 <_printf_i>
 80065f0:	e7ea      	b.n	80065c8 <_svfiprintf_r+0x1c0>
 80065f2:	46c0      	nop			; (mov r8, r8)
 80065f4:	0800704f 	.word	0x0800704f
 80065f8:	08007055 	.word	0x08007055
 80065fc:	08007059 	.word	0x08007059
 8006600:	00000000 	.word	0x00000000
 8006604:	08006345 	.word	0x08006345

08006608 <_printf_common>:
 8006608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800660a:	0015      	movs	r5, r2
 800660c:	9301      	str	r3, [sp, #4]
 800660e:	688a      	ldr	r2, [r1, #8]
 8006610:	690b      	ldr	r3, [r1, #16]
 8006612:	000c      	movs	r4, r1
 8006614:	9000      	str	r0, [sp, #0]
 8006616:	4293      	cmp	r3, r2
 8006618:	da00      	bge.n	800661c <_printf_common+0x14>
 800661a:	0013      	movs	r3, r2
 800661c:	0022      	movs	r2, r4
 800661e:	602b      	str	r3, [r5, #0]
 8006620:	3243      	adds	r2, #67	; 0x43
 8006622:	7812      	ldrb	r2, [r2, #0]
 8006624:	2a00      	cmp	r2, #0
 8006626:	d001      	beq.n	800662c <_printf_common+0x24>
 8006628:	3301      	adds	r3, #1
 800662a:	602b      	str	r3, [r5, #0]
 800662c:	6823      	ldr	r3, [r4, #0]
 800662e:	069b      	lsls	r3, r3, #26
 8006630:	d502      	bpl.n	8006638 <_printf_common+0x30>
 8006632:	682b      	ldr	r3, [r5, #0]
 8006634:	3302      	adds	r3, #2
 8006636:	602b      	str	r3, [r5, #0]
 8006638:	6822      	ldr	r2, [r4, #0]
 800663a:	2306      	movs	r3, #6
 800663c:	0017      	movs	r7, r2
 800663e:	401f      	ands	r7, r3
 8006640:	421a      	tst	r2, r3
 8006642:	d027      	beq.n	8006694 <_printf_common+0x8c>
 8006644:	0023      	movs	r3, r4
 8006646:	3343      	adds	r3, #67	; 0x43
 8006648:	781b      	ldrb	r3, [r3, #0]
 800664a:	1e5a      	subs	r2, r3, #1
 800664c:	4193      	sbcs	r3, r2
 800664e:	6822      	ldr	r2, [r4, #0]
 8006650:	0692      	lsls	r2, r2, #26
 8006652:	d430      	bmi.n	80066b6 <_printf_common+0xae>
 8006654:	0022      	movs	r2, r4
 8006656:	9901      	ldr	r1, [sp, #4]
 8006658:	9800      	ldr	r0, [sp, #0]
 800665a:	9e08      	ldr	r6, [sp, #32]
 800665c:	3243      	adds	r2, #67	; 0x43
 800665e:	47b0      	blx	r6
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d025      	beq.n	80066b0 <_printf_common+0xa8>
 8006664:	2306      	movs	r3, #6
 8006666:	6820      	ldr	r0, [r4, #0]
 8006668:	682a      	ldr	r2, [r5, #0]
 800666a:	68e1      	ldr	r1, [r4, #12]
 800666c:	2500      	movs	r5, #0
 800666e:	4003      	ands	r3, r0
 8006670:	2b04      	cmp	r3, #4
 8006672:	d103      	bne.n	800667c <_printf_common+0x74>
 8006674:	1a8d      	subs	r5, r1, r2
 8006676:	43eb      	mvns	r3, r5
 8006678:	17db      	asrs	r3, r3, #31
 800667a:	401d      	ands	r5, r3
 800667c:	68a3      	ldr	r3, [r4, #8]
 800667e:	6922      	ldr	r2, [r4, #16]
 8006680:	4293      	cmp	r3, r2
 8006682:	dd01      	ble.n	8006688 <_printf_common+0x80>
 8006684:	1a9b      	subs	r3, r3, r2
 8006686:	18ed      	adds	r5, r5, r3
 8006688:	2700      	movs	r7, #0
 800668a:	42bd      	cmp	r5, r7
 800668c:	d120      	bne.n	80066d0 <_printf_common+0xc8>
 800668e:	2000      	movs	r0, #0
 8006690:	e010      	b.n	80066b4 <_printf_common+0xac>
 8006692:	3701      	adds	r7, #1
 8006694:	68e3      	ldr	r3, [r4, #12]
 8006696:	682a      	ldr	r2, [r5, #0]
 8006698:	1a9b      	subs	r3, r3, r2
 800669a:	42bb      	cmp	r3, r7
 800669c:	ddd2      	ble.n	8006644 <_printf_common+0x3c>
 800669e:	0022      	movs	r2, r4
 80066a0:	2301      	movs	r3, #1
 80066a2:	9901      	ldr	r1, [sp, #4]
 80066a4:	9800      	ldr	r0, [sp, #0]
 80066a6:	9e08      	ldr	r6, [sp, #32]
 80066a8:	3219      	adds	r2, #25
 80066aa:	47b0      	blx	r6
 80066ac:	1c43      	adds	r3, r0, #1
 80066ae:	d1f0      	bne.n	8006692 <_printf_common+0x8a>
 80066b0:	2001      	movs	r0, #1
 80066b2:	4240      	negs	r0, r0
 80066b4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80066b6:	2030      	movs	r0, #48	; 0x30
 80066b8:	18e1      	adds	r1, r4, r3
 80066ba:	3143      	adds	r1, #67	; 0x43
 80066bc:	7008      	strb	r0, [r1, #0]
 80066be:	0021      	movs	r1, r4
 80066c0:	1c5a      	adds	r2, r3, #1
 80066c2:	3145      	adds	r1, #69	; 0x45
 80066c4:	7809      	ldrb	r1, [r1, #0]
 80066c6:	18a2      	adds	r2, r4, r2
 80066c8:	3243      	adds	r2, #67	; 0x43
 80066ca:	3302      	adds	r3, #2
 80066cc:	7011      	strb	r1, [r2, #0]
 80066ce:	e7c1      	b.n	8006654 <_printf_common+0x4c>
 80066d0:	0022      	movs	r2, r4
 80066d2:	2301      	movs	r3, #1
 80066d4:	9901      	ldr	r1, [sp, #4]
 80066d6:	9800      	ldr	r0, [sp, #0]
 80066d8:	9e08      	ldr	r6, [sp, #32]
 80066da:	321a      	adds	r2, #26
 80066dc:	47b0      	blx	r6
 80066de:	1c43      	adds	r3, r0, #1
 80066e0:	d0e6      	beq.n	80066b0 <_printf_common+0xa8>
 80066e2:	3701      	adds	r7, #1
 80066e4:	e7d1      	b.n	800668a <_printf_common+0x82>
	...

080066e8 <_printf_i>:
 80066e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066ea:	b08b      	sub	sp, #44	; 0x2c
 80066ec:	9206      	str	r2, [sp, #24]
 80066ee:	000a      	movs	r2, r1
 80066f0:	3243      	adds	r2, #67	; 0x43
 80066f2:	9307      	str	r3, [sp, #28]
 80066f4:	9005      	str	r0, [sp, #20]
 80066f6:	9204      	str	r2, [sp, #16]
 80066f8:	7e0a      	ldrb	r2, [r1, #24]
 80066fa:	000c      	movs	r4, r1
 80066fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80066fe:	2a78      	cmp	r2, #120	; 0x78
 8006700:	d806      	bhi.n	8006710 <_printf_i+0x28>
 8006702:	2a62      	cmp	r2, #98	; 0x62
 8006704:	d808      	bhi.n	8006718 <_printf_i+0x30>
 8006706:	2a00      	cmp	r2, #0
 8006708:	d100      	bne.n	800670c <_printf_i+0x24>
 800670a:	e0c0      	b.n	800688e <_printf_i+0x1a6>
 800670c:	2a58      	cmp	r2, #88	; 0x58
 800670e:	d052      	beq.n	80067b6 <_printf_i+0xce>
 8006710:	0026      	movs	r6, r4
 8006712:	3642      	adds	r6, #66	; 0x42
 8006714:	7032      	strb	r2, [r6, #0]
 8006716:	e022      	b.n	800675e <_printf_i+0x76>
 8006718:	0010      	movs	r0, r2
 800671a:	3863      	subs	r0, #99	; 0x63
 800671c:	2815      	cmp	r0, #21
 800671e:	d8f7      	bhi.n	8006710 <_printf_i+0x28>
 8006720:	f7f9 fd18 	bl	8000154 <__gnu_thumb1_case_shi>
 8006724:	001f0016 	.word	0x001f0016
 8006728:	fff6fff6 	.word	0xfff6fff6
 800672c:	fff6fff6 	.word	0xfff6fff6
 8006730:	fff6001f 	.word	0xfff6001f
 8006734:	fff6fff6 	.word	0xfff6fff6
 8006738:	00a8fff6 	.word	0x00a8fff6
 800673c:	009a0036 	.word	0x009a0036
 8006740:	fff6fff6 	.word	0xfff6fff6
 8006744:	fff600b9 	.word	0xfff600b9
 8006748:	fff60036 	.word	0xfff60036
 800674c:	009efff6 	.word	0x009efff6
 8006750:	0026      	movs	r6, r4
 8006752:	681a      	ldr	r2, [r3, #0]
 8006754:	3642      	adds	r6, #66	; 0x42
 8006756:	1d11      	adds	r1, r2, #4
 8006758:	6019      	str	r1, [r3, #0]
 800675a:	6813      	ldr	r3, [r2, #0]
 800675c:	7033      	strb	r3, [r6, #0]
 800675e:	2301      	movs	r3, #1
 8006760:	e0a7      	b.n	80068b2 <_printf_i+0x1ca>
 8006762:	6808      	ldr	r0, [r1, #0]
 8006764:	6819      	ldr	r1, [r3, #0]
 8006766:	1d0a      	adds	r2, r1, #4
 8006768:	0605      	lsls	r5, r0, #24
 800676a:	d50b      	bpl.n	8006784 <_printf_i+0x9c>
 800676c:	680d      	ldr	r5, [r1, #0]
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	2d00      	cmp	r5, #0
 8006772:	da03      	bge.n	800677c <_printf_i+0x94>
 8006774:	232d      	movs	r3, #45	; 0x2d
 8006776:	9a04      	ldr	r2, [sp, #16]
 8006778:	426d      	negs	r5, r5
 800677a:	7013      	strb	r3, [r2, #0]
 800677c:	4b61      	ldr	r3, [pc, #388]	; (8006904 <_printf_i+0x21c>)
 800677e:	270a      	movs	r7, #10
 8006780:	9303      	str	r3, [sp, #12]
 8006782:	e032      	b.n	80067ea <_printf_i+0x102>
 8006784:	680d      	ldr	r5, [r1, #0]
 8006786:	601a      	str	r2, [r3, #0]
 8006788:	0641      	lsls	r1, r0, #25
 800678a:	d5f1      	bpl.n	8006770 <_printf_i+0x88>
 800678c:	b22d      	sxth	r5, r5
 800678e:	e7ef      	b.n	8006770 <_printf_i+0x88>
 8006790:	680d      	ldr	r5, [r1, #0]
 8006792:	6819      	ldr	r1, [r3, #0]
 8006794:	1d08      	adds	r0, r1, #4
 8006796:	6018      	str	r0, [r3, #0]
 8006798:	062e      	lsls	r6, r5, #24
 800679a:	d501      	bpl.n	80067a0 <_printf_i+0xb8>
 800679c:	680d      	ldr	r5, [r1, #0]
 800679e:	e003      	b.n	80067a8 <_printf_i+0xc0>
 80067a0:	066d      	lsls	r5, r5, #25
 80067a2:	d5fb      	bpl.n	800679c <_printf_i+0xb4>
 80067a4:	680d      	ldr	r5, [r1, #0]
 80067a6:	b2ad      	uxth	r5, r5
 80067a8:	4b56      	ldr	r3, [pc, #344]	; (8006904 <_printf_i+0x21c>)
 80067aa:	270a      	movs	r7, #10
 80067ac:	9303      	str	r3, [sp, #12]
 80067ae:	2a6f      	cmp	r2, #111	; 0x6f
 80067b0:	d117      	bne.n	80067e2 <_printf_i+0xfa>
 80067b2:	2708      	movs	r7, #8
 80067b4:	e015      	b.n	80067e2 <_printf_i+0xfa>
 80067b6:	3145      	adds	r1, #69	; 0x45
 80067b8:	700a      	strb	r2, [r1, #0]
 80067ba:	4a52      	ldr	r2, [pc, #328]	; (8006904 <_printf_i+0x21c>)
 80067bc:	9203      	str	r2, [sp, #12]
 80067be:	681a      	ldr	r2, [r3, #0]
 80067c0:	6821      	ldr	r1, [r4, #0]
 80067c2:	ca20      	ldmia	r2!, {r5}
 80067c4:	601a      	str	r2, [r3, #0]
 80067c6:	0608      	lsls	r0, r1, #24
 80067c8:	d550      	bpl.n	800686c <_printf_i+0x184>
 80067ca:	07cb      	lsls	r3, r1, #31
 80067cc:	d502      	bpl.n	80067d4 <_printf_i+0xec>
 80067ce:	2320      	movs	r3, #32
 80067d0:	4319      	orrs	r1, r3
 80067d2:	6021      	str	r1, [r4, #0]
 80067d4:	2710      	movs	r7, #16
 80067d6:	2d00      	cmp	r5, #0
 80067d8:	d103      	bne.n	80067e2 <_printf_i+0xfa>
 80067da:	2320      	movs	r3, #32
 80067dc:	6822      	ldr	r2, [r4, #0]
 80067de:	439a      	bics	r2, r3
 80067e0:	6022      	str	r2, [r4, #0]
 80067e2:	0023      	movs	r3, r4
 80067e4:	2200      	movs	r2, #0
 80067e6:	3343      	adds	r3, #67	; 0x43
 80067e8:	701a      	strb	r2, [r3, #0]
 80067ea:	6863      	ldr	r3, [r4, #4]
 80067ec:	60a3      	str	r3, [r4, #8]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	db03      	blt.n	80067fa <_printf_i+0x112>
 80067f2:	2204      	movs	r2, #4
 80067f4:	6821      	ldr	r1, [r4, #0]
 80067f6:	4391      	bics	r1, r2
 80067f8:	6021      	str	r1, [r4, #0]
 80067fa:	2d00      	cmp	r5, #0
 80067fc:	d102      	bne.n	8006804 <_printf_i+0x11c>
 80067fe:	9e04      	ldr	r6, [sp, #16]
 8006800:	2b00      	cmp	r3, #0
 8006802:	d00c      	beq.n	800681e <_printf_i+0x136>
 8006804:	9e04      	ldr	r6, [sp, #16]
 8006806:	0028      	movs	r0, r5
 8006808:	0039      	movs	r1, r7
 800680a:	f7f9 fd3d 	bl	8000288 <__aeabi_uidivmod>
 800680e:	9b03      	ldr	r3, [sp, #12]
 8006810:	3e01      	subs	r6, #1
 8006812:	5c5b      	ldrb	r3, [r3, r1]
 8006814:	7033      	strb	r3, [r6, #0]
 8006816:	002b      	movs	r3, r5
 8006818:	0005      	movs	r5, r0
 800681a:	429f      	cmp	r7, r3
 800681c:	d9f3      	bls.n	8006806 <_printf_i+0x11e>
 800681e:	2f08      	cmp	r7, #8
 8006820:	d109      	bne.n	8006836 <_printf_i+0x14e>
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	07db      	lsls	r3, r3, #31
 8006826:	d506      	bpl.n	8006836 <_printf_i+0x14e>
 8006828:	6863      	ldr	r3, [r4, #4]
 800682a:	6922      	ldr	r2, [r4, #16]
 800682c:	4293      	cmp	r3, r2
 800682e:	dc02      	bgt.n	8006836 <_printf_i+0x14e>
 8006830:	2330      	movs	r3, #48	; 0x30
 8006832:	3e01      	subs	r6, #1
 8006834:	7033      	strb	r3, [r6, #0]
 8006836:	9b04      	ldr	r3, [sp, #16]
 8006838:	1b9b      	subs	r3, r3, r6
 800683a:	6123      	str	r3, [r4, #16]
 800683c:	9b07      	ldr	r3, [sp, #28]
 800683e:	0021      	movs	r1, r4
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	9805      	ldr	r0, [sp, #20]
 8006844:	9b06      	ldr	r3, [sp, #24]
 8006846:	aa09      	add	r2, sp, #36	; 0x24
 8006848:	f7ff fede 	bl	8006608 <_printf_common>
 800684c:	1c43      	adds	r3, r0, #1
 800684e:	d135      	bne.n	80068bc <_printf_i+0x1d4>
 8006850:	2001      	movs	r0, #1
 8006852:	4240      	negs	r0, r0
 8006854:	b00b      	add	sp, #44	; 0x2c
 8006856:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006858:	2220      	movs	r2, #32
 800685a:	6809      	ldr	r1, [r1, #0]
 800685c:	430a      	orrs	r2, r1
 800685e:	6022      	str	r2, [r4, #0]
 8006860:	0022      	movs	r2, r4
 8006862:	2178      	movs	r1, #120	; 0x78
 8006864:	3245      	adds	r2, #69	; 0x45
 8006866:	7011      	strb	r1, [r2, #0]
 8006868:	4a27      	ldr	r2, [pc, #156]	; (8006908 <_printf_i+0x220>)
 800686a:	e7a7      	b.n	80067bc <_printf_i+0xd4>
 800686c:	0648      	lsls	r0, r1, #25
 800686e:	d5ac      	bpl.n	80067ca <_printf_i+0xe2>
 8006870:	b2ad      	uxth	r5, r5
 8006872:	e7aa      	b.n	80067ca <_printf_i+0xe2>
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	680d      	ldr	r5, [r1, #0]
 8006878:	1d10      	adds	r0, r2, #4
 800687a:	6949      	ldr	r1, [r1, #20]
 800687c:	6018      	str	r0, [r3, #0]
 800687e:	6813      	ldr	r3, [r2, #0]
 8006880:	062e      	lsls	r6, r5, #24
 8006882:	d501      	bpl.n	8006888 <_printf_i+0x1a0>
 8006884:	6019      	str	r1, [r3, #0]
 8006886:	e002      	b.n	800688e <_printf_i+0x1a6>
 8006888:	066d      	lsls	r5, r5, #25
 800688a:	d5fb      	bpl.n	8006884 <_printf_i+0x19c>
 800688c:	8019      	strh	r1, [r3, #0]
 800688e:	2300      	movs	r3, #0
 8006890:	9e04      	ldr	r6, [sp, #16]
 8006892:	6123      	str	r3, [r4, #16]
 8006894:	e7d2      	b.n	800683c <_printf_i+0x154>
 8006896:	681a      	ldr	r2, [r3, #0]
 8006898:	1d11      	adds	r1, r2, #4
 800689a:	6019      	str	r1, [r3, #0]
 800689c:	6816      	ldr	r6, [r2, #0]
 800689e:	2100      	movs	r1, #0
 80068a0:	0030      	movs	r0, r6
 80068a2:	6862      	ldr	r2, [r4, #4]
 80068a4:	f000 f832 	bl	800690c <memchr>
 80068a8:	2800      	cmp	r0, #0
 80068aa:	d001      	beq.n	80068b0 <_printf_i+0x1c8>
 80068ac:	1b80      	subs	r0, r0, r6
 80068ae:	6060      	str	r0, [r4, #4]
 80068b0:	6863      	ldr	r3, [r4, #4]
 80068b2:	6123      	str	r3, [r4, #16]
 80068b4:	2300      	movs	r3, #0
 80068b6:	9a04      	ldr	r2, [sp, #16]
 80068b8:	7013      	strb	r3, [r2, #0]
 80068ba:	e7bf      	b.n	800683c <_printf_i+0x154>
 80068bc:	6923      	ldr	r3, [r4, #16]
 80068be:	0032      	movs	r2, r6
 80068c0:	9906      	ldr	r1, [sp, #24]
 80068c2:	9805      	ldr	r0, [sp, #20]
 80068c4:	9d07      	ldr	r5, [sp, #28]
 80068c6:	47a8      	blx	r5
 80068c8:	1c43      	adds	r3, r0, #1
 80068ca:	d0c1      	beq.n	8006850 <_printf_i+0x168>
 80068cc:	6823      	ldr	r3, [r4, #0]
 80068ce:	079b      	lsls	r3, r3, #30
 80068d0:	d415      	bmi.n	80068fe <_printf_i+0x216>
 80068d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80068d4:	68e0      	ldr	r0, [r4, #12]
 80068d6:	4298      	cmp	r0, r3
 80068d8:	dabc      	bge.n	8006854 <_printf_i+0x16c>
 80068da:	0018      	movs	r0, r3
 80068dc:	e7ba      	b.n	8006854 <_printf_i+0x16c>
 80068de:	0022      	movs	r2, r4
 80068e0:	2301      	movs	r3, #1
 80068e2:	9906      	ldr	r1, [sp, #24]
 80068e4:	9805      	ldr	r0, [sp, #20]
 80068e6:	9e07      	ldr	r6, [sp, #28]
 80068e8:	3219      	adds	r2, #25
 80068ea:	47b0      	blx	r6
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d0af      	beq.n	8006850 <_printf_i+0x168>
 80068f0:	3501      	adds	r5, #1
 80068f2:	68e3      	ldr	r3, [r4, #12]
 80068f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068f6:	1a9b      	subs	r3, r3, r2
 80068f8:	42ab      	cmp	r3, r5
 80068fa:	dcf0      	bgt.n	80068de <_printf_i+0x1f6>
 80068fc:	e7e9      	b.n	80068d2 <_printf_i+0x1ea>
 80068fe:	2500      	movs	r5, #0
 8006900:	e7f7      	b.n	80068f2 <_printf_i+0x20a>
 8006902:	46c0      	nop			; (mov r8, r8)
 8006904:	08007060 	.word	0x08007060
 8006908:	08007071 	.word	0x08007071

0800690c <memchr>:
 800690c:	b2c9      	uxtb	r1, r1
 800690e:	1882      	adds	r2, r0, r2
 8006910:	4290      	cmp	r0, r2
 8006912:	d101      	bne.n	8006918 <memchr+0xc>
 8006914:	2000      	movs	r0, #0
 8006916:	4770      	bx	lr
 8006918:	7803      	ldrb	r3, [r0, #0]
 800691a:	428b      	cmp	r3, r1
 800691c:	d0fb      	beq.n	8006916 <memchr+0xa>
 800691e:	3001      	adds	r0, #1
 8006920:	e7f6      	b.n	8006910 <memchr+0x4>

08006922 <memmove>:
 8006922:	b510      	push	{r4, lr}
 8006924:	4288      	cmp	r0, r1
 8006926:	d902      	bls.n	800692e <memmove+0xc>
 8006928:	188b      	adds	r3, r1, r2
 800692a:	4298      	cmp	r0, r3
 800692c:	d303      	bcc.n	8006936 <memmove+0x14>
 800692e:	2300      	movs	r3, #0
 8006930:	e007      	b.n	8006942 <memmove+0x20>
 8006932:	5c8b      	ldrb	r3, [r1, r2]
 8006934:	5483      	strb	r3, [r0, r2]
 8006936:	3a01      	subs	r2, #1
 8006938:	d2fb      	bcs.n	8006932 <memmove+0x10>
 800693a:	bd10      	pop	{r4, pc}
 800693c:	5ccc      	ldrb	r4, [r1, r3]
 800693e:	54c4      	strb	r4, [r0, r3]
 8006940:	3301      	adds	r3, #1
 8006942:	429a      	cmp	r2, r3
 8006944:	d1fa      	bne.n	800693c <memmove+0x1a>
 8006946:	e7f8      	b.n	800693a <memmove+0x18>

08006948 <_free_r>:
 8006948:	b570      	push	{r4, r5, r6, lr}
 800694a:	0005      	movs	r5, r0
 800694c:	2900      	cmp	r1, #0
 800694e:	d010      	beq.n	8006972 <_free_r+0x2a>
 8006950:	1f0c      	subs	r4, r1, #4
 8006952:	6823      	ldr	r3, [r4, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	da00      	bge.n	800695a <_free_r+0x12>
 8006958:	18e4      	adds	r4, r4, r3
 800695a:	0028      	movs	r0, r5
 800695c:	f000 f8d4 	bl	8006b08 <__malloc_lock>
 8006960:	4a1d      	ldr	r2, [pc, #116]	; (80069d8 <_free_r+0x90>)
 8006962:	6813      	ldr	r3, [r2, #0]
 8006964:	2b00      	cmp	r3, #0
 8006966:	d105      	bne.n	8006974 <_free_r+0x2c>
 8006968:	6063      	str	r3, [r4, #4]
 800696a:	6014      	str	r4, [r2, #0]
 800696c:	0028      	movs	r0, r5
 800696e:	f000 f8d3 	bl	8006b18 <__malloc_unlock>
 8006972:	bd70      	pop	{r4, r5, r6, pc}
 8006974:	42a3      	cmp	r3, r4
 8006976:	d908      	bls.n	800698a <_free_r+0x42>
 8006978:	6821      	ldr	r1, [r4, #0]
 800697a:	1860      	adds	r0, r4, r1
 800697c:	4283      	cmp	r3, r0
 800697e:	d1f3      	bne.n	8006968 <_free_r+0x20>
 8006980:	6818      	ldr	r0, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	1841      	adds	r1, r0, r1
 8006986:	6021      	str	r1, [r4, #0]
 8006988:	e7ee      	b.n	8006968 <_free_r+0x20>
 800698a:	001a      	movs	r2, r3
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d001      	beq.n	8006996 <_free_r+0x4e>
 8006992:	42a3      	cmp	r3, r4
 8006994:	d9f9      	bls.n	800698a <_free_r+0x42>
 8006996:	6811      	ldr	r1, [r2, #0]
 8006998:	1850      	adds	r0, r2, r1
 800699a:	42a0      	cmp	r0, r4
 800699c:	d10b      	bne.n	80069b6 <_free_r+0x6e>
 800699e:	6820      	ldr	r0, [r4, #0]
 80069a0:	1809      	adds	r1, r1, r0
 80069a2:	1850      	adds	r0, r2, r1
 80069a4:	6011      	str	r1, [r2, #0]
 80069a6:	4283      	cmp	r3, r0
 80069a8:	d1e0      	bne.n	800696c <_free_r+0x24>
 80069aa:	6818      	ldr	r0, [r3, #0]
 80069ac:	685b      	ldr	r3, [r3, #4]
 80069ae:	1841      	adds	r1, r0, r1
 80069b0:	6011      	str	r1, [r2, #0]
 80069b2:	6053      	str	r3, [r2, #4]
 80069b4:	e7da      	b.n	800696c <_free_r+0x24>
 80069b6:	42a0      	cmp	r0, r4
 80069b8:	d902      	bls.n	80069c0 <_free_r+0x78>
 80069ba:	230c      	movs	r3, #12
 80069bc:	602b      	str	r3, [r5, #0]
 80069be:	e7d5      	b.n	800696c <_free_r+0x24>
 80069c0:	6821      	ldr	r1, [r4, #0]
 80069c2:	1860      	adds	r0, r4, r1
 80069c4:	4283      	cmp	r3, r0
 80069c6:	d103      	bne.n	80069d0 <_free_r+0x88>
 80069c8:	6818      	ldr	r0, [r3, #0]
 80069ca:	685b      	ldr	r3, [r3, #4]
 80069cc:	1841      	adds	r1, r0, r1
 80069ce:	6021      	str	r1, [r4, #0]
 80069d0:	6063      	str	r3, [r4, #4]
 80069d2:	6054      	str	r4, [r2, #4]
 80069d4:	e7ca      	b.n	800696c <_free_r+0x24>
 80069d6:	46c0      	nop			; (mov r8, r8)
 80069d8:	2000046c 	.word	0x2000046c

080069dc <_malloc_r>:
 80069dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069de:	2303      	movs	r3, #3
 80069e0:	1ccd      	adds	r5, r1, #3
 80069e2:	439d      	bics	r5, r3
 80069e4:	3508      	adds	r5, #8
 80069e6:	0006      	movs	r6, r0
 80069e8:	2d0c      	cmp	r5, #12
 80069ea:	d21f      	bcs.n	8006a2c <_malloc_r+0x50>
 80069ec:	250c      	movs	r5, #12
 80069ee:	42a9      	cmp	r1, r5
 80069f0:	d81e      	bhi.n	8006a30 <_malloc_r+0x54>
 80069f2:	0030      	movs	r0, r6
 80069f4:	f000 f888 	bl	8006b08 <__malloc_lock>
 80069f8:	4925      	ldr	r1, [pc, #148]	; (8006a90 <_malloc_r+0xb4>)
 80069fa:	680a      	ldr	r2, [r1, #0]
 80069fc:	0014      	movs	r4, r2
 80069fe:	2c00      	cmp	r4, #0
 8006a00:	d11a      	bne.n	8006a38 <_malloc_r+0x5c>
 8006a02:	4f24      	ldr	r7, [pc, #144]	; (8006a94 <_malloc_r+0xb8>)
 8006a04:	683b      	ldr	r3, [r7, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d104      	bne.n	8006a14 <_malloc_r+0x38>
 8006a0a:	0021      	movs	r1, r4
 8006a0c:	0030      	movs	r0, r6
 8006a0e:	f000 f869 	bl	8006ae4 <_sbrk_r>
 8006a12:	6038      	str	r0, [r7, #0]
 8006a14:	0029      	movs	r1, r5
 8006a16:	0030      	movs	r0, r6
 8006a18:	f000 f864 	bl	8006ae4 <_sbrk_r>
 8006a1c:	1c43      	adds	r3, r0, #1
 8006a1e:	d12b      	bne.n	8006a78 <_malloc_r+0x9c>
 8006a20:	230c      	movs	r3, #12
 8006a22:	0030      	movs	r0, r6
 8006a24:	6033      	str	r3, [r6, #0]
 8006a26:	f000 f877 	bl	8006b18 <__malloc_unlock>
 8006a2a:	e003      	b.n	8006a34 <_malloc_r+0x58>
 8006a2c:	2d00      	cmp	r5, #0
 8006a2e:	dade      	bge.n	80069ee <_malloc_r+0x12>
 8006a30:	230c      	movs	r3, #12
 8006a32:	6033      	str	r3, [r6, #0]
 8006a34:	2000      	movs	r0, #0
 8006a36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a38:	6823      	ldr	r3, [r4, #0]
 8006a3a:	1b5b      	subs	r3, r3, r5
 8006a3c:	d419      	bmi.n	8006a72 <_malloc_r+0x96>
 8006a3e:	2b0b      	cmp	r3, #11
 8006a40:	d903      	bls.n	8006a4a <_malloc_r+0x6e>
 8006a42:	6023      	str	r3, [r4, #0]
 8006a44:	18e4      	adds	r4, r4, r3
 8006a46:	6025      	str	r5, [r4, #0]
 8006a48:	e003      	b.n	8006a52 <_malloc_r+0x76>
 8006a4a:	6863      	ldr	r3, [r4, #4]
 8006a4c:	42a2      	cmp	r2, r4
 8006a4e:	d10e      	bne.n	8006a6e <_malloc_r+0x92>
 8006a50:	600b      	str	r3, [r1, #0]
 8006a52:	0030      	movs	r0, r6
 8006a54:	f000 f860 	bl	8006b18 <__malloc_unlock>
 8006a58:	0020      	movs	r0, r4
 8006a5a:	2207      	movs	r2, #7
 8006a5c:	300b      	adds	r0, #11
 8006a5e:	1d23      	adds	r3, r4, #4
 8006a60:	4390      	bics	r0, r2
 8006a62:	1ac2      	subs	r2, r0, r3
 8006a64:	4298      	cmp	r0, r3
 8006a66:	d0e6      	beq.n	8006a36 <_malloc_r+0x5a>
 8006a68:	1a1b      	subs	r3, r3, r0
 8006a6a:	50a3      	str	r3, [r4, r2]
 8006a6c:	e7e3      	b.n	8006a36 <_malloc_r+0x5a>
 8006a6e:	6053      	str	r3, [r2, #4]
 8006a70:	e7ef      	b.n	8006a52 <_malloc_r+0x76>
 8006a72:	0022      	movs	r2, r4
 8006a74:	6864      	ldr	r4, [r4, #4]
 8006a76:	e7c2      	b.n	80069fe <_malloc_r+0x22>
 8006a78:	2303      	movs	r3, #3
 8006a7a:	1cc4      	adds	r4, r0, #3
 8006a7c:	439c      	bics	r4, r3
 8006a7e:	42a0      	cmp	r0, r4
 8006a80:	d0e1      	beq.n	8006a46 <_malloc_r+0x6a>
 8006a82:	1a21      	subs	r1, r4, r0
 8006a84:	0030      	movs	r0, r6
 8006a86:	f000 f82d 	bl	8006ae4 <_sbrk_r>
 8006a8a:	1c43      	adds	r3, r0, #1
 8006a8c:	d1db      	bne.n	8006a46 <_malloc_r+0x6a>
 8006a8e:	e7c7      	b.n	8006a20 <_malloc_r+0x44>
 8006a90:	2000046c 	.word	0x2000046c
 8006a94:	20000470 	.word	0x20000470

08006a98 <_realloc_r>:
 8006a98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006a9a:	0007      	movs	r7, r0
 8006a9c:	000d      	movs	r5, r1
 8006a9e:	0016      	movs	r6, r2
 8006aa0:	2900      	cmp	r1, #0
 8006aa2:	d105      	bne.n	8006ab0 <_realloc_r+0x18>
 8006aa4:	0011      	movs	r1, r2
 8006aa6:	f7ff ff99 	bl	80069dc <_malloc_r>
 8006aaa:	0004      	movs	r4, r0
 8006aac:	0020      	movs	r0, r4
 8006aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006ab0:	2a00      	cmp	r2, #0
 8006ab2:	d103      	bne.n	8006abc <_realloc_r+0x24>
 8006ab4:	f7ff ff48 	bl	8006948 <_free_r>
 8006ab8:	0034      	movs	r4, r6
 8006aba:	e7f7      	b.n	8006aac <_realloc_r+0x14>
 8006abc:	f000 f834 	bl	8006b28 <_malloc_usable_size_r>
 8006ac0:	002c      	movs	r4, r5
 8006ac2:	42b0      	cmp	r0, r6
 8006ac4:	d2f2      	bcs.n	8006aac <_realloc_r+0x14>
 8006ac6:	0031      	movs	r1, r6
 8006ac8:	0038      	movs	r0, r7
 8006aca:	f7ff ff87 	bl	80069dc <_malloc_r>
 8006ace:	1e04      	subs	r4, r0, #0
 8006ad0:	d0ec      	beq.n	8006aac <_realloc_r+0x14>
 8006ad2:	0029      	movs	r1, r5
 8006ad4:	0032      	movs	r2, r6
 8006ad6:	f7ff fb61 	bl	800619c <memcpy>
 8006ada:	0029      	movs	r1, r5
 8006adc:	0038      	movs	r0, r7
 8006ade:	f7ff ff33 	bl	8006948 <_free_r>
 8006ae2:	e7e3      	b.n	8006aac <_realloc_r+0x14>

08006ae4 <_sbrk_r>:
 8006ae4:	2300      	movs	r3, #0
 8006ae6:	b570      	push	{r4, r5, r6, lr}
 8006ae8:	4d06      	ldr	r5, [pc, #24]	; (8006b04 <_sbrk_r+0x20>)
 8006aea:	0004      	movs	r4, r0
 8006aec:	0008      	movs	r0, r1
 8006aee:	602b      	str	r3, [r5, #0]
 8006af0:	f7fb f846 	bl	8001b80 <_sbrk>
 8006af4:	1c43      	adds	r3, r0, #1
 8006af6:	d103      	bne.n	8006b00 <_sbrk_r+0x1c>
 8006af8:	682b      	ldr	r3, [r5, #0]
 8006afa:	2b00      	cmp	r3, #0
 8006afc:	d000      	beq.n	8006b00 <_sbrk_r+0x1c>
 8006afe:	6023      	str	r3, [r4, #0]
 8006b00:	bd70      	pop	{r4, r5, r6, pc}
 8006b02:	46c0      	nop			; (mov r8, r8)
 8006b04:	200012c8 	.word	0x200012c8

08006b08 <__malloc_lock>:
 8006b08:	b510      	push	{r4, lr}
 8006b0a:	4802      	ldr	r0, [pc, #8]	; (8006b14 <__malloc_lock+0xc>)
 8006b0c:	f000 f814 	bl	8006b38 <__retarget_lock_acquire_recursive>
 8006b10:	bd10      	pop	{r4, pc}
 8006b12:	46c0      	nop			; (mov r8, r8)
 8006b14:	200012d0 	.word	0x200012d0

08006b18 <__malloc_unlock>:
 8006b18:	b510      	push	{r4, lr}
 8006b1a:	4802      	ldr	r0, [pc, #8]	; (8006b24 <__malloc_unlock+0xc>)
 8006b1c:	f000 f80d 	bl	8006b3a <__retarget_lock_release_recursive>
 8006b20:	bd10      	pop	{r4, pc}
 8006b22:	46c0      	nop			; (mov r8, r8)
 8006b24:	200012d0 	.word	0x200012d0

08006b28 <_malloc_usable_size_r>:
 8006b28:	1f0b      	subs	r3, r1, #4
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	1f18      	subs	r0, r3, #4
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	da01      	bge.n	8006b36 <_malloc_usable_size_r+0xe>
 8006b32:	580b      	ldr	r3, [r1, r0]
 8006b34:	18c0      	adds	r0, r0, r3
 8006b36:	4770      	bx	lr

08006b38 <__retarget_lock_acquire_recursive>:
 8006b38:	4770      	bx	lr

08006b3a <__retarget_lock_release_recursive>:
 8006b3a:	4770      	bx	lr

08006b3c <_init>:
 8006b3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b3e:	46c0      	nop			; (mov r8, r8)
 8006b40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b42:	bc08      	pop	{r3}
 8006b44:	469e      	mov	lr, r3
 8006b46:	4770      	bx	lr

08006b48 <_fini>:
 8006b48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b4a:	46c0      	nop			; (mov r8, r8)
 8006b4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b4e:	bc08      	pop	{r3}
 8006b50:	469e      	mov	lr, r3
 8006b52:	4770      	bx	lr
