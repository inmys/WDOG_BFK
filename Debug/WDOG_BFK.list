
WDOG_BFK.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006df4  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005f8  08006eb4  08006eb4  00016eb4  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080074ac  080074ac  00020224  2**0
                  CONTENTS
  4 .ARM          00000000  080074ac  080074ac  00020224  2**0
                  CONTENTS
  5 .preinit_array 00000000  080074ac  080074ac  00020224  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080074ac  080074ac  000174ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080074b0  080074b0  000174b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000224  20000000  080074b4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000010a0  20000228  080076d8  00020228  2**3
                  ALLOC
 10 ._user_heap_stack 00000528  200012c8  080076d8  000212c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002f9c0  00000000  00000000  0002024c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006e71  00000000  00000000  0004fc0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00016b4b  00000000  00000000  00056a7d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001550  00000000  00000000  0006d5c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002438  00000000  00000000  0006eb18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f069  00000000  00000000  00070f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00006d74  00000000  00000000  0008ffb9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00096d2d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004548  00000000  00000000  00096d80  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000228 	.word	0x20000228
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08006e9c 	.word	0x08006e9c

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000022c 	.word	0x2000022c
 8000104:	08006e9c 	.word	0x08006e9c

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__gnu_thumb1_case_uhi>:
 8000154:	b403      	push	{r0, r1}
 8000156:	4671      	mov	r1, lr
 8000158:	0849      	lsrs	r1, r1, #1
 800015a:	0040      	lsls	r0, r0, #1
 800015c:	0049      	lsls	r1, r1, #1
 800015e:	5a09      	ldrh	r1, [r1, r0]
 8000160:	0049      	lsls	r1, r1, #1
 8000162:	448e      	add	lr, r1
 8000164:	bc03      	pop	{r0, r1}
 8000166:	4770      	bx	lr

08000168 <__udivsi3>:
 8000168:	2200      	movs	r2, #0
 800016a:	0843      	lsrs	r3, r0, #1
 800016c:	428b      	cmp	r3, r1
 800016e:	d374      	bcc.n	800025a <__udivsi3+0xf2>
 8000170:	0903      	lsrs	r3, r0, #4
 8000172:	428b      	cmp	r3, r1
 8000174:	d35f      	bcc.n	8000236 <__udivsi3+0xce>
 8000176:	0a03      	lsrs	r3, r0, #8
 8000178:	428b      	cmp	r3, r1
 800017a:	d344      	bcc.n	8000206 <__udivsi3+0x9e>
 800017c:	0b03      	lsrs	r3, r0, #12
 800017e:	428b      	cmp	r3, r1
 8000180:	d328      	bcc.n	80001d4 <__udivsi3+0x6c>
 8000182:	0c03      	lsrs	r3, r0, #16
 8000184:	428b      	cmp	r3, r1
 8000186:	d30d      	bcc.n	80001a4 <__udivsi3+0x3c>
 8000188:	22ff      	movs	r2, #255	; 0xff
 800018a:	0209      	lsls	r1, r1, #8
 800018c:	ba12      	rev	r2, r2
 800018e:	0c03      	lsrs	r3, r0, #16
 8000190:	428b      	cmp	r3, r1
 8000192:	d302      	bcc.n	800019a <__udivsi3+0x32>
 8000194:	1212      	asrs	r2, r2, #8
 8000196:	0209      	lsls	r1, r1, #8
 8000198:	d065      	beq.n	8000266 <__udivsi3+0xfe>
 800019a:	0b03      	lsrs	r3, r0, #12
 800019c:	428b      	cmp	r3, r1
 800019e:	d319      	bcc.n	80001d4 <__udivsi3+0x6c>
 80001a0:	e000      	b.n	80001a4 <__udivsi3+0x3c>
 80001a2:	0a09      	lsrs	r1, r1, #8
 80001a4:	0bc3      	lsrs	r3, r0, #15
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x46>
 80001aa:	03cb      	lsls	r3, r1, #15
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0b83      	lsrs	r3, r0, #14
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x52>
 80001b6:	038b      	lsls	r3, r1, #14
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0b43      	lsrs	r3, r0, #13
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x5e>
 80001c2:	034b      	lsls	r3, r1, #13
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	0b03      	lsrs	r3, r0, #12
 80001ca:	428b      	cmp	r3, r1
 80001cc:	d301      	bcc.n	80001d2 <__udivsi3+0x6a>
 80001ce:	030b      	lsls	r3, r1, #12
 80001d0:	1ac0      	subs	r0, r0, r3
 80001d2:	4152      	adcs	r2, r2
 80001d4:	0ac3      	lsrs	r3, r0, #11
 80001d6:	428b      	cmp	r3, r1
 80001d8:	d301      	bcc.n	80001de <__udivsi3+0x76>
 80001da:	02cb      	lsls	r3, r1, #11
 80001dc:	1ac0      	subs	r0, r0, r3
 80001de:	4152      	adcs	r2, r2
 80001e0:	0a83      	lsrs	r3, r0, #10
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x82>
 80001e6:	028b      	lsls	r3, r1, #10
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0a43      	lsrs	r3, r0, #9
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x8e>
 80001f2:	024b      	lsls	r3, r1, #9
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0a03      	lsrs	r3, r0, #8
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x9a>
 80001fe:	020b      	lsls	r3, r1, #8
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	d2cd      	bcs.n	80001a2 <__udivsi3+0x3a>
 8000206:	09c3      	lsrs	r3, r0, #7
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xa8>
 800020c:	01cb      	lsls	r3, r1, #7
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0983      	lsrs	r3, r0, #6
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xb4>
 8000218:	018b      	lsls	r3, r1, #6
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	0943      	lsrs	r3, r0, #5
 8000220:	428b      	cmp	r3, r1
 8000222:	d301      	bcc.n	8000228 <__udivsi3+0xc0>
 8000224:	014b      	lsls	r3, r1, #5
 8000226:	1ac0      	subs	r0, r0, r3
 8000228:	4152      	adcs	r2, r2
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d301      	bcc.n	8000234 <__udivsi3+0xcc>
 8000230:	010b      	lsls	r3, r1, #4
 8000232:	1ac0      	subs	r0, r0, r3
 8000234:	4152      	adcs	r2, r2
 8000236:	08c3      	lsrs	r3, r0, #3
 8000238:	428b      	cmp	r3, r1
 800023a:	d301      	bcc.n	8000240 <__udivsi3+0xd8>
 800023c:	00cb      	lsls	r3, r1, #3
 800023e:	1ac0      	subs	r0, r0, r3
 8000240:	4152      	adcs	r2, r2
 8000242:	0883      	lsrs	r3, r0, #2
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xe4>
 8000248:	008b      	lsls	r3, r1, #2
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0843      	lsrs	r3, r0, #1
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xf0>
 8000254:	004b      	lsls	r3, r1, #1
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	1a41      	subs	r1, r0, r1
 800025c:	d200      	bcs.n	8000260 <__udivsi3+0xf8>
 800025e:	4601      	mov	r1, r0
 8000260:	4152      	adcs	r2, r2
 8000262:	4610      	mov	r0, r2
 8000264:	4770      	bx	lr
 8000266:	e7ff      	b.n	8000268 <__udivsi3+0x100>
 8000268:	b501      	push	{r0, lr}
 800026a:	2000      	movs	r0, #0
 800026c:	f000 f806 	bl	800027c <__aeabi_idiv0>
 8000270:	bd02      	pop	{r1, pc}
 8000272:	46c0      	nop			; (mov r8, r8)

08000274 <__aeabi_uidivmod>:
 8000274:	2900      	cmp	r1, #0
 8000276:	d0f7      	beq.n	8000268 <__udivsi3+0x100>
 8000278:	e776      	b.n	8000168 <__udivsi3>
 800027a:	4770      	bx	lr

0800027c <__aeabi_idiv0>:
 800027c:	4770      	bx	lr
 800027e:	46c0      	nop			; (mov r8, r8)

08000280 <__aeabi_llsr>:
 8000280:	40d0      	lsrs	r0, r2
 8000282:	1c0b      	adds	r3, r1, #0
 8000284:	40d1      	lsrs	r1, r2
 8000286:	469c      	mov	ip, r3
 8000288:	3a20      	subs	r2, #32
 800028a:	40d3      	lsrs	r3, r2
 800028c:	4318      	orrs	r0, r3
 800028e:	4252      	negs	r2, r2
 8000290:	4663      	mov	r3, ip
 8000292:	4093      	lsls	r3, r2
 8000294:	4318      	orrs	r0, r3
 8000296:	4770      	bx	lr

08000298 <clearBuf>:

}

void clearBuf(char* buf){
	int j;
	for(j=0;j<BUF_LEN;j++)
 8000298:	0003      	movs	r3, r0
		buf[j] = 0;
 800029a:	2200      	movs	r2, #0
 800029c:	3328      	adds	r3, #40	; 0x28
 800029e:	7002      	strb	r2, [r0, #0]
	for(j=0;j<BUF_LEN;j++)
 80002a0:	3001      	adds	r0, #1
 80002a2:	4298      	cmp	r0, r3
 80002a4:	d1fb      	bne.n	800029e <clearBuf+0x6>
}
 80002a6:	4770      	bx	lr

080002a8 <POST>:
void POST(){
 80002a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80002aa:	b095      	sub	sp, #84	; 0x54
	EnableSPI();
 80002ac:	f000 fcc4 	bl	8000c38 <EnableSPI>
 80002b0:	2400      	movs	r4, #0
 80002b2:	2501      	movs	r5, #1
		clearBuf(buf);
 80002b4:	a80a      	add	r0, sp, #40	; 0x28
 80002b6:	f7ff ffef 	bl	8000298 <clearBuf>
				abuf[j] = 0;
 80002ba:	2300      	movs	r3, #0
 80002bc:	1c66      	adds	r6, r4, #1
		sprintf(buf,"Flash %d: ",i+1);
 80002be:	4944      	ldr	r1, [pc, #272]	; (80003d0 <POST+0x128>)
 80002c0:	0032      	movs	r2, r6
 80002c2:	a80a      	add	r0, sp, #40	; 0x28
				abuf[j] = 0;
 80002c4:	9306      	str	r3, [sp, #24]
				bbuf[j] = 0;
 80002c6:	9308      	str	r3, [sp, #32]
		sprintf(buf,"Flash %d: ",i+1);
 80002c8:	f006 f92a 	bl	8006520 <siprintf>
		UART_putstr(buf);
 80002cc:	a80a      	add	r0, sp, #40	; 0x28
 80002ce:	f000 fba3 	bl	8000a18 <UART_putstr>
		if(SPI_ReadID(i,&conf) == HAL_OK){
 80002d2:	b2e0      	uxtb	r0, r4
 80002d4:	a904      	add	r1, sp, #16
 80002d6:	f001 f881 	bl	80013dc <SPI_ReadID>
 80002da:	2800      	cmp	r0, #0
 80002dc:	d000      	beq.n	80002e0 <POST+0x38>
 80002de:	e071      	b.n	80003c4 <POST+0x11c>
			switch(conf.MemoryType){
 80002e0:	466b      	mov	r3, sp
 80002e2:	7c5b      	ldrb	r3, [r3, #17]
				sprintf(abuf,"3");
 80002e4:	493b      	ldr	r1, [pc, #236]	; (80003d4 <POST+0x12c>)
			switch(conf.MemoryType){
 80002e6:	2bba      	cmp	r3, #186	; 0xba
 80002e8:	d005      	beq.n	80002f6 <POST+0x4e>
 80002ea:	2bbb      	cmp	r3, #187	; 0xbb
 80002ec:	d002      	beq.n	80002f4 <POST+0x4c>
				sprintf(abuf,"?");
 80002ee:	493a      	ldr	r1, [pc, #232]	; (80003d8 <POST+0x130>)
			switch(conf.MemoryType){
 80002f0:	2b60      	cmp	r3, #96	; 0x60
 80002f2:	d100      	bne.n	80002f6 <POST+0x4e>
				sprintf(abuf,"1.8");
 80002f4:	4939      	ldr	r1, [pc, #228]	; (80003dc <POST+0x134>)
				sprintf(abuf,"?");
 80002f6:	a806      	add	r0, sp, #24
 80002f8:	f006 f932 	bl	8006560 <strcpy>
			switch(conf.MemoryCapacity){
 80002fc:	466b      	mov	r3, sp
 80002fe:	7c98      	ldrb	r0, [r3, #18]
 8000300:	3817      	subs	r0, #23
 8000302:	280b      	cmp	r0, #11
 8000304:	d85c      	bhi.n	80003c0 <POST+0x118>
 8000306:	f7ff ff11 	bl	800012c <__gnu_thumb1_case_uqi>
 800030a:	5759      	.short	0x5759
 800030c:	5b5b5b55 	.word	0x5b5b5b55
 8000310:	535b5b5b 	.word	0x535b5b5b
 8000314:	0651      	.short	0x0651
				sprintf(bbuf,"2Gb");
 8000316:	4932      	ldr	r1, [pc, #200]	; (80003e0 <POST+0x138>)
				sprintf(bbuf,"?");
 8000318:	a808      	add	r0, sp, #32
 800031a:	f006 f921 	bl	8006560 <strcpy>
		sprintf(buf,"%sV %s\r\n",abuf, bbuf);
 800031e:	4931      	ldr	r1, [pc, #196]	; (80003e4 <POST+0x13c>)
 8000320:	ab08      	add	r3, sp, #32
 8000322:	aa06      	add	r2, sp, #24
 8000324:	a80a      	add	r0, sp, #40	; 0x28
 8000326:	f006 f8fb 	bl	8006520 <siprintf>
		UART_putstr(buf);
 800032a:	a80a      	add	r0, sp, #40	; 0x28
 800032c:	f000 fb74 	bl	8000a18 <UART_putstr>
	for(i=0;i<2;i++){
 8000330:	002c      	movs	r4, r5
 8000332:	2e02      	cmp	r6, #2
 8000334:	d1be      	bne.n	80002b4 <POST+0xc>
	clearBuf(buf);
 8000336:	a80a      	add	r0, sp, #40	; 0x28
 8000338:	f7ff ffae 	bl	8000298 <clearBuf>
	abuf[0] = 0x03;
 800033c:	466a      	mov	r2, sp
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,abuf,2,1);
 800033e:	4f2a      	ldr	r7, [pc, #168]	; (80003e8 <POST+0x140>)
	abuf[0] = 0x03;
 8000340:	4b2a      	ldr	r3, [pc, #168]	; (80003ec <POST+0x144>)
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,abuf,2,1);
 8000342:	2140      	movs	r1, #64	; 0x40
	abuf[0] = 0x03;
 8000344:	8313      	strh	r3, [r2, #24]
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,abuf,2,1);
 8000346:	0038      	movs	r0, r7
 8000348:	aa06      	add	r2, sp, #24
 800034a:	0033      	movs	r3, r6
	uint8_t tester = 0x03;
 800034c:	240f      	movs	r4, #15
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,abuf,2,1);
 800034e:	9500      	str	r5, [sp, #0]
 8000350:	f000 f968 	bl	8000624 <SFT_I2C_Master_Transmit>
	uint8_t tester = 0x03;
 8000354:	2303      	movs	r3, #3
 8000356:	446c      	add	r4, sp
	UART_putstr("I/O Expander: ");
 8000358:	4825      	ldr	r0, [pc, #148]	; (80003f0 <POST+0x148>)
	uint8_t tester = 0x03;
 800035a:	7023      	strb	r3, [r4, #0]
	UART_putstr("I/O Expander: ");
 800035c:	f000 fb5c 	bl	8000a18 <UART_putstr>
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,&tester,1,1);
 8000360:	2301      	movs	r3, #1
 8000362:	0022      	movs	r2, r4
 8000364:	2140      	movs	r1, #64	; 0x40
 8000366:	0038      	movs	r0, r7
 8000368:	9500      	str	r5, [sp, #0]
 800036a:	f000 f95b 	bl	8000624 <SFT_I2C_Master_Transmit>
	tester = 0;
 800036e:	2300      	movs	r3, #0
	SFT_I2C_Master_Receive(&si2c1,GPIO_EXPANDER_ADDR,&tester,1,1);
 8000370:	0038      	movs	r0, r7
	tester = 0;
 8000372:	7023      	strb	r3, [r4, #0]
	SFT_I2C_Master_Receive(&si2c1,GPIO_EXPANDER_ADDR,&tester,1,1);
 8000374:	0022      	movs	r2, r4
 8000376:	3301      	adds	r3, #1
 8000378:	2140      	movs	r1, #64	; 0x40
 800037a:	9500      	str	r5, [sp, #0]
 800037c:	f000 f96f 	bl	800065e <SFT_I2C_Master_Receive>
	if(tester==0b01010101)
 8000380:	7823      	ldrb	r3, [r4, #0]
		UART_putstr("OK\r\n");
 8000382:	481c      	ldr	r0, [pc, #112]	; (80003f4 <POST+0x14c>)
	if(tester==0b01010101)
 8000384:	2b55      	cmp	r3, #85	; 0x55
 8000386:	d000      	beq.n	800038a <POST+0xe2>
		UART_putstr("FAILED\r\n");
 8000388:	481b      	ldr	r0, [pc, #108]	; (80003f8 <POST+0x150>)
 800038a:	f000 fb45 	bl	8000a18 <UART_putstr>
	abuf[1] = 0;
 800038e:	466a      	mov	r2, sp
 8000390:	2300      	movs	r3, #0
 8000392:	7653      	strb	r3, [r2, #25]
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,abuf,2,1);
 8000394:	3301      	adds	r3, #1
 8000396:	2140      	movs	r1, #64	; 0x40
 8000398:	0038      	movs	r0, r7
 800039a:	9300      	str	r3, [sp, #0]
 800039c:	aa06      	add	r2, sp, #24
 800039e:	3301      	adds	r3, #1
 80003a0:	f000 f940 	bl	8000624 <SFT_I2C_Master_Transmit>
	DisableSPI();
 80003a4:	f000 fac0 	bl	8000928 <DisableSPI>
}
 80003a8:	b015      	add	sp, #84	; 0x54
 80003aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
				sprintf(bbuf,"1Gb");
 80003ac:	4913      	ldr	r1, [pc, #76]	; (80003fc <POST+0x154>)
 80003ae:	e7b3      	b.n	8000318 <POST+0x70>
				sprintf(bbuf,"512Mb");
 80003b0:	4913      	ldr	r1, [pc, #76]	; (8000400 <POST+0x158>)
 80003b2:	e7b1      	b.n	8000318 <POST+0x70>
				sprintf(bbuf,"256Mb");
 80003b4:	4913      	ldr	r1, [pc, #76]	; (8000404 <POST+0x15c>)
 80003b6:	e7af      	b.n	8000318 <POST+0x70>
				sprintf(bbuf,"128Mb");
 80003b8:	4913      	ldr	r1, [pc, #76]	; (8000408 <POST+0x160>)
 80003ba:	e7ad      	b.n	8000318 <POST+0x70>
				sprintf(bbuf,"64Mb");
 80003bc:	4913      	ldr	r1, [pc, #76]	; (800040c <POST+0x164>)
 80003be:	e7ab      	b.n	8000318 <POST+0x70>
				sprintf(bbuf,"?");
 80003c0:	4905      	ldr	r1, [pc, #20]	; (80003d8 <POST+0x130>)
 80003c2:	e7a9      	b.n	8000318 <POST+0x70>
			sprintf(buf,"FAILED\r\n");
 80003c4:	490c      	ldr	r1, [pc, #48]	; (80003f8 <POST+0x150>)
 80003c6:	a80a      	add	r0, sp, #40	; 0x28
 80003c8:	f006 f8ca 	bl	8006560 <strcpy>
 80003cc:	e7ad      	b.n	800032a <POST+0x82>
 80003ce:	46c0      	nop			; (mov r8, r8)
 80003d0:	08006eb4 	.word	0x08006eb4
 80003d4:	08006ebf 	.word	0x08006ebf
 80003d8:	08006ec5 	.word	0x08006ec5
 80003dc:	08006ec1 	.word	0x08006ec1
 80003e0:	08006ec7 	.word	0x08006ec7
 80003e4:	08006ee6 	.word	0x08006ee6
 80003e8:	20000788 	.word	0x20000788
 80003ec:	00005503 	.word	0x00005503
 80003f0:	08006ef8 	.word	0x08006ef8
 80003f4:	08006f07 	.word	0x08006f07
 80003f8:	08006eef 	.word	0x08006eef
 80003fc:	08006ecb 	.word	0x08006ecb
 8000400:	08006ecf 	.word	0x08006ecf
 8000404:	08006ed5 	.word	0x08006ed5
 8000408:	08006edb 	.word	0x08006edb
 800040c:	08006ee1 	.word	0x08006ee1

08000410 <setLineDirection>:
	}
	setLineDirection(&(hi2c->scl),I2C_OUTPUT|((params)&(I2C_PULLUP)));
	setLineDirection(&(hi2c->sda),I2C_OUTPUT|((params)&(I2C_PULLUP)));
}

void setLineDirection(struct sPinPack *line,uint8_t params){
 8000410:	b530      	push	{r4, r5, lr}
 8000412:	0004      	movs	r4, r0
 8000414:	000d      	movs	r5, r1
 8000416:	b087      	sub	sp, #28
	// 1 - output
	// 0 - input
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000418:	2208      	movs	r2, #8
 800041a:	2100      	movs	r1, #0
 800041c:	a804      	add	r0, sp, #16
 800041e:	f006 f876 	bl	800650e <memset>
	GPIO_InitStruct.Pin = line->GPIO_pin;
 8000422:	6863      	ldr	r3, [r4, #4]
 8000424:	9301      	str	r3, [sp, #4]
	GPIO_InitStruct.Mode = (params & I2C_INPUT)? GPIO_MODE_INPUT : GPIO_MODE_OUTPUT_OD;
 8000426:	2300      	movs	r3, #0
 8000428:	07aa      	lsls	r2, r5, #30
 800042a:	d400      	bmi.n	800042e <setLineDirection+0x1e>
 800042c:	3311      	adds	r3, #17
 800042e:	9302      	str	r3, [sp, #8]
	GPIO_InitStruct.Pull = (params & I2C_PULLUP)? GPIO_PULLUP : GPIO_NOPULL;
 8000430:	2301      	movs	r3, #1
	HAL_GPIO_Init(line->GPIOx, &GPIO_InitStruct);
 8000432:	6820      	ldr	r0, [r4, #0]
	GPIO_InitStruct.Pull = (params & I2C_PULLUP)? GPIO_PULLUP : GPIO_NOPULL;
 8000434:	402b      	ands	r3, r5
	HAL_GPIO_Init(line->GPIOx, &GPIO_InitStruct);
 8000436:	a901      	add	r1, sp, #4
	GPIO_InitStruct.Pull = (params & I2C_PULLUP)? GPIO_PULLUP : GPIO_NOPULL;
 8000438:	9303      	str	r3, [sp, #12]
	HAL_GPIO_Init(line->GPIOx, &GPIO_InitStruct);
 800043a:	f002 f87f 	bl	800253c <HAL_GPIO_Init>
	line->params = params;
 800043e:	7225      	strb	r5, [r4, #8]
}
 8000440:	b007      	add	sp, #28
 8000442:	bd30      	pop	{r4, r5, pc}

08000444 <SFT_I2C_Init>:
void SFT_I2C_Init(GPIO_TypeDef *SCL_GPIOx, uint16_t *SCL_GPIO_pin,GPIO_TypeDef *SDA_GPIOx, uint16_t *SDA_GPIO_pin,I2C_handler *hi2c,uint8_t params){
 8000444:	b510      	push	{r4, lr}
 8000446:	9c02      	ldr	r4, [sp, #8]
	if(hi2c!=NULL){
 8000448:	2c00      	cmp	r4, #0
 800044a:	d003      	beq.n	8000454 <SFT_I2C_Init+0x10>
		hi2c->scl.GPIO_pin = SCL_GPIO_pin;
 800044c:	6061      	str	r1, [r4, #4]
		hi2c->scl.GPIOx = SCL_GPIOx;
 800044e:	6020      	str	r0, [r4, #0]
		hi2c->sda.GPIO_pin = SDA_GPIO_pin;
 8000450:	6123      	str	r3, [r4, #16]
		hi2c->sda.GPIOx = SDA_GPIOx;
 8000452:	60e2      	str	r2, [r4, #12]
	setLineDirection(&(hi2c->scl),I2C_OUTPUT|((params)&(I2C_PULLUP)));
 8000454:	2103      	movs	r1, #3
 8000456:	0020      	movs	r0, r4
 8000458:	4249      	negs	r1, r1
 800045a:	f7ff ffd9 	bl	8000410 <setLineDirection>
	setLineDirection(&(hi2c->sda),I2C_OUTPUT|((params)&(I2C_PULLUP)));
 800045e:	0020      	movs	r0, r4
 8000460:	2103      	movs	r1, #3
 8000462:	300c      	adds	r0, #12
 8000464:	4249      	negs	r1, r1
 8000466:	f7ff ffd3 	bl	8000410 <setLineDirection>
}
 800046a:	bd10      	pop	{r4, pc}

0800046c <startCondition>:

void startCondition(struct Shandler *si2c){
 800046c:	b510      	push	{r4, lr}
 800046e:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,1);
 8000470:	6903      	ldr	r3, [r0, #16]
 8000472:	2201      	movs	r2, #1
 8000474:	b299      	uxth	r1, r3
 8000476:	68c0      	ldr	r0, [r0, #12]
 8000478:	f002 f97e 	bl	8002778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,1);
 800047c:	6863      	ldr	r3, [r4, #4]
 800047e:	2201      	movs	r2, #1
 8000480:	b299      	uxth	r1, r3
 8000482:	6820      	ldr	r0, [r4, #0]
 8000484:	f002 f978 	bl	8002778 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 8000488:	f003 fb3c 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,0);
 800048c:	6923      	ldr	r3, [r4, #16]
 800048e:	2200      	movs	r2, #0
 8000490:	b299      	uxth	r1, r3
 8000492:	68e0      	ldr	r0, [r4, #12]
 8000494:	f002 f970 	bl	8002778 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 8000498:	f003 fb34 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,0);
 800049c:	6863      	ldr	r3, [r4, #4]
 800049e:	2200      	movs	r2, #0
 80004a0:	b299      	uxth	r1, r3
 80004a2:	6820      	ldr	r0, [r4, #0]
 80004a4:	f002 f968 	bl	8002778 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 80004a8:	f003 fb2c 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,1);
 80004ac:	6923      	ldr	r3, [r4, #16]
 80004ae:	2201      	movs	r2, #1
 80004b0:	68e0      	ldr	r0, [r4, #12]
 80004b2:	b299      	uxth	r1, r3
 80004b4:	f002 f960 	bl	8002778 <HAL_GPIO_WritePin>
}
 80004b8:	bd10      	pop	{r4, pc}

080004ba <stopCondition>:

void stopCondition(struct Shandler *si2c){
 80004ba:	b510      	push	{r4, lr}
 80004bc:	0004      	movs	r4, r0
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,0);
 80004be:	6903      	ldr	r3, [r0, #16]
 80004c0:	2200      	movs	r2, #0
 80004c2:	b299      	uxth	r1, r3
 80004c4:	68c0      	ldr	r0, [r0, #12]
 80004c6:	f002 f957 	bl	8002778 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 80004ca:	f003 fb1b 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,1);
 80004ce:	6863      	ldr	r3, [r4, #4]
 80004d0:	2201      	movs	r2, #1
 80004d2:	b299      	uxth	r1, r3
 80004d4:	6820      	ldr	r0, [r4, #0]
 80004d6:	f002 f94f 	bl	8002778 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 80004da:	f003 fb13 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,1);
 80004de:	6923      	ldr	r3, [r4, #16]
 80004e0:	2201      	movs	r2, #1
 80004e2:	68e0      	ldr	r0, [r4, #12]
 80004e4:	b299      	uxth	r1, r3
 80004e6:	f002 f947 	bl	8002778 <HAL_GPIO_WritePin>

}
 80004ea:	bd10      	pop	{r4, pc}

080004ec <sendByte>:

void sendByte(struct Shandler *si2c,uint8_t byte){
 80004ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80004ee:	0004      	movs	r4, r0
 80004f0:	000e      	movs	r6, r1
	int i;
	for(i=7;i>=0;i--){
 80004f2:	2507      	movs	r5, #7
		HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,byte&(1<<i));
 80004f4:	2701      	movs	r7, #1
 80004f6:	003a      	movs	r2, r7
 80004f8:	40aa      	lsls	r2, r5
 80004fa:	6923      	ldr	r3, [r4, #16]
 80004fc:	4032      	ands	r2, r6
 80004fe:	b299      	uxth	r1, r3
 8000500:	68e0      	ldr	r0, [r4, #12]
 8000502:	f002 f939 	bl	8002778 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 8000506:	f003 fafd 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
		I2C_Delay(I2C_DELAY_US);
		HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,1);
 800050a:	6863      	ldr	r3, [r4, #4]
 800050c:	2201      	movs	r2, #1
 800050e:	b299      	uxth	r1, r3
 8000510:	6820      	ldr	r0, [r4, #0]
 8000512:	f002 f931 	bl	8002778 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 8000516:	f003 faf5 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
		I2C_Delay(I2C_DELAY_US);
		HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,0);
 800051a:	6863      	ldr	r3, [r4, #4]
 800051c:	2200      	movs	r2, #0
 800051e:	6820      	ldr	r0, [r4, #0]
 8000520:	b299      	uxth	r1, r3
 8000522:	f002 f929 	bl	8002778 <HAL_GPIO_WritePin>
	for(i=7;i>=0;i--){
 8000526:	3d01      	subs	r5, #1
 8000528:	d2e5      	bcs.n	80004f6 <sendByte+0xa>
	}
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,1);
 800052a:	6923      	ldr	r3, [r4, #16]
 800052c:	2201      	movs	r2, #1
 800052e:	68e0      	ldr	r0, [r4, #12]
 8000530:	b299      	uxth	r1, r3
 8000532:	f002 f921 	bl	8002778 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 8000536:	f003 fae5 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);

}
 800053a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800053c <recvByte>:

uint8_t recvByte(struct Shandler *si2c,uint8_t lastByte){
 800053c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	int i;
	uint8_t byte = 0;
	setLineDirection(&si2c->sda,I2C_INPUT|I2C_PULLUP);
 800053e:	0007      	movs	r7, r0
 8000540:	370c      	adds	r7, #12
uint8_t recvByte(struct Shandler *si2c,uint8_t lastByte){
 8000542:	9101      	str	r1, [sp, #4]
 8000544:	0004      	movs	r4, r0
	setLineDirection(&si2c->sda,I2C_INPUT|I2C_PULLUP);
 8000546:	2103      	movs	r1, #3
 8000548:	0038      	movs	r0, r7
 800054a:	f7ff ff61 	bl	8000410 <setLineDirection>
	uint8_t byte = 0;
 800054e:	2600      	movs	r6, #0
	for(i=7;i>=0;i--){
 8000550:	2507      	movs	r5, #7
		CLOCK_UP;
 8000552:	6863      	ldr	r3, [r4, #4]
 8000554:	2201      	movs	r2, #1
 8000556:	b299      	uxth	r1, r3
 8000558:	6820      	ldr	r0, [r4, #0]
 800055a:	f002 f90d 	bl	8002778 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 800055e:	f003 fad1 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
		I2C_Delay(I2C_DELAY_US);
		byte|=(HAL_GPIO_ReadPin(si2c->sda.GPIOx,si2c->sda.GPIO_pin))<<i;
 8000562:	6923      	ldr	r3, [r4, #16]
 8000564:	68e0      	ldr	r0, [r4, #12]
 8000566:	b299      	uxth	r1, r3
 8000568:	f002 f900 	bl	800276c <HAL_GPIO_ReadPin>
 800056c:	40a8      	lsls	r0, r5
		CLOCK_DOWN;
 800056e:	6863      	ldr	r3, [r4, #4]
		byte|=(HAL_GPIO_ReadPin(si2c->sda.GPIOx,si2c->sda.GPIO_pin))<<i;
 8000570:	4306      	orrs	r6, r0
		CLOCK_DOWN;
 8000572:	2200      	movs	r2, #0
 8000574:	6820      	ldr	r0, [r4, #0]
 8000576:	b299      	uxth	r1, r3
		byte|=(HAL_GPIO_ReadPin(si2c->sda.GPIOx,si2c->sda.GPIO_pin))<<i;
 8000578:	b2f6      	uxtb	r6, r6
		CLOCK_DOWN;
 800057a:	f002 f8fd 	bl	8002778 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 800057e:	f003 fac1 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
	for(i=7;i>=0;i--){
 8000582:	3d01      	subs	r5, #1
 8000584:	d2e5      	bcs.n	8000552 <recvByte+0x16>
		I2C_Delay(I2C_DELAY_US);
	}
	setLineDirection(&si2c->sda,I2C_OUTPUT|I2C_PULLUP);
 8000586:	21fd      	movs	r1, #253	; 0xfd
 8000588:	0038      	movs	r0, r7
 800058a:	f7ff ff41 	bl	8000410 <setLineDirection>
	if(!lastByte)
 800058e:	9b01      	ldr	r3, [sp, #4]
 8000590:	2b00      	cmp	r3, #0
 8000592:	d105      	bne.n	80005a0 <recvByte+0x64>
		HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,ACK);
 8000594:	6923      	ldr	r3, [r4, #16]
 8000596:	9a01      	ldr	r2, [sp, #4]
 8000598:	68e0      	ldr	r0, [r4, #12]
 800059a:	b299      	uxth	r1, r3
 800059c:	f002 f8ec 	bl	8002778 <HAL_GPIO_WritePin>
	CLOCK_UP;
 80005a0:	6863      	ldr	r3, [r4, #4]
 80005a2:	2201      	movs	r2, #1
 80005a4:	b299      	uxth	r1, r3
 80005a6:	6820      	ldr	r0, [r4, #0]
 80005a8:	f002 f8e6 	bl	8002778 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 80005ac:	f003 faaa 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	CLOCK_DOWN;
 80005b0:	6863      	ldr	r3, [r4, #4]
 80005b2:	6820      	ldr	r0, [r4, #0]
 80005b4:	b299      	uxth	r1, r3
 80005b6:	2200      	movs	r2, #0
 80005b8:	f002 f8de 	bl	8002778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,1);
 80005bc:	6923      	ldr	r3, [r4, #16]
 80005be:	2201      	movs	r2, #1
 80005c0:	68e0      	ldr	r0, [r4, #12]
 80005c2:	b299      	uxth	r1, r3
 80005c4:	f002 f8d8 	bl	8002778 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 80005c8:	f003 fa9c 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	return byte;
}
 80005cc:	0030      	movs	r0, r6
 80005ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

080005d0 <readReceipt>:

uint8_t readReceipt(struct Shandler *si2c){
 80005d0:	b570      	push	{r4, r5, r6, lr}
 80005d2:	0004      	movs	r4, r0
	uint8_t result;
	HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,1);
	setLineDirection(&si2c->sda,I2C_INPUT|I2C_PULLUP);
 80005d4:	0026      	movs	r6, r4
	HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,1);
 80005d6:	6843      	ldr	r3, [r0, #4]
 80005d8:	2201      	movs	r2, #1
 80005da:	b299      	uxth	r1, r3
	setLineDirection(&si2c->sda,I2C_INPUT|I2C_PULLUP);
 80005dc:	360c      	adds	r6, #12
	HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,1);
 80005de:	6800      	ldr	r0, [r0, #0]
 80005e0:	f002 f8ca 	bl	8002778 <HAL_GPIO_WritePin>
	setLineDirection(&si2c->sda,I2C_INPUT|I2C_PULLUP);
 80005e4:	0030      	movs	r0, r6
 80005e6:	2103      	movs	r1, #3
 80005e8:	f7ff ff12 	bl	8000410 <setLineDirection>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 80005ec:	f003 fa8a 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	result = HAL_GPIO_ReadPin(si2c->sda.GPIOx,si2c->sda.GPIO_pin);
 80005f0:	6923      	ldr	r3, [r4, #16]
 80005f2:	68e0      	ldr	r0, [r4, #12]
 80005f4:	b299      	uxth	r1, r3
 80005f6:	f002 f8b9 	bl	800276c <HAL_GPIO_ReadPin>
 80005fa:	0005      	movs	r5, r0
	setLineDirection(&si2c->sda,I2C_OUTPUT|I2C_PULLUP);
 80005fc:	21fd      	movs	r1, #253	; 0xfd
 80005fe:	0030      	movs	r0, r6
 8000600:	f7ff ff06 	bl	8000410 <setLineDirection>
	HAL_GPIO_WritePin(si2c->scl.GPIOx,si2c->scl.GPIO_pin,0);
 8000604:	6863      	ldr	r3, [r4, #4]
 8000606:	6820      	ldr	r0, [r4, #0]
 8000608:	b299      	uxth	r1, r3
 800060a:	2200      	movs	r2, #0
 800060c:	f002 f8b4 	bl	8002778 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(si2c->sda.GPIOx,si2c->sda.GPIO_pin,1);
 8000610:	6923      	ldr	r3, [r4, #16]
 8000612:	2201      	movs	r2, #1
 8000614:	68e0      	ldr	r0, [r4, #12]
 8000616:	b299      	uxth	r1, r3
 8000618:	f002 f8ae 	bl	8002778 <HAL_GPIO_WritePin>
	uint32_t value = HAL_RCC_GetSysClockFreq();
 800061c:	f003 fa72 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
	I2C_Delay(I2C_DELAY_US);
	return result;
}
 8000620:	0028      	movs	r0, r5
 8000622:	bd70      	pop	{r4, r5, r6, pc}

08000624 <SFT_I2C_Master_Transmit>:

void SFT_I2C_Master_Transmit(struct Shandler *si2c, uint8_t DevAddress, uint8_t *pData,uint16_t Size, uint8_t timeout){
 8000624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000626:	0005      	movs	r5, r0
 8000628:	000f      	movs	r7, r1
 800062a:	0014      	movs	r4, r2
 800062c:	001e      	movs	r6, r3
	uint16_t i = -1;
	startCondition(si2c);
 800062e:	f7ff ff1d 	bl	800046c <startCondition>
	// address
	sendByte(si2c,DevAddress);
 8000632:	0039      	movs	r1, r7
 8000634:	0028      	movs	r0, r5
 8000636:	f7ff ff59 	bl	80004ec <sendByte>
	// data
	while((readReceipt(si2c) == ACK) && ++i<Size)
 800063a:	19a6      	adds	r6, r4, r6
 800063c:	0028      	movs	r0, r5
 800063e:	f7ff ffc7 	bl	80005d0 <readReceipt>
 8000642:	2800      	cmp	r0, #0
 8000644:	d101      	bne.n	800064a <SFT_I2C_Master_Transmit+0x26>
 8000646:	42b4      	cmp	r4, r6
 8000648:	d103      	bne.n	8000652 <SFT_I2C_Master_Transmit+0x2e>
		sendByte(si2c,pData[i]);
	stopCondition(si2c);
 800064a:	0028      	movs	r0, r5
 800064c:	f7ff ff35 	bl	80004ba <stopCondition>
}
 8000650:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		sendByte(si2c,pData[i]);
 8000652:	7821      	ldrb	r1, [r4, #0]
 8000654:	0028      	movs	r0, r5
 8000656:	f7ff ff49 	bl	80004ec <sendByte>
 800065a:	3401      	adds	r4, #1
 800065c:	e7ee      	b.n	800063c <SFT_I2C_Master_Transmit+0x18>

0800065e <SFT_I2C_Master_Receive>:

void SFT_I2C_Master_Receive (struct Shandler *si2c, uint8_t DevAddress, uint8_t *pData,uint16_t Size, uint8_t timeout){
 800065e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8000660:	000e      	movs	r6, r1
 8000662:	0004      	movs	r4, r0
 8000664:	001d      	movs	r5, r3
 8000666:	9201      	str	r2, [sp, #4]
	uint16_t i = -1;
	startCondition(si2c);
 8000668:	f7ff ff00 	bl	800046c <startCondition>
	// address
	sendByte(si2c,DevAddress|1);
 800066c:	2101      	movs	r1, #1
 800066e:	0020      	movs	r0, r4
 8000670:	4331      	orrs	r1, r6
 8000672:	f7ff ff3b 	bl	80004ec <sendByte>
	readReceipt(si2c);
 8000676:	0020      	movs	r0, r4
 8000678:	f7ff ffaa 	bl	80005d0 <readReceipt>
	// data
	while(++i<Size)
 800067c:	2600      	movs	r6, #0
 800067e:	42ae      	cmp	r6, r5
 8000680:	d103      	bne.n	800068a <SFT_I2C_Master_Receive+0x2c>
		pData[i] = recvByte(si2c,(i+1==Size));
	stopCondition(si2c);
 8000682:	0020      	movs	r0, r4
 8000684:	f7ff ff19 	bl	80004ba <stopCondition>
}
 8000688:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
		pData[i] = recvByte(si2c,(i+1==Size));
 800068a:	1c77      	adds	r7, r6, #1
 800068c:	1be9      	subs	r1, r5, r7
 800068e:	424b      	negs	r3, r1
 8000690:	4159      	adcs	r1, r3
 8000692:	0020      	movs	r0, r4
 8000694:	b2c9      	uxtb	r1, r1
 8000696:	f7ff ff51 	bl	800053c <recvByte>
 800069a:	9b01      	ldr	r3, [sp, #4]
 800069c:	5598      	strb	r0, [r3, r6]
 800069e:	003e      	movs	r6, r7
 80006a0:	e7ed      	b.n	800067e <SFT_I2C_Master_Receive+0x20>
	...

080006a4 <readWord>:
	}
}

uint32_t readWord(){
	uint32_t word = 0;
	HAL_Delay(150);
 80006a4:	2096      	movs	r0, #150	; 0x96
uint32_t readWord(){
 80006a6:	b510      	push	{r4, lr}
	HAL_Delay(150);
 80006a8:	f001 fc88 	bl	8001fbc <HAL_Delay>
	char buf1[12];
	if (((I2C1->ISR) & I2C_ISR_RXNE)==I2C_ISR_RXNE){
 80006ac:	4b04      	ldr	r3, [pc, #16]	; (80006c0 <readWord+0x1c>)
 80006ae:	2204      	movs	r2, #4
 80006b0:	6999      	ldr	r1, [r3, #24]
 80006b2:	0008      	movs	r0, r1
 80006b4:	4010      	ands	r0, r2
 80006b6:	4211      	tst	r1, r2
 80006b8:	d000      	beq.n	80006bc <readWord+0x18>
		word = I2C1->RXDR;
 80006ba:	6a58      	ldr	r0, [r3, #36]	; 0x24
//		sprintf(buf1, "A RX BUF: %d", word);
//		UART_putstrln(buf1);

	}
	return word;
}
 80006bc:	bd10      	pop	{r4, pc}
 80006be:	46c0      	nop			; (mov r8, r8)
 80006c0:	40005400 	.word	0x40005400

080006c4 <writeWord>:
void writeWord(uint8_t word){
	if ((I2C1->ISR & I2C_ISR_TXIS) == I2C_ISR_TXIS){
 80006c4:	2102      	movs	r1, #2
 80006c6:	4b04      	ldr	r3, [pc, #16]	; (80006d8 <writeWord+0x14>)
 80006c8:	699a      	ldr	r2, [r3, #24]
 80006ca:	420a      	tst	r2, r1
 80006cc:	d003      	beq.n	80006d6 <writeWord+0x12>
		I2C1->CR1 &=~ I2C_CR1_TXIE;
 80006ce:	681a      	ldr	r2, [r3, #0]
 80006d0:	438a      	bics	r2, r1
 80006d2:	601a      	str	r2, [r3, #0]
		I2C1->TXDR = word;
 80006d4:	6298      	str	r0, [r3, #40]	; 0x28
	}
}
 80006d6:	4770      	bx	lr
 80006d8:	40005400 	.word	0x40005400

080006dc <clearHi2c>:


void clearHi2c(){
	hi2c.bufIdx = 0;
 80006dc:	21e7      	movs	r1, #231	; 0xe7
 80006de:	4a07      	ldr	r2, [pc, #28]	; (80006fc <clearHi2c+0x20>)
 80006e0:	8813      	ldrh	r3, [r2, #0]
 80006e2:	400b      	ands	r3, r1
 80006e4:	8013      	strh	r3, [r2, #0]
	hi2c.address = 0;

	I2C1->CR1 &= ~I2C_CR1_PE;
 80006e6:	2201      	movs	r2, #1
 80006e8:	4b05      	ldr	r3, [pc, #20]	; (8000700 <clearHi2c+0x24>)
 80006ea:	6819      	ldr	r1, [r3, #0]
 80006ec:	4391      	bics	r1, r2
 80006ee:	6019      	str	r1, [r3, #0]
	asm("nop");
 80006f0:	46c0      	nop			; (mov r8, r8)
	asm("nop");
 80006f2:	46c0      	nop			; (mov r8, r8)
	I2C1->CR1 |= I2C_CR1_PE;
 80006f4:	6819      	ldr	r1, [r3, #0]
 80006f6:	430a      	orrs	r2, r1
 80006f8:	601a      	str	r2, [r3, #0]
}
 80006fa:	4770      	bx	lr
 80006fc:	2000077c 	.word	0x2000077c
 8000700:	40005400 	.word	0x40005400

08000704 <i2cSM>:
void i2cSM(){
 8000704:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000706:	b08d      	sub	sp, #52	; 0x34
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000708:	2214      	movs	r2, #20
 800070a:	2100      	movs	r1, #0
 800070c:	a807      	add	r0, sp, #28
 800070e:	f005 fefe 	bl	800650e <memset>
	if (((I2C1->ISR) & I2C_ISR_ADDR) == I2C_ISR_ADDR){
 8000712:	2208      	movs	r2, #8
 8000714:	4b79      	ldr	r3, [pc, #484]	; (80008fc <i2cSM+0x1f8>)
 8000716:	4c7a      	ldr	r4, [pc, #488]	; (8000900 <i2cSM+0x1fc>)
 8000718:	6999      	ldr	r1, [r3, #24]
 800071a:	4211      	tst	r1, r2
 800071c:	d01b      	beq.n	8000756 <i2cSM+0x52>
	   I2C1->ICR |= I2C_ICR_ADDRCF;
 800071e:	69d9      	ldr	r1, [r3, #28]
 8000720:	430a      	orrs	r2, r1
 8000722:	61da      	str	r2, [r3, #28]
	   if ((I2C1->ISR & I2C_ISR_DIR) == I2C_ISR_DIR){
 8000724:	699a      	ldr	r2, [r3, #24]
 8000726:	2107      	movs	r1, #7
 8000728:	03d2      	lsls	r2, r2, #15
 800072a:	d50b      	bpl.n	8000744 <i2cSM+0x40>
		   hi2c.state=1;
 800072c:	7822      	ldrb	r2, [r4, #0]
 800072e:	438a      	bics	r2, r1
 8000730:	0011      	movs	r1, r2
 8000732:	2201      	movs	r2, #1
 8000734:	430a      	orrs	r2, r1
 8000736:	7022      	strb	r2, [r4, #0]
		   I2C1->CR1 |= I2C_CR1_TXIE;
 8000738:	2202      	movs	r2, #2
 800073a:	6819      	ldr	r1, [r3, #0]
 800073c:	430a      	orrs	r2, r1
 800073e:	601a      	str	r2, [r3, #0]
}
 8000740:	b00d      	add	sp, #52	; 0x34
 8000742:	bdf0      	pop	{r4, r5, r6, r7, pc}
		   hi2c.state=3;
 8000744:	2303      	movs	r3, #3
 8000746:	7822      	ldrb	r2, [r4, #0]
 8000748:	438a      	bics	r2, r1
 800074a:	4313      	orrs	r3, r2
 800074c:	7023      	strb	r3, [r4, #0]
		   hi2c.address = readWord();
 800074e:	f7ff ffa9 	bl	80006a4 <readWord>
 8000752:	7060      	strb	r0, [r4, #1]
 8000754:	e7f4      	b.n	8000740 <i2cSM+0x3c>
		sprintf(buf,"state: %d address: %x",hi2c.state, hi2c.address);
 8000756:	7822      	ldrb	r2, [r4, #0]
 8000758:	7863      	ldrb	r3, [r4, #1]
 800075a:	0752      	lsls	r2, r2, #29
 800075c:	4969      	ldr	r1, [pc, #420]	; (8000904 <i2cSM+0x200>)
 800075e:	0f52      	lsrs	r2, r2, #29
 8000760:	a803      	add	r0, sp, #12
 8000762:	f005 fedd 	bl	8006520 <siprintf>
		if(hi2c.state!=0){
 8000766:	7823      	ldrb	r3, [r4, #0]
 8000768:	075b      	lsls	r3, r3, #29
 800076a:	d002      	beq.n	8000772 <i2cSM+0x6e>
			UART_putstrln(buf);
 800076c:	a803      	add	r0, sp, #12
 800076e:	f000 f95f 	bl	8000a30 <UART_putstrln>
		switch(hi2c.state){
 8000772:	7820      	ldrb	r0, [r4, #0]
 8000774:	0740      	lsls	r0, r0, #29
 8000776:	0f40      	lsrs	r0, r0, #29
 8000778:	3801      	subs	r0, #1
 800077a:	2804      	cmp	r0, #4
 800077c:	d8e0      	bhi.n	8000740 <i2cSM+0x3c>
 800077e:	2507      	movs	r5, #7
 8000780:	f7ff fcd4 	bl	800012c <__gnu_thumb1_case_uqi>
 8000784:	61580e03 	.word	0x61580e03
 8000788:	b6          	.byte	0xb6
 8000789:	00          	.byte	0x00
			UART_putstrln("STM->Baikal"); //i2cget
 800078a:	485f      	ldr	r0, [pc, #380]	; (8000908 <i2cSM+0x204>)
 800078c:	f000 f950 	bl	8000a30 <UART_putstrln>
			hi2c.state = 2;
 8000790:	2207      	movs	r2, #7
 8000792:	7823      	ldrb	r3, [r4, #0]
 8000794:	4393      	bics	r3, r2
 8000796:	001a      	movs	r2, r3
 8000798:	2302      	movs	r3, #2
			hi2c.state = 5;
 800079a:	4313      	orrs	r3, r2
			hi2c.state = 0;
 800079c:	7023      	strb	r3, [r4, #0]
}
 800079e:	e7cf      	b.n	8000740 <i2cSM+0x3c>
			hi2c.state = 5;
 80007a0:	2305      	movs	r3, #5
 80007a2:	7822      	ldrb	r2, [r4, #0]
 80007a4:	7860      	ldrb	r0, [r4, #1]
 80007a6:	43aa      	bics	r2, r5
 80007a8:	4313      	orrs	r3, r2
 80007aa:	7023      	strb	r3, [r4, #0]
			switch(hi2c.address){
 80007ac:	280e      	cmp	r0, #14
 80007ae:	d83d      	bhi.n	800082c <i2cSM+0x128>
 80007b0:	f7ff fcbc 	bl	800012c <__gnu_thumb1_case_uqi>
 80007b4:	3c3e2f0d 	.word	0x3c3e2f0d
 80007b8:	3c3c3c3c 	.word	0x3c3c3c3c
 80007bc:	3c3c3c3c 	.word	0x3c3c3c3c
 80007c0:	0808      	.short	0x0808
 80007c2:	08          	.byte	0x08
 80007c3:	00          	.byte	0x00
 80007c4:	2400      	movs	r4, #0
			writeWord(byte);
 80007c6:	0020      	movs	r0, r4
 80007c8:	f7ff ff7c 	bl	80006c4 <writeWord>
			break;
 80007cc:	e7b8      	b.n	8000740 <i2cSM+0x3c>
					byte = I2C_RREG0;
 80007ce:	4a4f      	ldr	r2, [pc, #316]	; (800090c <i2cSM+0x208>)
 80007d0:	4b4f      	ldr	r3, [pc, #316]	; (8000910 <i2cSM+0x20c>)
					sprintf(buf,"REG#0 DATA: %u",byte);
 80007d2:	4950      	ldr	r1, [pc, #320]	; (8000914 <i2cSM+0x210>)
					byte = I2C_RREG0;
 80007d4:	5cd3      	ldrb	r3, [r2, r3]
 80007d6:	065a      	lsls	r2, r3, #25
 80007d8:	09dc      	lsrs	r4, r3, #7
 80007da:	0fd2      	lsrs	r2, r2, #31
 80007dc:	0112      	lsls	r2, r2, #4
 80007de:	01e4      	lsls	r4, r4, #7
 80007e0:	4314      	orrs	r4, r2
 80007e2:	079a      	lsls	r2, r3, #30
 80007e4:	0fd2      	lsrs	r2, r2, #31
 80007e6:	4314      	orrs	r4, r2
 80007e8:	069a      	lsls	r2, r3, #26
 80007ea:	0fd2      	lsrs	r2, r2, #31
 80007ec:	00d2      	lsls	r2, r2, #3
 80007ee:	4314      	orrs	r4, r2
 80007f0:	071a      	lsls	r2, r3, #28
 80007f2:	0fd2      	lsrs	r2, r2, #31
 80007f4:	075b      	lsls	r3, r3, #29
 80007f6:	0092      	lsls	r2, r2, #2
 80007f8:	0fdb      	lsrs	r3, r3, #31
 80007fa:	4314      	orrs	r4, r2
 80007fc:	005b      	lsls	r3, r3, #1
 80007fe:	431c      	orrs	r4, r3
 8000800:	b2e4      	uxtb	r4, r4
					sprintf(buf,"REG#0 DATA: %u",byte);
 8000802:	0022      	movs	r2, r4
					sprintf(buf,"REG#1 DATA: %u",byte);
 8000804:	a803      	add	r0, sp, #12
 8000806:	f005 fe8b 	bl	8006520 <siprintf>
					UART_putstrln(buf);
 800080a:	a803      	add	r0, sp, #12
 800080c:	f000 f910 	bl	8000a30 <UART_putstrln>
				break;
 8000810:	e7d9      	b.n	80007c6 <i2cSM+0xc2>
					byte = I2C_RREG1;
 8000812:	23b6      	movs	r3, #182	; 0xb6
 8000814:	4a3d      	ldr	r2, [pc, #244]	; (800090c <i2cSM+0x208>)
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	5cd3      	ldrb	r3, [r2, r3]
 800081a:	07da      	lsls	r2, r3, #31
 800081c:	0fd2      	lsrs	r2, r2, #31
 800081e:	0091      	lsls	r1, r2, #2
 8000820:	075a      	lsls	r2, r3, #29
 8000822:	0f92      	lsrs	r2, r2, #30
 8000824:	430a      	orrs	r2, r1
 8000826:	b2d4      	uxtb	r4, r2
					sprintf(buf,"REG#1 DATA: %u",byte);
 8000828:	493b      	ldr	r1, [pc, #236]	; (8000918 <i2cSM+0x214>)
 800082a:	e7eb      	b.n	8000804 <i2cSM+0x100>
					byte = 0xad;
 800082c:	24ad      	movs	r4, #173	; 0xad
				break;
 800082e:	e7ca      	b.n	80007c6 <i2cSM+0xc2>
					byte = I2C_RREG2;
 8000830:	2428      	movs	r4, #40	; 0x28
 8000832:	e7c8      	b.n	80007c6 <i2cSM+0xc2>
			UART_putstrln("Baikal->STM"); //i2cset
 8000834:	4839      	ldr	r0, [pc, #228]	; (800091c <i2cSM+0x218>)
 8000836:	f000 f8fb 	bl	8000a30 <UART_putstrln>
			hi2c.state = 4;
 800083a:	2207      	movs	r2, #7
 800083c:	7823      	ldrb	r3, [r4, #0]
 800083e:	4393      	bics	r3, r2
 8000840:	001a      	movs	r2, r3
 8000842:	2304      	movs	r3, #4
 8000844:	e7a9      	b.n	800079a <i2cSM+0x96>
			byte = readWord();
 8000846:	f7ff ff2d 	bl	80006a4 <readWord>
			switch(hi2c.address){
 800084a:	7863      	ldrb	r3, [r4, #1]
			byte = readWord();
 800084c:	0005      	movs	r5, r0
 800084e:	b2c0      	uxtb	r0, r0
			switch(hi2c.address){
 8000850:	2b04      	cmp	r3, #4
 8000852:	d00c      	beq.n	800086e <i2cSM+0x16a>
 8000854:	d809      	bhi.n	800086a <i2cSM+0x166>
 8000856:	2b00      	cmp	r3, #0
 8000858:	d00c      	beq.n	8000874 <i2cSM+0x170>
 800085a:	2b03      	cmp	r3, #3
 800085c:	d00a      	beq.n	8000874 <i2cSM+0x170>
			hi2c.state = 5;
 800085e:	2207      	movs	r2, #7
 8000860:	7823      	ldrb	r3, [r4, #0]
 8000862:	4393      	bics	r3, r2
 8000864:	001a      	movs	r2, r3
 8000866:	2305      	movs	r3, #5
 8000868:	e797      	b.n	800079a <i2cSM+0x96>
 800086a:	2b0c      	cmp	r3, #12
 800086c:	d1f7      	bne.n	800085e <i2cSM+0x15a>
					confReg0 = byte;
 800086e:	4b2c      	ldr	r3, [pc, #176]	; (8000920 <i2cSM+0x21c>)
 8000870:	7018      	strb	r0, [r3, #0]
 8000872:	e7f4      	b.n	800085e <i2cSM+0x15a>
					SysCntrl.stmbootsel = (byte&(1<<I2C_BOOTPIN_POS))?1:0;
 8000874:	08aa      	lsrs	r2, r5, #2
 8000876:	0013      	movs	r3, r2
 8000878:	2201      	movs	r2, #1
					SysCntrl.bootloaderMode = (byte&(1<<I2C_BOOTLDR_POS))?1:0;
 800087a:	09c0      	lsrs	r0, r0, #7
					SysCntrl.stmbootsel = (byte&(1<<I2C_BOOTPIN_POS))?1:0;
 800087c:	4013      	ands	r3, r2
 800087e:	01c0      	lsls	r0, r0, #7
 8000880:	00db      	lsls	r3, r3, #3
 8000882:	4303      	orrs	r3, r0
 8000884:	2077      	movs	r0, #119	; 0x77
 8000886:	4922      	ldr	r1, [pc, #136]	; (8000910 <i2cSM+0x20c>)
 8000888:	4e20      	ldr	r6, [pc, #128]	; (800090c <i2cSM+0x208>)
 800088a:	9101      	str	r1, [sp, #4]
 800088c:	5c72      	ldrb	r2, [r6, r1]
 800088e:	4002      	ands	r2, r0
 8000890:	4313      	orrs	r3, r2
					if(SysCntrl.stmbootsel){
 8000892:	001f      	movs	r7, r3
 8000894:	386f      	subs	r0, #111	; 0x6f
 8000896:	4007      	ands	r7, r0
 8000898:	003a      	movs	r2, r7
 800089a:	2780      	movs	r7, #128	; 0x80
 800089c:	007f      	lsls	r7, r7, #1
					SysCntrl.stmbootsel = (byte&(1<<I2C_BOOTPIN_POS))?1:0;
 800089e:	5473      	strb	r3, [r6, r1]
						GPIO_InitStruct.Pin = GPIO_PIN_8;
 80008a0:	9707      	str	r7, [sp, #28]
					if(SysCntrl.stmbootsel){
 80008a2:	4203      	tst	r3, r0
 80008a4:	d01d      	beq.n	80008e2 <i2cSM+0x1de>
						GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008a6:	2201      	movs	r2, #1
						HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008a8:	481e      	ldr	r0, [pc, #120]	; (8000924 <i2cSM+0x220>)
 80008aa:	a907      	add	r1, sp, #28
						GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008ac:	9208      	str	r2, [sp, #32]
						HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ae:	f001 fe45 	bl	800253c <HAL_GPIO_Init>
						HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, 1);
 80008b2:	2201      	movs	r2, #1
 80008b4:	0039      	movs	r1, r7
 80008b6:	481b      	ldr	r0, [pc, #108]	; (8000924 <i2cSM+0x220>)
 80008b8:	f001 ff5e 	bl	8002778 <HAL_GPIO_WritePin>
					if((byte&(1<<I2C_WDOG_POS))?1:0)
 80008bc:	072b      	lsls	r3, r5, #28
 80008be:	d503      	bpl.n	80008c8 <i2cSM+0x1c4>
						SysCntrl.WatchdogTimer = 0;
 80008c0:	23b7      	movs	r3, #183	; 0xb7
 80008c2:	2200      	movs	r2, #0
 80008c4:	009b      	lsls	r3, r3, #2
 80008c6:	52f2      	strh	r2, [r6, r3]
					SysCntrl.intEn = (byte&(1<<I2C_INTEN_POS))?1:0;
 80008c8:	9b01      	ldr	r3, [sp, #4]
 80008ca:	06ed      	lsls	r5, r5, #27
 80008cc:	5cf0      	ldrb	r0, [r6, r3]
 80008ce:	2340      	movs	r3, #64	; 0x40
 80008d0:	0fed      	lsrs	r5, r5, #31
 80008d2:	4398      	bics	r0, r3
 80008d4:	01ad      	lsls	r5, r5, #6
 80008d6:	9b01      	ldr	r3, [sp, #4]
 80008d8:	4305      	orrs	r5, r0
 80008da:	54f5      	strb	r5, [r6, r3]
					writeConfig();
 80008dc:	f000 ff56 	bl	800178c <writeConfig>
				break;
 80008e0:	e7bd      	b.n	800085e <i2cSM+0x15a>
						HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008e2:	4810      	ldr	r0, [pc, #64]	; (8000924 <i2cSM+0x220>)
 80008e4:	a907      	add	r1, sp, #28
						GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008e6:	9208      	str	r2, [sp, #32]
						GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e8:	9209      	str	r2, [sp, #36]	; 0x24
						HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ea:	f001 fe27 	bl	800253c <HAL_GPIO_Init>
 80008ee:	e7e5      	b.n	80008bc <i2cSM+0x1b8>
			clearHi2c();
 80008f0:	f7ff fef4 	bl	80006dc <clearHi2c>
			hi2c.state = 0;
 80008f4:	7823      	ldrb	r3, [r4, #0]
 80008f6:	43ab      	bics	r3, r5
 80008f8:	e750      	b.n	800079c <i2cSM+0x98>
 80008fa:	46c0      	nop			; (mov r8, r8)
 80008fc:	40005400 	.word	0x40005400
 8000900:	2000077c 	.word	0x2000077c
 8000904:	08006f0c 	.word	0x08006f0c
 8000908:	08006f22 	.word	0x08006f22
 800090c:	2000049c 	.word	0x2000049c
 8000910:	000002da 	.word	0x000002da
 8000914:	08006f2e 	.word	0x08006f2e
 8000918:	08006f3d 	.word	0x08006f3d
 800091c:	08006f4c 	.word	0x08006f4c
 8000920:	20000784 	.word	0x20000784
 8000924:	48000400 	.word	0x48000400

08000928 <DisableSPI>:
	Set_CS(0);
	Set_CS(1);

}

void DisableSPI() {
 8000928:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}

	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800092a:	2214      	movs	r2, #20
 800092c:	2100      	movs	r1, #0
 800092e:	a801      	add	r0, sp, #4
 8000930:	f005 fded 	bl	800650e <memset>

	HAL_SPI_DeInit(&hspi1);
 8000934:	4806      	ldr	r0, [pc, #24]	; (8000950 <DisableSPI+0x28>)
 8000936:	f003 fc17 	bl	8004168 <HAL_SPI_DeInit>
	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800093a:	2309      	movs	r3, #9
 800093c:	9301      	str	r3, [sp, #4]
  	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800093e:	2300      	movs	r3, #0
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
  	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000940:	4804      	ldr	r0, [pc, #16]	; (8000954 <DisableSPI+0x2c>)
 8000942:	a901      	add	r1, sp, #4
  	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000944:	9302      	str	r3, [sp, #8]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000946:	9303      	str	r3, [sp, #12]
  	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000948:	f001 fdf8 	bl	800253c <HAL_GPIO_Init>

}
 800094c:	b007      	add	sp, #28
 800094e:	bd00      	pop	{pc}
 8000950:	200007ec 	.word	0x200007ec
 8000954:	48000400 	.word	0x48000400

08000958 <SetI2C_Mask>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */


void SetI2C_Mask(uint8_t mask) {
 8000958:	b507      	push	{r0, r1, r2, lr}
	SysCntrl.i2c_bt[1] |= mask;
 800095a:	4b06      	ldr	r3, [pc, #24]	; (8000974 <SetI2C_Mask+0x1c>)
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR, SysCntrl.i2c_bt,2,1);
 800095c:	2140      	movs	r1, #64	; 0x40
	SysCntrl.i2c_bt[1] |= mask;
 800095e:	795a      	ldrb	r2, [r3, #5]
 8000960:	4310      	orrs	r0, r2
 8000962:	7158      	strb	r0, [r3, #5]
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR, SysCntrl.i2c_bt,2,1);
 8000964:	2301      	movs	r3, #1
 8000966:	4a04      	ldr	r2, [pc, #16]	; (8000978 <SetI2C_Mask+0x20>)
 8000968:	9300      	str	r3, [sp, #0]
 800096a:	4804      	ldr	r0, [pc, #16]	; (800097c <SetI2C_Mask+0x24>)
 800096c:	18db      	adds	r3, r3, r3
 800096e:	f7ff fe59 	bl	8000624 <SFT_I2C_Master_Transmit>
}
 8000972:	bd07      	pop	{r0, r1, r2, pc}
 8000974:	2000049c 	.word	0x2000049c
 8000978:	200004a0 	.word	0x200004a0
 800097c:	20000788 	.word	0x20000788

08000980 <ClrI2C_Mask>:
void ClrI2C_Mask(uint8_t mask) {
 8000980:	b507      	push	{r0, r1, r2, lr}
	SysCntrl.i2c_bt[1] &= ~mask;
 8000982:	4a06      	ldr	r2, [pc, #24]	; (800099c <ClrI2C_Mask+0x1c>)
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR, SysCntrl.i2c_bt,2,1);
 8000984:	2140      	movs	r1, #64	; 0x40
	SysCntrl.i2c_bt[1] &= ~mask;
 8000986:	7953      	ldrb	r3, [r2, #5]
 8000988:	4383      	bics	r3, r0
 800098a:	7153      	strb	r3, [r2, #5]
	SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR, SysCntrl.i2c_bt,2,1);
 800098c:	2301      	movs	r3, #1
 800098e:	4a04      	ldr	r2, [pc, #16]	; (80009a0 <ClrI2C_Mask+0x20>)
 8000990:	9300      	str	r3, [sp, #0]
 8000992:	4804      	ldr	r0, [pc, #16]	; (80009a4 <ClrI2C_Mask+0x24>)
 8000994:	18db      	adds	r3, r3, r3
 8000996:	f7ff fe45 	bl	8000624 <SFT_I2C_Master_Transmit>
}
 800099a:	bd07      	pop	{r0, r1, r2, pc}
 800099c:	2000049c 	.word	0x2000049c
 80009a0:	200004a0 	.word	0x200004a0
 80009a4:	20000788 	.word	0x20000788

080009a8 <Set_CS>:

void Set_CS(uint8_t cs) {
 80009a8:	0002      	movs	r2, r0
 80009aa:	b510      	push	{r4, lr}
	if(cs == 0)
 80009ac:	2800      	cmp	r0, #0
 80009ae:	d105      	bne.n	80009bc <Set_CS+0x14>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_SET);
 80009b0:	3201      	adds	r2, #1
 80009b2:	0011      	movs	r1, r2
	if(cs == 1)
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 80009b4:	4803      	ldr	r0, [pc, #12]	; (80009c4 <Set_CS+0x1c>)
 80009b6:	f001 fedf 	bl	8002778 <HAL_GPIO_WritePin>

}
 80009ba:	bd10      	pop	{r4, pc}
	if(cs == 1)
 80009bc:	2801      	cmp	r0, #1
 80009be:	d1fc      	bne.n	80009ba <Set_CS+0x12>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 80009c0:	2108      	movs	r1, #8
 80009c2:	e7f7      	b.n	80009b4 <Set_CS+0xc>
 80009c4:	48000400 	.word	0x48000400

080009c8 <Clr_CS>:
void Clr_CS(uint8_t cs) {
 80009c8:	0002      	movs	r2, r0
	if(cs == 0)
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_0,GPIO_PIN_RESET);
 80009ca:	2101      	movs	r1, #1
void Clr_CS(uint8_t cs) {
 80009cc:	b510      	push	{r4, lr}
	if(cs == 0)
 80009ce:	2800      	cmp	r0, #0
 80009d0:	d003      	beq.n	80009da <Clr_CS+0x12>
	if(cs == 1)
 80009d2:	2801      	cmp	r0, #1
 80009d4:	d104      	bne.n	80009e0 <Clr_CS+0x18>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2108      	movs	r1, #8
 80009da:	4802      	ldr	r0, [pc, #8]	; (80009e4 <Clr_CS+0x1c>)
 80009dc:	f001 fecc 	bl	8002778 <HAL_GPIO_WritePin>

}
 80009e0:	bd10      	pop	{r4, pc}
 80009e2:	46c0      	nop			; (mov r8, r8)
 80009e4:	48000400 	.word	0x48000400

080009e8 <Test_RxPacket>:


void Test_RxPacket(uint8_t *Buf,uint32_t Len) {
 80009e8:	b5f0      	push	{r4, r5, r6, r7, lr}
	uint32_t idx;
	idx = 0;
	while(Len!=0) {
		SysCntrl.uart_rx_buf[SysCntrl.rx_head++] = Buf[idx++];
 80009ea:	4d0a      	ldr	r5, [pc, #40]	; (8000a14 <Test_RxPacket+0x2c>)
		SysCntrl.rx_head &= RX_BUF_SIZE-1;
 80009ec:	26ff      	movs	r6, #255	; 0xff
		SysCntrl.uart_rx_buf[SysCntrl.rx_head++] = Buf[idx++];
 80009ee:	002c      	movs	r4, r5
 80009f0:	1841      	adds	r1, r0, r1
 80009f2:	34fe      	adds	r4, #254	; 0xfe
	while(Len!=0) {
 80009f4:	4288      	cmp	r0, r1
 80009f6:	d100      	bne.n	80009fa <Test_RxPacket+0x12>
		Len--;
	}
}
 80009f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		SysCntrl.uart_rx_buf[SysCntrl.rx_head++] = Buf[idx++];
 80009fa:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80009fc:	1c53      	adds	r3, r2, #1
 80009fe:	b29b      	uxth	r3, r3
 8000a00:	8563      	strh	r3, [r4, #42]	; 0x2a
 8000a02:	7807      	ldrb	r7, [r0, #0]
 8000a04:	18aa      	adds	r2, r5, r2
 8000a06:	3208      	adds	r2, #8
		SysCntrl.rx_head &= RX_BUF_SIZE-1;
 8000a08:	4033      	ands	r3, r6
		SysCntrl.uart_rx_buf[SysCntrl.rx_head++] = Buf[idx++];
 8000a0a:	77d7      	strb	r7, [r2, #31]
		SysCntrl.rx_head &= RX_BUF_SIZE-1;
 8000a0c:	8563      	strh	r3, [r4, #42]	; 0x2a
		Len--;
 8000a0e:	3001      	adds	r0, #1
 8000a10:	e7f0      	b.n	80009f4 <Test_RxPacket+0xc>
 8000a12:	46c0      	nop			; (mov r8, r8)
 8000a14:	2000049c 	.word	0x2000049c

08000a18 <UART_putstr>:

void UART_putstr(char *str){
 8000a18:	b510      	push	{r4, lr}
 8000a1a:	0004      	movs	r4, r0
	while(CDC_Transmit_FS((uint8_t*)str,strlen(str)) != USBD_OK);
 8000a1c:	0020      	movs	r0, r4
 8000a1e:	f7ff fb7d 	bl	800011c <strlen>
 8000a22:	b281      	uxth	r1, r0
 8000a24:	0020      	movs	r0, r4
 8000a26:	f005 fb49 	bl	80060bc <CDC_Transmit_FS>
 8000a2a:	2800      	cmp	r0, #0
 8000a2c:	d1f6      	bne.n	8000a1c <UART_putstr+0x4>
}
 8000a2e:	bd10      	pop	{r4, pc}

08000a30 <UART_putstrln>:


// ПРОВЕРИТЬ
void UART_putstrln(char *str){
 8000a30:	b510      	push	{r4, lr}
 8000a32:	0004      	movs	r4, r0
	HAL_Delay(1);
 8000a34:	2001      	movs	r0, #1
 8000a36:	f001 fac1 	bl	8001fbc <HAL_Delay>
	if(str!=0)
 8000a3a:	2c00      	cmp	r4, #0
 8000a3c:	d008      	beq.n	8000a50 <UART_putstrln+0x20>
		while(CDC_Transmit_FS((uint8_t*)str,strlen(str)) != USBD_OK);
 8000a3e:	0020      	movs	r0, r4
 8000a40:	f7ff fb6c 	bl	800011c <strlen>
 8000a44:	b281      	uxth	r1, r0
 8000a46:	0020      	movs	r0, r4
 8000a48:	f005 fb38 	bl	80060bc <CDC_Transmit_FS>
 8000a4c:	2800      	cmp	r0, #0
 8000a4e:	d1f6      	bne.n	8000a3e <UART_putstrln+0xe>
	HAL_Delay(1);
 8000a50:	2001      	movs	r0, #1
 8000a52:	f001 fab3 	bl	8001fbc <HAL_Delay>
	while(CDC_Transmit_FS((uint8_t*)"\r\n",3) != USBD_OK);
 8000a56:	2103      	movs	r1, #3
 8000a58:	4802      	ldr	r0, [pc, #8]	; (8000a64 <UART_putstrln+0x34>)
 8000a5a:	f005 fb2f 	bl	80060bc <CDC_Transmit_FS>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	d1f9      	bne.n	8000a56 <UART_putstrln+0x26>
}
 8000a62:	bd10      	pop	{r4, pc}
 8000a64:	08006ef5 	.word	0x08006ef5

08000a68 <UART_SendByte>:


void UART_SendByte(uint8_t bt) {
 8000a68:	b513      	push	{r0, r1, r4, lr}
 8000a6a:	466b      	mov	r3, sp
 8000a6c:	1ddc      	adds	r4, r3, #7
 8000a6e:	7020      	strb	r0, [r4, #0]
	while(CDC_Transmit_FS(&bt,1) != USBD_OK);
 8000a70:	2101      	movs	r1, #1
 8000a72:	0020      	movs	r0, r4
 8000a74:	f005 fb22 	bl	80060bc <CDC_Transmit_FS>
 8000a78:	2800      	cmp	r0, #0
 8000a7a:	d1f9      	bne.n	8000a70 <UART_SendByte+0x8>
}
 8000a7c:	bd13      	pop	{r0, r1, r4, pc}
	...

08000a80 <ReadUartNonBlock>:

int ReadUartNonBlock(uint8_t *buf,int size) {
 8000a80:	b5f0      	push	{r4, r5, r6, r7, lr}
	int cnt;
	cnt = 0;

	while((SysCntrl.rx_head != SysCntrl.rx_tail) && size) {
 8000a82:	4d0c      	ldr	r5, [pc, #48]	; (8000ab4 <ReadUartNonBlock+0x34>)
int ReadUartNonBlock(uint8_t *buf,int size) {
 8000a84:	0004      	movs	r4, r0
	while((SysCntrl.rx_head != SysCntrl.rx_tail) && size) {
 8000a86:	002a      	movs	r2, r5
 8000a88:	2000      	movs	r0, #0
		buf[cnt++] = SysCntrl.uart_rx_buf[SysCntrl.rx_tail++];
		SysCntrl.rx_tail &= RX_BUF_SIZE-1;
 8000a8a:	26ff      	movs	r6, #255	; 0xff
	while((SysCntrl.rx_head != SysCntrl.rx_tail) && size) {
 8000a8c:	32fe      	adds	r2, #254	; 0xfe
 8000a8e:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8000a90:	8d57      	ldrh	r7, [r2, #42]	; 0x2a
 8000a92:	429f      	cmp	r7, r3
 8000a94:	d001      	beq.n	8000a9a <ReadUartNonBlock+0x1a>
 8000a96:	4288      	cmp	r0, r1
 8000a98:	d100      	bne.n	8000a9c <ReadUartNonBlock+0x1c>
		size--;
	}
	return cnt;
}
 8000a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buf[cnt++] = SysCntrl.uart_rx_buf[SysCntrl.rx_tail++];
 8000a9c:	1c5f      	adds	r7, r3, #1
 8000a9e:	18eb      	adds	r3, r5, r3
 8000aa0:	8597      	strh	r7, [r2, #44]	; 0x2c
 8000aa2:	3308      	adds	r3, #8
 8000aa4:	7fdb      	ldrb	r3, [r3, #31]
 8000aa6:	5423      	strb	r3, [r4, r0]
		SysCntrl.rx_tail &= RX_BUF_SIZE-1;
 8000aa8:	8d93      	ldrh	r3, [r2, #44]	; 0x2c
 8000aaa:	3001      	adds	r0, #1
 8000aac:	4033      	ands	r3, r6
 8000aae:	8593      	strh	r3, [r2, #44]	; 0x2c
		size--;
 8000ab0:	e7ed      	b.n	8000a8e <ReadUartNonBlock+0xe>
 8000ab2:	46c0      	nop			; (mov r8, r8)
 8000ab4:	2000049c 	.word	0x2000049c

08000ab8 <userInput>:


void userInput(uint8_t anykey){
 8000ab8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000aba:	0005      	movs	r5, r0
	uint8_t bt;
	char buf[4] = {0};
	do{
		console.result = ReadUartNonBlock(&bt, 1);
 8000abc:	466b      	mov	r3, sp
 8000abe:	2101      	movs	r1, #1
 8000ac0:	1dd8      	adds	r0, r3, #7
 8000ac2:	f7ff ffdd 	bl	8000a80 <ReadUartNonBlock>
 8000ac6:	4c22      	ldr	r4, [pc, #136]	; (8000b50 <userInput+0x98>)
 8000ac8:	b2c0      	uxtb	r0, r0
 8000aca:	1ce3      	adds	r3, r4, #3
 8000acc:	77d8      	strb	r0, [r3, #31]
		if(console.result) {
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	d00c      	beq.n	8000aec <userInput+0x34>

			if(anykey)
 8000ad2:	2d00      	cmp	r5, #0
 8000ad4:	d002      	beq.n	8000adc <userInput+0x24>
				console.cmd_flag = 1;
 8000ad6:	2201      	movs	r2, #1
 8000ad8:	1ca3      	adds	r3, r4, #2
 8000ada:	77da      	strb	r2, [r3, #31]

			switch(bt){
 8000adc:	466b      	mov	r3, sp
 8000ade:	79d8      	ldrb	r0, [r3, #7]
 8000ae0:	280d      	cmp	r0, #13
 8000ae2:	d023      	beq.n	8000b2c <userInput+0x74>
 8000ae4:	287f      	cmp	r0, #127	; 0x7f
 8000ae6:	d00a      	beq.n	8000afe <userInput+0x46>
 8000ae8:	280a      	cmp	r0, #10
 8000aea:	d128      	bne.n	8000b3e <userInput+0x86>
			}

			if(console.idx >= UART_BUF_SIZE) console.idx = 0;
		}

	}while(console.result && (!console.cmd_flag));
 8000aec:	1ce3      	adds	r3, r4, #3
 8000aee:	7fdb      	ldrb	r3, [r3, #31]
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d003      	beq.n	8000afc <userInput+0x44>
 8000af4:	3402      	adds	r4, #2
 8000af6:	7fe3      	ldrb	r3, [r4, #31]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	d0df      	beq.n	8000abc <userInput+0x4>
}
 8000afc:	bd37      	pop	{r0, r1, r2, r4, r5, pc}
				UART_SendByte(0x8);
 8000afe:	2008      	movs	r0, #8
 8000b00:	f7ff ffb2 	bl	8000a68 <UART_SendByte>
				UART_SendByte(0x20); //0x20 - asci space
 8000b04:	2020      	movs	r0, #32
 8000b06:	f7ff ffaf 	bl	8000a68 <UART_SendByte>
				UART_SendByte(0x8);
 8000b0a:	2008      	movs	r0, #8
 8000b0c:	f7ff ffac 	bl	8000a68 <UART_SendByte>
				console.buf[console.idx] = 0;
 8000b10:	7823      	ldrb	r3, [r4, #0]
 8000b12:	2200      	movs	r2, #0
 8000b14:	18e1      	adds	r1, r4, r3
				console.idx--;
 8000b16:	3b01      	subs	r3, #1
 8000b18:	7023      	strb	r3, [r4, #0]
				bt = 0;
 8000b1a:	466b      	mov	r3, sp
				console.buf[console.idx] = 0;
 8000b1c:	704a      	strb	r2, [r1, #1]
				bt = 0;
 8000b1e:	71da      	strb	r2, [r3, #7]
			if(console.idx >= UART_BUF_SIZE) console.idx = 0;
 8000b20:	7823      	ldrb	r3, [r4, #0]
 8000b22:	2b1f      	cmp	r3, #31
 8000b24:	d9e2      	bls.n	8000aec <userInput+0x34>
 8000b26:	2300      	movs	r3, #0
 8000b28:	7023      	strb	r3, [r4, #0]
 8000b2a:	e7df      	b.n	8000aec <userInput+0x34>
				console.buf[console.idx++] = 0;
 8000b2c:	7823      	ldrb	r3, [r4, #0]
 8000b2e:	1c5a      	adds	r2, r3, #1
 8000b30:	7022      	strb	r2, [r4, #0]
 8000b32:	2200      	movs	r2, #0
 8000b34:	18e3      	adds	r3, r4, r3
 8000b36:	705a      	strb	r2, [r3, #1]
				console.cmd_flag = 1;
 8000b38:	1ca3      	adds	r3, r4, #2
 8000b3a:	3201      	adds	r2, #1
 8000b3c:	77da      	strb	r2, [r3, #31]
				console.buf[console.idx++] = bt;
 8000b3e:	7823      	ldrb	r3, [r4, #0]
 8000b40:	1c5a      	adds	r2, r3, #1
 8000b42:	18e3      	adds	r3, r4, r3
 8000b44:	7022      	strb	r2, [r4, #0]
 8000b46:	7058      	strb	r0, [r3, #1]
				UART_SendByte(bt);
 8000b48:	f7ff ff8e 	bl	8000a68 <UART_SendByte>
 8000b4c:	e7e8      	b.n	8000b20 <userInput+0x68>
 8000b4e:	46c0      	nop			; (mov r8, r8)
 8000b50:	20000474 	.word	0x20000474

08000b54 <refreshConsoleBuffer>:

void refreshConsoleBuffer(){
 8000b54:	2301      	movs	r3, #1
	uint8_t i;
	for(i=0;i<UART_BUF_SIZE;i++)
		console.buf[i] = 0;
 8000b56:	2100      	movs	r1, #0
 8000b58:	4a04      	ldr	r2, [pc, #16]	; (8000b6c <refreshConsoleBuffer+0x18>)
 8000b5a:	1898      	adds	r0, r3, r2
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	7001      	strb	r1, [r0, #0]
	for(i=0;i<UART_BUF_SIZE;i++)
 8000b60:	2b21      	cmp	r3, #33	; 0x21
 8000b62:	d1fa      	bne.n	8000b5a <refreshConsoleBuffer+0x6>

	console.cmd_flag = 0;
 8000b64:	1c93      	adds	r3, r2, #2
 8000b66:	77d9      	strb	r1, [r3, #31]
	//console.result = 0;
	console.idx = 0;
 8000b68:	7011      	strb	r1, [r2, #0]
//	memset(&console,0,sizeof(console));
}
 8000b6a:	4770      	bx	lr
 8000b6c:	20000474 	.word	0x20000474

08000b70 <clearUartConsole>:

void clearUartConsole(){
 8000b70:	b510      	push	{r4, lr}
	// temp way
	//while(CDC_Transmit_FS((uint8_t*)"\e[3J",strlen("\e[3J")) != USBD_OK);
	//UART_putstrln("\x1B[2J\x1B[H"); //"\x1B[2J\x1B[H"
	UART_putstrln("\033[2J");
 8000b72:	4802      	ldr	r0, [pc, #8]	; (8000b7c <clearUartConsole+0xc>)
 8000b74:	f7ff ff5c 	bl	8000a30 <UART_putstrln>

}
 8000b78:	bd10      	pop	{r4, pc}
 8000b7a:	46c0      	nop			; (mov r8, r8)
 8000b7c:	08006f58 	.word	0x08006f58

08000b80 <ByteToHEX>:


extern USBD_HandleTypeDef hUsbDeviceFS;


uint8_t ByteToHEX(uint8_t bt){
 8000b80:	0003      	movs	r3, r0

if(bt<10)
 8000b82:	2809      	cmp	r0, #9
 8000b84:	d802      	bhi.n	8000b8c <ByteToHEX+0xc>
	return bt+'0';
 8000b86:	3330      	adds	r3, #48	; 0x30
if(bt<=0xf)
	return bt+0x37;
 8000b88:	b2d8      	uxtb	r0, r3
return 'X';

}
 8000b8a:	4770      	bx	lr
return 'X';
 8000b8c:	2058      	movs	r0, #88	; 0x58
if(bt<=0xf)
 8000b8e:	2b0f      	cmp	r3, #15
 8000b90:	d8fb      	bhi.n	8000b8a <ByteToHEX+0xa>
	return bt+0x37;
 8000b92:	3337      	adds	r3, #55	; 0x37
 8000b94:	e7f8      	b.n	8000b88 <ByteToHEX+0x8>
	...

08000b98 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8000b98:	4b0c      	ldr	r3, [pc, #48]	; (8000bcc <HAL_TIM_PeriodElapsedCallback+0x34>)
 8000b9a:	6802      	ldr	r2, [r0, #0]
{
 8000b9c:	b510      	push	{r4, lr}
  if (htim->Instance == TIM17) {
 8000b9e:	429a      	cmp	r2, r3
 8000ba0:	d101      	bne.n	8000ba6 <HAL_TIM_PeriodElapsedCallback+0xe>
    HAL_IncTick();
 8000ba2:	f001 f9f9 	bl	8001f98 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  SysCntrl.TimerTick = 1;
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	4a09      	ldr	r2, [pc, #36]	; (8000bd0 <HAL_TIM_PeriodElapsedCallback+0x38>)
 8000baa:	490a      	ldr	r1, [pc, #40]	; (8000bd4 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8000bac:	5c50      	ldrb	r0, [r2, r1]
 8000bae:	4303      	orrs	r3, r0
  if(++SysCntrl.MS_counter>999)SysCntrl.MS_counter = 0;
 8000bb0:	20fa      	movs	r0, #250	; 0xfa
  SysCntrl.TimerTick = 1;
 8000bb2:	5453      	strb	r3, [r2, r1]
  if(++SysCntrl.MS_counter>999)SysCntrl.MS_counter = 0;
 8000bb4:	4908      	ldr	r1, [pc, #32]	; (8000bd8 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000bb6:	0080      	lsls	r0, r0, #2
 8000bb8:	5a53      	ldrh	r3, [r2, r1]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	4283      	cmp	r3, r0
 8000bc0:	d201      	bcs.n	8000bc6 <HAL_TIM_PeriodElapsedCallback+0x2e>
 8000bc2:	5253      	strh	r3, [r2, r1]


  /* USER CODE END Callback 1 */
}
 8000bc4:	bd10      	pop	{r4, pc}
  if(++SysCntrl.MS_counter>999)SysCntrl.MS_counter = 0;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	e7fb      	b.n	8000bc2 <HAL_TIM_PeriodElapsedCallback+0x2a>
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	40014800 	.word	0x40014800
 8000bd0:	2000049c 	.word	0x2000049c
 8000bd4:	000002d5 	.word	0x000002d5
 8000bd8:	000002d6 	.word	0x000002d6

08000bdc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bdc:	b510      	push	{r4, lr}
  /* USER CODE BEGIN Error_Handler_Debug */
	UART_putstrln("GOTCHA ERROR");
 8000bde:	4802      	ldr	r0, [pc, #8]	; (8000be8 <Error_Handler+0xc>)
 8000be0:	f7ff ff26 	bl	8000a30 <UART_putstrln>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000be4:	b672      	cpsid	i
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000be6:	e7fe      	b.n	8000be6 <Error_Handler+0xa>
 8000be8:	08006f5d 	.word	0x08006f5d

08000bec <MX_SPI1_Init>:
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bec:	22e0      	movs	r2, #224	; 0xe0
  hspi1.Instance = SPI1;
 8000bee:	4810      	ldr	r0, [pc, #64]	; (8000c30 <MX_SPI1_Init+0x44>)
 8000bf0:	4b10      	ldr	r3, [pc, #64]	; (8000c34 <MX_SPI1_Init+0x48>)
{
 8000bf2:	b510      	push	{r4, lr}
  hspi1.Instance = SPI1;
 8000bf4:	6003      	str	r3, [r0, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bf6:	2382      	movs	r3, #130	; 0x82
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf8:	00d2      	lsls	r2, r2, #3
 8000bfa:	60c2      	str	r2, [r0, #12]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000bfc:	2280      	movs	r2, #128	; 0x80
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000bfe:	005b      	lsls	r3, r3, #1
 8000c00:	6043      	str	r3, [r0, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c02:	2300      	movs	r3, #0
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c04:	0092      	lsls	r2, r2, #2
 8000c06:	6182      	str	r2, [r0, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8000c08:	3af9      	subs	r2, #249	; 0xf9
 8000c0a:	3aff      	subs	r2, #255	; 0xff
 8000c0c:	61c2      	str	r2, [r0, #28]
  hspi1.Init.CRCPolynomial = 7;
 8000c0e:	3a01      	subs	r2, #1
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c10:	6083      	str	r3, [r0, #8]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c12:	6103      	str	r3, [r0, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c14:	6143      	str	r3, [r0, #20]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c16:	6203      	str	r3, [r0, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c18:	6243      	str	r3, [r0, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c1a:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c1c:	62c2      	str	r2, [r0, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c1e:	6303      	str	r3, [r0, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8000c20:	6343      	str	r3, [r0, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c22:	f003 fa29 	bl	8004078 <HAL_SPI_Init>
 8000c26:	2800      	cmp	r0, #0
 8000c28:	d001      	beq.n	8000c2e <MX_SPI1_Init+0x42>
    Error_Handler();
 8000c2a:	f7ff ffd7 	bl	8000bdc <Error_Handler>
}
 8000c2e:	bd10      	pop	{r4, pc}
 8000c30:	200007ec 	.word	0x200007ec
 8000c34:	40013000 	.word	0x40013000

08000c38 <EnableSPI>:
void EnableSPI() {
 8000c38:	b530      	push	{r4, r5, lr}
 8000c3a:	b087      	sub	sp, #28
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c3c:	2214      	movs	r2, #20
 8000c3e:	2100      	movs	r1, #0
 8000c40:	a801      	add	r0, sp, #4
 8000c42:	f005 fc64 	bl	800650e <memset>
	ClrI2C_Mask(FLASH_EN_0|FLASH_EN_1);
 8000c46:	2018      	movs	r0, #24
 8000c48:	f7ff fe9a 	bl	8000980 <ClrI2C_Mask>
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c4c:	2400      	movs	r4, #0
	MX_SPI1_Init();
 8000c4e:	f7ff ffcd 	bl	8000bec <MX_SPI1_Init>
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c52:	2501      	movs	r5, #1
  	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000c54:	2309      	movs	r3, #9
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c56:	a901      	add	r1, sp, #4
 8000c58:	4807      	ldr	r0, [pc, #28]	; (8000c78 <EnableSPI+0x40>)
  	GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8000c5a:	9301      	str	r3, [sp, #4]
  	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c5c:	9502      	str	r5, [sp, #8]
  	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	9403      	str	r4, [sp, #12]
  	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c60:	9404      	str	r4, [sp, #16]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f001 fc6b 	bl	800253c <HAL_GPIO_Init>
	Set_CS(0);
 8000c66:	0020      	movs	r0, r4
 8000c68:	f7ff fe9e 	bl	80009a8 <Set_CS>
	Set_CS(1);
 8000c6c:	0028      	movs	r0, r5
 8000c6e:	f7ff fe9b 	bl	80009a8 <Set_CS>
}
 8000c72:	b007      	add	sp, #28
 8000c74:	bd30      	pop	{r4, r5, pc}
 8000c76:	46c0      	nop			; (mov r8, r8)
 8000c78:	48000400 	.word	0x48000400

08000c7c <UART_Con_Mash>:
void UART_Con_Mash(){
 8000c7c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
	userInput(0);
 8000c7e:	2000      	movs	r0, #0
 8000c80:	f7ff ff1a 	bl	8000ab8 <userInput>
	if(console.cmd_flag){
 8000c84:	4e75      	ldr	r6, [pc, #468]	; (8000e5c <UART_Con_Mash+0x1e0>)
 8000c86:	1cb3      	adds	r3, r6, #2
 8000c88:	7fdb      	ldrb	r3, [r3, #31]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d011      	beq.n	8000cb2 <UART_Con_Mash+0x36>
		if(!strcmp(console.buf,"help")){
 8000c8e:	4c74      	ldr	r4, [pc, #464]	; (8000e60 <UART_Con_Mash+0x1e4>)
 8000c90:	4974      	ldr	r1, [pc, #464]	; (8000e64 <UART_Con_Mash+0x1e8>)
 8000c92:	0020      	movs	r0, r4
 8000c94:	f7ff fa38 	bl	8000108 <strcmp>
 8000c98:	2800      	cmp	r0, #0
 8000c9a:	d10b      	bne.n	8000cb4 <UART_Con_Mash+0x38>
			UART_putstrln("ping!");
 8000c9c:	4872      	ldr	r0, [pc, #456]	; (8000e68 <UART_Con_Mash+0x1ec>)
			UART_putstrln("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 8000c9e:	f7ff fec7 	bl	8000a30 <UART_putstrln>
		UART_putstrln(0);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f7ff fec4 	bl	8000a30 <UART_putstrln>
		UART_putstr(">>");
 8000ca8:	4870      	ldr	r0, [pc, #448]	; (8000e6c <UART_Con_Mash+0x1f0>)
 8000caa:	f7ff feb5 	bl	8000a18 <UART_putstr>
		refreshConsoleBuffer();
 8000cae:	f7ff ff51 	bl	8000b54 <refreshConsoleBuffer>
}
 8000cb2:	bd7f      	pop	{r0, r1, r2, r3, r4, r5, r6, pc}
		if(!strcmp(console.buf,"clear")){
 8000cb4:	0020      	movs	r0, r4
 8000cb6:	496e      	ldr	r1, [pc, #440]	; (8000e70 <UART_Con_Mash+0x1f4>)
 8000cb8:	f7ff fa26 	bl	8000108 <strcmp>
 8000cbc:	2800      	cmp	r0, #0
 8000cbe:	d101      	bne.n	8000cc4 <UART_Con_Mash+0x48>
			UART_putstrln("\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n");
 8000cc0:	486c      	ldr	r0, [pc, #432]	; (8000e74 <UART_Con_Mash+0x1f8>)
 8000cc2:	e7ec      	b.n	8000c9e <UART_Con_Mash+0x22>
		if(!strcmp(console.buf,"lvl")){
 8000cc4:	0020      	movs	r0, r4
 8000cc6:	496c      	ldr	r1, [pc, #432]	; (8000e78 <UART_Con_Mash+0x1fc>)
 8000cc8:	f7ff fa1e 	bl	8000108 <strcmp>
 8000ccc:	2800      	cmp	r0, #0
 8000cce:	d110      	bne.n	8000cf2 <UART_Con_Mash+0x76>
			sprintf(buf,"I2C pins: %u %u",HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_7),HAL_GPIO_ReadPin(GPIOB,GPIO_PIN_6));
 8000cd0:	2180      	movs	r1, #128	; 0x80
 8000cd2:	486a      	ldr	r0, [pc, #424]	; (8000e7c <UART_Con_Mash+0x200>)
 8000cd4:	f001 fd4a 	bl	800276c <HAL_GPIO_ReadPin>
 8000cd8:	2140      	movs	r1, #64	; 0x40
 8000cda:	0004      	movs	r4, r0
 8000cdc:	4867      	ldr	r0, [pc, #412]	; (8000e7c <UART_Con_Mash+0x200>)
 8000cde:	f001 fd45 	bl	800276c <HAL_GPIO_ReadPin>
 8000ce2:	0022      	movs	r2, r4
 8000ce4:	0003      	movs	r3, r0
 8000ce6:	4966      	ldr	r1, [pc, #408]	; (8000e80 <UART_Con_Mash+0x204>)
			sprintf(buf,"i2c state:%d register:%d",hi2c.state,hi2c.address);
 8000ce8:	4668      	mov	r0, sp
 8000cea:	f005 fc19 	bl	8006520 <siprintf>
			UART_putstrln(buf);
 8000cee:	4668      	mov	r0, sp
 8000cf0:	e7d5      	b.n	8000c9e <UART_Con_Mash+0x22>
		if(!strcmp(console.buf,"restart")){
 8000cf2:	0020      	movs	r0, r4
 8000cf4:	4963      	ldr	r1, [pc, #396]	; (8000e84 <UART_Con_Mash+0x208>)
 8000cf6:	f7ff fa07 	bl	8000108 <strcmp>
 8000cfa:	2800      	cmp	r0, #0
 8000cfc:	d108      	bne.n	8000d10 <UART_Con_Mash+0x94>
			SysCntrl.power_stage = 41;
 8000cfe:	2229      	movs	r2, #41	; 0x29
 8000d00:	4b61      	ldr	r3, [pc, #388]	; (8000e88 <UART_Con_Mash+0x20c>)
			UART_putstrln("CPU restarted...");
 8000d02:	4862      	ldr	r0, [pc, #392]	; (8000e8c <UART_Con_Mash+0x210>)
			SysCntrl.power_stage = 41;
 8000d04:	701a      	strb	r2, [r3, #0]
			UART_putstrln("CPU restarted...");
 8000d06:	f7ff fe93 	bl	8000a30 <UART_putstrln>
			refreshConsoleBuffer();
 8000d0a:	f7ff ff23 	bl	8000b54 <refreshConsoleBuffer>
 8000d0e:	e7c8      	b.n	8000ca2 <UART_Con_Mash+0x26>
		if(!strcmp(console.buf,"autoboot")){
 8000d10:	0020      	movs	r0, r4
 8000d12:	495f      	ldr	r1, [pc, #380]	; (8000e90 <UART_Con_Mash+0x214>)
 8000d14:	f7ff f9f8 	bl	8000108 <strcmp>
 8000d18:	2800      	cmp	r0, #0
 8000d1a:	d10e      	bne.n	8000d3a <UART_Con_Mash+0xbe>
			SysCntrl.PowerState =(SysCntrl.PowerState)?0:1;
 8000d1c:	21b6      	movs	r1, #182	; 0xb6
 8000d1e:	2201      	movs	r2, #1
 8000d20:	4859      	ldr	r0, [pc, #356]	; (8000e88 <UART_Con_Mash+0x20c>)
 8000d22:	0089      	lsls	r1, r1, #2
 8000d24:	5c43      	ldrb	r3, [r0, r1]
 8000d26:	095c      	lsrs	r4, r3, #5
 8000d28:	43a2      	bics	r2, r4
 8000d2a:	2420      	movs	r4, #32
 8000d2c:	0152      	lsls	r2, r2, #5
 8000d2e:	43a3      	bics	r3, r4
 8000d30:	4313      	orrs	r3, r2
 8000d32:	5443      	strb	r3, [r0, r1]
			writeConfig();
 8000d34:	f000 fd2a 	bl	800178c <writeConfig>
 8000d38:	e7b3      	b.n	8000ca2 <UART_Con_Mash+0x26>
		if(!strcmp(console.buf,"poweroff")){
 8000d3a:	0020      	movs	r0, r4
 8000d3c:	4955      	ldr	r1, [pc, #340]	; (8000e94 <UART_Con_Mash+0x218>)
 8000d3e:	f7ff f9e3 	bl	8000108 <strcmp>
 8000d42:	1e05      	subs	r5, r0, #0
 8000d44:	d109      	bne.n	8000d5a <UART_Con_Mash+0xde>
			SysCntrl.power_stage = 100;
 8000d46:	2264      	movs	r2, #100	; 0x64
 8000d48:	4b4f      	ldr	r3, [pc, #316]	; (8000e88 <UART_Con_Mash+0x20c>)
			UART_putstrln("CPU turn off...");
 8000d4a:	4853      	ldr	r0, [pc, #332]	; (8000e98 <UART_Con_Mash+0x21c>)
			SysCntrl.power_stage = 100;
 8000d4c:	701a      	strb	r2, [r3, #0]
			UART_putstrln("CPU turn off...");
 8000d4e:	f7ff fe6f 	bl	8000a30 <UART_putstrln>
			refreshConsoleBuffer();
 8000d52:	f7ff feff 	bl	8000b54 <refreshConsoleBuffer>
			UART_putstrln(0);
 8000d56:	0028      	movs	r0, r5
 8000d58:	e7a1      	b.n	8000c9e <UART_Con_Mash+0x22>
		if(!strcmp(console.buf,"dump1")){
 8000d5a:	0020      	movs	r0, r4
 8000d5c:	494f      	ldr	r1, [pc, #316]	; (8000e9c <UART_Con_Mash+0x220>)
 8000d5e:	f7ff f9d3 	bl	8000108 <strcmp>
 8000d62:	1e05      	subs	r5, r0, #0
 8000d64:	d107      	bne.n	8000d76 <UART_Con_Mash+0xfa>
			EnableSPI();
 8000d66:	f7ff ff67 	bl	8000c38 <EnableSPI>
			FlashDump(1);
 8000d6a:	2001      	movs	r0, #1
			FlashDump(0);
 8000d6c:	f000 fc48 	bl	8001600 <FlashDump>
			DisableSPI();
 8000d70:	f7ff fdda 	bl	8000928 <DisableSPI>
 8000d74:	e7ef      	b.n	8000d56 <UART_Con_Mash+0xda>
		if(!strcmp(console.buf,"dump0")){
 8000d76:	0020      	movs	r0, r4
 8000d78:	4949      	ldr	r1, [pc, #292]	; (8000ea0 <UART_Con_Mash+0x224>)
 8000d7a:	f7ff f9c5 	bl	8000108 <strcmp>
 8000d7e:	1e05      	subs	r5, r0, #0
 8000d80:	d103      	bne.n	8000d8a <UART_Con_Mash+0x10e>
			EnableSPI();
 8000d82:	f7ff ff59 	bl	8000c38 <EnableSPI>
			FlashDump(0);
 8000d86:	0028      	movs	r0, r5
 8000d88:	e7f0      	b.n	8000d6c <UART_Con_Mash+0xf0>
		if(!strcmp(console.buf,"post")){
 8000d8a:	0020      	movs	r0, r4
 8000d8c:	4945      	ldr	r1, [pc, #276]	; (8000ea4 <UART_Con_Mash+0x228>)
 8000d8e:	f7ff f9bb 	bl	8000108 <strcmp>
 8000d92:	2800      	cmp	r0, #0
 8000d94:	d102      	bne.n	8000d9c <UART_Con_Mash+0x120>
			POST();
 8000d96:	f7ff fa87 	bl	80002a8 <POST>
 8000d9a:	e782      	b.n	8000ca2 <UART_Con_Mash+0x26>
		if(!strcmp(console.buf,"power")){
 8000d9c:	0020      	movs	r0, r4
 8000d9e:	4942      	ldr	r1, [pc, #264]	; (8000ea8 <UART_Con_Mash+0x22c>)
 8000da0:	f7ff f9b2 	bl	8000108 <strcmp>
 8000da4:	2800      	cmp	r0, #0
 8000da6:	d103      	bne.n	8000db0 <UART_Con_Mash+0x134>
			checkPowerLevels(1);
 8000da8:	3001      	adds	r0, #1
 8000daa:	f000 fd4b 	bl	8001844 <checkPowerLevels>
 8000dae:	e778      	b.n	8000ca2 <UART_Con_Mash+0x26>
		if(!strcmp(console.buf,"mm")){
 8000db0:	0020      	movs	r0, r4
 8000db2:	493e      	ldr	r1, [pc, #248]	; (8000eac <UART_Con_Mash+0x230>)
 8000db4:	f7ff f9a8 	bl	8000108 <strcmp>
 8000db8:	2800      	cmp	r0, #0
 8000dba:	d103      	bne.n	8000dc4 <UART_Con_Mash+0x148>
			memoryMenu(1);
 8000dbc:	3001      	adds	r0, #1
 8000dbe:	f000 fc71 	bl	80016a4 <memoryMenu>
 8000dc2:	e76e      	b.n	8000ca2 <UART_Con_Mash+0x26>
		if(!strcmp(console.buf,"wdog")){
 8000dc4:	0020      	movs	r0, r4
 8000dc6:	493a      	ldr	r1, [pc, #232]	; (8000eb0 <UART_Con_Mash+0x234>)
 8000dc8:	f7ff f99e 	bl	8000108 <strcmp>
 8000dcc:	2800      	cmp	r0, #0
 8000dce:	d108      	bne.n	8000de2 <UART_Con_Mash+0x166>
			sprintf(buf,"WDOG timer: %d",SysCntrl.WatchdogTimer);
 8000dd0:	23b7      	movs	r3, #183	; 0xb7
 8000dd2:	4a2d      	ldr	r2, [pc, #180]	; (8000e88 <UART_Con_Mash+0x20c>)
 8000dd4:	009b      	lsls	r3, r3, #2
 8000dd6:	5ad2      	ldrh	r2, [r2, r3]
 8000dd8:	4936      	ldr	r1, [pc, #216]	; (8000eb4 <UART_Con_Mash+0x238>)
			sprintf(buf,"Power stage:%d",SysCntrl.power_stage);
 8000dda:	4668      	mov	r0, sp
 8000ddc:	f005 fba0 	bl	8006520 <siprintf>
 8000de0:	e785      	b.n	8000cee <UART_Con_Mash+0x72>
		if(!strcmp(console.buf,"i2cs")){
 8000de2:	0020      	movs	r0, r4
 8000de4:	4934      	ldr	r1, [pc, #208]	; (8000eb8 <UART_Con_Mash+0x23c>)
 8000de6:	f7ff f98f 	bl	8000108 <strcmp>
 8000dea:	2800      	cmp	r0, #0
 8000dec:	d106      	bne.n	8000dfc <UART_Con_Mash+0x180>
			sprintf(buf,"i2c state:%d register:%d",hi2c.state,hi2c.address);
 8000dee:	4a33      	ldr	r2, [pc, #204]	; (8000ebc <UART_Con_Mash+0x240>)
 8000df0:	4933      	ldr	r1, [pc, #204]	; (8000ec0 <UART_Con_Mash+0x244>)
 8000df2:	7853      	ldrb	r3, [r2, #1]
 8000df4:	7812      	ldrb	r2, [r2, #0]
 8000df6:	0752      	lsls	r2, r2, #29
 8000df8:	0f52      	lsrs	r2, r2, #29
 8000dfa:	e775      	b.n	8000ce8 <UART_Con_Mash+0x6c>
		if(!strcmp(console.buf,"pwrstage")){
 8000dfc:	0020      	movs	r0, r4
 8000dfe:	4931      	ldr	r1, [pc, #196]	; (8000ec4 <UART_Con_Mash+0x248>)
 8000e00:	f7ff f982 	bl	8000108 <strcmp>
 8000e04:	2800      	cmp	r0, #0
 8000e06:	d103      	bne.n	8000e10 <UART_Con_Mash+0x194>
			sprintf(buf,"Power stage:%d",SysCntrl.power_stage);
 8000e08:	4b1f      	ldr	r3, [pc, #124]	; (8000e88 <UART_Con_Mash+0x20c>)
 8000e0a:	492f      	ldr	r1, [pc, #188]	; (8000ec8 <UART_Con_Mash+0x24c>)
 8000e0c:	781a      	ldrb	r2, [r3, #0]
 8000e0e:	e7e4      	b.n	8000dda <UART_Con_Mash+0x15e>
		if(!strcmp(console.buf,"toggleMem")){
 8000e10:	0020      	movs	r0, r4
 8000e12:	492e      	ldr	r1, [pc, #184]	; (8000ecc <UART_Con_Mash+0x250>)
 8000e14:	f7ff f978 	bl	8000108 <strcmp>
 8000e18:	2800      	cmp	r0, #0
 8000e1a:	d116      	bne.n	8000e4a <UART_Con_Mash+0x1ce>
			SysCntrl.BootFlash = ~SysCntrl.BootFlash;
 8000e1c:	4a1a      	ldr	r2, [pc, #104]	; (8000e88 <UART_Con_Mash+0x20c>)
 8000e1e:	4c2c      	ldr	r4, [pc, #176]	; (8000ed0 <UART_Con_Mash+0x254>)
 8000e20:	2101      	movs	r1, #1
 8000e22:	5d10      	ldrb	r0, [r2, r4]
 8000e24:	2510      	movs	r5, #16
 8000e26:	06c3      	lsls	r3, r0, #27
 8000e28:	0fdb      	lsrs	r3, r3, #31
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	400b      	ands	r3, r1
 8000e2e:	43a8      	bics	r0, r5
 8000e30:	011b      	lsls	r3, r3, #4
 8000e32:	4303      	orrs	r3, r0
 8000e34:	5513      	strb	r3, [r2, r4]
			SysCntrl.MainFlash = ~SysCntrl.MainFlash;
 8000e36:	3c02      	subs	r4, #2
 8000e38:	5d10      	ldrb	r0, [r2, r4]
 8000e3a:	07c3      	lsls	r3, r0, #31
 8000e3c:	0fdb      	lsrs	r3, r3, #31
 8000e3e:	43db      	mvns	r3, r3
 8000e40:	4388      	bics	r0, r1
 8000e42:	400b      	ands	r3, r1
 8000e44:	4303      	orrs	r3, r0
 8000e46:	5513      	strb	r3, [r2, r4]
 8000e48:	e774      	b.n	8000d34 <UART_Con_Mash+0xb8>
		if(strcmp(console.buf,"")){
 8000e4a:	7873      	ldrb	r3, [r6, #1]
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d100      	bne.n	8000e52 <UART_Con_Mash+0x1d6>
 8000e50:	e727      	b.n	8000ca2 <UART_Con_Mash+0x26>
			UART_putstr("Unknown command: ");
 8000e52:	4820      	ldr	r0, [pc, #128]	; (8000ed4 <UART_Con_Mash+0x258>)
 8000e54:	f7ff fde0 	bl	8000a18 <UART_putstr>
 8000e58:	e723      	b.n	8000ca2 <UART_Con_Mash+0x26>
 8000e5a:	46c0      	nop			; (mov r8, r8)
 8000e5c:	20000474 	.word	0x20000474
 8000e60:	20000475 	.word	0x20000475
 8000e64:	08006f6a 	.word	0x08006f6a
 8000e68:	08006f6f 	.word	0x08006f6f
 8000e6c:	08007074 	.word	0x08007074
 8000e70:	08006f75 	.word	0x08006f75
 8000e74:	08006f7b 	.word	0x08006f7b
 8000e78:	08006fa5 	.word	0x08006fa5
 8000e7c:	48000400 	.word	0x48000400
 8000e80:	08006fa9 	.word	0x08006fa9
 8000e84:	08006fb9 	.word	0x08006fb9
 8000e88:	2000049c 	.word	0x2000049c
 8000e8c:	08006fc1 	.word	0x08006fc1
 8000e90:	08006fd2 	.word	0x08006fd2
 8000e94:	08006fdb 	.word	0x08006fdb
 8000e98:	08006fe4 	.word	0x08006fe4
 8000e9c:	08006ff4 	.word	0x08006ff4
 8000ea0:	08006ffa 	.word	0x08006ffa
 8000ea4:	08007000 	.word	0x08007000
 8000ea8:	08007005 	.word	0x08007005
 8000eac:	0800700b 	.word	0x0800700b
 8000eb0:	0800700e 	.word	0x0800700e
 8000eb4:	08007013 	.word	0x08007013
 8000eb8:	08007022 	.word	0x08007022
 8000ebc:	2000077c 	.word	0x2000077c
 8000ec0:	08007027 	.word	0x08007027
 8000ec4:	08007040 	.word	0x08007040
 8000ec8:	08007049 	.word	0x08007049
 8000ecc:	08007058 	.word	0x08007058
 8000ed0:	000002da 	.word	0x000002da
 8000ed4:	08007062 	.word	0x08007062

08000ed8 <SystemClock_Config>:
{
 8000ed8:	b510      	push	{r4, lr}
 8000eda:	b098      	sub	sp, #96	; 0x60
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000edc:	2230      	movs	r2, #48	; 0x30
 8000ede:	2100      	movs	r1, #0
 8000ee0:	a80c      	add	r0, sp, #48	; 0x30
 8000ee2:	f005 fb14 	bl	800650e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ee6:	2210      	movs	r2, #16
 8000ee8:	2100      	movs	r1, #0
 8000eea:	a801      	add	r0, sp, #4
 8000eec:	f005 fb0f 	bl	800650e <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ef0:	2218      	movs	r2, #24
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	a805      	add	r0, sp, #20
 8000ef6:	f005 fb0a 	bl	800650e <memset>
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000efa:	2332      	movs	r3, #50	; 0x32
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000efc:	2401      	movs	r4, #1
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSI14
 8000efe:	930b      	str	r3, [sp, #44]	; 0x2c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f00:	a80b      	add	r0, sp, #44	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = 31;
 8000f02:	3b13      	subs	r3, #19
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f04:	940e      	str	r4, [sp, #56]	; 0x38
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 8000f06:	9413      	str	r4, [sp, #76]	; 0x4c
  RCC_OscInitStruct.HSI14State = RCC_HSI14_ON;
 8000f08:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.HSICalibrationValue = 31;
 8000f0a:	930f      	str	r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.HSI14CalibrationValue = 31;
 8000f0c:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f0e:	f002 fba9 	bl	8003664 <HAL_RCC_OscConfig>
 8000f12:	2800      	cmp	r0, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0x42>
    Error_Handler();
 8000f16:	f7ff fe61 	bl	8000bdc <Error_Handler>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1a:	2307      	movs	r3, #7
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f1c:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f1e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000f20:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000f22:	3b04      	subs	r3, #4
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f24:	0021      	movs	r1, r4
 8000f26:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI48;
 8000f28:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000f2a:	f002 fe2d 	bl	8003b88 <HAL_RCC_ClockConfig>
 8000f2e:	2800      	cmp	r0, #0
 8000f30:	d1f1      	bne.n	8000f16 <SystemClock_Config+0x3e>
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000f32:	4b05      	ldr	r3, [pc, #20]	; (8000f48 <SystemClock_Config+0x70>)
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_HSI;
 8000f34:	9008      	str	r0, [sp, #32]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8000f36:	900a      	str	r0, [sp, #40]	; 0x28
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f38:	a805      	add	r0, sp, #20
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USB|RCC_PERIPHCLK_I2C1;
 8000f3a:	9305      	str	r3, [sp, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f3c:	f002 fedc 	bl	8003cf8 <HAL_RCCEx_PeriphCLKConfig>
 8000f40:	2800      	cmp	r0, #0
 8000f42:	d1e8      	bne.n	8000f16 <SystemClock_Config+0x3e>
}
 8000f44:	b018      	add	sp, #96	; 0x60
 8000f46:	bd10      	pop	{r4, pc}
 8000f48:	00020020 	.word	0x00020020

08000f4c <main>:
{
 8000f4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f4e:	b08b      	sub	sp, #44	; 0x2c
  HAL_Init();
 8000f50:	f001 f812 	bl	8001f78 <HAL_Init>
  readConfig();
 8000f54:	f000 fc46 	bl	80017e4 <readConfig>
  if(SysCntrl.Magic!=0b10110){
 8000f58:	221f      	movs	r2, #31
 8000f5a:	4eab      	ldr	r6, [pc, #684]	; (8001208 <main+0x2bc>)
 8000f5c:	4bab      	ldr	r3, [pc, #684]	; (800120c <main+0x2c0>)
 8000f5e:	5cf3      	ldrb	r3, [r6, r3]
 8000f60:	4013      	ands	r3, r2
 8000f62:	2b16      	cmp	r3, #22
 8000f64:	d00f      	beq.n	8000f86 <main+0x3a>
	SysCntrl.MainFlash = 0;
 8000f66:	21b6      	movs	r1, #182	; 0xb6
 8000f68:	0089      	lsls	r1, r1, #2
 8000f6a:	5a73      	ldrh	r3, [r6, r1]
 8000f6c:	4aa8      	ldr	r2, [pc, #672]	; (8001210 <main+0x2c4>)
 8000f6e:	401a      	ands	r2, r3
 8000f70:	23b1      	movs	r3, #177	; 0xb1
 8000f72:	015b      	lsls	r3, r3, #5
 8000f74:	4313      	orrs	r3, r2
 8000f76:	5273      	strh	r3, [r6, r1]
	SysCntrl.Watchdog = 1;
 8000f78:	2320      	movs	r3, #32
 8000f7a:	4aa6      	ldr	r2, [pc, #664]	; (8001214 <main+0x2c8>)
 8000f7c:	5cb1      	ldrb	r1, [r6, r2]
 8000f7e:	430b      	orrs	r3, r1
 8000f80:	54b3      	strb	r3, [r6, r2]
	writeConfig();
 8000f82:	f000 fc03 	bl	800178c <writeConfig>
  SysCntrl.rx_head = 0;
 8000f86:	0033      	movs	r3, r6
  SysCntrl.power_stage = 0;
 8000f88:	2400      	movs	r4, #0
  SysCntrl.rx_head = 0;
 8000f8a:	33fc      	adds	r3, #252	; 0xfc
 8000f8c:	62dc      	str	r4, [r3, #44]	; 0x2c
  hi2c.registers[0] = 0xfd;
 8000f8e:	23fd      	movs	r3, #253	; 0xfd
 8000f90:	4aa1      	ldr	r2, [pc, #644]	; (8001218 <main+0x2cc>)
  SysCntrl.i2c_bt[0] = 0x1;
 8000f92:	2501      	movs	r5, #1
  hi2c.registers[0] = 0xfd;
 8000f94:	8053      	strh	r3, [r2, #2]
  hi2c.registers[1] = 0xfaf;
 8000f96:	4ba1      	ldr	r3, [pc, #644]	; (800121c <main+0x2d0>)
  SysCntrl.i2c_bt[0] = 0x1;
 8000f98:	80b5      	strh	r5, [r6, #4]
  hi2c.registers[1] = 0xfaf;
 8000f9a:	8093      	strh	r3, [r2, #4]
  hi2c.registers[2] = 0x31;
 8000f9c:	2331      	movs	r3, #49	; 0x31
 8000f9e:	80d3      	strh	r3, [r2, #6]
  SysCntrl.WatchdogTimer = 0;
 8000fa0:	23b7      	movs	r3, #183	; 0xb7
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	52f4      	strh	r4, [r6, r3]
  SysCntrl.power_stage = 0;
 8000fa6:	7034      	strb	r4, [r6, #0]
  SystemClock_Config();
 8000fa8:	f7ff ff96 	bl	8000ed8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fac:	2214      	movs	r2, #20
 8000fae:	0021      	movs	r1, r4
 8000fb0:	a805      	add	r0, sp, #20
 8000fb2:	f005 faac 	bl	800650e <memset>
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb6:	2080      	movs	r0, #128	; 0x80
 8000fb8:	4b99      	ldr	r3, [pc, #612]	; (8001220 <main+0x2d4>)
 8000fba:	02c0      	lsls	r0, r0, #11
 8000fbc:	6959      	ldr	r1, [r3, #20]
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000fbe:	2702      	movs	r7, #2
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fc0:	4301      	orrs	r1, r0
 8000fc2:	6159      	str	r1, [r3, #20]
 8000fc4:	695a      	ldr	r2, [r3, #20]
 8000fc6:	4002      	ands	r2, r0
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fc8:	2080      	movs	r0, #128	; 0x80
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fca:	9202      	str	r2, [sp, #8]
 8000fcc:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fce:	6959      	ldr	r1, [r3, #20]
 8000fd0:	03c0      	lsls	r0, r0, #15
 8000fd2:	4301      	orrs	r1, r0
 8000fd4:	6159      	str	r1, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd6:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fd8:	695a      	ldr	r2, [r3, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	0289      	lsls	r1, r1, #10
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fdc:	4002      	ands	r2, r0
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000fde:	2090      	movs	r0, #144	; 0x90
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000fe0:	9203      	str	r2, [sp, #12]
 8000fe2:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe4:	695a      	ldr	r2, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000fe6:	05c0      	lsls	r0, r0, #23
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fe8:	430a      	orrs	r2, r1
 8000fea:	615a      	str	r2, [r3, #20]
 8000fec:	695b      	ldr	r3, [r3, #20]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000fee:	0022      	movs	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff0:	400b      	ands	r3, r1
 8000ff2:	9304      	str	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000ff4:	211b      	movs	r1, #27
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ff6:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4, GPIO_PIN_RESET);
 8000ff8:	f001 fbbe 	bl	8002778 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_2, GPIO_PIN_SET);
 8000ffc:	2090      	movs	r0, #144	; 0x90
 8000ffe:	002a      	movs	r2, r5
 8001000:	2104      	movs	r1, #4
 8001002:	05c0      	lsls	r0, r0, #23
 8001004:	f001 fbb8 	bl	8002778 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_3, GPIO_PIN_RESET);
 8001008:	0022      	movs	r2, r4
 800100a:	2109      	movs	r1, #9
 800100c:	4885      	ldr	r0, [pc, #532]	; (8001224 <main+0x2d8>)
 800100e:	f001 fbb3 	bl	8002778 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001012:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001014:	4883      	ldr	r0, [pc, #524]	; (8001224 <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001016:	005b      	lsls	r3, r3, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001018:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_8;
 800101a:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800101c:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101e:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	f001 fa8c 	bl	800253c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001024:	4880      	ldr	r0, [pc, #512]	; (8001228 <main+0x2dc>)
 8001026:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001028:	9705      	str	r7, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800102e:	f001 fa85 	bl	800253c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001032:	2307      	movs	r3, #7
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001034:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 8001036:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001038:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800103a:	330a      	adds	r3, #10
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800103c:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800103e:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001040:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001042:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001044:	f001 fa7a 	bl	800253c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001048:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 800104a:	2318      	movs	r3, #24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800104c:	a905      	add	r1, sp, #20
 800104e:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4;
 8001050:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001054:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001058:	f001 fa70 	bl	800253c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 800105c:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	4871      	ldr	r0, [pc, #452]	; (8001224 <main+0x2d8>)
 8001060:	a905      	add	r1, sp, #20
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_3;
 8001062:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001064:	9506      	str	r5, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001068:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106a:	f001 fa67 	bl	800253c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 800106e:	2380      	movs	r3, #128	; 0x80
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	2090      	movs	r0, #144	; 0x90
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001072:	021b      	lsls	r3, r3, #8
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001074:	a905      	add	r1, sp, #20
 8001076:	05c0      	lsls	r0, r0, #23
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001078:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800107a:	9707      	str	r7, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800107c:	9406      	str	r4, [sp, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107e:	f001 fa5d 	bl	800253c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001082:	2330      	movs	r3, #48	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001084:	a905      	add	r1, sp, #20
 8001086:	4867      	ldr	r0, [pc, #412]	; (8001224 <main+0x2d8>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001088:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108a:	9406      	str	r4, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800108c:	9507      	str	r5, [sp, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800108e:	f001 fa55 	bl	800253c <HAL_GPIO_Init>
  hi2c1.Instance = I2C1;
 8001092:	4f66      	ldr	r7, [pc, #408]	; (800122c <main+0x2e0>)
 8001094:	4b66      	ldr	r3, [pc, #408]	; (8001230 <main+0x2e4>)
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001096:	0038      	movs	r0, r7
  hi2c1.Instance = I2C1;
 8001098:	603b      	str	r3, [r7, #0]
  hi2c1.Init.Timing = 0x2000090E;
 800109a:	4b66      	ldr	r3, [pc, #408]	; (8001234 <main+0x2e8>)
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109c:	60fd      	str	r5, [r7, #12]
  hi2c1.Init.Timing = 0x2000090E;
 800109e:	607b      	str	r3, [r7, #4]
  hi2c1.Init.OwnAddress1 = 52;
 80010a0:	2334      	movs	r3, #52	; 0x34
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a2:	613c      	str	r4, [r7, #16]
  hi2c1.Init.OwnAddress1 = 52;
 80010a4:	60bb      	str	r3, [r7, #8]
  hi2c1.Init.OwnAddress2 = 0;
 80010a6:	617c      	str	r4, [r7, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a8:	61bc      	str	r4, [r7, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010aa:	61fc      	str	r4, [r7, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010ac:	623c      	str	r4, [r7, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010ae:	f001 fb69 	bl	8002784 <HAL_I2C_Init>
 80010b2:	0001      	movs	r1, r0
 80010b4:	42a0      	cmp	r0, r4
 80010b6:	d001      	beq.n	80010bc <main+0x170>
    Error_Handler();
 80010b8:	f7ff fd90 	bl	8000bdc <Error_Handler>
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010bc:	0038      	movs	r0, r7
 80010be:	f001 fbb7 	bl	8002830 <HAL_I2CEx_ConfigAnalogFilter>
 80010c2:	1e01      	subs	r1, r0, #0
 80010c4:	d1f8      	bne.n	80010b8 <main+0x16c>
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010c6:	0038      	movs	r0, r7
 80010c8:	f001 fbd8 	bl	800287c <HAL_I2CEx_ConfigDigitalFilter>
 80010cc:	1e07      	subs	r7, r0, #0
 80010ce:	d1f3      	bne.n	80010b8 <main+0x16c>
  MX_SPI1_Init();
 80010d0:	f7ff fd8c 	bl	8000bec <MX_SPI1_Init>
  MX_USB_DEVICE_Init();
 80010d4:	f004 ff9c 	bl	8006010 <MX_USB_DEVICE_Init>
  ADC_ChannelConfTypeDef sConfig = {0};
 80010d8:	220c      	movs	r2, #12
 80010da:	0039      	movs	r1, r7
 80010dc:	a805      	add	r0, sp, #20
 80010de:	f005 fa16 	bl	800650e <memset>
  hadc.Instance = ADC1;
 80010e2:	4c55      	ldr	r4, [pc, #340]	; (8001238 <main+0x2ec>)
 80010e4:	4b55      	ldr	r3, [pc, #340]	; (800123c <main+0x2f0>)
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80010e6:	0020      	movs	r0, r4
  hadc.Instance = ADC1;
 80010e8:	6023      	str	r3, [r4, #0]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010ea:	2304      	movs	r3, #4
 80010ec:	6163      	str	r3, [r4, #20]
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010ee:	23c2      	movs	r3, #194	; 0xc2
 80010f0:	33ff      	adds	r3, #255	; 0xff
 80010f2:	61e3      	str	r3, [r4, #28]
  hadc.Init.LowPowerAutoWait = DISABLE;
 80010f4:	61a7      	str	r7, [r4, #24]
  hadc.Init.DMAContinuousRequests = DISABLE;
 80010f6:	1d63      	adds	r3, r4, #5
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80010f8:	6067      	str	r7, [r4, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 80010fa:	60a7      	str	r7, [r4, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010fc:	60e7      	str	r7, [r4, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 80010fe:	6125      	str	r5, [r4, #16]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001100:	6227      	str	r7, [r4, #32]
  hadc.Init.DMAContinuousRequests = DISABLE;
 8001102:	77df      	strb	r7, [r3, #31]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001104:	62a5      	str	r5, [r4, #40]	; 0x28
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8001106:	f000 ff6b 	bl	8001fe0 <HAL_ADC_Init>
 800110a:	2800      	cmp	r0, #0
 800110c:	d1d4      	bne.n	80010b8 <main+0x16c>
  sConfig.Channel = ADC_CHANNEL_TEMPSENSOR;
 800110e:	2310      	movs	r3, #16
 8001110:	9305      	str	r3, [sp, #20]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8001112:	2380      	movs	r3, #128	; 0x80
 8001114:	015b      	lsls	r3, r3, #5
 8001116:	9306      	str	r3, [sp, #24]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001118:	2380      	movs	r3, #128	; 0x80
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800111a:	0020      	movs	r0, r4
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800111c:	055b      	lsls	r3, r3, #21
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800111e:	a905      	add	r1, sp, #20
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001120:	9307      	str	r3, [sp, #28]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001122:	f001 f805 	bl	8002130 <HAL_ADC_ConfigChannel>
 8001126:	1e04      	subs	r4, r0, #0
 8001128:	d1c6      	bne.n	80010b8 <main+0x16c>
  Set_CS(0);
 800112a:	f7ff fc3d 	bl	80009a8 <Set_CS>
		HAL_GPIO_WritePin(GPIOB,GPIO_PIN_3,GPIO_PIN_SET);
 800112e:	002a      	movs	r2, r5
 8001130:	2108      	movs	r1, #8
 8001132:	483c      	ldr	r0, [pc, #240]	; (8001224 <main+0x2d8>)
 8001134:	f001 fb20 	bl	8002778 <HAL_GPIO_WritePin>
  SFT_I2C_Init(GPIOA,GPIO_PIN_1,GPIOA,GPIO_PIN_0,&si2c1,0);
 8001138:	2290      	movs	r2, #144	; 0x90
 800113a:	4f41      	ldr	r7, [pc, #260]	; (8001240 <main+0x2f4>)
 800113c:	05d2      	lsls	r2, r2, #23
 800113e:	0010      	movs	r0, r2
 8001140:	002b      	movs	r3, r5
 8001142:	2102      	movs	r1, #2
 8001144:	9700      	str	r7, [sp, #0]
 8001146:	9401      	str	r4, [sp, #4]
 8001148:	f7ff f97c 	bl	8000444 <SFT_I2C_Init>
  SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,SysCntrl.i2c_bt,2,1); // Clear outputs
 800114c:	0038      	movs	r0, r7
 800114e:	2302      	movs	r3, #2
 8001150:	2140      	movs	r1, #64	; 0x40
 8001152:	4a3c      	ldr	r2, [pc, #240]	; (8001244 <main+0x2f8>)
 8001154:	9500      	str	r5, [sp, #0]
 8001156:	f7ff fa65 	bl	8000624 <SFT_I2C_Master_Transmit>
  SysCntrl.i2c_bt[0] = 0x3;
 800115a:	2303      	movs	r3, #3
  SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,SysCntrl.i2c_bt,2,1); // All outputs
 800115c:	2140      	movs	r1, #64	; 0x40
 800115e:	4a39      	ldr	r2, [pc, #228]	; (8001244 <main+0x2f8>)
  SysCntrl.i2c_bt[0] = 0x3;
 8001160:	7133      	strb	r3, [r6, #4]
  SFT_I2C_Master_Transmit(&si2c1,GPIO_EXPANDER_ADDR,SysCntrl.i2c_bt,2,1); // All outputs
 8001162:	0038      	movs	r0, r7
 8001164:	3b01      	subs	r3, #1
 8001166:	9500      	str	r5, [sp, #0]
 8001168:	f7ff fa5c 	bl	8000624 <SFT_I2C_Master_Transmit>
  SPI_Reset(0);
 800116c:	0020      	movs	r0, r4
  SysCntrl.i2c_bt[0] = 0x1;
 800116e:	7135      	strb	r5, [r6, #4]
  SPI_Reset(0);
 8001170:	f000 f91a 	bl	80013a8 <SPI_Reset>
  SPI_Reset(1);
 8001174:	0028      	movs	r0, r5
 8001176:	f000 f917 	bl	80013a8 <SPI_Reset>
  hi2c.state = 0;
 800117a:	221f      	movs	r2, #31
 800117c:	4b26      	ldr	r3, [pc, #152]	; (8001218 <main+0x2cc>)
  USB_EnableGlobalInt(&hUsbDeviceFS);
 800117e:	4e32      	ldr	r6, [pc, #200]	; (8001248 <main+0x2fc>)
  hi2c.state = 0;
 8001180:	781b      	ldrb	r3, [r3, #0]
  USB_EnableGlobalInt(&hUsbDeviceFS);
 8001182:	0030      	movs	r0, r6
  hi2c.state = 0;
 8001184:	4393      	bics	r3, r2
 8001186:	4a24      	ldr	r2, [pc, #144]	; (8001218 <main+0x2cc>)
			SysCntrl.WatchdogTimer++;
 8001188:	27b7      	movs	r7, #183	; 0xb7
  hi2c.state = 0;
 800118a:	7013      	strb	r3, [r2, #0]
  USB_EnableGlobalInt(&hUsbDeviceFS);
 800118c:	f003 fc66 	bl	8004a5c <USB_EnableGlobalInt>
  refreshConsoleBuffer();
 8001190:	f7ff fce0 	bl	8000b54 <refreshConsoleBuffer>
  DisableSPI();
 8001194:	f7ff fbc8 	bl	8000928 <DisableSPI>
  clearHi2c();
 8001198:	f7ff faa0 	bl	80006dc <clearHi2c>
  HAL_GPIO_WritePin(GPIOA,GPIO_PIN_2,GPIO_PIN_RESET);
 800119c:	2090      	movs	r0, #144	; 0x90
 800119e:	0022      	movs	r2, r4
 80011a0:	2104      	movs	r1, #4
 80011a2:	05c0      	lsls	r0, r0, #23
 80011a4:	f001 fae8 	bl	8002778 <HAL_GPIO_WritePin>
			SysCntrl.WatchdogTimer++;
 80011a8:	00bf      	lsls	r7, r7, #2
	  if(SysCntrl.TimerTick) {
 80011aa:	4c17      	ldr	r4, [pc, #92]	; (8001208 <main+0x2bc>)
 80011ac:	4a27      	ldr	r2, [pc, #156]	; (800124c <main+0x300>)
	  asm("nop");
 80011ae:	46c0      	nop			; (mov r8, r8)
	  if(SysCntrl.TimerTick) {
 80011b0:	5ca1      	ldrb	r1, [r4, r2]
 80011b2:	1c0b      	adds	r3, r1, #0
 80011b4:	4229      	tst	r1, r5
 80011b6:	d0fa      	beq.n	80011ae <main+0x262>
		  SysCntrl.TimerTick = 0;
 80011b8:	43ab      	bics	r3, r5
 80011ba:	54a3      	strb	r3, [r4, r2]
		  switch(SysCntrl.MS_counter % 10) {
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <main+0x304>)
 80011be:	210a      	movs	r1, #10
 80011c0:	5ae0      	ldrh	r0, [r4, r3]
 80011c2:	f7ff f857 	bl	8000274 <__aeabi_uidivmod>
 80011c6:	b288      	uxth	r0, r1
 80011c8:	2804      	cmp	r0, #4
 80011ca:	d8ee      	bhi.n	80011aa <main+0x25e>
 80011cc:	f7fe ffae 	bl	800012c <__gnu_thumb1_case_uqi>
 80011d0:	14110e03 	.word	0x14110e03
 80011d4:	18          	.byte	0x18
 80011d5:	00          	.byte	0x00
			 if(SysCntrl.power_stage == 51)
 80011d6:	7823      	ldrb	r3, [r4, #0]
 80011d8:	2b33      	cmp	r3, #51	; 0x33
 80011da:	d1e6      	bne.n	80011aa <main+0x25e>
				 switch(hUsbDeviceFS.dev_state){
 80011dc:	23a7      	movs	r3, #167	; 0xa7
 80011de:	009b      	lsls	r3, r3, #2
 80011e0:	5cf3      	ldrb	r3, [r6, r3]
 80011e2:	2b03      	cmp	r3, #3
 80011e4:	d1e1      	bne.n	80011aa <main+0x25e>
						 UART_Con_Mash();
 80011e6:	f7ff fd49 	bl	8000c7c <UART_Con_Mash>
					break;
 80011ea:	e7de      	b.n	80011aa <main+0x25e>
			  PowerSM();
 80011ec:	f000 fc8a 	bl	8001b04 <PowerSM>
			  break;
 80011f0:	e7db      	b.n	80011aa <main+0x25e>
			  i2cSM();
 80011f2:	f7ff fa87 	bl	8000704 <i2cSM>
			  break;
 80011f6:	e7d8      	b.n	80011aa <main+0x25e>
			checkPowerLevels(0);
 80011f8:	2000      	movs	r0, #0
 80011fa:	f000 fb23 	bl	8001844 <checkPowerLevels>
			 break;
 80011fe:	e7d4      	b.n	80011aa <main+0x25e>
			SysCntrl.WatchdogTimer++;
 8001200:	5be3      	ldrh	r3, [r4, r7]
 8001202:	3301      	adds	r3, #1
 8001204:	53e3      	strh	r3, [r4, r7]
			break;
 8001206:	e7d0      	b.n	80011aa <main+0x25e>
 8001208:	2000049c 	.word	0x2000049c
 800120c:	000002d9 	.word	0x000002d9
 8001210:	ffffe0d8 	.word	0xffffe0d8
 8001214:	000002da 	.word	0x000002da
 8001218:	2000077c 	.word	0x2000077c
 800121c:	00000faf 	.word	0x00000faf
 8001220:	40021000 	.word	0x40021000
 8001224:	48000400 	.word	0x48000400
 8001228:	48001400 	.word	0x48001400
 800122c:	200007a0 	.word	0x200007a0
 8001230:	40005400 	.word	0x40005400
 8001234:	2000090e 	.word	0x2000090e
 8001238:	20000850 	.word	0x20000850
 800123c:	40012400 	.word	0x40012400
 8001240:	20000788 	.word	0x20000788
 8001244:	200004a0 	.word	0x200004a0
 8001248:	20000900 	.word	0x20000900
 800124c:	000002d5 	.word	0x000002d5
 8001250:	000002d6 	.word	0x000002d6

08001254 <SPI_ReadStatus>:


#define CORRECTOR 1

// Sector - 64
uint8_t SPI_ReadStatus() {
 8001254:	b570      	push	{r4, r5, r6, lr}
	Clr_CS(SysCntrl.active_cs);
 8001256:	4c0d      	ldr	r4, [pc, #52]	; (800128c <SPI_ReadStatus+0x38>)
	SysCntrl.spi_buf_tx[0] = 0x05;
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 1, HAL_MAX_DELAY);
 8001258:	2601      	movs	r6, #1
	Clr_CS(SysCntrl.active_cs);
 800125a:	79a0      	ldrb	r0, [r4, #6]
 800125c:	f7ff fbb4 	bl	80009c8 <Clr_CS>
	SysCntrl.spi_buf_tx[0] = 0x05;
 8001260:	2305      	movs	r3, #5
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 1, HAL_MAX_DELAY);
 8001262:	4d0b      	ldr	r5, [pc, #44]	; (8001290 <SPI_ReadStatus+0x3c>)
 8001264:	4276      	negs	r6, r6
 8001266:	0028      	movs	r0, r5
	SysCntrl.spi_buf_tx[0] = 0x05;
 8001268:	71e3      	strb	r3, [r4, #7]
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 1, HAL_MAX_DELAY);
 800126a:	2201      	movs	r2, #1
 800126c:	0033      	movs	r3, r6
 800126e:	4909      	ldr	r1, [pc, #36]	; (8001294 <SPI_ReadStatus+0x40>)
 8001270:	f002 ff91 	bl	8004196 <HAL_SPI_Transmit>
	HAL_SPI_Receive(&hspi1,SysCntrl.spi_buf_rx, 1, HAL_MAX_DELAY);
 8001274:	0033      	movs	r3, r6
 8001276:	2201      	movs	r2, #1
 8001278:	0028      	movs	r0, r5
 800127a:	4907      	ldr	r1, [pc, #28]	; (8001298 <SPI_ReadStatus+0x44>)
 800127c:	f003 f94e 	bl	800451c <HAL_SPI_Receive>

	Set_CS(SysCntrl.active_cs);
 8001280:	79a0      	ldrb	r0, [r4, #6]
 8001282:	f7ff fb91 	bl	80009a8 <Set_CS>

	return SysCntrl.spi_buf_rx[0];
 8001286:	7de0      	ldrb	r0, [r4, #23]
}
 8001288:	bd70      	pop	{r4, r5, r6, pc}
 800128a:	46c0      	nop			; (mov r8, r8)
 800128c:	2000049c 	.word	0x2000049c
 8001290:	200007ec 	.word	0x200007ec
 8001294:	200004a3 	.word	0x200004a3
 8001298:	200004b3 	.word	0x200004b3

0800129c <Flash_WriteEnable>:

void Flash_WriteEnable() {
 800129c:	b510      	push	{r4, lr}

	Clr_CS(SysCntrl.active_cs);
 800129e:	4c08      	ldr	r4, [pc, #32]	; (80012c0 <Flash_WriteEnable+0x24>)
 80012a0:	79a0      	ldrb	r0, [r4, #6]
 80012a2:	f7ff fb91 	bl	80009c8 <Clr_CS>
	SysCntrl.spi_buf_tx[0] = 0x06;
 80012a6:	2306      	movs	r3, #6
 80012a8:	71e3      	strb	r3, [r4, #7]
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 1, HAL_MAX_DELAY);
 80012aa:	3b05      	subs	r3, #5
 80012ac:	2201      	movs	r2, #1
 80012ae:	4905      	ldr	r1, [pc, #20]	; (80012c4 <Flash_WriteEnable+0x28>)
 80012b0:	425b      	negs	r3, r3
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <Flash_WriteEnable+0x2c>)
 80012b4:	f002 ff6f 	bl	8004196 <HAL_SPI_Transmit>
	Set_CS(SysCntrl.active_cs);
 80012b8:	79a0      	ldrb	r0, [r4, #6]
 80012ba:	f7ff fb75 	bl	80009a8 <Set_CS>
}
 80012be:	bd10      	pop	{r4, pc}
 80012c0:	2000049c 	.word	0x2000049c
 80012c4:	200004a3 	.word	0x200004a3
 80012c8:	200007ec 	.word	0x200007ec

080012cc <SPI_EraseAddr>:
		SysCntrl.SPI_page_idx = 0;

}


void SPI_EraseAddr(uint32_t addr) {
 80012cc:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;

	Clr_CS(SysCntrl.active_cs);
 80012ce:	4c11      	ldr	r4, [pc, #68]	; (8001314 <SPI_EraseAddr+0x48>)
void SPI_EraseAddr(uint32_t addr) {
 80012d0:	0005      	movs	r5, r0
	Clr_CS(SysCntrl.active_cs);
 80012d2:	79a0      	ldrb	r0, [r4, #6]
 80012d4:	f7ff fb78 	bl	80009c8 <Clr_CS>
	SysCntrl.spi_buf_tx[0] = 0xD8;
 80012d8:	23d8      	movs	r3, #216	; 0xd8
 80012da:	71e3      	strb	r3, [r4, #7]
	SysCntrl.spi_buf_tx[1] = (addr>>16) & 0xff;
 80012dc:	0c2b      	lsrs	r3, r5, #16
 80012de:	7223      	strb	r3, [r4, #8]
	SysCntrl.spi_buf_tx[2] = (addr>>8)  & 0xff;
 80012e0:	0a2b      	lsrs	r3, r5, #8
 80012e2:	7263      	strb	r3, [r4, #9]
	SysCntrl.spi_buf_tx[3] = (addr>>0)  & 0xff;

	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 4, HAL_MAX_DELAY);
 80012e4:	2301      	movs	r3, #1
 80012e6:	2204      	movs	r2, #4
 80012e8:	490b      	ldr	r1, [pc, #44]	; (8001318 <SPI_EraseAddr+0x4c>)
 80012ea:	425b      	negs	r3, r3
 80012ec:	480b      	ldr	r0, [pc, #44]	; (800131c <SPI_EraseAddr+0x50>)
	SysCntrl.spi_buf_tx[3] = (addr>>0)  & 0xff;
 80012ee:	72a5      	strb	r5, [r4, #10]
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 4, HAL_MAX_DELAY);
 80012f0:	f002 ff51 	bl	8004196 <HAL_SPI_Transmit>
	Set_CS(SysCntrl.active_cs);
 80012f4:	79a0      	ldrb	r0, [r4, #6]
 80012f6:	f7ff fb57 	bl	80009a8 <Set_CS>
void SPI_EraseAddr(uint32_t addr) {
 80012fa:	2564      	movs	r5, #100	; 0x64


	do{
		for(i=0;i<100;i++)asm("nop");
	}while(SPI_ReadStatus()&1);
 80012fc:	2401      	movs	r4, #1
void SPI_EraseAddr(uint32_t addr) {
 80012fe:	002b      	movs	r3, r5
		for(i=0;i<100;i++)asm("nop");
 8001300:	46c0      	nop			; (mov r8, r8)
 8001302:	3b01      	subs	r3, #1
 8001304:	b2db      	uxtb	r3, r3
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1fa      	bne.n	8001300 <SPI_EraseAddr+0x34>
	}while(SPI_ReadStatus()&1);
 800130a:	f7ff ffa3 	bl	8001254 <SPI_ReadStatus>
 800130e:	4220      	tst	r0, r4
 8001310:	d1f5      	bne.n	80012fe <SPI_EraseAddr+0x32>
}
 8001312:	bd70      	pop	{r4, r5, r6, pc}
 8001314:	2000049c 	.word	0x2000049c
 8001318:	200004a3 	.word	0x200004a3
 800131c:	200007ec 	.word	0x200007ec

08001320 <Flash_PageWrite>:
void Flash_PageWrite() {
 8001320:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	}while(SPI_ReadStatus()&1);
 8001322:	2401      	movs	r4, #1
 8001324:	f7ff ff96 	bl	8001254 <SPI_ReadStatus>
 8001328:	4220      	tst	r0, r4
 800132a:	d1fb      	bne.n	8001324 <Flash_PageWrite+0x4>
		Flash_WriteEnable();
 800132c:	f7ff ffb6 	bl	800129c <Flash_WriteEnable>
	if((SysCntrl.SPI_address & 0xffff) == 0)
 8001330:	23af      	movs	r3, #175	; 0xaf
 8001332:	4c19      	ldr	r4, [pc, #100]	; (8001398 <Flash_PageWrite+0x78>)
 8001334:	009b      	lsls	r3, r3, #2
 8001336:	58e0      	ldr	r0, [r4, r3]
 8001338:	b283      	uxth	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d101      	bne.n	8001342 <Flash_PageWrite+0x22>
		SPI_EraseAddr(SysCntrl.SPI_address);
 800133e:	f7ff ffc5 	bl	80012cc <SPI_EraseAddr>
		Flash_WriteEnable();
 8001342:	f7ff ffab 	bl	800129c <Flash_WriteEnable>
		SysCntrl.spi_buf_tx[1] = (SysCntrl.SPI_address>>16) & 0xff;
 8001346:	26af      	movs	r6, #175	; 0xaf
		Clr_CS(SysCntrl.active_cs);
 8001348:	79a0      	ldrb	r0, [r4, #6]
 800134a:	f7ff fb3d 	bl	80009c8 <Clr_CS>
		SysCntrl.spi_buf_tx[0] = 0x02;
 800134e:	2302      	movs	r3, #2
		SysCntrl.spi_buf_tx[1] = (SysCntrl.SPI_address>>16) & 0xff;
 8001350:	00b6      	lsls	r6, r6, #2
		SysCntrl.spi_buf_tx[0] = 0x02;
 8001352:	71e3      	strb	r3, [r4, #7]
		SysCntrl.spi_buf_tx[1] = (SysCntrl.SPI_address>>16) & 0xff;
 8001354:	59a3      	ldr	r3, [r4, r6]
		HAL_SPI_Transmit(&hspi1, SysCntrl.SPI_page, SysCntrl.SPI_page_idx, HAL_MAX_DELAY);
 8001356:	25ae      	movs	r5, #174	; 0xae
		SysCntrl.spi_buf_tx[1] = (SysCntrl.SPI_address>>16) & 0xff;
 8001358:	0c1a      	lsrs	r2, r3, #16
 800135a:	7222      	strb	r2, [r4, #8]
		SysCntrl.spi_buf_tx[3] = (SysCntrl.SPI_address>>0)  & 0xff;
 800135c:	72a3      	strb	r3, [r4, #10]
		SysCntrl.spi_buf_tx[2] = (SysCntrl.SPI_address>>8)  & 0xff;
 800135e:	0a1a      	lsrs	r2, r3, #8
		HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 4, HAL_MAX_DELAY);
 8001360:	2301      	movs	r3, #1
 8001362:	4f0e      	ldr	r7, [pc, #56]	; (800139c <Flash_PageWrite+0x7c>)
		HAL_SPI_Transmit(&hspi1, SysCntrl.SPI_page, SysCntrl.SPI_page_idx, HAL_MAX_DELAY);
 8001364:	00ad      	lsls	r5, r5, #2
		HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 4, HAL_MAX_DELAY);
 8001366:	0038      	movs	r0, r7
		SysCntrl.spi_buf_tx[2] = (SysCntrl.SPI_address>>8)  & 0xff;
 8001368:	7262      	strb	r2, [r4, #9]
		HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 4, HAL_MAX_DELAY);
 800136a:	490d      	ldr	r1, [pc, #52]	; (80013a0 <Flash_PageWrite+0x80>)
 800136c:	2204      	movs	r2, #4
 800136e:	425b      	negs	r3, r3
 8001370:	f002 ff11 	bl	8004196 <HAL_SPI_Transmit>
		HAL_SPI_Transmit(&hspi1, SysCntrl.SPI_page, SysCntrl.SPI_page_idx, HAL_MAX_DELAY);
 8001374:	5963      	ldr	r3, [r4, r5]
 8001376:	0038      	movs	r0, r7
 8001378:	b29a      	uxth	r2, r3
 800137a:	2301      	movs	r3, #1
 800137c:	4909      	ldr	r1, [pc, #36]	; (80013a4 <Flash_PageWrite+0x84>)
 800137e:	425b      	negs	r3, r3
 8001380:	f002 ff09 	bl	8004196 <HAL_SPI_Transmit>
		Set_CS(SysCntrl.active_cs);
 8001384:	79a0      	ldrb	r0, [r4, #6]
 8001386:	f7ff fb0f 	bl	80009a8 <Set_CS>
		SysCntrl.SPI_address += SysCntrl.SPI_page_idx;
 800138a:	59a3      	ldr	r3, [r4, r6]
 800138c:	5962      	ldr	r2, [r4, r5]
 800138e:	189b      	adds	r3, r3, r2
 8001390:	51a3      	str	r3, [r4, r6]
		SysCntrl.SPI_page_idx = 0;
 8001392:	2300      	movs	r3, #0
 8001394:	5163      	str	r3, [r4, r5]
}
 8001396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001398:	2000049c 	.word	0x2000049c
 800139c:	200007ec 	.word	0x200007ec
 80013a0:	200004a3 	.word	0x200004a3
 80013a4:	200005c8 	.word	0x200005c8

080013a8 <SPI_Reset>:

void SPI_Reset(uint8_t cs) {
 80013a8:	b510      	push	{r4, lr}
 80013aa:	0004      	movs	r4, r0
	Clr_CS(cs);
 80013ac:	f7ff fb0c 	bl	80009c8 <Clr_CS>
	SysCntrl.spi_buf_tx[0] = 0x66;
 80013b0:	2266      	movs	r2, #102	; 0x66
 80013b2:	4b07      	ldr	r3, [pc, #28]	; (80013d0 <SPI_Reset+0x28>)
	SysCntrl.spi_buf_tx[1] = 0x99;
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 2, HAL_MAX_DELAY);
 80013b4:	4907      	ldr	r1, [pc, #28]	; (80013d4 <SPI_Reset+0x2c>)
	SysCntrl.spi_buf_tx[0] = 0x66;
 80013b6:	71da      	strb	r2, [r3, #7]
	SysCntrl.spi_buf_tx[1] = 0x99;
 80013b8:	3233      	adds	r2, #51	; 0x33
 80013ba:	721a      	strb	r2, [r3, #8]
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx, 2, HAL_MAX_DELAY);
 80013bc:	2301      	movs	r3, #1
 80013be:	3a97      	subs	r2, #151	; 0x97
 80013c0:	425b      	negs	r3, r3
 80013c2:	4805      	ldr	r0, [pc, #20]	; (80013d8 <SPI_Reset+0x30>)
 80013c4:	f002 fee7 	bl	8004196 <HAL_SPI_Transmit>
	Set_CS(cs);
 80013c8:	0020      	movs	r0, r4
 80013ca:	f7ff faed 	bl	80009a8 <Set_CS>
}
 80013ce:	bd10      	pop	{r4, pc}
 80013d0:	2000049c 	.word	0x2000049c
 80013d4:	200004a3 	.word	0x200004a3
 80013d8:	200007ec 	.word	0x200007ec

080013dc <SPI_ReadID>:

uint8_t SPI_ReadID(uint8_t cs,struct memoryReport *data) {
 80013dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80013de:	000c      	movs	r4, r1
 80013e0:	0007      	movs	r7, r0
	Clr_CS(cs);
 80013e2:	f7ff faf1 	bl	80009c8 <Clr_CS>
	SysCntrl.spi_buf_tx[0] = 0x9f;
 80013e6:	239f      	movs	r3, #159	; 0x9f
 80013e8:	4d0f      	ldr	r5, [pc, #60]	; (8001428 <SPI_ReadID+0x4c>)
	SysCntrl.spi_buf_tx[1] = 0x0;
	SysCntrl.spi_buf_tx[2] = 0x0;
	SysCntrl.spi_buf_tx[3] = 0x0;
	SysCntrl.spi_buf_tx[4] = 0x0;
	uint8_t result = HAL_SPI_TransmitReceive(&hspi1, SysCntrl.spi_buf_tx, SysCntrl.spi_buf_rx, 5,HAL_MAX_DELAY);
 80013ea:	4a10      	ldr	r2, [pc, #64]	; (800142c <SPI_ReadID+0x50>)
	SysCntrl.spi_buf_tx[0] = 0x9f;
 80013ec:	71eb      	strb	r3, [r5, #7]
	SysCntrl.spi_buf_tx[1] = 0x0;
 80013ee:	2300      	movs	r3, #0
 80013f0:	60ab      	str	r3, [r5, #8]
	uint8_t result = HAL_SPI_TransmitReceive(&hspi1, SysCntrl.spi_buf_tx, SysCntrl.spi_buf_rx, 5,HAL_MAX_DELAY);
 80013f2:	3b01      	subs	r3, #1
 80013f4:	9300      	str	r3, [sp, #0]
 80013f6:	490e      	ldr	r1, [pc, #56]	; (8001430 <SPI_ReadID+0x54>)
 80013f8:	480e      	ldr	r0, [pc, #56]	; (8001434 <SPI_ReadID+0x58>)
 80013fa:	3306      	adds	r3, #6
 80013fc:	f002 ff88 	bl	8004310 <HAL_SPI_TransmitReceive>
 8001400:	1e06      	subs	r6, r0, #0
//	char buf[30];
//	for(i = 0; i < 5; i++){
//		sprintf(buf, "spi_buf_rx(%d): %x", i, SysCntrl.spi_buf_rx[i]);
//		UART_putstrln(buf);
//	}
	if(result == HAL_OK && data!=NULL){
 8001402:	d10b      	bne.n	800141c <SPI_ReadID+0x40>
 8001404:	2c00      	cmp	r4, #0
 8001406:	d009      	beq.n	800141c <SPI_ReadID+0x40>
			data->ManufacturerID = SysCntrl.spi_buf_rx[1];
 8001408:	7e2b      	ldrb	r3, [r5, #24]
 800140a:	7023      	strb	r3, [r4, #0]
			data->MemoryType = SysCntrl.spi_buf_rx[2];
 800140c:	7e6b      	ldrb	r3, [r5, #25]
 800140e:	7063      	strb	r3, [r4, #1]
			data->MemoryCapacity = SysCntrl.spi_buf_rx[3];
 8001410:	7eab      	ldrb	r3, [r5, #26]
 8001412:	70a3      	strb	r3, [r4, #2]
			data->UniqID[0] = SysCntrl.spi_buf_rx[4];
 8001414:	7eeb      	ldrb	r3, [r5, #27]
 8001416:	70e3      	strb	r3, [r4, #3]
			data->UniqID[1] = SysCntrl.spi_buf_rx[5];
 8001418:	7f2b      	ldrb	r3, [r5, #28]
 800141a:	7123      	strb	r3, [r4, #4]
	}
	Set_CS(cs);
 800141c:	0038      	movs	r0, r7
 800141e:	f7ff fac3 	bl	80009a8 <Set_CS>
	return result;
}
 8001422:	0030      	movs	r0, r6
 8001424:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8001426:	46c0      	nop			; (mov r8, r8)
 8001428:	2000049c 	.word	0x2000049c
 800142c:	200004b3 	.word	0x200004b3
 8001430:	200004a3 	.word	0x200004a3
 8001434:	200007ec 	.word	0x200007ec

08001438 <Xmodem_SPI>:

extern struct SConsole console;
void Xmodem_SPI(){
 8001438:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	uint8_t bt;
	int result,i;

	if(SysCntrl.TimerCnt)SysCntrl.TimerCnt--;
 800143a:	22b4      	movs	r2, #180	; 0xb4
 800143c:	4c5c      	ldr	r4, [pc, #368]	; (80015b0 <Xmodem_SPI+0x178>)
 800143e:	0092      	lsls	r2, r2, #2
 8001440:	58a3      	ldr	r3, [r4, r2]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <Xmodem_SPI+0x12>
 8001446:	3b01      	subs	r3, #1
 8001448:	50a3      	str	r3, [r4, r2]

	switch(SysCntrl.XmodemState) {
 800144a:	25b3      	movs	r5, #179	; 0xb3
 800144c:	00ad      	lsls	r5, r5, #2
 800144e:	5d66      	ldrb	r6, [r4, r5]
 8001450:	2e01      	cmp	r6, #1
 8001452:	d03e      	beq.n	80014d2 <Xmodem_SPI+0x9a>
 8001454:	2e02      	cmp	r6, #2
 8001456:	d100      	bne.n	800145a <Xmodem_SPI+0x22>
 8001458:	e06c      	b.n	8001534 <Xmodem_SPI+0xfc>
 800145a:	2e00      	cmp	r6, #0
 800145c:	d10c      	bne.n	8001478 <Xmodem_SPI+0x40>
	case XMODEM_STATE_INIT:
		result = ReadUartNonBlock(&bt,1);
 800145e:	466b      	mov	r3, sp
 8001460:	1ddf      	adds	r7, r3, #7
 8001462:	2101      	movs	r1, #1
 8001464:	0038      	movs	r0, r7
 8001466:	f7ff fb0b 	bl	8000a80 <ReadUartNonBlock>
		if((result>0)) {
 800146a:	2800      	cmp	r0, #0
 800146c:	dd15      	ble.n	800149a <Xmodem_SPI+0x62>
			switch(bt){
 800146e:	783b      	ldrb	r3, [r7, #0]
 8001470:	2b01      	cmp	r3, #1
 8001472:	d002      	beq.n	800147a <Xmodem_SPI+0x42>
 8001474:	2b03      	cmp	r3, #3
 8001476:	d00a      	beq.n	800148e <Xmodem_SPI+0x56>
	case XMODEM_STATE_S2:
		break;
	case XMODEM_STATE_S3:
		break;
	}
}
 8001478:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
				SysCntrl.XmodemState = XMODEM_STATE_S0;
 800147a:	5563      	strb	r3, [r4, r5]
				SysCntrl.X_idx = 0;
 800147c:	23b1      	movs	r3, #177	; 0xb1
 800147e:	009b      	lsls	r3, r3, #2
 8001480:	50e6      	str	r6, [r4, r3]
				SysCntrl.SPI_page_idx = 0;
 8001482:	3b0c      	subs	r3, #12
 8001484:	50e6      	str	r6, [r4, r3]
				SysCntrl.bt_count = 128+4;
 8001486:	3310      	adds	r3, #16
 8001488:	2284      	movs	r2, #132	; 0x84
 800148a:	50e2      	str	r2, [r4, r3]
			break;
 800148c:	e7f4      	b.n	8001478 <Xmodem_SPI+0x40>
				SysCntrl.XmodemMode = 0;
 800148e:	2101      	movs	r1, #1
 8001490:	4a48      	ldr	r2, [pc, #288]	; (80015b4 <Xmodem_SPI+0x17c>)
 8001492:	5ca3      	ldrb	r3, [r4, r2]
 8001494:	438b      	bics	r3, r1
 8001496:	54a3      	strb	r3, [r4, r2]
				break;
 8001498:	e7ee      	b.n	8001478 <Xmodem_SPI+0x40>
			if(!result && !SysCntrl.TimerCnt) {
 800149a:	22b4      	movs	r2, #180	; 0xb4
 800149c:	0092      	lsls	r2, r2, #2
 800149e:	58a3      	ldr	r3, [r4, r2]
 80014a0:	4318      	orrs	r0, r3
 80014a2:	d1e9      	bne.n	8001478 <Xmodem_SPI+0x40>
				SysCntrl.TryCounter--;
 80014a4:	21b5      	movs	r1, #181	; 0xb5
 80014a6:	0089      	lsls	r1, r1, #2
 80014a8:	5c63      	ldrb	r3, [r4, r1]
 80014aa:	3b01      	subs	r3, #1
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	5463      	strb	r3, [r4, r1]
				if(!SysCntrl.TryCounter) {
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d108      	bne.n	80014c6 <Xmodem_SPI+0x8e>
					SysCntrl.XmodemMode = 0;
 80014b4:	2101      	movs	r1, #1
 80014b6:	4a3f      	ldr	r2, [pc, #252]	; (80015b4 <Xmodem_SPI+0x17c>)
					UART_putstrln("Timeout...");
 80014b8:	483f      	ldr	r0, [pc, #252]	; (80015b8 <Xmodem_SPI+0x180>)
					SysCntrl.XmodemMode = 0;
 80014ba:	5ca3      	ldrb	r3, [r4, r2]
 80014bc:	438b      	bics	r3, r1
 80014be:	54a3      	strb	r3, [r4, r2]
					UART_putstrln("Timeout...");
 80014c0:	f7ff fab6 	bl	8000a30 <UART_putstrln>
 80014c4:	e7d8      	b.n	8001478 <Xmodem_SPI+0x40>
					SysCntrl.TimerCnt = XMODEM_TIME_1SEC;
 80014c6:	2364      	movs	r3, #100	; 0x64
					UART_putstr("C");
 80014c8:	483c      	ldr	r0, [pc, #240]	; (80015bc <Xmodem_SPI+0x184>)
					SysCntrl.TimerCnt = XMODEM_TIME_1SEC;
 80014ca:	50a3      	str	r3, [r4, r2]
						UART_putstr("Canceled\n\r");
 80014cc:	f7ff faa4 	bl	8000a18 <UART_putstr>
}
 80014d0:	e7d2      	b.n	8001478 <Xmodem_SPI+0x40>
		result = ReadUartNonBlock(&SysCntrl.SPI_rxbuf[SysCntrl.X_idx],SysCntrl.bt_count);
 80014d2:	27b1      	movs	r7, #177	; 0xb1
 80014d4:	228b      	movs	r2, #139	; 0x8b
 80014d6:	26b2      	movs	r6, #178	; 0xb2
 80014d8:	00bf      	lsls	r7, r7, #2
 80014da:	59e3      	ldr	r3, [r4, r7]
 80014dc:	0092      	lsls	r2, r2, #2
 80014de:	00b6      	lsls	r6, r6, #2
 80014e0:	1898      	adds	r0, r3, r2
 80014e2:	59a1      	ldr	r1, [r4, r6]
 80014e4:	1820      	adds	r0, r4, r0
 80014e6:	f7ff facb 	bl	8000a80 <ReadUartNonBlock>
		if(result>0) {
 80014ea:	2800      	cmp	r0, #0
 80014ec:	ddc4      	ble.n	8001478 <Xmodem_SPI+0x40>
			SysCntrl.X_idx += result;
 80014ee:	59e3      	ldr	r3, [r4, r7]
 80014f0:	181b      	adds	r3, r3, r0
 80014f2:	51e3      	str	r3, [r4, r7]
			SysCntrl.bt_count -= result;
 80014f4:	59a3      	ldr	r3, [r4, r6]
 80014f6:	1a1d      	subs	r5, r3, r0
 80014f8:	51a5      	str	r5, [r4, r6]
			if(!SysCntrl.bt_count) {
 80014fa:	d1bd      	bne.n	8001478 <Xmodem_SPI+0x40>
				UART_SendByte(0x06); // ACK
 80014fc:	2006      	movs	r0, #6
 80014fe:	f7ff fab3 	bl	8000a68 <UART_SendByte>
				for(i=0;i<128;i++) {
 8001502:	23ae      	movs	r3, #174	; 0xae
 8001504:	009b      	lsls	r3, r3, #2
 8001506:	58e3      	ldr	r3, [r4, r3]
 8001508:	4a2d      	ldr	r2, [pc, #180]	; (80015c0 <Xmodem_SPI+0x188>)
					SysCntrl.SPI_page[SysCntrl.SPI_page_idx++] = SysCntrl.SPI_rxbuf[i+2];
 800150a:	1ed9      	subs	r1, r3, #3
 800150c:	39ff      	subs	r1, #255	; 0xff
 800150e:	7810      	ldrb	r0, [r2, #0]
				for(i=0;i<128;i++) {
 8001510:	3501      	adds	r5, #1
					SysCntrl.SPI_page[SysCntrl.SPI_page_idx++] = SysCntrl.SPI_rxbuf[i+2];
 8001512:	5450      	strb	r0, [r2, r1]
				for(i=0;i<128;i++) {
 8001514:	3201      	adds	r2, #1
 8001516:	2d80      	cmp	r5, #128	; 0x80
 8001518:	d1f9      	bne.n	800150e <Xmodem_SPI+0xd6>
 800151a:	22ae      	movs	r2, #174	; 0xae
 800151c:	3380      	adds	r3, #128	; 0x80
 800151e:	0092      	lsls	r2, r2, #2
 8001520:	50a3      	str	r3, [r4, r2]
				if(SysCntrl.SPI_page_idx >= 255)
 8001522:	2bfe      	cmp	r3, #254	; 0xfe
 8001524:	d901      	bls.n	800152a <Xmodem_SPI+0xf2>
					Flash_PageWrite();
 8001526:	f7ff fefb 	bl	8001320 <Flash_PageWrite>
				SysCntrl.XmodemState = XMODEM_STATE_S1;
 800152a:	23b3      	movs	r3, #179	; 0xb3
 800152c:	2202      	movs	r2, #2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	54e2      	strb	r2, [r4, r3]
 8001532:	e7a1      	b.n	8001478 <Xmodem_SPI+0x40>
		result = ReadUartNonBlock(&bt,1);
 8001534:	466b      	mov	r3, sp
 8001536:	1dde      	adds	r6, r3, #7
 8001538:	2101      	movs	r1, #1
 800153a:	0030      	movs	r0, r6
 800153c:	f7ff faa0 	bl	8000a80 <ReadUartNonBlock>
		if(result>0){
 8001540:	2800      	cmp	r0, #0
 8001542:	dd99      	ble.n	8001478 <Xmodem_SPI+0x40>
			if((bt == 0x01)) {
 8001544:	7833      	ldrb	r3, [r6, #0]
 8001546:	2b01      	cmp	r3, #1
 8001548:	d106      	bne.n	8001558 <Xmodem_SPI+0x120>
					SysCntrl.XmodemState = XMODEM_STATE_S0;
 800154a:	5563      	strb	r3, [r4, r5]
					SysCntrl.X_idx = 0;
 800154c:	23b1      	movs	r3, #177	; 0xb1
 800154e:	2200      	movs	r2, #0
 8001550:	009b      	lsls	r3, r3, #2
 8001552:	50e2      	str	r2, [r4, r3]
					SysCntrl.bt_count = 128+4;
 8001554:	3304      	adds	r3, #4
 8001556:	e797      	b.n	8001488 <Xmodem_SPI+0x50>
					} else if(bt == 0x04) {
 8001558:	2b04      	cmp	r3, #4
 800155a:	d111      	bne.n	8001580 <Xmodem_SPI+0x148>
						UART_SendByte(0x06); // ACK
 800155c:	2006      	movs	r0, #6
 800155e:	f7ff fa83 	bl	8000a68 <UART_SendByte>
						if(SysCntrl.SPI_page_idx == 128) {
 8001562:	23ae      	movs	r3, #174	; 0xae
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	58e3      	ldr	r3, [r4, r3]
 8001568:	2b80      	cmp	r3, #128	; 0x80
 800156a:	d000      	beq.n	800156e <Xmodem_SPI+0x136>
 800156c:	e784      	b.n	8001478 <Xmodem_SPI+0x40>
							Flash_PageWrite();
 800156e:	f7ff fed7 	bl	8001320 <Flash_PageWrite>
						SysCntrl.XmodemState = XMODEM_STATE_INIT;
 8001572:	5b63      	ldrh	r3, [r4, r5]
 8001574:	0a5b      	lsrs	r3, r3, #9
 8001576:	025b      	lsls	r3, r3, #9
 8001578:	5363      	strh	r3, [r4, r5]
						DisableSPI();
 800157a:	f7ff f9d5 	bl	8000928 <DisableSPI>
 800157e:	e77b      	b.n	8001478 <Xmodem_SPI+0x40>
					} else if(bt == 0x17) {
 8001580:	2b17      	cmp	r3, #23
 8001582:	d103      	bne.n	800158c <Xmodem_SPI+0x154>
						UART_SendByte(0x06); // ACK
 8001584:	2006      	movs	r0, #6
 8001586:	f7ff fa6f 	bl	8000a68 <UART_SendByte>
 800158a:	e7f2      	b.n	8001572 <Xmodem_SPI+0x13a>
					}  else if(bt == 0x18) {
 800158c:	2b18      	cmp	r3, #24
 800158e:	d000      	beq.n	8001592 <Xmodem_SPI+0x15a>
 8001590:	e772      	b.n	8001478 <Xmodem_SPI+0x40>
						UART_SendByte(0x06); // ACK
 8001592:	2006      	movs	r0, #6
 8001594:	f7ff fa68 	bl	8000a68 <UART_SendByte>
						UART_SendByte(0x06); // ACK
 8001598:	2006      	movs	r0, #6
 800159a:	f7ff fa65 	bl	8000a68 <UART_SendByte>
						SysCntrl.XmodemState = XMODEM_STATE_INIT;
 800159e:	5b63      	ldrh	r3, [r4, r5]
 80015a0:	0a5b      	lsrs	r3, r3, #9
 80015a2:	025b      	lsls	r3, r3, #9
 80015a4:	5363      	strh	r3, [r4, r5]
						DisableSPI();
 80015a6:	f7ff f9bf 	bl	8000928 <DisableSPI>
						UART_putstr("Canceled\n\r");
 80015aa:	4806      	ldr	r0, [pc, #24]	; (80015c4 <Xmodem_SPI+0x18c>)
 80015ac:	e78e      	b.n	80014cc <Xmodem_SPI+0x94>
 80015ae:	46c0      	nop			; (mov r8, r8)
 80015b0:	2000049c 	.word	0x2000049c
 80015b4:	000002cd 	.word	0x000002cd
 80015b8:	08007077 	.word	0x08007077
 80015bc:	08007082 	.word	0x08007082
 80015c0:	200006ca 	.word	0x200006ca
 80015c4:	08007084 	.word	0x08007084

080015c8 <Xmodem_Init>:

void Xmodem_Init(){
 80015c8:	b510      	push	{r4, lr}
	EnableSPI();
 80015ca:	f7ff fb35 	bl	8000c38 <EnableSPI>
	SysCntrl.XmodemMode = 1;
	SysCntrl.XmodemState = XMODEM_STATE_INIT;
 80015ce:	20b3      	movs	r0, #179	; 0xb3
 80015d0:	2180      	movs	r1, #128	; 0x80
 80015d2:	4a09      	ldr	r2, [pc, #36]	; (80015f8 <Xmodem_Init+0x30>)
 80015d4:	0080      	lsls	r0, r0, #2
 80015d6:	5a13      	ldrh	r3, [r2, r0]
 80015d8:	0049      	lsls	r1, r1, #1
 80015da:	0a5b      	lsrs	r3, r3, #9
 80015dc:	025b      	lsls	r3, r3, #9
 80015de:	430b      	orrs	r3, r1
 80015e0:	5213      	strh	r3, [r2, r0]
	SysCntrl.TryCounter = 100;
 80015e2:	2364      	movs	r3, #100	; 0x64
 80015e4:	31d5      	adds	r1, #213	; 0xd5
 80015e6:	31ff      	adds	r1, #255	; 0xff
 80015e8:	5453      	strb	r3, [r2, r1]
	SysCntrl.TimerCnt = XMODEM_TIME_1SEC;
	UART_putstr("C");
 80015ea:	4804      	ldr	r0, [pc, #16]	; (80015fc <Xmodem_Init+0x34>)
	SysCntrl.TimerCnt = XMODEM_TIME_1SEC;
 80015ec:	3904      	subs	r1, #4
 80015ee:	5053      	str	r3, [r2, r1]
	UART_putstr("C");
 80015f0:	f7ff fa12 	bl	8000a18 <UART_putstr>
}
 80015f4:	bd10      	pop	{r4, pc}
 80015f6:	46c0      	nop			; (mov r8, r8)
 80015f8:	2000049c 	.word	0x2000049c
 80015fc:	08007082 	.word	0x08007082

08001600 <FlashDump>:





void FlashDump(uint8_t cs){
 8001600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001602:	0006      	movs	r6, r0
	int i;
	EnableSPI();
 8001604:	f7ff fb18 	bl	8000c38 <EnableSPI>
	//Switch_BootSpi2BMC();
	Clr_CS(cs);
 8001608:	0030      	movs	r0, r6
 800160a:	f7ff f9dd 	bl	80009c8 <Clr_CS>
	SysCntrl.spi_buf_tx[0] = 0x0b;
 800160e:	220b      	movs	r2, #11
 8001610:	4b1d      	ldr	r3, [pc, #116]	; (8001688 <FlashDump+0x88>)
	SysCntrl.spi_buf_tx[1] = 0x0;
	SysCntrl.spi_buf_tx[2] = 0x0;
	SysCntrl.spi_buf_tx[3] = 0x0;
	SysCntrl.spi_buf_tx[4] = 0x0;

	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx,5,HAL_MAX_DELAY);
 8001612:	4c1e      	ldr	r4, [pc, #120]	; (800168c <FlashDump+0x8c>)
	SysCntrl.spi_buf_tx[0] = 0x0b;
 8001614:	71da      	strb	r2, [r3, #7]
	SysCntrl.spi_buf_tx[1] = 0x0;
 8001616:	2200      	movs	r2, #0
 8001618:	609a      	str	r2, [r3, #8]
	HAL_SPI_Transmit(&hspi1, SysCntrl.spi_buf_tx,5,HAL_MAX_DELAY);
 800161a:	2301      	movs	r3, #1
 800161c:	0020      	movs	r0, r4
 800161e:	491c      	ldr	r1, [pc, #112]	; (8001690 <FlashDump+0x90>)
 8001620:	425b      	negs	r3, r3
 8001622:	3205      	adds	r2, #5
 8001624:	f002 fdb7 	bl	8004196 <HAL_SPI_Transmit>

	if(HAL_SPI_Receive(&hspi1,SysCntrl.SPI_page, 256, HAL_MAX_DELAY) == HAL_OK){
 8001628:	2301      	movs	r3, #1
 800162a:	2280      	movs	r2, #128	; 0x80
 800162c:	4d19      	ldr	r5, [pc, #100]	; (8001694 <FlashDump+0x94>)
 800162e:	0020      	movs	r0, r4
 8001630:	0029      	movs	r1, r5
 8001632:	425b      	negs	r3, r3
 8001634:	0052      	lsls	r2, r2, #1
 8001636:	f002 ff71 	bl	800451c <HAL_SPI_Receive>
 800163a:	1e04      	subs	r4, r0, #0
 800163c:	d11e      	bne.n	800167c <FlashDump+0x7c>
		SPI_ReadID(0,NULL);
 800163e:	0001      	movs	r1, r0
 8001640:	f7ff fecc 	bl	80013dc <SPI_ReadID>
		UART_putstrln(SysCntrl.spi_buf_rx);
 8001644:	4814      	ldr	r0, [pc, #80]	; (8001698 <FlashDump+0x98>)
 8001646:	f7ff f9f3 	bl	8000a30 <UART_putstrln>
		for (i=0;i<256;i++){
			UART_SendByte(ByteToHEX(SysCntrl.SPI_page[i]>>4));
			UART_SendByte(ByteToHEX(SysCntrl.SPI_page[i]&0x0f));
 800164a:	270f      	movs	r7, #15
			UART_SendByte(ByteToHEX(SysCntrl.SPI_page[i]>>4));
 800164c:	7828      	ldrb	r0, [r5, #0]
		for (i=0;i<256;i++){
 800164e:	3401      	adds	r4, #1
			UART_SendByte(ByteToHEX(SysCntrl.SPI_page[i]>>4));
 8001650:	0900      	lsrs	r0, r0, #4
 8001652:	f7ff fa95 	bl	8000b80 <ByteToHEX>
 8001656:	f7ff fa07 	bl	8000a68 <UART_SendByte>
			UART_SendByte(ByteToHEX(SysCntrl.SPI_page[i]&0x0f));
 800165a:	7828      	ldrb	r0, [r5, #0]
 800165c:	3501      	adds	r5, #1
 800165e:	4038      	ands	r0, r7
 8001660:	f7ff fa8e 	bl	8000b80 <ByteToHEX>
 8001664:	f7ff fa00 	bl	8000a68 <UART_SendByte>
			UART_putstr(" ");
 8001668:	480c      	ldr	r0, [pc, #48]	; (800169c <FlashDump+0x9c>)
 800166a:	f7ff f9d5 	bl	8000a18 <UART_putstr>
		for (i=0;i<256;i++){
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	429c      	cmp	r4, r3
 8001674:	d1ea      	bne.n	800164c <FlashDump+0x4c>
		}
		UART_putstr("\n\r");
 8001676:	480a      	ldr	r0, [pc, #40]	; (80016a0 <FlashDump+0xa0>)
 8001678:	f7ff f9ce 	bl	8000a18 <UART_putstr>
	}
	Set_CS(cs);
 800167c:	0030      	movs	r0, r6
 800167e:	f7ff f993 	bl	80009a8 <Set_CS>
	DisableSPI();
 8001682:	f7ff f951 	bl	8000928 <DisableSPI>
}
 8001686:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001688:	2000049c 	.word	0x2000049c
 800168c:	200007ec 	.word	0x200007ec
 8001690:	200004a3 	.word	0x200004a3
 8001694:	200005c8 	.word	0x200005c8
 8001698:	200004b3 	.word	0x200004b3
 800169c:	0800747d 	.word	0x0800747d
 80016a0:	0800708c 	.word	0x0800708c

080016a4 <memoryMenu>:


void memoryMenu(){
 80016a4:	b570      	push	{r4, r5, r6, lr}
	char buf[BUF_LEN];
	sprintf(buf,"CPU main flash #%d",SysCntrl.MainFlash+1);
 80016a6:	26b6      	movs	r6, #182	; 0xb6
 80016a8:	4c2a      	ldr	r4, [pc, #168]	; (8001754 <memoryMenu+0xb0>)
 80016aa:	00b6      	lsls	r6, r6, #2
 80016ac:	5da2      	ldrb	r2, [r4, r6]
void memoryMenu(){
 80016ae:	b08a      	sub	sp, #40	; 0x28
	sprintf(buf,"CPU main flash #%d",SysCntrl.MainFlash+1);
 80016b0:	07d2      	lsls	r2, r2, #31
 80016b2:	0fd2      	lsrs	r2, r2, #31
 80016b4:	4928      	ldr	r1, [pc, #160]	; (8001758 <memoryMenu+0xb4>)
 80016b6:	3201      	adds	r2, #1
 80016b8:	4668      	mov	r0, sp
 80016ba:	f004 ff31 	bl	8006520 <siprintf>
	UART_putstrln(buf);
	clearBuf(buf);
	sprintf(buf,"CPU boot flash #%d",SysCntrl.BootFlash+1);
 80016be:	4d27      	ldr	r5, [pc, #156]	; (800175c <memoryMenu+0xb8>)
	UART_putstrln(buf);
 80016c0:	4668      	mov	r0, sp
 80016c2:	f7ff f9b5 	bl	8000a30 <UART_putstrln>
	clearBuf(buf);
 80016c6:	4668      	mov	r0, sp
 80016c8:	f7fe fde6 	bl	8000298 <clearBuf>
	sprintf(buf,"CPU boot flash #%d",SysCntrl.BootFlash+1);
 80016cc:	5d62      	ldrb	r2, [r4, r5]
 80016ce:	4924      	ldr	r1, [pc, #144]	; (8001760 <memoryMenu+0xbc>)
 80016d0:	06d2      	lsls	r2, r2, #27
 80016d2:	0fd2      	lsrs	r2, r2, #31
 80016d4:	3201      	adds	r2, #1
 80016d6:	4668      	mov	r0, sp
 80016d8:	f004 ff22 	bl	8006520 <siprintf>
	UART_putstrln(buf);
 80016dc:	4668      	mov	r0, sp
 80016de:	f7ff f9a7 	bl	8000a30 <UART_putstrln>
	clearBuf(buf);
 80016e2:	4668      	mov	r0, sp
 80016e4:	f7fe fdd8 	bl	8000298 <clearBuf>
	sprintf(buf,"CPU boot attempt: %d",SysCntrl.BootAttempt);
 80016e8:	5da2      	ldrb	r2, [r4, r6]
 80016ea:	491e      	ldr	r1, [pc, #120]	; (8001764 <memoryMenu+0xc0>)
 80016ec:	06d2      	lsls	r2, r2, #27
 80016ee:	0f92      	lsrs	r2, r2, #30
 80016f0:	4668      	mov	r0, sp
 80016f2:	f004 ff15 	bl	8006520 <siprintf>
	UART_putstrln(buf);
 80016f6:	4668      	mov	r0, sp
 80016f8:	f7ff f99a 	bl	8000a30 <UART_putstrln>
	clearBuf(buf);
 80016fc:	4668      	mov	r0, sp
 80016fe:	f7fe fdcb 	bl	8000298 <clearBuf>
	sprintf(buf,"Watchdog: %s",SysCntrl.Watchdog?"Enabled":"Disabled");
 8001702:	5d63      	ldrb	r3, [r4, r5]
 8001704:	4a18      	ldr	r2, [pc, #96]	; (8001768 <memoryMenu+0xc4>)
 8001706:	069b      	lsls	r3, r3, #26
 8001708:	d400      	bmi.n	800170c <memoryMenu+0x68>
 800170a:	4a18      	ldr	r2, [pc, #96]	; (800176c <memoryMenu+0xc8>)
 800170c:	4918      	ldr	r1, [pc, #96]	; (8001770 <memoryMenu+0xcc>)
 800170e:	4668      	mov	r0, sp
 8001710:	f004 ff06 	bl	8006520 <siprintf>
	UART_putstrln(buf);
 8001714:	4668      	mov	r0, sp
 8001716:	f7ff f98b 	bl	8000a30 <UART_putstrln>
	sprintf(buf,"Auto boot: %s \r\nLaunch is %s",SysCntrl.PowerState?"On":"Off by key",(SysCntrl.pgin)?"allowed":"prohibited");
 800171a:	23b6      	movs	r3, #182	; 0xb6
 800171c:	009b      	lsls	r3, r3, #2
 800171e:	5ce3      	ldrb	r3, [r4, r3]
 8001720:	4a14      	ldr	r2, [pc, #80]	; (8001774 <memoryMenu+0xd0>)
 8001722:	069b      	lsls	r3, r3, #26
 8001724:	d400      	bmi.n	8001728 <memoryMenu+0x84>
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <memoryMenu+0xd4>)
 8001728:	5d61      	ldrb	r1, [r4, r5]
 800172a:	4b14      	ldr	r3, [pc, #80]	; (800177c <memoryMenu+0xd8>)
 800172c:	07c9      	lsls	r1, r1, #31
 800172e:	d400      	bmi.n	8001732 <memoryMenu+0x8e>
 8001730:	4b13      	ldr	r3, [pc, #76]	; (8001780 <memoryMenu+0xdc>)
 8001732:	4914      	ldr	r1, [pc, #80]	; (8001784 <memoryMenu+0xe0>)
 8001734:	4668      	mov	r0, sp
 8001736:	f004 fef3 	bl	8006520 <siprintf>
	UART_putstrln(buf);
 800173a:	4668      	mov	r0, sp
 800173c:	f7ff f978 	bl	8000a30 <UART_putstrln>
	sprintf(buf,"DEBUG: CPU Power stage: %d",SysCntrl.power_stage);
 8001740:	7822      	ldrb	r2, [r4, #0]
 8001742:	4911      	ldr	r1, [pc, #68]	; (8001788 <memoryMenu+0xe4>)
 8001744:	4668      	mov	r0, sp
 8001746:	f004 feeb 	bl	8006520 <siprintf>
	UART_putstrln(buf);
 800174a:	4668      	mov	r0, sp
 800174c:	f7ff f970 	bl	8000a30 <UART_putstrln>
}
 8001750:	b00a      	add	sp, #40	; 0x28
 8001752:	bd70      	pop	{r4, r5, r6, pc}
 8001754:	2000049c 	.word	0x2000049c
 8001758:	080070c1 	.word	0x080070c1
 800175c:	000002da 	.word	0x000002da
 8001760:	080070d4 	.word	0x080070d4
 8001764:	080070e7 	.word	0x080070e7
 8001768:	0800708f 	.word	0x0800708f
 800176c:	08007097 	.word	0x08007097
 8001770:	080070fc 	.word	0x080070fc
 8001774:	080070a0 	.word	0x080070a0
 8001778:	080070a3 	.word	0x080070a3
 800177c:	080070ae 	.word	0x080070ae
 8001780:	080070b6 	.word	0x080070b6
 8001784:	08007109 	.word	0x08007109
 8001788:	08007126 	.word	0x08007126

0800178c <writeConfig>:

void writeConfig(){
 800178c:	b530      	push	{r4, r5, lr}
	FLASH_EraseInitTypeDef EraseInitStruct;
	EraseInitStruct.TypeErase  = TYPEERASE_PAGES;
	EraseInitStruct.PageAddress = CONFIG_ADDR_IN_FLASH-4;
	EraseInitStruct.NbPages = 1;
 800178e:	2401      	movs	r4, #1
	EraseInitStruct.TypeErase  = TYPEERASE_PAGES;
 8001790:	2500      	movs	r5, #0
	EraseInitStruct.PageAddress = CONFIG_ADDR_IN_FLASH-4;
 8001792:	4b10      	ldr	r3, [pc, #64]	; (80017d4 <writeConfig+0x48>)
void writeConfig(){
 8001794:	b085      	sub	sp, #20
	EraseInitStruct.PageAddress = CONFIG_ADDR_IN_FLASH-4;
 8001796:	9302      	str	r3, [sp, #8]
	EraseInitStruct.TypeErase  = TYPEERASE_PAGES;
 8001798:	9501      	str	r5, [sp, #4]
	EraseInitStruct.NbPages = 1;
 800179a:	9403      	str	r4, [sp, #12]

	// TODO: Error handler
	uint32_t error;
	HAL_FLASH_Unlock();
 800179c:	f000 fdd4 	bl	8002348 <HAL_FLASH_Unlock>
	HAL_FLASHEx_Erase(&EraseInitStruct,&error);
 80017a0:	4669      	mov	r1, sp
 80017a2:	a801      	add	r0, sp, #4
 80017a4:	f000 fe80 	bl	80024a8 <HAL_FLASHEx_Erase>
	uint16_t data = (SysCntrl.SavedConfigH<<8)|(SysCntrl.SavedConfigL);
 80017a8:	23b6      	movs	r3, #182	; 0xb6
 80017aa:	490b      	ldr	r1, [pc, #44]	; (80017d8 <writeConfig+0x4c>)
 80017ac:	4a0b      	ldr	r2, [pc, #44]	; (80017dc <writeConfig+0x50>)
 80017ae:	009b      	lsls	r3, r3, #2
 80017b0:	5ccb      	ldrb	r3, [r1, r3]
 80017b2:	5c8a      	ldrb	r2, [r1, r2]
 80017b4:	021b      	lsls	r3, r3, #8
	HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD,CONFIG_ADDR_IN_FLASH, data);
 80017b6:	431a      	orrs	r2, r3
 80017b8:	4909      	ldr	r1, [pc, #36]	; (80017e0 <writeConfig+0x54>)
 80017ba:	002b      	movs	r3, r5
 80017bc:	0020      	movs	r0, r4
 80017be:	f000 fe0d 	bl	80023dc <HAL_FLASH_Program>
	HAL_Delay(500);
 80017c2:	20fa      	movs	r0, #250	; 0xfa
 80017c4:	40a0      	lsls	r0, r4
 80017c6:	f000 fbf9 	bl	8001fbc <HAL_Delay>
	HAL_FLASH_Lock();
 80017ca:	f000 fdd1 	bl	8002370 <HAL_FLASH_Lock>
}
 80017ce:	b005      	add	sp, #20
 80017d0:	bd30      	pop	{r4, r5, pc}
 80017d2:	46c0      	nop			; (mov r8, r8)
 80017d4:	08007c00 	.word	0x08007c00
 80017d8:	2000049c 	.word	0x2000049c
 80017dc:	000002d9 	.word	0x000002d9
 80017e0:	08007c04 	.word	0x08007c04

080017e4 <readConfig>:

void readConfig(){
	uint16_t *data = (uint16_t*) CONFIG_ADDR_IN_FLASH;

	SysCntrl.SavedConfigL = (*data)&(0b0000000011111111);
	SysCntrl.SavedConfigH = (*data)>>8;
 80017e4:	22b6      	movs	r2, #182	; 0xb6
 80017e6:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <readConfig+0x10>)
 80017e8:	4903      	ldr	r1, [pc, #12]	; (80017f8 <readConfig+0x14>)
 80017ea:	881b      	ldrh	r3, [r3, #0]
 80017ec:	0092      	lsls	r2, r2, #2
 80017ee:	ba5b      	rev16	r3, r3
 80017f0:	528b      	strh	r3, [r1, r2]

}
 80017f2:	4770      	bx	lr
 80017f4:	08007c04 	.word	0x08007c04
 80017f8:	2000049c 	.word	0x2000049c

080017fc <debouncer>:
// RSTBTN reset btm from motherboard    (x16)
// PWRBTN power button from motherboard (x15)
// ALTBOOT watchdog                     (x14)
// STMBOOTSEL ???                       (x19)

uint8_t debouncer(GPIO_TypeDef * GPIOx, uint16_t GPIO_Pin){
 80017fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80017fe:	0006      	movs	r6, r0
 8001800:	000f      	movs	r7, r1
	uint8_t pinState;
	uint8_t prevState;
	uint8_t i,swtch = 1;
	char buf[25] = {0};
	pinState = HAL_GPIO_ReadPin(GPIOx,GPIO_Pin);
 8001802:	f000 ffb3 	bl	800276c <HAL_GPIO_ReadPin>
 8001806:	2503      	movs	r5, #3
 8001808:	0004      	movs	r4, r0
	for(i=0;i<3 && swtch;i++){
		prevState = pinState;
		pinState = HAL_GPIO_ReadPin(GPIOx,GPIO_Pin);
 800180a:	0039      	movs	r1, r7
 800180c:	0030      	movs	r0, r6
 800180e:	9401      	str	r4, [sp, #4]
 8001810:	f000 ffac 	bl	800276c <HAL_GPIO_ReadPin>
		if(prevState!=pinState)
 8001814:	9a01      	ldr	r2, [sp, #4]
		pinState = HAL_GPIO_ReadPin(GPIOx,GPIO_Pin);
 8001816:	0004      	movs	r4, r0
			swtch = 0;
 8001818:	2300      	movs	r3, #0
		if(prevState!=pinState)
 800181a:	4282      	cmp	r2, r0
 800181c:	d103      	bne.n	8001826 <debouncer+0x2a>
		else
			HAL_Delay(2);
 800181e:	2002      	movs	r0, #2
 8001820:	f000 fbcc 	bl	8001fbc <HAL_Delay>
 8001824:	2301      	movs	r3, #1
	for(i=0;i<3 && swtch;i++){
 8001826:	3d01      	subs	r5, #1
 8001828:	b2ed      	uxtb	r5, r5
 800182a:	2d00      	cmp	r5, #0
 800182c:	d002      	beq.n	8001834 <debouncer+0x38>
 800182e:	2b00      	cmp	r3, #0
 8001830:	d1eb      	bne.n	800180a <debouncer+0xe>
	}

	if(swtch)
		return 0b10000000|((pinState)?1:0);

}
 8001832:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	if(swtch)
 8001834:	2b00      	cmp	r3, #0
 8001836:	d0fc      	beq.n	8001832 <debouncer+0x36>
		return 0b10000000|((pinState)?1:0);
 8001838:	1e60      	subs	r0, r4, #1
 800183a:	4184      	sbcs	r4, r0
 800183c:	0020      	movs	r0, r4
 800183e:	3080      	adds	r0, #128	; 0x80
 8001840:	e7f7      	b.n	8001832 <debouncer+0x36>
	...

08001844 <checkPowerLevels>:

void checkPowerLevels(uint8_t output){
	char buf[10] = {0};
 8001844:	2100      	movs	r1, #0
void checkPowerLevels(uint8_t output){
 8001846:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001848:	b085      	sub	sp, #20
	char buf[10] = {0};
 800184a:	2206      	movs	r2, #6
void checkPowerLevels(uint8_t output){
 800184c:	0006      	movs	r6, r0
	char buf[10] = {0};
 800184e:	a802      	add	r0, sp, #8
 8001850:	9101      	str	r1, [sp, #4]
 8001852:	f004 fe5c 	bl	800650e <memset>
	uint8_t pinState;


	pinState = HAL_GPIO_ReadPin(PGIN_PIN);
 8001856:	2180      	movs	r1, #128	; 0x80
 8001858:	2090      	movs	r0, #144	; 0x90
 800185a:	0209      	lsls	r1, r1, #8
 800185c:	05c0      	lsls	r0, r0, #23
 800185e:	f000 ff85 	bl	800276c <HAL_GPIO_ReadPin>

	SysCntrl.pgin = (pinState)?0:1;
 8001862:	2101      	movs	r1, #1
 8001864:	4243      	negs	r3, r0
 8001866:	4158      	adcs	r0, r3
 8001868:	4d40      	ldr	r5, [pc, #256]	; (800196c <checkPowerLevels+0x128>)
 800186a:	4c41      	ldr	r4, [pc, #260]	; (8001970 <checkPowerLevels+0x12c>)
 800186c:	b2c2      	uxtb	r2, r0
 800186e:	5d2b      	ldrb	r3, [r5, r4]
 8001870:	4008      	ands	r0, r1
 8001872:	438b      	bics	r3, r1
 8001874:	4318      	orrs	r0, r3
 8001876:	5528      	strb	r0, [r5, r4]
	if(output){
 8001878:	2e00      	cmp	r6, #0
 800187a:	d006      	beq.n	800188a <checkPowerLevels+0x46>
		sprintf(buf,"PGIN: %d\r\n",SysCntrl.pgin);
 800187c:	493d      	ldr	r1, [pc, #244]	; (8001974 <checkPowerLevels+0x130>)
 800187e:	a801      	add	r0, sp, #4
 8001880:	f004 fe4e 	bl	8006520 <siprintf>
		UART_putstr(buf);
 8001884:	a801      	add	r0, sp, #4
 8001886:	f7ff f8c7 	bl	8000a18 <UART_putstr>
	}

	pinState = HAL_GPIO_ReadPin(PWRBTN_PIN);
 800188a:	2102      	movs	r1, #2
 800188c:	483a      	ldr	r0, [pc, #232]	; (8001978 <checkPowerLevels+0x134>)
 800188e:	f000 ff6d 	bl	800276c <HAL_GPIO_ReadPin>
	if((pinState&0b00000001)!=SysCntrl.pwrbtn){
 8001892:	2701      	movs	r7, #1
 8001894:	5d2b      	ldrb	r3, [r5, r4]
 8001896:	4038      	ands	r0, r7
 8001898:	079b      	lsls	r3, r3, #30
 800189a:	0fdb      	lsrs	r3, r3, #31
 800189c:	4283      	cmp	r3, r0
 800189e:	d00c      	beq.n	80018ba <checkPowerLevels+0x76>
		pinState = debouncer(PWRBTN_PIN);
 80018a0:	2102      	movs	r1, #2
 80018a2:	4835      	ldr	r0, [pc, #212]	; (8001978 <checkPowerLevels+0x134>)
 80018a4:	f7ff ffaa 	bl	80017fc <debouncer>
		if(pinState&0b10000000)
 80018a8:	0603      	lsls	r3, r0, #24
 80018aa:	d506      	bpl.n	80018ba <checkPowerLevels+0x76>
			SysCntrl.pwrbtn = pinState&0b00000001;
 80018ac:	4038      	ands	r0, r7
 80018ae:	2302      	movs	r3, #2
 80018b0:	40b8      	lsls	r0, r7
 80018b2:	5d2f      	ldrb	r7, [r5, r4]
 80018b4:	439f      	bics	r7, r3
 80018b6:	4338      	orrs	r0, r7
 80018b8:	5528      	strb	r0, [r5, r4]
	}

	if(output){
 80018ba:	2e00      	cmp	r6, #0
 80018bc:	d009      	beq.n	80018d2 <checkPowerLevels+0x8e>
		sprintf(buf,"PWRBTN: %d\r\n",SysCntrl.pwrbtn);
 80018be:	5d2a      	ldrb	r2, [r5, r4]
 80018c0:	492e      	ldr	r1, [pc, #184]	; (800197c <checkPowerLevels+0x138>)
 80018c2:	0792      	lsls	r2, r2, #30
 80018c4:	0fd2      	lsrs	r2, r2, #31
 80018c6:	a801      	add	r0, sp, #4
 80018c8:	f004 fe2a 	bl	8006520 <siprintf>
		UART_putstr(buf);
 80018cc:	a801      	add	r0, sp, #4
 80018ce:	f7ff f8a3 	bl	8000a18 <UART_putstr>
	}

	pinState = HAL_GPIO_ReadPin(RSTBTN_PIN);
 80018d2:	2110      	movs	r1, #16
 80018d4:	482a      	ldr	r0, [pc, #168]	; (8001980 <checkPowerLevels+0x13c>)
 80018d6:	f000 ff49 	bl	800276c <HAL_GPIO_ReadPin>
	if((pinState&0b00000001)!=SysCntrl.rstbtn){
 80018da:	2701      	movs	r7, #1
 80018dc:	5d2b      	ldrb	r3, [r5, r4]
 80018de:	4038      	ands	r0, r7
 80018e0:	075b      	lsls	r3, r3, #29
 80018e2:	0fdb      	lsrs	r3, r3, #31
 80018e4:	4283      	cmp	r3, r0
 80018e6:	d00c      	beq.n	8001902 <checkPowerLevels+0xbe>
		pinState = debouncer(RSTBTN_PIN);
 80018e8:	2110      	movs	r1, #16
 80018ea:	4825      	ldr	r0, [pc, #148]	; (8001980 <checkPowerLevels+0x13c>)
 80018ec:	f7ff ff86 	bl	80017fc <debouncer>
		if(pinState&0b10000000){
 80018f0:	0603      	lsls	r3, r0, #24
 80018f2:	d506      	bpl.n	8001902 <checkPowerLevels+0xbe>
			SysCntrl.rstbtn = pinState&0b00000001;
 80018f4:	2304      	movs	r3, #4
 80018f6:	4038      	ands	r0, r7
 80018f8:	5d2f      	ldrb	r7, [r5, r4]
 80018fa:	0080      	lsls	r0, r0, #2
 80018fc:	439f      	bics	r7, r3
 80018fe:	4338      	orrs	r0, r7
 8001900:	5528      	strb	r0, [r5, r4]
		}
	}

	if(output){
 8001902:	2e00      	cmp	r6, #0
 8001904:	d009      	beq.n	800191a <checkPowerLevels+0xd6>
		sprintf(buf,"RSTBTN: %d\r\n",SysCntrl.rstbtn);
 8001906:	5d2a      	ldrb	r2, [r5, r4]
 8001908:	491e      	ldr	r1, [pc, #120]	; (8001984 <checkPowerLevels+0x140>)
 800190a:	0752      	lsls	r2, r2, #29
 800190c:	0fd2      	lsrs	r2, r2, #31
 800190e:	a801      	add	r0, sp, #4
 8001910:	f004 fe06 	bl	8006520 <siprintf>
		UART_putstr(buf);
 8001914:	a801      	add	r0, sp, #4
 8001916:	f7ff f87f 	bl	8000a18 <UART_putstr>
	}

	pinState = HAL_GPIO_ReadPin(STMBOOTSEL_PIN);
 800191a:	2180      	movs	r1, #128	; 0x80
 800191c:	4818      	ldr	r0, [pc, #96]	; (8001980 <checkPowerLevels+0x13c>)
 800191e:	0049      	lsls	r1, r1, #1
 8001920:	f000 ff24 	bl	800276c <HAL_GPIO_ReadPin>
	if((pinState&0b00000001)!=SysCntrl.stmbootsel){
 8001924:	2701      	movs	r7, #1
 8001926:	5d2b      	ldrb	r3, [r5, r4]
 8001928:	4038      	ands	r0, r7
 800192a:	071b      	lsls	r3, r3, #28
 800192c:	0fdb      	lsrs	r3, r3, #31
 800192e:	4283      	cmp	r3, r0
 8001930:	d00d      	beq.n	800194e <checkPowerLevels+0x10a>
		pinState = debouncer(STMBOOTSEL_PIN);
 8001932:	2180      	movs	r1, #128	; 0x80
 8001934:	4812      	ldr	r0, [pc, #72]	; (8001980 <checkPowerLevels+0x13c>)
 8001936:	0049      	lsls	r1, r1, #1
 8001938:	f7ff ff60 	bl	80017fc <debouncer>
		if(pinState&0b10000000)
 800193c:	0603      	lsls	r3, r0, #24
 800193e:	d506      	bpl.n	800194e <checkPowerLevels+0x10a>
			SysCntrl.stmbootsel = pinState&0b00000001;
 8001940:	2308      	movs	r3, #8
 8001942:	4038      	ands	r0, r7
 8001944:	5d2f      	ldrb	r7, [r5, r4]
 8001946:	00c0      	lsls	r0, r0, #3
 8001948:	439f      	bics	r7, r3
 800194a:	4338      	orrs	r0, r7
 800194c:	5528      	strb	r0, [r5, r4]
	}

	if(output){
 800194e:	2e00      	cmp	r6, #0
 8001950:	d009      	beq.n	8001966 <checkPowerLevels+0x122>
		sprintf(buf,"STMBOOTSEL: %d\r\n",SysCntrl.stmbootsel);
 8001952:	5d2a      	ldrb	r2, [r5, r4]
 8001954:	490c      	ldr	r1, [pc, #48]	; (8001988 <checkPowerLevels+0x144>)
 8001956:	0712      	lsls	r2, r2, #28
 8001958:	0fd2      	lsrs	r2, r2, #31
 800195a:	a801      	add	r0, sp, #4
 800195c:	f004 fde0 	bl	8006520 <siprintf>
		UART_putstr(buf);
 8001960:	a801      	add	r0, sp, #4
 8001962:	f7ff f859 	bl	8000a18 <UART_putstr>
	}
}
 8001966:	b005      	add	sp, #20
 8001968:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800196a:	46c0      	nop			; (mov r8, r8)
 800196c:	2000049c 	.word	0x2000049c
 8001970:	000002da 	.word	0x000002da
 8001974:	08007141 	.word	0x08007141
 8001978:	48001400 	.word	0x48001400
 800197c:	0800714c 	.word	0x0800714c
 8001980:	48000400 	.word	0x48000400
 8001984:	08007159 	.word	0x08007159
 8001988:	08007166 	.word	0x08007166

0800198c <BootMenu>:
//	if((!strcmp(console.buf,"Y")) || (!strcmp(console.buf,"y")))
//		return 1;
//	return 0;
//}

int BootMenu(){
 800198c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i,result = 0;
	clearUartConsole();
 800198e:	f7ff f8ef 	bl	8000b70 <clearUartConsole>

	UART_putstrln(WELCOME_SCREEN);
 8001992:	4850      	ldr	r0, [pc, #320]	; (8001ad4 <BootMenu+0x148>)
 8001994:	f7ff f84c 	bl	8000a30 <UART_putstrln>
	memoryMenu();
 8001998:	f7ff fe84 	bl	80016a4 <memoryMenu>
	UART_putstr("CPU FW status:");
 800199c:	484e      	ldr	r0, [pc, #312]	; (8001ad8 <BootMenu+0x14c>)
 800199e:	f7ff f83b 	bl	8000a18 <UART_putstr>
	UART_putstrln(CS_STASTUS_LABELS[SysCntrl.FWStatus]);
 80019a2:	23b6      	movs	r3, #182	; 0xb6
 80019a4:	4c4d      	ldr	r4, [pc, #308]	; (8001adc <BootMenu+0x150>)
 80019a6:	009b      	lsls	r3, r3, #2
 80019a8:	5ce3      	ldrb	r3, [r4, r3]
 80019aa:	4a4d      	ldr	r2, [pc, #308]	; (8001ae0 <BootMenu+0x154>)
 80019ac:	075b      	lsls	r3, r3, #29
 80019ae:	0f9b      	lsrs	r3, r3, #30
 80019b0:	009b      	lsls	r3, r3, #2
 80019b2:	5898      	ldr	r0, [r3, r2]
 80019b4:	f7ff f83c 	bl	8000a30 <UART_putstrln>
	for(i=0;i<10;i++)
 80019b8:	4d4a      	ldr	r5, [pc, #296]	; (8001ae4 <BootMenu+0x158>)
 80019ba:	002e      	movs	r6, r5
 80019bc:	3628      	adds	r6, #40	; 0x28
		UART_putstrln(menu[i]);
 80019be:	cd01      	ldmia	r5!, {r0}
 80019c0:	f7ff f836 	bl	8000a30 <UART_putstrln>
	for(i=0;i<10;i++)
 80019c4:	42ae      	cmp	r6, r5
 80019c6:	d1fa      	bne.n	80019be <BootMenu+0x32>
	UART_putstr(">>");
 80019c8:	4847      	ldr	r0, [pc, #284]	; (8001ae8 <BootMenu+0x15c>)
 80019ca:	f7ff f825 	bl	8000a18 <UART_putstr>

	refreshConsoleBuffer();
 80019ce:	f7ff f8c1 	bl	8000b54 <refreshConsoleBuffer>
	while(!console.cmd_flag) userInput(0);
 80019d2:	4d46      	ldr	r5, [pc, #280]	; (8001aec <BootMenu+0x160>)
 80019d4:	3502      	adds	r5, #2
 80019d6:	7fe8      	ldrb	r0, [r5, #31]
 80019d8:	2800      	cmp	r0, #0
 80019da:	d00e      	beq.n	80019fa <BootMenu+0x6e>
	uint8_t cmd = atoi(console.buf)-1;
 80019dc:	4844      	ldr	r0, [pc, #272]	; (8001af0 <BootMenu+0x164>)
 80019de:	f004 fd5c 	bl	800649a <atoi>
 80019e2:	3801      	subs	r0, #1
 80019e4:	b2c0      	uxtb	r0, r0
 80019e6:	2500      	movs	r5, #0
 80019e8:	2808      	cmp	r0, #8
 80019ea:	d80d      	bhi.n	8001a08 <BootMenu+0x7c>
 80019ec:	f7fe fb9e 	bl	800012c <__gnu_thumb1_case_uqi>
 80019f0:	37271008 	.word	0x37271008
 80019f4:	625b5144 	.word	0x625b5144
 80019f8:	6a          	.byte	0x6a
 80019f9:	00          	.byte	0x00
	while(!console.cmd_flag) userInput(0);
 80019fa:	f7ff f85d 	bl	8000ab8 <userInput>
 80019fe:	e7ea      	b.n	80019d6 <BootMenu+0x4a>
	switch(cmd){
	case 0:
		UART_putstrln("Booting...");
 8001a00:	483c      	ldr	r0, [pc, #240]	; (8001af4 <BootMenu+0x168>)
 8001a02:	f7ff f815 	bl	8000a30 <UART_putstrln>
		result = 1;
 8001a06:	2501      	movs	r5, #1
		// Set FW status to BAD
		SysCntrl.FWStatus = BAD;
	break;

	}
	refreshConsoleBuffer();
 8001a08:	f7ff f8a4 	bl	8000b54 <refreshConsoleBuffer>
	return result;
}
 8001a0c:	0028      	movs	r0, r5
 8001a0e:	bd70      	pop	{r4, r5, r6, pc}
		if(SysCntrl.MainFlash == 0){
 8001a10:	23b6      	movs	r3, #182	; 0xb6
 8001a12:	2501      	movs	r5, #1
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	5ce3      	ldrb	r3, [r4, r3]
 8001a18:	422b      	tst	r3, r5
 8001a1a:	d105      	bne.n	8001a28 <BootMenu+0x9c>
			UART_putstrln(text[3]);
 8001a1c:	4b36      	ldr	r3, [pc, #216]	; (8001af8 <BootMenu+0x16c>)
 8001a1e:	68d8      	ldr	r0, [r3, #12]
 8001a20:	f7ff f806 	bl	8000a30 <UART_putstrln>
	uint8_t i,result = 0;
 8001a24:	2500      	movs	r5, #0
	break;
 8001a26:	e7ef      	b.n	8001a08 <BootMenu+0x7c>
			SysCntrl.active_cs = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	71a3      	strb	r3, [r4, #6]
			Xmodem_Init();
 8001a2c:	f7ff fdcc 	bl	80015c8 <Xmodem_Init>
			while(SysCntrl.XmodemMode) Xmodem_SPI();
 8001a30:	4b32      	ldr	r3, [pc, #200]	; (8001afc <BootMenu+0x170>)
 8001a32:	5ce3      	ldrb	r3, [r4, r3]
 8001a34:	422b      	tst	r3, r5
 8001a36:	d0f5      	beq.n	8001a24 <BootMenu+0x98>
 8001a38:	f7ff fcfe 	bl	8001438 <Xmodem_SPI>
 8001a3c:	e7f8      	b.n	8001a30 <BootMenu+0xa4>
		if(SysCntrl.MainFlash == 1){
 8001a3e:	23b6      	movs	r3, #182	; 0xb6
 8001a40:	2501      	movs	r5, #1
 8001a42:	009b      	lsls	r3, r3, #2
 8001a44:	5ce3      	ldrb	r3, [r4, r3]
 8001a46:	422b      	tst	r3, r5
 8001a48:	d1e8      	bne.n	8001a1c <BootMenu+0x90>
			SysCntrl.active_cs = 1;
 8001a4a:	71a5      	strb	r5, [r4, #6]
			Xmodem_Init();
 8001a4c:	f7ff fdbc 	bl	80015c8 <Xmodem_Init>
			while(SysCntrl.XmodemMode) Xmodem_SPI();
 8001a50:	4b2a      	ldr	r3, [pc, #168]	; (8001afc <BootMenu+0x170>)
 8001a52:	5ce3      	ldrb	r3, [r4, r3]
 8001a54:	422b      	tst	r3, r5
 8001a56:	d0e5      	beq.n	8001a24 <BootMenu+0x98>
 8001a58:	f7ff fcee 	bl	8001438 <Xmodem_SPI>
 8001a5c:	e7f8      	b.n	8001a50 <BootMenu+0xc4>
		SysCntrl.MainFlash = ~SysCntrl.MainFlash;
 8001a5e:	21b6      	movs	r1, #182	; 0xb6
 8001a60:	0089      	lsls	r1, r1, #2
 8001a62:	5c62      	ldrb	r2, [r4, r1]
 8001a64:	2001      	movs	r0, #1
 8001a66:	07d3      	lsls	r3, r2, #31
 8001a68:	0fdb      	lsrs	r3, r3, #31
 8001a6a:	43db      	mvns	r3, r3
 8001a6c:	4382      	bics	r2, r0
 8001a6e:	4003      	ands	r3, r0
 8001a70:	4313      	orrs	r3, r2
 8001a72:	5463      	strb	r3, [r4, r1]
		writeConfig();
 8001a74:	f7ff fe8a 	bl	800178c <writeConfig>
		SysCntrl.BootFlash = ~SysCntrl.BootFlash;
 8001a78:	4921      	ldr	r1, [pc, #132]	; (8001b00 <BootMenu+0x174>)
 8001a7a:	2001      	movs	r0, #1
 8001a7c:	5c62      	ldrb	r2, [r4, r1]
 8001a7e:	06d3      	lsls	r3, r2, #27
 8001a80:	0fdb      	lsrs	r3, r3, #31
 8001a82:	43db      	mvns	r3, r3
 8001a84:	4003      	ands	r3, r0
 8001a86:	011b      	lsls	r3, r3, #4
 8001a88:	300f      	adds	r0, #15
		SysCntrl.Watchdog = ~SysCntrl.Watchdog;
 8001a8a:	4382      	bics	r2, r0
		SysCntrl.FWStatus = BAD;
 8001a8c:	4313      	orrs	r3, r2
 8001a8e:	5463      	strb	r3, [r4, r1]
 8001a90:	e7c8      	b.n	8001a24 <BootMenu+0x98>
		SysCntrl.Watchdog = ~SysCntrl.Watchdog;
 8001a92:	491b      	ldr	r1, [pc, #108]	; (8001b00 <BootMenu+0x174>)
 8001a94:	2001      	movs	r0, #1
 8001a96:	5c62      	ldrb	r2, [r4, r1]
 8001a98:	0693      	lsls	r3, r2, #26
 8001a9a:	0fdb      	lsrs	r3, r3, #31
 8001a9c:	43db      	mvns	r3, r3
 8001a9e:	4003      	ands	r3, r0
 8001aa0:	015b      	lsls	r3, r3, #5
 8001aa2:	301f      	adds	r0, #31
 8001aa4:	e7f1      	b.n	8001a8a <BootMenu+0xfe>
		SysCntrl.FWStatus = CONFIRMED;
 8001aa6:	22b6      	movs	r2, #182	; 0xb6
 8001aa8:	2106      	movs	r1, #6
 8001aaa:	0092      	lsls	r2, r2, #2
 8001aac:	5ca3      	ldrb	r3, [r4, r2]
 8001aae:	438b      	bics	r3, r1
 8001ab0:	54a3      	strb	r3, [r4, r2]
	break;
 8001ab2:	e7b7      	b.n	8001a24 <BootMenu+0x98>
		SysCntrl.FWStatus = UPDATED;
 8001ab4:	21b6      	movs	r1, #182	; 0xb6
 8001ab6:	2206      	movs	r2, #6
 8001ab8:	0089      	lsls	r1, r1, #2
 8001aba:	5c63      	ldrb	r3, [r4, r1]
 8001abc:	4393      	bics	r3, r2
 8001abe:	001a      	movs	r2, r3
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	e7e3      	b.n	8001a8c <BootMenu+0x100>
		SysCntrl.FWStatus = BAD;
 8001ac4:	21b6      	movs	r1, #182	; 0xb6
 8001ac6:	2206      	movs	r2, #6
 8001ac8:	0089      	lsls	r1, r1, #2
 8001aca:	5c63      	ldrb	r3, [r4, r1]
 8001acc:	4393      	bics	r3, r2
 8001ace:	001a      	movs	r2, r3
 8001ad0:	2304      	movs	r3, #4
 8001ad2:	e7db      	b.n	8001a8c <BootMenu+0x100>
 8001ad4:	08007177 	.word	0x08007177
 8001ad8:	080071a5 	.word	0x080071a5
 8001adc:	2000049c 	.word	0x2000049c
 8001ae0:	20000004 	.word	0x20000004
 8001ae4:	20000014 	.word	0x20000014
 8001ae8:	08007074 	.word	0x08007074
 8001aec:	20000474 	.word	0x20000474
 8001af0:	20000475 	.word	0x20000475
 8001af4:	080071b4 	.word	0x080071b4
 8001af8:	2000003c 	.word	0x2000003c
 8001afc:	000002cd 	.word	0x000002cd
 8001b00:	000002da 	.word	0x000002da

08001b04 <PowerSM>:
void PowerSM() {
 8001b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if(SysCntrl.PowerTimer>0)
 8001b06:	4c66      	ldr	r4, [pc, #408]	; (8001ca0 <PowerSM+0x19c>)
 8001b08:	8865      	ldrh	r5, [r4, #2]
 8001b0a:	2d00      	cmp	r5, #0
 8001b0c:	d002      	beq.n	8001b14 <PowerSM+0x10>
		SysCntrl.PowerTimer--;
 8001b0e:	3d01      	subs	r5, #1
 8001b10:	8065      	strh	r5, [r4, #2]
}
 8001b12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		switch(SysCntrl.power_stage) {
 8001b14:	7820      	ldrb	r0, [r4, #0]
 8001b16:	2815      	cmp	r0, #21
 8001b18:	d81d      	bhi.n	8001b56 <PowerSM+0x52>
 8001b1a:	2808      	cmp	r0, #8
 8001b1c:	d809      	bhi.n	8001b32 <PowerSM+0x2e>
 8001b1e:	2800      	cmp	r0, #0
 8001b20:	d03d      	beq.n	8001b9e <PowerSM+0x9a>
 8001b22:	2801      	cmp	r0, #1
 8001b24:	d1f5      	bne.n	8001b12 <PowerSM+0xe>
			if(SysCntrl.PowerState || BootMenu())
 8001b26:	23b6      	movs	r3, #182	; 0xb6
 8001b28:	009b      	lsls	r3, r3, #2
 8001b2a:	5ce3      	ldrb	r3, [r4, r3]
 8001b2c:	069b      	lsls	r3, r3, #26
 8001b2e:	d433      	bmi.n	8001b98 <PowerSM+0x94>
 8001b30:	e02e      	b.n	8001b90 <PowerSM+0x8c>
 8001b32:	3809      	subs	r0, #9
 8001b34:	280c      	cmp	r0, #12
 8001b36:	d8ec      	bhi.n	8001b12 <PowerSM+0xe>
 8001b38:	f7fe fb02 	bl	8000140 <__gnu_thumb1_case_shi>
 8001b3c:	0073005a 	.word	0x0073005a
 8001b40:	ffeb00ac 	.word	0xffeb00ac
 8001b44:	ffebffeb 	.word	0xffebffeb
 8001b48:	ffebffeb 	.word	0xffebffeb
 8001b4c:	ffebffeb 	.word	0xffebffeb
 8001b50:	007dffeb 	.word	0x007dffeb
 8001b54:	00a2      	.short	0x00a2
		switch(SysCntrl.power_stage) {
 8001b56:	2829      	cmp	r0, #41	; 0x29
 8001b58:	d100      	bne.n	8001b5c <PowerSM+0x58>
 8001b5a:	e08b      	b.n	8001c74 <PowerSM+0x170>
 8001b5c:	d811      	bhi.n	8001b82 <PowerSM+0x7e>
 8001b5e:	281e      	cmp	r0, #30
 8001b60:	d070      	beq.n	8001c44 <PowerSM+0x140>
 8001b62:	2828      	cmp	r0, #40	; 0x28
 8001b64:	d1d5      	bne.n	8001b12 <PowerSM+0xe>
			SetI2C_Mask(CPU_RST_N);
 8001b66:	2080      	movs	r0, #128	; 0x80
 8001b68:	f7fe fef6 	bl	8000958 <SetI2C_Mask>
			ClrI2C_Mask(TRST_N|EJ_TRST_N|RESET_N);
 8001b6c:	2064      	movs	r0, #100	; 0x64
 8001b6e:	f7fe ff07 	bl	8000980 <ClrI2C_Mask>
			SysCntrl.PowerTimer  = 100;
 8001b72:	2364      	movs	r3, #100	; 0x64
 8001b74:	8063      	strh	r3, [r4, #2]
			SysCntrl.power_stage = 51;
 8001b76:	3b31      	subs	r3, #49	; 0x31
 8001b78:	7023      	strb	r3, [r4, #0]
			SysCntrl.WatchdogTimer = 0;
 8001b7a:	23b7      	movs	r3, #183	; 0xb7
 8001b7c:	009b      	lsls	r3, r3, #2
				SysCntrl.WatchdogTimer = 0; //обязательно обнулить, иначе будет вечный перезапуск
 8001b7e:	52e5      	strh	r5, [r4, r3]
 8001b80:	e7c7      	b.n	8001b12 <PowerSM+0xe>
		switch(SysCntrl.power_stage) {
 8001b82:	2833      	cmp	r0, #51	; 0x33
 8001b84:	d065      	beq.n	8001c52 <PowerSM+0x14e>
 8001b86:	2864      	cmp	r0, #100	; 0x64
 8001b88:	d1c3      	bne.n	8001b12 <PowerSM+0xe>
			ClrI2C_Mask(0b11111111);
 8001b8a:	309b      	adds	r0, #155	; 0x9b
 8001b8c:	f7fe fef8 	bl	8000980 <ClrI2C_Mask>
			if(BootMenu())
 8001b90:	f7ff fefc 	bl	800198c <BootMenu>
 8001b94:	2800      	cmp	r0, #0
 8001b96:	d0bc      	beq.n	8001b12 <PowerSM+0xe>
				SysCntrl.power_stage = 9;
 8001b98:	2309      	movs	r3, #9
			SysCntrl.power_stage = 100;
 8001b9a:	7023      	strb	r3, [r4, #0]
}
 8001b9c:	e7b9      	b.n	8001b12 <PowerSM+0xe>
			 if(SysCntrl.FWStatus == CONFIRMED || SysCntrl.FWStatus == BAD)
 8001b9e:	25b6      	movs	r5, #182	; 0xb6
 8001ba0:	00ad      	lsls	r5, r5, #2
 8001ba2:	5d63      	ldrb	r3, [r4, r5]
 8001ba4:	483f      	ldr	r0, [pc, #252]	; (8001ca4 <PowerSM+0x1a0>)
 8001ba6:	07da      	lsls	r2, r3, #31
 8001ba8:	0fd2      	lsrs	r2, r2, #31
 8001baa:	0799      	lsls	r1, r3, #30
 8001bac:	d407      	bmi.n	8001bbe <PowerSM+0xba>
				 SysCntrl.BootFlash = SysCntrl.MainFlash;
 8001bae:	0113      	lsls	r3, r2, #4
					 SysCntrl.BootFlash = ~SysCntrl.MainFlash;
 8001bb0:	2110      	movs	r1, #16
 8001bb2:	5c22      	ldrb	r2, [r4, r0]
					 SysCntrl.BootFlash = SysCntrl.MainFlash;
 8001bb4:	438a      	bics	r2, r1
 8001bb6:	431a      	orrs	r2, r3
 8001bb8:	5422      	strb	r2, [r4, r0]
			 SysCntrl.power_stage = 1;
 8001bba:	2301      	movs	r3, #1
 8001bbc:	e7ed      	b.n	8001b9a <PowerSM+0x96>
				 if(SysCntrl.BootAttempt>0){
 8001bbe:	2618      	movs	r6, #24
 8001bc0:	4233      	tst	r3, r6
 8001bc2:	d00c      	beq.n	8001bde <PowerSM+0xda>
					 SysCntrl.BootAttempt--;
 8001bc4:	2703      	movs	r7, #3
 8001bc6:	06d9      	lsls	r1, r3, #27
 8001bc8:	0f89      	lsrs	r1, r1, #30
 8001bca:	3103      	adds	r1, #3
 8001bcc:	4039      	ands	r1, r7
 8001bce:	40b9      	lsls	r1, r7
 8001bd0:	43b3      	bics	r3, r6
 8001bd2:	4319      	orrs	r1, r3
					 SysCntrl.BootFlash = ~SysCntrl.MainFlash;
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	4053      	eors	r3, r2
					 SysCntrl.BootAttempt--;
 8001bd8:	5561      	strb	r1, [r4, r5]
					 SysCntrl.BootFlash = ~SysCntrl.MainFlash;
 8001bda:	011b      	lsls	r3, r3, #4
 8001bdc:	e7e8      	b.n	8001bb0 <PowerSM+0xac>
					 SysCntrl.FWStatus = BAD;
 8001bde:	2106      	movs	r1, #6
 8001be0:	438b      	bics	r3, r1
 8001be2:	3902      	subs	r1, #2
 8001be4:	430b      	orrs	r3, r1
 8001be6:	5563      	strb	r3, [r4, r5]
					 SysCntrl.BootFlash = SysCntrl.MainFlash;
 8001be8:	310c      	adds	r1, #12
 8001bea:	0113      	lsls	r3, r2, #4
 8001bec:	5c22      	ldrb	r2, [r4, r0]
 8001bee:	e7e1      	b.n	8001bb4 <PowerSM+0xb0>
			 if(SysCntrl.BootFlash){
 8001bf0:	2610      	movs	r6, #16
 8001bf2:	4d2c      	ldr	r5, [pc, #176]	; (8001ca4 <PowerSM+0x1a0>)
 8001bf4:	5d62      	ldrb	r2, [r4, r5]
 8001bf6:	4232      	tst	r2, r6
 8001bf8:	d00e      	beq.n	8001c18 <PowerSM+0x114>
				  SetI2C_Mask(FLASH_EN_1);
 8001bfa:	0030      	movs	r0, r6
 8001bfc:	f7fe feac 	bl	8000958 <SetI2C_Mask>
				  ClrI2C_Mask(FLASH_EN_0);
 8001c00:	2008      	movs	r0, #8
				  ClrI2C_Mask(FLASH_EN_1);
 8001c02:	f7fe febd 	bl	8000980 <ClrI2C_Mask>
			if(SysCntrl.pgin){
 8001c06:	5d63      	ldrb	r3, [r4, r5]
 8001c08:	07db      	lsls	r3, r3, #31
 8001c0a:	d400      	bmi.n	8001c0e <PowerSM+0x10a>
 8001c0c:	e781      	b.n	8001b12 <PowerSM+0xe>
				SysCntrl.power_stage = 10;
 8001c0e:	230a      	movs	r3, #10
 8001c10:	7023      	strb	r3, [r4, #0]
				SysCntrl.PowerTimer = 2;
 8001c12:	3b08      	subs	r3, #8
 8001c14:	8063      	strh	r3, [r4, #2]
 8001c16:	e77c      	b.n	8001b12 <PowerSM+0xe>
				  SetI2C_Mask(FLASH_EN_0);
 8001c18:	2008      	movs	r0, #8
 8001c1a:	f7fe fe9d 	bl	8000958 <SetI2C_Mask>
				  ClrI2C_Mask(FLASH_EN_1);
 8001c1e:	0030      	movs	r0, r6
 8001c20:	e7ef      	b.n	8001c02 <PowerSM+0xfe>
			SetI2C_Mask(TRST_N|EJ_TRST_N);
 8001c22:	2060      	movs	r0, #96	; 0x60
 8001c24:	f7fe fe98 	bl	8000958 <SetI2C_Mask>
			ClrI2C_Mask(RESET_N|CPU_RST_N);
 8001c28:	2084      	movs	r0, #132	; 0x84
 8001c2a:	f7fe fea9 	bl	8000980 <ClrI2C_Mask>
			SysCntrl.PowerTimer  = 2;
 8001c2e:	2302      	movs	r3, #2
 8001c30:	8063      	strh	r3, [r4, #2]
			SysCntrl.power_stage = 20;
 8001c32:	3312      	adds	r3, #18
 8001c34:	e7b1      	b.n	8001b9a <PowerSM+0x96>
			SetI2C_Mask(ENA_LV_DCDC);
 8001c36:	2001      	movs	r0, #1
 8001c38:	f7fe fe8e 	bl	8000958 <SetI2C_Mask>
			SysCntrl.PowerTimer  = 20;
 8001c3c:	2314      	movs	r3, #20
 8001c3e:	8063      	strh	r3, [r4, #2]
			SysCntrl.power_stage = 30;
 8001c40:	330a      	adds	r3, #10
 8001c42:	e7aa      	b.n	8001b9a <PowerSM+0x96>
			SetI2C_Mask(ENA_HV_DCDC);
 8001c44:	2002      	movs	r0, #2
 8001c46:	f7fe fe87 	bl	8000958 <SetI2C_Mask>
			SysCntrl.PowerTimer  = 10;
 8001c4a:	230a      	movs	r3, #10
 8001c4c:	8063      	strh	r3, [r4, #2]
			SysCntrl.power_stage = 40;
 8001c4e:	331e      	adds	r3, #30
 8001c50:	e7a3      	b.n	8001b9a <PowerSM+0x96>
			SetI2C_Mask(TRST_N|EJ_TRST_N|RESET_N);
 8001c52:	2064      	movs	r0, #100	; 0x64
 8001c54:	f7fe fe80 	bl	8000958 <SetI2C_Mask>
			ClrI2C_Mask(CPU_RST_N);
 8001c58:	2080      	movs	r0, #128	; 0x80
 8001c5a:	f7fe fe91 	bl	8000980 <ClrI2C_Mask>
			SysCntrl.PowerTimer  = 100;
 8001c5e:	2364      	movs	r3, #100	; 0x64
 8001c60:	8063      	strh	r3, [r4, #2]
			if(SysCntrl.WatchdogTimer > 5*100){ // 500 = 5 seconds
 8001c62:	23b7      	movs	r3, #183	; 0xb7
 8001c64:	22fa      	movs	r2, #250	; 0xfa
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	5ae1      	ldrh	r1, [r4, r3]
 8001c6a:	0052      	lsls	r2, r2, #1
 8001c6c:	4291      	cmp	r1, r2
 8001c6e:	d800      	bhi.n	8001c72 <PowerSM+0x16e>
 8001c70:	e74f      	b.n	8001b12 <PowerSM+0xe>
 8001c72:	e784      	b.n	8001b7e <PowerSM+0x7a>
			SysCntrl.PowerTimer  = 500;
 8001c74:	23fa      	movs	r3, #250	; 0xfa
 8001c76:	005b      	lsls	r3, r3, #1
 8001c78:	8063      	strh	r3, [r4, #2]
			SysCntrl.power_stage = 21;
 8001c7a:	3be0      	subs	r3, #224	; 0xe0
			SysCntrl.power_stage = 100;
 8001c7c:	3bff      	subs	r3, #255	; 0xff
 8001c7e:	e78c      	b.n	8001b9a <PowerSM+0x96>
			SetI2C_Mask(CPU_RST_N);
 8001c80:	2080      	movs	r0, #128	; 0x80
 8001c82:	f7fe fe69 	bl	8000958 <SetI2C_Mask>
			ClrI2C_Mask(TRST_N|EJ_TRST_N|RESET_N);
 8001c86:	2064      	movs	r0, #100	; 0x64
 8001c88:	f7fe fe7a 	bl	8000980 <ClrI2C_Mask>
			SysCntrl.PowerTimer  = 1;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	8063      	strh	r3, [r4, #2]
			SysCntrl.power_stage = 51;
 8001c90:	3332      	adds	r3, #50	; 0x32
 8001c92:	e782      	b.n	8001b9a <PowerSM+0x96>
			SysCntrl.PowerTimer = 500;
 8001c94:	23fa      	movs	r3, #250	; 0xfa
 8001c96:	005b      	lsls	r3, r3, #1
 8001c98:	8063      	strh	r3, [r4, #2]
			SysCntrl.power_stage = 100;
 8001c9a:	3b91      	subs	r3, #145	; 0x91
 8001c9c:	e7ee      	b.n	8001c7c <PowerSM+0x178>
 8001c9e:	46c0      	nop			; (mov r8, r8)
 8001ca0:	2000049c 	.word	0x2000049c
 8001ca4:	000002da 	.word	0x000002da

08001ca8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ca8:	2001      	movs	r0, #1
 8001caa:	4b0c      	ldr	r3, [pc, #48]	; (8001cdc <HAL_MspInit+0x34>)
{
 8001cac:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cae:	6999      	ldr	r1, [r3, #24]
 8001cb0:	4301      	orrs	r1, r0
 8001cb2:	6199      	str	r1, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb4:	2180      	movs	r1, #128	; 0x80
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	699a      	ldr	r2, [r3, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cb8:	0549      	lsls	r1, r1, #21
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cba:	4002      	ands	r2, r0
 8001cbc:	9200      	str	r2, [sp, #0]
 8001cbe:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cc0:	69da      	ldr	r2, [r3, #28]
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	61da      	str	r2, [r3, #28]
 8001cc6:	69db      	ldr	r3, [r3, #28]

  /* System interrupt init*/

  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8001cc8:	4a05      	ldr	r2, [pc, #20]	; (8001ce0 <HAL_MspInit+0x38>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cca:	400b      	ands	r3, r1
 8001ccc:	9301      	str	r3, [sp, #4]
 8001cce:	9b01      	ldr	r3, [sp, #4]
  __HAL_REMAP_PIN_ENABLE(HAL_REMAP_PA11_PA12);
 8001cd0:	2310      	movs	r3, #16
 8001cd2:	6811      	ldr	r1, [r2, #0]
 8001cd4:	430b      	orrs	r3, r1
 8001cd6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001cd8:	b002      	add	sp, #8
 8001cda:	4770      	bx	lr
 8001cdc:	40021000 	.word	0x40021000
 8001ce0:	40010000 	.word	0x40010000

08001ce4 <HAL_ADC_MspInit>:
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
  if(hadc->Instance==ADC1)
 8001ce4:	4b08      	ldr	r3, [pc, #32]	; (8001d08 <HAL_ADC_MspInit+0x24>)
 8001ce6:	6802      	ldr	r2, [r0, #0]
{
 8001ce8:	b082      	sub	sp, #8
  if(hadc->Instance==ADC1)
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d109      	bne.n	8001d02 <HAL_ADC_MspInit+0x1e>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001cee:	2080      	movs	r0, #128	; 0x80
 8001cf0:	4a06      	ldr	r2, [pc, #24]	; (8001d0c <HAL_ADC_MspInit+0x28>)
 8001cf2:	0080      	lsls	r0, r0, #2
 8001cf4:	6991      	ldr	r1, [r2, #24]
 8001cf6:	4301      	orrs	r1, r0
 8001cf8:	6191      	str	r1, [r2, #24]
 8001cfa:	6993      	ldr	r3, [r2, #24]
 8001cfc:	4003      	ands	r3, r0
 8001cfe:	9301      	str	r3, [sp, #4]
 8001d00:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001d02:	b002      	add	sp, #8
 8001d04:	4770      	bx	lr
 8001d06:	46c0      	nop			; (mov r8, r8)
 8001d08:	40012400 	.word	0x40012400
 8001d0c:	40021000 	.word	0x40021000

08001d10 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d10:	b510      	push	{r4, lr}
 8001d12:	0004      	movs	r4, r0
 8001d14:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d16:	2214      	movs	r2, #20
 8001d18:	2100      	movs	r1, #0
 8001d1a:	a803      	add	r0, sp, #12
 8001d1c:	f004 fbf7 	bl	800650e <memset>
  if(hi2c->Instance==I2C1)
 8001d20:	4b13      	ldr	r3, [pc, #76]	; (8001d70 <HAL_I2C_MspInit+0x60>)
 8001d22:	6822      	ldr	r2, [r4, #0]
 8001d24:	429a      	cmp	r2, r3
 8001d26:	d120      	bne.n	8001d6a <HAL_I2C_MspInit+0x5a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d28:	2180      	movs	r1, #128	; 0x80
 8001d2a:	4c12      	ldr	r4, [pc, #72]	; (8001d74 <HAL_I2C_MspInit+0x64>)
 8001d2c:	02c9      	lsls	r1, r1, #11
 8001d2e:	6962      	ldr	r2, [r4, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d30:	4811      	ldr	r0, [pc, #68]	; (8001d78 <HAL_I2C_MspInit+0x68>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d32:	430a      	orrs	r2, r1
 8001d34:	6162      	str	r2, [r4, #20]
 8001d36:	6963      	ldr	r3, [r4, #20]
 8001d38:	400b      	ands	r3, r1
 8001d3a:	9301      	str	r3, [sp, #4]
 8001d3c:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001d3e:	23c0      	movs	r3, #192	; 0xc0
 8001d40:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d42:	3bae      	subs	r3, #174	; 0xae
 8001d44:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001d4a:	3303      	adds	r3, #3
 8001d4c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d4e:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8001d50:	3b02      	subs	r3, #2
 8001d52:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001d54:	f000 fbf2 	bl	800253c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001d58:	2180      	movs	r1, #128	; 0x80
 8001d5a:	69e2      	ldr	r2, [r4, #28]
 8001d5c:	0389      	lsls	r1, r1, #14
 8001d5e:	430a      	orrs	r2, r1
 8001d60:	61e2      	str	r2, [r4, #28]
 8001d62:	69e3      	ldr	r3, [r4, #28]
 8001d64:	400b      	ands	r3, r1
 8001d66:	9302      	str	r3, [sp, #8]
 8001d68:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001d6a:	b008      	add	sp, #32
 8001d6c:	bd10      	pop	{r4, pc}
 8001d6e:	46c0      	nop			; (mov r8, r8)
 8001d70:	40005400 	.word	0x40005400
 8001d74:	40021000 	.word	0x40021000
 8001d78:	48000400 	.word	0x48000400

08001d7c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001d7c:	b510      	push	{r4, lr}
 8001d7e:	0004      	movs	r4, r0
 8001d80:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d82:	2214      	movs	r2, #20
 8001d84:	2100      	movs	r1, #0
 8001d86:	a803      	add	r0, sp, #12
 8001d88:	f004 fbc1 	bl	800650e <memset>
  if(hspi->Instance==SPI1)
 8001d8c:	4b17      	ldr	r3, [pc, #92]	; (8001dec <HAL_SPI_MspInit+0x70>)
 8001d8e:	6822      	ldr	r2, [r4, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d128      	bne.n	8001de6 <HAL_SPI_MspInit+0x6a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d94:	2080      	movs	r0, #128	; 0x80
 8001d96:	4b16      	ldr	r3, [pc, #88]	; (8001df0 <HAL_SPI_MspInit+0x74>)
 8001d98:	0140      	lsls	r0, r0, #5
 8001d9a:	6999      	ldr	r1, [r3, #24]
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d9c:	2400      	movs	r4, #0
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001d9e:	4301      	orrs	r1, r0
 8001da0:	6199      	str	r1, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da2:	2180      	movs	r1, #128	; 0x80
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001da4:	699a      	ldr	r2, [r3, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001da6:	0289      	lsls	r1, r1, #10
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001da8:	4002      	ands	r2, r0
 8001daa:	9201      	str	r2, [sp, #4]
 8001dac:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dae:	695a      	ldr	r2, [r3, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db0:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001db2:	430a      	orrs	r2, r1
 8001db4:	615a      	str	r2, [r3, #20]
 8001db6:	695b      	ldr	r3, [r3, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001db8:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001dba:	400b      	ands	r3, r1
 8001dbc:	9302      	str	r3, [sp, #8]
 8001dbe:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001dc0:	23e0      	movs	r3, #224	; 0xe0
 8001dc2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dc4:	3bde      	subs	r3, #222	; 0xde
 8001dc6:	9304      	str	r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dc8:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001dca:	3301      	adds	r3, #1
 8001dcc:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dce:	9405      	str	r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8001dd0:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dd2:	f000 fbb3 	bl	800253c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001dd6:	2019      	movs	r0, #25
 8001dd8:	0022      	movs	r2, r4
 8001dda:	0021      	movs	r1, r4
 8001ddc:	f000 fa2c 	bl	8002238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001de0:	2019      	movs	r0, #25
 8001de2:	f000 fa53 	bl	800228c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001de6:	b008      	add	sp, #32
 8001de8:	bd10      	pop	{r4, pc}
 8001dea:	46c0      	nop			; (mov r8, r8)
 8001dec:	40013000 	.word	0x40013000
 8001df0:	40021000 	.word	0x40021000

08001df4 <HAL_SPI_MspDeInit>:
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspDeInit(SPI_HandleTypeDef* hspi)
{
  if(hspi->Instance==SPI1)
 8001df4:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_SPI_MspDeInit+0x28>)
 8001df6:	6802      	ldr	r2, [r0, #0]
{
 8001df8:	b510      	push	{r4, lr}
  if(hspi->Instance==SPI1)
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d10c      	bne.n	8001e18 <HAL_SPI_MspDeInit+0x24>
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001dfe:	2090      	movs	r0, #144	; 0x90
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001e00:	4a07      	ldr	r2, [pc, #28]	; (8001e20 <HAL_SPI_MspDeInit+0x2c>)
 8001e02:	4908      	ldr	r1, [pc, #32]	; (8001e24 <HAL_SPI_MspDeInit+0x30>)
 8001e04:	6993      	ldr	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001e06:	05c0      	lsls	r0, r0, #23
    __HAL_RCC_SPI1_CLK_DISABLE();
 8001e08:	400b      	ands	r3, r1
 8001e0a:	6193      	str	r3, [r2, #24]
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7);
 8001e0c:	21e0      	movs	r1, #224	; 0xe0
 8001e0e:	f000 fc45 	bl	800269c <HAL_GPIO_DeInit>

    /* SPI1 interrupt DeInit */
    HAL_NVIC_DisableIRQ(SPI1_IRQn);
 8001e12:	2019      	movs	r0, #25
 8001e14:	f000 fa46 	bl	80022a4 <HAL_NVIC_DisableIRQ>
  /* USER CODE BEGIN SPI1_MspDeInit 1 */

  /* USER CODE END SPI1_MspDeInit 1 */
  }

}
 8001e18:	bd10      	pop	{r4, pc}
 8001e1a:	46c0      	nop			; (mov r8, r8)
 8001e1c:	40013000 	.word	0x40013000
 8001e20:	40021000 	.word	0x40021000
 8001e24:	ffffefff 	.word	0xffffefff

08001e28 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e28:	b510      	push	{r4, lr}
 8001e2a:	0001      	movs	r1, r0
 8001e2c:	b086      	sub	sp, #24
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
  uint32_t              uwPrescalerValue = 0;
  uint32_t              pFLatency;
  /*Configure the TIM17 IRQ priority */
  HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority ,0);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	2016      	movs	r0, #22
 8001e32:	f000 fa01 	bl	8002238 <HAL_NVIC_SetPriority>

  /* Enable the TIM17 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8001e36:	2016      	movs	r0, #22
 8001e38:	f000 fa28 	bl	800228c <HAL_NVIC_EnableIRQ>

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001e3c:	2080      	movs	r0, #128	; 0x80
 8001e3e:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <HAL_InitTick+0x68>)
 8001e40:	02c0      	lsls	r0, r0, #11
 8001e42:	6991      	ldr	r1, [r2, #24]
 8001e44:	4301      	orrs	r1, r0
 8001e46:	6191      	str	r1, [r2, #24]
 8001e48:	6993      	ldr	r3, [r2, #24]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e4a:	4669      	mov	r1, sp
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001e4c:	4003      	ands	r3, r0
 8001e4e:	9301      	str	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e50:	a802      	add	r0, sp, #8
  __HAL_RCC_TIM17_CLK_ENABLE();
 8001e52:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001e54:	f001 ff34 	bl	8003cc0 <HAL_RCC_GetClockConfig>

  /* Compute TIM17 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001e58:	f001 ff22 	bl	8003ca0 <HAL_RCC_GetPCLK1Freq>
  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8001e5c:	4c0d      	ldr	r4, [pc, #52]	; (8001e94 <HAL_InitTick+0x6c>)
 8001e5e:	4b0e      	ldr	r3, [pc, #56]	; (8001e98 <HAL_InitTick+0x70>)
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e60:	490e      	ldr	r1, [pc, #56]	; (8001e9c <HAL_InitTick+0x74>)
  htim17.Instance = TIM17;
 8001e62:	6023      	str	r3, [r4, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8001e64:	4b0e      	ldr	r3, [pc, #56]	; (8001ea0 <HAL_InitTick+0x78>)
 8001e66:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e68:	f7fe f97e 	bl	8000168 <__udivsi3>
  htim17.Init.Prescaler = uwPrescalerValue;
  htim17.Init.ClockDivision = 0;
 8001e6c:	2300      	movs	r3, #0
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001e6e:	3801      	subs	r0, #1
  htim17.Init.Prescaler = uwPrescalerValue;
 8001e70:	6060      	str	r0, [r4, #4]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;

  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001e72:	0020      	movs	r0, r4
  htim17.Init.ClockDivision = 0;
 8001e74:	6123      	str	r3, [r4, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e76:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001e78:	f002 fdc6 	bl	8004a08 <HAL_TIM_Base_Init>
 8001e7c:	0003      	movs	r3, r0
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim17);
  }

  /* Return function status */
  return HAL_ERROR;
 8001e7e:	2001      	movs	r0, #1
  if(HAL_TIM_Base_Init(&htim17) == HAL_OK)
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d102      	bne.n	8001e8a <HAL_InitTick+0x62>
    return HAL_TIM_Base_Start_IT(&htim17);
 8001e84:	0020      	movs	r0, r4
 8001e86:	f002 fca3 	bl	80047d0 <HAL_TIM_Base_Start_IT>
}
 8001e8a:	b006      	add	sp, #24
 8001e8c:	bd10      	pop	{r4, pc}
 8001e8e:	46c0      	nop			; (mov r8, r8)
 8001e90:	40021000 	.word	0x40021000
 8001e94:	20000890 	.word	0x20000890
 8001e98:	40014800 	.word	0x40014800
 8001e9c:	000f4240 	.word	0x000f4240
 8001ea0:	000003e7 	.word	0x000003e7

08001ea4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001ea4:	e7fe      	b.n	8001ea4 <NMI_Handler>

08001ea6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ea6:	e7fe      	b.n	8001ea6 <HardFault_Handler>

08001ea8 <SVC_Handler>:

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001ea8:	4770      	bx	lr

08001eaa <PendSV_Handler>:
 8001eaa:	4770      	bx	lr

08001eac <SysTick_Handler>:
 8001eac:	4770      	bx	lr
	...

08001eb0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8001eb0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8001eb2:	4802      	ldr	r0, [pc, #8]	; (8001ebc <TIM17_IRQHandler+0xc>)
 8001eb4:	f002 fcbc 	bl	8004830 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8001eb8:	bd10      	pop	{r4, pc}
 8001eba:	46c0      	nop			; (mov r8, r8)
 8001ebc:	20000890 	.word	0x20000890

08001ec0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001ec0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001ec2:	4802      	ldr	r0, [pc, #8]	; (8001ecc <SPI1_IRQHandler+0xc>)
 8001ec4:	f002 fbe8 	bl	8004698 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001ec8:	bd10      	pop	{r4, pc}
 8001eca:	46c0      	nop			; (mov r8, r8)
 8001ecc:	200007ec 	.word	0x200007ec

08001ed0 <USB_IRQHandler>:

/**
  * @brief This function handles USB global Interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 8001ed0:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8001ed2:	4802      	ldr	r0, [pc, #8]	; (8001edc <USB_IRQHandler+0xc>)
 8001ed4:	f000 fd88 	bl	80029e8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 8001ed8:	bd10      	pop	{r4, pc}
 8001eda:	46c0      	nop			; (mov r8, r8)
 8001edc:	20000fc4 	.word	0x20000fc4

08001ee0 <_sbrk>:
void *_sbrk(ptrdiff_t incr)
{
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee0:	4a0b      	ldr	r2, [pc, #44]	; (8001f10 <_sbrk+0x30>)
 8001ee2:	490c      	ldr	r1, [pc, #48]	; (8001f14 <_sbrk+0x34>)
{
 8001ee4:	0003      	movs	r3, r0
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ee6:	1a89      	subs	r1, r1, r2
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001ee8:	4a0b      	ldr	r2, [pc, #44]	; (8001f18 <_sbrk+0x38>)
{
 8001eea:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001eec:	6810      	ldr	r0, [r2, #0]
 8001eee:	2800      	cmp	r0, #0
 8001ef0:	d101      	bne.n	8001ef6 <_sbrk+0x16>
  {
    __sbrk_heap_end = &_end;
 8001ef2:	480a      	ldr	r0, [pc, #40]	; (8001f1c <_sbrk+0x3c>)
 8001ef4:	6010      	str	r0, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ef6:	6810      	ldr	r0, [r2, #0]
 8001ef8:	18c3      	adds	r3, r0, r3
 8001efa:	428b      	cmp	r3, r1
 8001efc:	d906      	bls.n	8001f0c <_sbrk+0x2c>
  {
    errno = ENOMEM;
 8001efe:	f004 fad3 	bl	80064a8 <__errno>
 8001f02:	230c      	movs	r3, #12
 8001f04:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001f06:	2001      	movs	r0, #1
 8001f08:	4240      	negs	r0, r0

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001f0a:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001f0c:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001f0e:	e7fc      	b.n	8001f0a <_sbrk+0x2a>
 8001f10:	00000325 	.word	0x00000325
 8001f14:	20001800 	.word	0x20001800
 8001f18:	20000244 	.word	0x20000244
 8001f1c:	200012c8 	.word	0x200012c8

08001f20 <SystemInit>:
                         before branch to main program. This call is made inside
                         the "startup_stm32f0xx.s" file.
                         User can setups the default system clock (System clock source, PLL Multiplier
                         and Divider factors, AHB/APBx prescalers and Flash settings).
   */
}
 8001f20:	4770      	bx	lr
	...

08001f24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001f24:	480d      	ldr	r0, [pc, #52]	; (8001f5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001f26:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001f28:	480d      	ldr	r0, [pc, #52]	; (8001f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8001f2a:	490e      	ldr	r1, [pc, #56]	; (8001f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001f2c:	4a0e      	ldr	r2, [pc, #56]	; (8001f68 <LoopForever+0xe>)
  movs r3, #0
 8001f2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001f30:	e002      	b.n	8001f38 <LoopCopyDataInit>

08001f32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001f32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001f34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001f36:	3304      	adds	r3, #4

08001f38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001f38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001f3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001f3c:	d3f9      	bcc.n	8001f32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001f3e:	4a0b      	ldr	r2, [pc, #44]	; (8001f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001f40:	4c0b      	ldr	r4, [pc, #44]	; (8001f70 <LoopForever+0x16>)
  movs r3, #0
 8001f42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001f44:	e001      	b.n	8001f4a <LoopFillZerobss>

08001f46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001f46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001f48:	3204      	adds	r2, #4

08001f4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001f4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001f4c:	d3fb      	bcc.n	8001f46 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8001f4e:	f7ff ffe7 	bl	8001f20 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 8001f52:	f004 faaf 	bl	80064b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001f56:	f7fe fff9 	bl	8000f4c <main>

08001f5a <LoopForever>:

LoopForever:
    b LoopForever
 8001f5a:	e7fe      	b.n	8001f5a <LoopForever>
  ldr   r0, =_estack
 8001f5c:	20001800 	.word	0x20001800
  ldr r0, =_sdata
 8001f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001f64:	20000224 	.word	0x20000224
  ldr r2, =_sidata
 8001f68:	080074b4 	.word	0x080074b4
  ldr r2, =_sbss
 8001f6c:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 8001f70:	200012c8 	.word	0x200012c8

08001f74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001f74:	e7fe      	b.n	8001f74 <ADC1_IRQHandler>
	...

08001f78 <HAL_Init>:
  */
HAL_StatusTypeDef HAL_Init(void)
{
  /* Configure Flash prefetch */ 
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f78:	2310      	movs	r3, #16
 8001f7a:	4a06      	ldr	r2, [pc, #24]	; (8001f94 <HAL_Init+0x1c>)
{
 8001f7c:	b510      	push	{r4, lr}
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f7e:	6811      	ldr	r1, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */

  HAL_InitTick(TICK_INT_PRIORITY);
 8001f80:	2000      	movs	r0, #0
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001f82:	430b      	orrs	r3, r1
 8001f84:	6013      	str	r3, [r2, #0]
  HAL_InitTick(TICK_INT_PRIORITY);
 8001f86:	f7ff ff4f 	bl	8001e28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001f8a:	f7ff fe8d 	bl	8001ca8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8001f8e:	2000      	movs	r0, #0
 8001f90:	bd10      	pop	{r4, pc}
 8001f92:	46c0      	nop			; (mov r8, r8)
 8001f94:	40022000 	.word	0x40022000

08001f98 <HAL_IncTick>:
  *       implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001f98:	4a03      	ldr	r2, [pc, #12]	; (8001fa8 <HAL_IncTick+0x10>)
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_IncTick+0x14>)
 8001f9c:	6811      	ldr	r1, [r2, #0]
 8001f9e:	781b      	ldrb	r3, [r3, #0]
 8001fa0:	185b      	adds	r3, r3, r1
 8001fa2:	6013      	str	r3, [r2, #0]
}
 8001fa4:	4770      	bx	lr
 8001fa6:	46c0      	nop			; (mov r8, r8)
 8001fa8:	200008d8 	.word	0x200008d8
 8001fac:	2000004c 	.word	0x2000004c

08001fb0 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001fb0:	4b01      	ldr	r3, [pc, #4]	; (8001fb8 <HAL_GetTick+0x8>)
 8001fb2:	6818      	ldr	r0, [r3, #0]
}
 8001fb4:	4770      	bx	lr
 8001fb6:	46c0      	nop			; (mov r8, r8)
 8001fb8:	200008d8 	.word	0x200008d8

08001fbc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001fbc:	b570      	push	{r4, r5, r6, lr}
 8001fbe:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8001fc0:	f7ff fff6 	bl	8001fb0 <HAL_GetTick>
 8001fc4:	0005      	movs	r5, r0
  uint32_t wait = Delay;
  
  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001fc6:	1c63      	adds	r3, r4, #1
 8001fc8:	d002      	beq.n	8001fd0 <HAL_Delay+0x14>
  {
    wait += (uint32_t)(uwTickFreq);
 8001fca:	4b04      	ldr	r3, [pc, #16]	; (8001fdc <HAL_Delay+0x20>)
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	18e4      	adds	r4, r4, r3
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001fd0:	f7ff ffee 	bl	8001fb0 <HAL_GetTick>
 8001fd4:	1b40      	subs	r0, r0, r5
 8001fd6:	42a0      	cmp	r0, r4
 8001fd8:	d3fa      	bcc.n	8001fd0 <HAL_Delay+0x14>
  {
  }
}
 8001fda:	bd70      	pop	{r4, r5, r6, pc}
 8001fdc:	2000004c 	.word	0x2000004c

08001fe0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001fe2:	0004      	movs	r4, r0
  uint32_t tmpCFGR1 = 0U;

  /* Check ADC handle */
  if(hadc == NULL)
  {
    return HAL_ERROR;
 8001fe4:	2001      	movs	r0, #1
  if(hadc == NULL)
 8001fe6:	2c00      	cmp	r4, #0
 8001fe8:	d100      	bne.n	8001fec <HAL_ADC_Init+0xc>
 8001fea:	e080      	b.n	80020ee <HAL_ADC_Init+0x10e>
  /* Refer to header of this file for more details on clock enabling procedure*/
  
  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001fec:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d106      	bne.n	8002000 <HAL_ADC_Init+0x20>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001ff2:	0022      	movs	r2, r4
 8001ff4:	3234      	adds	r2, #52	; 0x34
    ADC_CLEAR_ERRORCODE(hadc);
 8001ff6:	63e3      	str	r3, [r4, #60]	; 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ff8:	0020      	movs	r0, r4
    hadc->Lock = HAL_UNLOCKED;
 8001ffa:	7013      	strb	r3, [r2, #0]
    HAL_ADC_MspInit(hadc);
 8001ffc:	f7ff fe72 	bl	8001ce4 <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */ 
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002000:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002002:	06db      	lsls	r3, r3, #27
 8002004:	d500      	bpl.n	8002008 <HAL_ADC_Init+0x28>
 8002006:	e087      	b.n	8002118 <HAL_ADC_Init+0x138>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8002008:	6823      	ldr	r3, [r4, #0]
 800200a:	2204      	movs	r2, #4
 800200c:	6899      	ldr	r1, [r3, #8]
 800200e:	0008      	movs	r0, r1
 8002010:	4010      	ands	r0, r2
      (tmp_hal_status == HAL_OK)                                &&
 8002012:	4211      	tst	r1, r2
 8002014:	d000      	beq.n	8002018 <HAL_ADC_Init+0x38>
 8002016:	e07f      	b.n	8002118 <HAL_ADC_Init+0x138>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002018:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800201a:	4942      	ldr	r1, [pc, #264]	; (8002124 <HAL_ADC_Init+0x144>)
 800201c:	4011      	ands	r1, r2
 800201e:	2202      	movs	r2, #2
 8002020:	430a      	orrs	r2, r1
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - ADC clock mode                                                      */
    /*  - ADC clock prescaler                                                 */
    /*  - ADC resolution                                                      */
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002022:	2103      	movs	r1, #3
    ADC_STATE_CLR_SET(hadc->State,
 8002024:	63a2      	str	r2, [r4, #56]	; 0x38
    if (ADC_IS_ENABLE(hadc) == RESET)
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	400a      	ands	r2, r1
 800202a:	2a01      	cmp	r2, #1
 800202c:	d105      	bne.n	800203a <HAL_ADC_Init+0x5a>
 800202e:	6819      	ldr	r1, [r3, #0]
 8002030:	4211      	tst	r1, r2
 8002032:	d10e      	bne.n	8002052 <HAL_ADC_Init+0x72>
 8002034:	68da      	ldr	r2, [r3, #12]
 8002036:	0412      	lsls	r2, r2, #16
 8002038:	d40b      	bmi.n	8002052 <HAL_ADC_Init+0x72>
      /* parameters):                                                         */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() )                              */
     
      /* Configuration of ADC resolution                                      */
      MODIFY_REG(hadc->Instance->CFGR1,
 800203a:	2118      	movs	r1, #24
 800203c:	68da      	ldr	r2, [r3, #12]
 800203e:	438a      	bics	r2, r1
 8002040:	68a1      	ldr	r1, [r4, #8]
 8002042:	430a      	orrs	r2, r1
 8002044:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_RES        ,
                 hadc->Init.Resolution );
      
      /* Configuration of ADC clock mode: clock source AHB or HSI with        */
      /* selectable prescaler                                                 */
      MODIFY_REG(hadc->Instance->CFGR2    ,
 8002046:	6919      	ldr	r1, [r3, #16]
 8002048:	6862      	ldr	r2, [r4, #4]
 800204a:	0089      	lsls	r1, r1, #2
 800204c:	0889      	lsrs	r1, r1, #2
 800204e:	4311      	orrs	r1, r2
 8002050:	6119      	str	r1, [r3, #16]
    /*  - external trigger polarity                                           */
    /*  - data alignment                                                      */
    /*  - resolution                                                          */
    /*  - scan direction                                                      */
    /*  - DMA continuous request                                              */
    hadc->Instance->CFGR1 &= ~( ADC_CFGR1_DISCEN  |
 8002052:	68da      	ldr	r2, [r3, #12]
 8002054:	4934      	ldr	r1, [pc, #208]	; (8002128 <HAL_ADC_Init+0x148>)
 8002056:	400a      	ands	r2, r1
 8002058:	60da      	str	r2, [r3, #12]
                                ADC_CFGR1_EXTEN   |
                                ADC_CFGR1_ALIGN   |
                                ADC_CFGR1_SCANDIR |
                                ADC_CFGR1_DMACFG   );

    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800205a:	7e25      	ldrb	r5, [r4, #24]
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 800205c:	7e62      	ldrb	r2, [r4, #25]
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800205e:	03ad      	lsls	r5, r5, #14
                 ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)     |
 8002060:	03d2      	lsls	r2, r2, #15
    tmpCFGR1 |= (ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002062:	4315      	orrs	r5, r2
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002064:	6aa2      	ldr	r2, [r4, #40]	; 0x28
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002066:	7ea1      	ldrb	r1, [r4, #26]
                 ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                            |
 8002068:	3a01      	subs	r2, #1
 800206a:	1e56      	subs	r6, r2, #1
 800206c:	41b2      	sbcs	r2, r6
 800206e:	0316      	lsls	r6, r2, #12
 8002070:	68e2      	ldr	r2, [r4, #12]
                 ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 8002072:	034f      	lsls	r7, r1, #13
 8002074:	4315      	orrs	r5, r2
                 hadc->Init.DataAlign                                             |
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002076:	6922      	ldr	r2, [r4, #16]
 8002078:	432f      	orrs	r7, r5
 800207a:	2a02      	cmp	r2, #2
 800207c:	d100      	bne.n	8002080 <HAL_ADC_Init+0xa0>
 800207e:	2004      	movs	r0, #4
                 ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests)  );
 8002080:	1d62      	adds	r2, r4, #5
 8002082:	7fd2      	ldrb	r2, [r2, #31]
 8002084:	0052      	lsls	r2, r2, #1
                 ADC_SCANDIR(hadc->Init.ScanConvMode)                             |
 8002086:	433a      	orrs	r2, r7
 8002088:	4332      	orrs	r2, r6
 800208a:	4302      	orrs	r2, r0
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800208c:	7ee0      	ldrb	r0, [r4, #27]
 800208e:	2801      	cmp	r0, #1
 8002090:	d104      	bne.n	800209c <HAL_ADC_Init+0xbc>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002092:	2900      	cmp	r1, #0
 8002094:	d12c      	bne.n	80020f0 <HAL_ADC_Init+0x110>
      {
        /* Enable the selected ADC group regular discontinuous mode */
        tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8002096:	2180      	movs	r1, #128	; 0x80
 8002098:	0249      	lsls	r1, r1, #9
 800209a:	430a      	orrs	r2, r1
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800209c:	20c2      	movs	r0, #194	; 0xc2
 800209e:	69e1      	ldr	r1, [r4, #28]
 80020a0:	30ff      	adds	r0, #255	; 0xff
 80020a2:	4281      	cmp	r1, r0
 80020a4:	d002      	beq.n	80020ac <HAL_ADC_Init+0xcc>
    {
      tmpCFGR1 |= ( hadc->Init.ExternalTrigConv    |
 80020a6:	6a20      	ldr	r0, [r4, #32]
 80020a8:	4301      	orrs	r1, r0
 80020aa:	430a      	orrs	r2, r1
    /* Management of parameters "SamplingTimeCommon" and "SamplingTime"       */
    /* (obsolete): sampling time set in this function if parameter            */
    /*  "SamplingTimeCommon" has been set to a valid sampling time.           */
    /* Otherwise, sampling time is set into ADC channel initialization        */
    /* structure with parameter "SamplingTime" (obsolete).                    */
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80020ac:	2080      	movs	r0, #128	; 0x80
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80020ae:	68d9      	ldr	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80020b0:	0540      	lsls	r0, r0, #21
    hadc->Instance->CFGR1 |= tmpCFGR1;
 80020b2:	4311      	orrs	r1, r2
 80020b4:	60d9      	str	r1, [r3, #12]
    if (IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 80020b6:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80020b8:	4281      	cmp	r1, r0
 80020ba:	d002      	beq.n	80020c2 <HAL_ADC_Init+0xe2>
 80020bc:	1e48      	subs	r0, r1, #1
 80020be:	2806      	cmp	r0, #6
 80020c0:	d807      	bhi.n	80020d2 <HAL_ADC_Init+0xf2>
    {
      /* Channel sampling time configuration */
      /* Clear the old sample time */
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80020c2:	2507      	movs	r5, #7
 80020c4:	6958      	ldr	r0, [r3, #20]
      
      /* Set the new sample time */
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80020c6:	4029      	ands	r1, r5
      hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 80020c8:	43a8      	bics	r0, r5
 80020ca:	6158      	str	r0, [r3, #20]
      hadc->Instance->SMPR |= ADC_SMPR_SET(hadc->Init.SamplingTimeCommon);
 80020cc:	6958      	ldr	r0, [r3, #20]
 80020ce:	4301      	orrs	r1, r0
 80020d0:	6159      	str	r1, [r3, #20]
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CFGR1 (excluding analog watchdog configuration: */
    /* set into separate dedicated function, and bits of ADC resolution set   */
    /* out of temporary variable 'tmpCFGR1').                                 */
    if ((hadc->Instance->CFGR1 & ~(ADC_CFGR1_AWDCH | ADC_CFGR1_AWDEN | ADC_CFGR1_AWDSGL | ADC_CFGR1_RES))
 80020d2:	68db      	ldr	r3, [r3, #12]
 80020d4:	4915      	ldr	r1, [pc, #84]	; (800212c <HAL_ADC_Init+0x14c>)
 80020d6:	400b      	ands	r3, r1
 80020d8:	4293      	cmp	r3, r2
 80020da:	d111      	bne.n	8002100 <HAL_ADC_Init+0x120>
         == tmpCFGR1)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80020dc:	2000      	movs	r0, #0
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80020de:	2203      	movs	r2, #3
      ADC_CLEAR_ERRORCODE(hadc);
 80020e0:	63e0      	str	r0, [r4, #60]	; 0x3c
      ADC_STATE_CLR_SET(hadc->State,
 80020e2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80020e4:	4393      	bics	r3, r2
 80020e6:	001a      	movs	r2, r3
 80020e8:	2301      	movs	r3, #1
 80020ea:	4313      	orrs	r3, r2
 80020ec:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80020ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020f0:	2120      	movs	r1, #32
 80020f2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80020f4:	4329      	orrs	r1, r5
 80020f6:	63a1      	str	r1, [r4, #56]	; 0x38
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020f8:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80020fa:	4308      	orrs	r0, r1
 80020fc:	63e0      	str	r0, [r4, #60]	; 0x3c
 80020fe:	e7cd      	b.n	800209c <HAL_ADC_Init+0xbc>
      ADC_STATE_CLR_SET(hadc->State,
 8002100:	2212      	movs	r2, #18
 8002102:	6ba3      	ldr	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002104:	2001      	movs	r0, #1
      ADC_STATE_CLR_SET(hadc->State,
 8002106:	4393      	bics	r3, r2
 8002108:	001a      	movs	r2, r3
 800210a:	2310      	movs	r3, #16
 800210c:	4313      	orrs	r3, r2
 800210e:	63a3      	str	r3, [r4, #56]	; 0x38
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002110:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8002112:	4303      	orrs	r3, r0
 8002114:	63e3      	str	r3, [r4, #60]	; 0x3c
      tmp_hal_status = HAL_ERROR;
 8002116:	e7ea      	b.n	80020ee <HAL_ADC_Init+0x10e>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002118:	2310      	movs	r3, #16
 800211a:	6ba2      	ldr	r2, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 800211c:	2001      	movs	r0, #1
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800211e:	4313      	orrs	r3, r2
 8002120:	63a3      	str	r3, [r4, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 8002122:	e7e4      	b.n	80020ee <HAL_ADC_Init+0x10e>
 8002124:	fffffefd 	.word	0xfffffefd
 8002128:	fffe0219 	.word	0xfffe0219
 800212c:	833fffe7 	.word	0x833fffe7

08002130 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0U;
 8002132:	2200      	movs	r2, #0
  {
    assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002134:	0004      	movs	r4, r0
  __IO uint32_t wait_loop_index = 0U;
 8002136:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 8002138:	3434      	adds	r4, #52	; 0x34
 800213a:	7822      	ldrb	r2, [r4, #0]
{
 800213c:	0003      	movs	r3, r0
  if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800213e:	6ac5      	ldr	r5, [r0, #44]	; 0x2c
  __HAL_LOCK(hadc);
 8002140:	2002      	movs	r0, #2
 8002142:	2a01      	cmp	r2, #1
 8002144:	d02a      	beq.n	800219c <HAL_ADC_ConfigChannel+0x6c>
 8002146:	3801      	subs	r0, #1
 8002148:	7020      	strb	r0, [r4, #0]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	6896      	ldr	r6, [r2, #8]
 800214e:	0776      	lsls	r6, r6, #29
 8002150:	d45f      	bmi.n	8002212 <HAL_ADC_ConfigChannel+0xe2>
  {
    /* Configure channel: depending on rank setting, add it or remove it from */
    /* ADC conversion sequencer.                                              */
    if (sConfig->Rank != ADC_RANK_NONE)
 8002152:	680b      	ldr	r3, [r1, #0]
 8002154:	4f31      	ldr	r7, [pc, #196]	; (800221c <HAL_ADC_ConfigChannel+0xec>)
 8002156:	001e      	movs	r6, r3
 8002158:	46bc      	mov	ip, r7
 800215a:	684f      	ldr	r7, [r1, #4]
 800215c:	4098      	lsls	r0, r3
 800215e:	3e10      	subs	r6, #16
 8002160:	4567      	cmp	r7, ip
 8002162:	d03f      	beq.n	80021e4 <HAL_ADC_ConfigChannel+0xb4>
    {
      /* Regular sequence configuration */
      /* Set the channel selection register from the selected channel */
      hadc->Instance->CHSELR |= ADC_CHSELR_CHANNEL(sConfig->Channel);
 8002164:	6a97      	ldr	r7, [r2, #40]	; 0x28
 8002166:	4338      	orrs	r0, r7
 8002168:	6290      	str	r0, [r2, #40]	; 0x28
      /* Channel sampling time configuration */
      /* Management of parameters "SamplingTimeCommon" and "SamplingTime"     */
      /* (obsolete): sampling time set in this function with                  */
      /* parameter "SamplingTime" (obsolete) only if not already set into     */
      /* ADC initialization structure with parameter "SamplingTimeCommon".    */
      if (! IS_ADC_SAMPLE_TIME(hadc->Init.SamplingTimeCommon))
 800216a:	2080      	movs	r0, #128	; 0x80
 800216c:	0540      	lsls	r0, r0, #21
 800216e:	4285      	cmp	r5, r0
 8002170:	d00f      	beq.n	8002192 <HAL_ADC_ConfigChannel+0x62>
 8002172:	3d01      	subs	r5, #1
 8002174:	2d06      	cmp	r5, #6
 8002176:	d90c      	bls.n	8002192 <HAL_ADC_ConfigChannel+0x62>
      {
        /* Modify sampling time if needed (not needed in case of reoccurrence */
        /* for several channels programmed consecutively into the sequencer)  */
        if (sConfig->SamplingTime != ADC_GET_SAMPLINGTIME(hadc))
 8002178:	2007      	movs	r0, #7
 800217a:	6955      	ldr	r5, [r2, #20]
 800217c:	6889      	ldr	r1, [r1, #8]
 800217e:	4005      	ands	r5, r0
 8002180:	42a9      	cmp	r1, r5
 8002182:	d006      	beq.n	8002192 <HAL_ADC_ConfigChannel+0x62>
        {
          /* Channel sampling time configuration */
          /* Clear the old sample time */
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002184:	6955      	ldr	r5, [r2, #20]
          
          /* Set the new sample time */
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 8002186:	4001      	ands	r1, r0
          hadc->Instance->SMPR &= ~(ADC_SMPR_SMP);
 8002188:	4385      	bics	r5, r0
 800218a:	6155      	str	r5, [r2, #20]
          hadc->Instance->SMPR |= ADC_SMPR_SET(sConfig->SamplingTime);
 800218c:	6955      	ldr	r5, [r2, #20]
 800218e:	4329      	orrs	r1, r5
 8002190:	6151      	str	r1, [r2, #20]
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002192:	2e02      	cmp	r6, #2
 8002194:	d903      	bls.n	800219e <HAL_ADC_ConfigChannel+0x6e>
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002196:	2000      	movs	r0, #0
    
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002198:	2300      	movs	r3, #0
 800219a:	7023      	strb	r3, [r4, #0]
  
  /* Return function status */
  return tmp_hal_status;
}
 800219c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 800219e:	4820      	ldr	r0, [pc, #128]	; (8002220 <HAL_ADC_ConfigChannel+0xf0>)
 80021a0:	6805      	ldr	r5, [r0, #0]
 80021a2:	2b10      	cmp	r3, #16
 80021a4:	d01b      	beq.n	80021de <HAL_ADC_ConfigChannel+0xae>
 80021a6:	0019      	movs	r1, r3
 80021a8:	3911      	subs	r1, #17
 80021aa:	424a      	negs	r2, r1
 80021ac:	4151      	adcs	r1, r2
 80021ae:	424a      	negs	r2, r1
 80021b0:	491c      	ldr	r1, [pc, #112]	; (8002224 <HAL_ADC_ConfigChannel+0xf4>)
 80021b2:	400a      	ands	r2, r1
 80021b4:	2180      	movs	r1, #128	; 0x80
 80021b6:	0449      	lsls	r1, r1, #17
 80021b8:	1852      	adds	r2, r2, r1
 80021ba:	432a      	orrs	r2, r5
 80021bc:	6002      	str	r2, [r0, #0]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80021be:	2b10      	cmp	r3, #16
 80021c0:	d1e9      	bne.n	8002196 <HAL_ADC_ConfigChannel+0x66>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80021c2:	4b19      	ldr	r3, [pc, #100]	; (8002228 <HAL_ADC_ConfigChannel+0xf8>)
 80021c4:	4919      	ldr	r1, [pc, #100]	; (800222c <HAL_ADC_ConfigChannel+0xfc>)
 80021c6:	6818      	ldr	r0, [r3, #0]
 80021c8:	f7fd ffce 	bl	8000168 <__udivsi3>
 80021cc:	230a      	movs	r3, #10
 80021ce:	4343      	muls	r3, r0
            wait_loop_index--;
 80021d0:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0U)
 80021d2:	9b01      	ldr	r3, [sp, #4]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d0de      	beq.n	8002196 <HAL_ADC_ConfigChannel+0x66>
            wait_loop_index--;
 80021d8:	9b01      	ldr	r3, [sp, #4]
 80021da:	3b01      	subs	r3, #1
 80021dc:	e7f8      	b.n	80021d0 <HAL_ADC_ConfigChannel+0xa0>
        ADC->CCR |= ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80021de:	2280      	movs	r2, #128	; 0x80
 80021e0:	0412      	lsls	r2, r2, #16
 80021e2:	e7ea      	b.n	80021ba <HAL_ADC_ConfigChannel+0x8a>
      hadc->Instance->CHSELR &= ~ADC_CHSELR_CHANNEL(sConfig->Channel);
 80021e4:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80021e6:	4381      	bics	r1, r0
 80021e8:	6291      	str	r1, [r2, #40]	; 0x28
      if(ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80021ea:	2e02      	cmp	r6, #2
 80021ec:	d8d3      	bhi.n	8002196 <HAL_ADC_ConfigChannel+0x66>
        ADC->CCR &= ~ADC_CHANNEL_INTERNAL_PATH(sConfig->Channel);
 80021ee:	490c      	ldr	r1, [pc, #48]	; (8002220 <HAL_ADC_ConfigChannel+0xf0>)
 80021f0:	6808      	ldr	r0, [r1, #0]
 80021f2:	2b10      	cmp	r3, #16
 80021f4:	d00b      	beq.n	800220e <HAL_ADC_ConfigChannel+0xde>
 80021f6:	3b11      	subs	r3, #17
 80021f8:	425a      	negs	r2, r3
 80021fa:	415a      	adcs	r2, r3
 80021fc:	4253      	negs	r3, r2
 80021fe:	22c0      	movs	r2, #192	; 0xc0
 8002200:	0412      	lsls	r2, r2, #16
 8002202:	4013      	ands	r3, r2
 8002204:	4a0a      	ldr	r2, [pc, #40]	; (8002230 <HAL_ADC_ConfigChannel+0x100>)
 8002206:	189b      	adds	r3, r3, r2
 8002208:	4003      	ands	r3, r0
 800220a:	600b      	str	r3, [r1, #0]
 800220c:	e7c3      	b.n	8002196 <HAL_ADC_ConfigChannel+0x66>
 800220e:	4b09      	ldr	r3, [pc, #36]	; (8002234 <HAL_ADC_ConfigChannel+0x104>)
 8002210:	e7fa      	b.n	8002208 <HAL_ADC_ConfigChannel+0xd8>
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002212:	2220      	movs	r2, #32
 8002214:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002216:	430a      	orrs	r2, r1
 8002218:	639a      	str	r2, [r3, #56]	; 0x38
    tmp_hal_status = HAL_ERROR;
 800221a:	e7bd      	b.n	8002198 <HAL_ADC_ConfigChannel+0x68>
 800221c:	00001001 	.word	0x00001001
 8002220:	40012708 	.word	0x40012708
 8002224:	ff400000 	.word	0xff400000
 8002228:	20000000 	.word	0x20000000
 800222c:	000f4240 	.word	0x000f4240
 8002230:	feffffff 	.word	0xfeffffff
 8002234:	ff7fffff 	.word	0xff7fffff

08002238 <HAL_NVIC_SetPriority>:
  *         with stm32f0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0 based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002238:	b530      	push	{r4, r5, lr}
 800223a:	25ff      	movs	r5, #255	; 0xff
 800223c:	2403      	movs	r4, #3
 800223e:	002a      	movs	r2, r5
 8002240:	4004      	ands	r4, r0
 8002242:	00e4      	lsls	r4, r4, #3
 8002244:	40a2      	lsls	r2, r4
 8002246:	0189      	lsls	r1, r1, #6
 8002248:	4029      	ands	r1, r5
 800224a:	43d2      	mvns	r2, r2
 800224c:	40a1      	lsls	r1, r4
 800224e:	b2c3      	uxtb	r3, r0
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if ((int32_t)(IRQn) >= 0)
 8002250:	2800      	cmp	r0, #0
 8002252:	db0a      	blt.n	800226a <HAL_NVIC_SetPriority+0x32>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002254:	24c0      	movs	r4, #192	; 0xc0
 8002256:	4b0b      	ldr	r3, [pc, #44]	; (8002284 <HAL_NVIC_SetPriority+0x4c>)
 8002258:	0880      	lsrs	r0, r0, #2
 800225a:	0080      	lsls	r0, r0, #2
 800225c:	18c0      	adds	r0, r0, r3
 800225e:	00a4      	lsls	r4, r4, #2
 8002260:	5903      	ldr	r3, [r0, r4]
 8002262:	401a      	ands	r2, r3
 8002264:	4311      	orrs	r1, r2
 8002266:	5101      	str	r1, [r0, r4]
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
}
 8002268:	bd30      	pop	{r4, r5, pc}
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800226a:	200f      	movs	r0, #15
 800226c:	4003      	ands	r3, r0
 800226e:	3b08      	subs	r3, #8
 8002270:	4805      	ldr	r0, [pc, #20]	; (8002288 <HAL_NVIC_SetPriority+0x50>)
 8002272:	089b      	lsrs	r3, r3, #2
 8002274:	009b      	lsls	r3, r3, #2
 8002276:	181b      	adds	r3, r3, r0
 8002278:	69d8      	ldr	r0, [r3, #28]
 800227a:	4002      	ands	r2, r0
 800227c:	4311      	orrs	r1, r2
 800227e:	61d9      	str	r1, [r3, #28]
 8002280:	e7f2      	b.n	8002268 <HAL_NVIC_SetPriority+0x30>
 8002282:	46c0      	nop			; (mov r8, r8)
 8002284:	e000e100 	.word	0xe000e100
 8002288:	e000ed00 	.word	0xe000ed00

0800228c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800228c:	2800      	cmp	r0, #0
 800228e:	db05      	blt.n	800229c <HAL_NVIC_EnableIRQ+0x10>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002290:	231f      	movs	r3, #31
 8002292:	4018      	ands	r0, r3
 8002294:	3b1e      	subs	r3, #30
 8002296:	4083      	lsls	r3, r0
 8002298:	4a01      	ldr	r2, [pc, #4]	; (80022a0 <HAL_NVIC_EnableIRQ+0x14>)
 800229a:	6013      	str	r3, [r2, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800229c:	4770      	bx	lr
 800229e:	46c0      	nop			; (mov r8, r8)
 80022a0:	e000e100 	.word	0xe000e100

080022a4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80022a4:	2800      	cmp	r0, #0
 80022a6:	db09      	blt.n	80022bc <HAL_NVIC_DisableIRQ+0x18>
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022a8:	231f      	movs	r3, #31
 80022aa:	4018      	ands	r0, r3
 80022ac:	3b1e      	subs	r3, #30
 80022ae:	4083      	lsls	r3, r0
 80022b0:	4a03      	ldr	r2, [pc, #12]	; (80022c0 <HAL_NVIC_DisableIRQ+0x1c>)
 80022b2:	67d3      	str	r3, [r2, #124]	; 0x7c
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80022b4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80022b8:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80022bc:	4770      	bx	lr
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	e000e104 	.word	0xe000e104

080022c4 <HAL_DMA_Abort_IT>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80022c4:	b570      	push	{r4, r5, r6, lr}
  HAL_StatusTypeDef status = HAL_OK;
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80022c6:	1c84      	adds	r4, r0, #2
 80022c8:	7fe3      	ldrb	r3, [r4, #31]
 80022ca:	2b02      	cmp	r3, #2
 80022cc:	d004      	beq.n	80022d8 <HAL_DMA_Abort_IT+0x14>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80022ce:	2304      	movs	r3, #4
 80022d0:	6383      	str	r3, [r0, #56]	; 0x38
        
    status = HAL_ERROR;
 80022d2:	3b03      	subs	r3, #3
    {
      hdma->XferAbortCallback(hdma);
    } 
  }
  return status;
}
 80022d4:	0018      	movs	r0, r3
 80022d6:	bd70      	pop	{r4, r5, r6, pc}
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022d8:	210e      	movs	r1, #14
 80022da:	6803      	ldr	r3, [r0, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80022dc:	6c05      	ldr	r5, [r0, #64]	; 0x40
    hdma->Instance->CCR &= ~(DMA_IT_TC | DMA_IT_HT | DMA_IT_TE);
 80022de:	681a      	ldr	r2, [r3, #0]
 80022e0:	438a      	bics	r2, r1
 80022e2:	601a      	str	r2, [r3, #0]
    hdma->Instance->CCR &= ~DMA_CCR_EN;
 80022e4:	2201      	movs	r2, #1
 80022e6:	6819      	ldr	r1, [r3, #0]
 80022e8:	4391      	bics	r1, r2
 80022ea:	6019      	str	r1, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_FLAG_GL1 << hdma->ChannelIndex;
 80022ec:	0011      	movs	r1, r2
 80022ee:	40a9      	lsls	r1, r5
 80022f0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80022f2:	6059      	str	r1, [r3, #4]
    hdma->State = HAL_DMA_STATE_READY;
 80022f4:	77e2      	strb	r2, [r4, #31]
    __HAL_UNLOCK(hdma);
 80022f6:	2400      	movs	r4, #0
 80022f8:	1883      	adds	r3, r0, r2
 80022fa:	77dc      	strb	r4, [r3, #31]
    if(hdma->XferAbortCallback != NULL)
 80022fc:	6b42      	ldr	r2, [r0, #52]	; 0x34
  HAL_StatusTypeDef status = HAL_OK;
 80022fe:	0013      	movs	r3, r2
    if(hdma->XferAbortCallback != NULL)
 8002300:	42a2      	cmp	r2, r4
 8002302:	d0e7      	beq.n	80022d4 <HAL_DMA_Abort_IT+0x10>
      hdma->XferAbortCallback(hdma);
 8002304:	4790      	blx	r2
  HAL_StatusTypeDef status = HAL_OK;
 8002306:	0023      	movs	r3, r4
 8002308:	e7e4      	b.n	80022d4 <HAL_DMA_Abort_IT+0x10>
	...

0800230c <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800230c:	4b0c      	ldr	r3, [pc, #48]	; (8002340 <FLASH_SetErrorCode+0x34>)
 800230e:	2110      	movs	r1, #16
 8002310:	68d8      	ldr	r0, [r3, #12]
{
 8002312:	b530      	push	{r4, r5, lr}
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8002314:	0002      	movs	r2, r0
 8002316:	400a      	ands	r2, r1
 8002318:	4208      	tst	r0, r1
 800231a:	d005      	beq.n	8002328 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800231c:	2202      	movs	r2, #2
 800231e:	4809      	ldr	r0, [pc, #36]	; (8002344 <FLASH_SetErrorCode+0x38>)
 8002320:	69c4      	ldr	r4, [r0, #28]
 8002322:	4322      	orrs	r2, r4
 8002324:	61c2      	str	r2, [r0, #28]
    flags |= FLASH_FLAG_WRPERR;
 8002326:	000a      	movs	r2, r1
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 8002328:	2004      	movs	r0, #4
 800232a:	68d9      	ldr	r1, [r3, #12]
 800232c:	4201      	tst	r1, r0
 800232e:	d005      	beq.n	800233c <FLASH_SetErrorCode+0x30>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002330:	2101      	movs	r1, #1
 8002332:	4c04      	ldr	r4, [pc, #16]	; (8002344 <FLASH_SetErrorCode+0x38>)
    flags |= FLASH_FLAG_PGERR;
 8002334:	4302      	orrs	r2, r0
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PROG;
 8002336:	69e5      	ldr	r5, [r4, #28]
 8002338:	4329      	orrs	r1, r5
 800233a:	61e1      	str	r1, [r4, #28]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800233c:	60da      	str	r2, [r3, #12]
}  
 800233e:	bd30      	pop	{r4, r5, pc}
 8002340:	40022000 	.word	0x40022000
 8002344:	200008e0 	.word	0x200008e0

08002348 <HAL_FLASH_Unlock>:
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8002348:	4b06      	ldr	r3, [pc, #24]	; (8002364 <HAL_FLASH_Unlock+0x1c>)
  HAL_StatusTypeDef status = HAL_OK;
 800234a:	2000      	movs	r0, #0
  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800234c:	691a      	ldr	r2, [r3, #16]
 800234e:	0612      	lsls	r2, r2, #24
 8002350:	d506      	bpl.n	8002360 <HAL_FLASH_Unlock+0x18>
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8002352:	4a05      	ldr	r2, [pc, #20]	; (8002368 <HAL_FLASH_Unlock+0x20>)
 8002354:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8002356:	4a05      	ldr	r2, [pc, #20]	; (800236c <HAL_FLASH_Unlock+0x24>)
 8002358:	605a      	str	r2, [r3, #4]
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800235a:	6918      	ldr	r0, [r3, #16]
 800235c:	0600      	lsls	r0, r0, #24
  HAL_StatusTypeDef status = HAL_OK;
 800235e:	0fc0      	lsrs	r0, r0, #31
}
 8002360:	4770      	bx	lr
 8002362:	46c0      	nop			; (mov r8, r8)
 8002364:	40022000 	.word	0x40022000
 8002368:	45670123 	.word	0x45670123
 800236c:	cdef89ab 	.word	0xcdef89ab

08002370 <HAL_FLASH_Lock>:
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002370:	2380      	movs	r3, #128	; 0x80
 8002372:	4a03      	ldr	r2, [pc, #12]	; (8002380 <HAL_FLASH_Lock+0x10>)
}
 8002374:	2000      	movs	r0, #0
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8002376:	6911      	ldr	r1, [r2, #16]
 8002378:	430b      	orrs	r3, r1
 800237a:	6113      	str	r3, [r2, #16]
}
 800237c:	4770      	bx	lr
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	40022000 	.word	0x40022000

08002384 <FLASH_WaitForLastOperation>:
{
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	0004      	movs	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8002388:	f7ff fe12 	bl	8001fb0 <HAL_GetTick>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800238c:	2601      	movs	r6, #1
  uint32_t tickstart = HAL_GetTick();
 800238e:	0005      	movs	r5, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8002390:	4b11      	ldr	r3, [pc, #68]	; (80023d8 <FLASH_WaitForLastOperation+0x54>)
 8002392:	001a      	movs	r2, r3
 8002394:	68d9      	ldr	r1, [r3, #12]
 8002396:	4231      	tst	r1, r6
 8002398:	d111      	bne.n	80023be <FLASH_WaitForLastOperation+0x3a>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800239a:	2120      	movs	r1, #32
 800239c:	68d8      	ldr	r0, [r3, #12]
 800239e:	4208      	tst	r0, r1
 80023a0:	d000      	beq.n	80023a4 <FLASH_WaitForLastOperation+0x20>
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80023a2:	60d9      	str	r1, [r3, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80023a4:	68d1      	ldr	r1, [r2, #12]
 80023a6:	2310      	movs	r3, #16
 80023a8:	0008      	movs	r0, r1
 80023aa:	4018      	ands	r0, r3
 80023ac:	4219      	tst	r1, r3
 80023ae:	d102      	bne.n	80023b6 <FLASH_WaitForLastOperation+0x32>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGERR))
 80023b0:	68d3      	ldr	r3, [r2, #12]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 80023b2:	075b      	lsls	r3, r3, #29
 80023b4:	d508      	bpl.n	80023c8 <FLASH_WaitForLastOperation+0x44>
    FLASH_SetErrorCode();
 80023b6:	f7ff ffa9 	bl	800230c <FLASH_SetErrorCode>
    return HAL_ERROR;
 80023ba:	2001      	movs	r0, #1
 80023bc:	e004      	b.n	80023c8 <FLASH_WaitForLastOperation+0x44>
    if (Timeout != HAL_MAX_DELAY)
 80023be:	1c61      	adds	r1, r4, #1
 80023c0:	d0e8      	beq.n	8002394 <FLASH_WaitForLastOperation+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80023c2:	2c00      	cmp	r4, #0
 80023c4:	d101      	bne.n	80023ca <FLASH_WaitForLastOperation+0x46>
        return HAL_TIMEOUT;
 80023c6:	2003      	movs	r0, #3
}
 80023c8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 80023ca:	f7ff fdf1 	bl	8001fb0 <HAL_GetTick>
 80023ce:	1b40      	subs	r0, r0, r5
 80023d0:	42a0      	cmp	r0, r4
 80023d2:	d9dd      	bls.n	8002390 <FLASH_WaitForLastOperation+0xc>
 80023d4:	e7f7      	b.n	80023c6 <FLASH_WaitForLastOperation+0x42>
 80023d6:	46c0      	nop			; (mov r8, r8)
 80023d8:	40022000 	.word	0x40022000

080023dc <HAL_FLASH_Program>:
{
 80023dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023de:	b085      	sub	sp, #20
 80023e0:	9303      	str	r3, [sp, #12]
  __HAL_LOCK(&pFlash);
 80023e2:	4b1c      	ldr	r3, [pc, #112]	; (8002454 <HAL_FLASH_Program+0x78>)
{
 80023e4:	9101      	str	r1, [sp, #4]
 80023e6:	9202      	str	r2, [sp, #8]
  __HAL_LOCK(&pFlash);
 80023e8:	7e1a      	ldrb	r2, [r3, #24]
{
 80023ea:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 80023ec:	2002      	movs	r0, #2
 80023ee:	2a01      	cmp	r2, #1
 80023f0:	d02e      	beq.n	8002450 <HAL_FLASH_Program+0x74>
 80023f2:	2201      	movs	r2, #1
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023f4:	4818      	ldr	r0, [pc, #96]	; (8002458 <HAL_FLASH_Program+0x7c>)
  __HAL_LOCK(&pFlash);
 80023f6:	761a      	strb	r2, [r3, #24]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80023f8:	f7ff ffc4 	bl	8002384 <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 80023fc:	2800      	cmp	r0, #0
 80023fe:	d124      	bne.n	800244a <HAL_FLASH_Program+0x6e>
      nbiterations = 1U;
 8002400:	0026      	movs	r6, r4
    if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8002402:	2c01      	cmp	r4, #1
 8002404:	d002      	beq.n	800240c <HAL_FLASH_Program+0x30>
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8002406:	2c02      	cmp	r4, #2
 8002408:	d000      	beq.n	800240c <HAL_FLASH_Program+0x30>
      nbiterations = 4U;
 800240a:	2604      	movs	r6, #4
 800240c:	2400      	movs	r4, #0
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800240e:	9802      	ldr	r0, [sp, #8]
 8002410:	9903      	ldr	r1, [sp, #12]
 8002412:	0122      	lsls	r2, r4, #4
 8002414:	f7fd ff34 	bl	8000280 <__aeabi_llsr>
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002418:	2200      	movs	r2, #0
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800241a:	2701      	movs	r7, #1
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800241c:	4b0d      	ldr	r3, [pc, #52]	; (8002454 <HAL_FLASH_Program+0x78>)
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 800241e:	4d0f      	ldr	r5, [pc, #60]	; (800245c <HAL_FLASH_Program+0x80>)
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002420:	61da      	str	r2, [r3, #28]
    SET_BIT(FLASH->CR, FLASH_CR_PG);
 8002422:	692b      	ldr	r3, [r5, #16]
 8002424:	9a01      	ldr	r2, [sp, #4]
 8002426:	433b      	orrs	r3, r7
 8002428:	612b      	str	r3, [r5, #16]
 800242a:	0063      	lsls	r3, r4, #1
 800242c:	189b      	adds	r3, r3, r2
      FLASH_Program_HalfWord((Address + (2U*index)), (uint16_t)(Data >> (16U*index)));
 800242e:	b280      	uxth	r0, r0
  *(__IO uint16_t*)Address = Data;
 8002430:	8018      	strh	r0, [r3, #0]
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8002432:	4809      	ldr	r0, [pc, #36]	; (8002458 <HAL_FLASH_Program+0x7c>)
 8002434:	f7ff ffa6 	bl	8002384 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_PG);
 8002438:	692b      	ldr	r3, [r5, #16]
 800243a:	43bb      	bics	r3, r7
 800243c:	612b      	str	r3, [r5, #16]
      if (status != HAL_OK)
 800243e:	2800      	cmp	r0, #0
 8002440:	d103      	bne.n	800244a <HAL_FLASH_Program+0x6e>
    for (index = 0U; index < nbiterations; index++)
 8002442:	19e4      	adds	r4, r4, r7
 8002444:	b2e3      	uxtb	r3, r4
 8002446:	429e      	cmp	r6, r3
 8002448:	d8e1      	bhi.n	800240e <HAL_FLASH_Program+0x32>
  __HAL_UNLOCK(&pFlash);
 800244a:	2200      	movs	r2, #0
 800244c:	4b01      	ldr	r3, [pc, #4]	; (8002454 <HAL_FLASH_Program+0x78>)
 800244e:	761a      	strb	r2, [r3, #24]
}
 8002450:	b005      	add	sp, #20
 8002452:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002454:	200008e0 	.word	0x200008e0
 8002458:	0000c350 	.word	0x0000c350
 800245c:	40022000 	.word	0x40022000

08002460 <FLASH_MassErase>:
  * @retval None
  */
static void FLASH_MassErase(void)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002460:	2200      	movs	r2, #0
 8002462:	4b06      	ldr	r3, [pc, #24]	; (800247c <FLASH_MassErase+0x1c>)
 8002464:	61da      	str	r2, [r3, #28]

    /* Only bank1 will be erased*/
    SET_BIT(FLASH->CR, FLASH_CR_MER);
 8002466:	4b06      	ldr	r3, [pc, #24]	; (8002480 <FLASH_MassErase+0x20>)
 8002468:	3204      	adds	r2, #4
 800246a:	6919      	ldr	r1, [r3, #16]
 800246c:	430a      	orrs	r2, r1
 800246e:	611a      	str	r2, [r3, #16]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002470:	2240      	movs	r2, #64	; 0x40
 8002472:	6919      	ldr	r1, [r3, #16]
 8002474:	430a      	orrs	r2, r1
 8002476:	611a      	str	r2, [r3, #16]
}
 8002478:	4770      	bx	lr
 800247a:	46c0      	nop			; (mov r8, r8)
 800247c:	200008e0 	.word	0x200008e0
 8002480:	40022000 	.word	0x40022000

08002484 <FLASH_PageErase>:
  * @retval None
  */
void FLASH_PageErase(uint32_t PageAddress)
{
  /* Clean the error context */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8002484:	2200      	movs	r2, #0
 8002486:	4b06      	ldr	r3, [pc, #24]	; (80024a0 <FLASH_PageErase+0x1c>)
 8002488:	61da      	str	r2, [r3, #28]

    /* Proceed to erase the page */
    SET_BIT(FLASH->CR, FLASH_CR_PER);
 800248a:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <FLASH_PageErase+0x20>)
 800248c:	3202      	adds	r2, #2
 800248e:	6919      	ldr	r1, [r3, #16]
 8002490:	430a      	orrs	r2, r1
 8002492:	611a      	str	r2, [r3, #16]
    WRITE_REG(FLASH->AR, PageAddress);
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002494:	2240      	movs	r2, #64	; 0x40
    WRITE_REG(FLASH->AR, PageAddress);
 8002496:	6158      	str	r0, [r3, #20]
    SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8002498:	6919      	ldr	r1, [r3, #16]
 800249a:	430a      	orrs	r2, r1
 800249c:	611a      	str	r2, [r3, #16]
}
 800249e:	4770      	bx	lr
 80024a0:	200008e0 	.word	0x200008e0
 80024a4:	40022000 	.word	0x40022000

080024a8 <HAL_FLASHEx_Erase>:
{
 80024a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(&pFlash);
 80024aa:	4f21      	ldr	r7, [pc, #132]	; (8002530 <HAL_FLASHEx_Erase+0x88>)
{
 80024ac:	0004      	movs	r4, r0
  __HAL_LOCK(&pFlash);
 80024ae:	7e3b      	ldrb	r3, [r7, #24]
{
 80024b0:	000e      	movs	r6, r1
  __HAL_LOCK(&pFlash);
 80024b2:	2002      	movs	r0, #2
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d00c      	beq.n	80024d2 <HAL_FLASHEx_Erase+0x2a>
 80024b8:	2301      	movs	r3, #1
 80024ba:	763b      	strb	r3, [r7, #24]
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80024bc:	6823      	ldr	r3, [r4, #0]
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80024be:	481d      	ldr	r0, [pc, #116]	; (8002534 <HAL_FLASHEx_Erase+0x8c>)
  if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d112      	bne.n	80024ea <HAL_FLASHEx_Erase+0x42>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80024c4:	f7ff ff5e 	bl	8002384 <FLASH_WaitForLastOperation>
 80024c8:	2800      	cmp	r0, #0
 80024ca:	d003      	beq.n	80024d4 <HAL_FLASHEx_Erase+0x2c>
  HAL_StatusTypeDef status = HAL_ERROR;
 80024cc:	2001      	movs	r0, #1
  __HAL_UNLOCK(&pFlash);
 80024ce:	2300      	movs	r3, #0
 80024d0:	763b      	strb	r3, [r7, #24]
}
 80024d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        FLASH_MassErase();
 80024d4:	f7ff ffc4 	bl	8002460 <FLASH_MassErase>
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80024d8:	4816      	ldr	r0, [pc, #88]	; (8002534 <HAL_FLASHEx_Erase+0x8c>)
 80024da:	f7ff ff53 	bl	8002384 <FLASH_WaitForLastOperation>
        CLEAR_BIT(FLASH->CR, FLASH_CR_MER);
 80024de:	2104      	movs	r1, #4
 80024e0:	4a15      	ldr	r2, [pc, #84]	; (8002538 <HAL_FLASHEx_Erase+0x90>)
 80024e2:	6913      	ldr	r3, [r2, #16]
 80024e4:	438b      	bics	r3, r1
 80024e6:	6113      	str	r3, [r2, #16]
 80024e8:	e7f1      	b.n	80024ce <HAL_FLASHEx_Erase+0x26>
      if (FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE) == HAL_OK)
 80024ea:	f7ff ff4b 	bl	8002384 <FLASH_WaitForLastOperation>
 80024ee:	2800      	cmp	r0, #0
 80024f0:	d1ec      	bne.n	80024cc <HAL_FLASHEx_Erase+0x24>
        *PageError = 0xFFFFFFFFU;
 80024f2:	2301      	movs	r3, #1
 80024f4:	425b      	negs	r3, r3
 80024f6:	6033      	str	r3, [r6, #0]
        for(address = pEraseInit->PageAddress;
 80024f8:	6865      	ldr	r5, [r4, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80024fa:	3001      	adds	r0, #1
            address < ((pEraseInit->NbPages * FLASH_PAGE_SIZE) + pEraseInit->PageAddress);
 80024fc:	68a3      	ldr	r3, [r4, #8]
 80024fe:	6862      	ldr	r2, [r4, #4]
 8002500:	029b      	lsls	r3, r3, #10
 8002502:	189b      	adds	r3, r3, r2
        for(address = pEraseInit->PageAddress;
 8002504:	42ab      	cmp	r3, r5
 8002506:	d9e2      	bls.n	80024ce <HAL_FLASHEx_Erase+0x26>
          FLASH_PageErase(address);
 8002508:	0028      	movs	r0, r5
 800250a:	f7ff ffbb 	bl	8002484 <FLASH_PageErase>
          status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800250e:	4809      	ldr	r0, [pc, #36]	; (8002534 <HAL_FLASHEx_Erase+0x8c>)
 8002510:	f7ff ff38 	bl	8002384 <FLASH_WaitForLastOperation>
          CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 8002514:	2102      	movs	r1, #2
 8002516:	4a08      	ldr	r2, [pc, #32]	; (8002538 <HAL_FLASHEx_Erase+0x90>)
 8002518:	6913      	ldr	r3, [r2, #16]
 800251a:	438b      	bics	r3, r1
 800251c:	6113      	str	r3, [r2, #16]
          if (status != HAL_OK)
 800251e:	2800      	cmp	r0, #0
 8002520:	d001      	beq.n	8002526 <HAL_FLASHEx_Erase+0x7e>
            *PageError = address;
 8002522:	6035      	str	r5, [r6, #0]
            break;
 8002524:	e7d3      	b.n	80024ce <HAL_FLASHEx_Erase+0x26>
            address += FLASH_PAGE_SIZE)
 8002526:	2380      	movs	r3, #128	; 0x80
 8002528:	00db      	lsls	r3, r3, #3
 800252a:	18ed      	adds	r5, r5, r3
 800252c:	e7e6      	b.n	80024fc <HAL_FLASHEx_Erase+0x54>
 800252e:	46c0      	nop			; (mov r8, r8)
 8002530:	200008e0 	.word	0x200008e0
 8002534:	0000c350 	.word	0x0000c350
 8002538:	40022000 	.word	0x40022000

0800253c <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00u;
 800253c:	2300      	movs	r3, #0
{
 800253e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002540:	b087      	sub	sp, #28
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002542:	680a      	ldr	r2, [r1, #0]
 8002544:	0014      	movs	r4, r2
 8002546:	40dc      	lsrs	r4, r3
 8002548:	d101      	bne.n	800254e <HAL_GPIO_Init+0x12>
      }
    }

    position++;
  } 
}
 800254a:	b007      	add	sp, #28
 800254c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800254e:	2501      	movs	r5, #1
 8002550:	0014      	movs	r4, r2
 8002552:	409d      	lsls	r5, r3
 8002554:	402c      	ands	r4, r5
 8002556:	9401      	str	r4, [sp, #4]
    if (iocurrent != 0x00u)
 8002558:	422a      	tst	r2, r5
 800255a:	d100      	bne.n	800255e <HAL_GPIO_Init+0x22>
 800255c:	e091      	b.n	8002682 <HAL_GPIO_Init+0x146>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800255e:	684a      	ldr	r2, [r1, #4]
 8002560:	005e      	lsls	r6, r3, #1
 8002562:	4694      	mov	ip, r2
 8002564:	2203      	movs	r2, #3
 8002566:	4664      	mov	r4, ip
 8002568:	4022      	ands	r2, r4
 800256a:	2403      	movs	r4, #3
 800256c:	40b4      	lsls	r4, r6
 800256e:	43e4      	mvns	r4, r4
 8002570:	9402      	str	r4, [sp, #8]
 8002572:	1e54      	subs	r4, r2, #1
 8002574:	2c01      	cmp	r4, #1
 8002576:	d82a      	bhi.n	80025ce <HAL_GPIO_Init+0x92>
        temp = GPIOx->OSPEEDR;
 8002578:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 800257a:	9c02      	ldr	r4, [sp, #8]
 800257c:	4027      	ands	r7, r4
        temp |= (GPIO_Init->Speed << (position * 2u));
 800257e:	68cc      	ldr	r4, [r1, #12]
 8002580:	40b4      	lsls	r4, r6
 8002582:	433c      	orrs	r4, r7
        GPIOx->OSPEEDR = temp;
 8002584:	6084      	str	r4, [r0, #8]
        temp = GPIOx->OTYPER;
 8002586:	6844      	ldr	r4, [r0, #4]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002588:	2701      	movs	r7, #1
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800258a:	43ac      	bics	r4, r5
 800258c:	0025      	movs	r5, r4
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800258e:	4664      	mov	r4, ip
 8002590:	0924      	lsrs	r4, r4, #4
 8002592:	403c      	ands	r4, r7
 8002594:	409c      	lsls	r4, r3
 8002596:	432c      	orrs	r4, r5
        GPIOx->OTYPER = temp;
 8002598:	6044      	str	r4, [r0, #4]
        temp = GPIOx->PUPDR;
 800259a:	68c5      	ldr	r5, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 800259c:	9c02      	ldr	r4, [sp, #8]
 800259e:	4025      	ands	r5, r4
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80025a0:	688c      	ldr	r4, [r1, #8]
 80025a2:	40b4      	lsls	r4, r6
 80025a4:	432c      	orrs	r4, r5
        GPIOx->PUPDR = temp;
 80025a6:	60c4      	str	r4, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025a8:	2a02      	cmp	r2, #2
 80025aa:	d112      	bne.n	80025d2 <HAL_GPIO_Init+0x96>
        temp = GPIOx->AFR[position >> 3u];
 80025ac:	08dc      	lsrs	r4, r3, #3
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025ae:	2507      	movs	r5, #7
 80025b0:	00a4      	lsls	r4, r4, #2
 80025b2:	1904      	adds	r4, r0, r4
        temp = GPIOx->AFR[position >> 3u];
 80025b4:	6a27      	ldr	r7, [r4, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80025b6:	9403      	str	r4, [sp, #12]
 80025b8:	240f      	movs	r4, #15
 80025ba:	401d      	ands	r5, r3
 80025bc:	00ad      	lsls	r5, r5, #2
 80025be:	40ac      	lsls	r4, r5
 80025c0:	43a7      	bics	r7, r4
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80025c2:	690c      	ldr	r4, [r1, #16]
 80025c4:	40ac      	lsls	r4, r5
 80025c6:	4327      	orrs	r7, r4
        GPIOx->AFR[position >> 3u] = temp;
 80025c8:	9c03      	ldr	r4, [sp, #12]
 80025ca:	6227      	str	r7, [r4, #32]
 80025cc:	e001      	b.n	80025d2 <HAL_GPIO_Init+0x96>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025ce:	2a03      	cmp	r2, #3
 80025d0:	d1e3      	bne.n	800259a <HAL_GPIO_Init+0x5e>
      temp = GPIOx->MODER;
 80025d2:	6804      	ldr	r4, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025d4:	9d02      	ldr	r5, [sp, #8]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025d6:	40b2      	lsls	r2, r6
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 80025d8:	4025      	ands	r5, r4
 80025da:	002c      	movs	r4, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80025dc:	4314      	orrs	r4, r2
      GPIOx->MODER = temp;
 80025de:	6004      	str	r4, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80025e0:	24c0      	movs	r4, #192	; 0xc0
 80025e2:	4662      	mov	r2, ip
 80025e4:	02a4      	lsls	r4, r4, #10
 80025e6:	4222      	tst	r2, r4
 80025e8:	d04b      	beq.n	8002682 <HAL_GPIO_Init+0x146>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	2501      	movs	r5, #1
 80025ec:	4a26      	ldr	r2, [pc, #152]	; (8002688 <HAL_GPIO_Init+0x14c>)
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025ee:	2790      	movs	r7, #144	; 0x90
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f0:	6994      	ldr	r4, [r2, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80025f2:	05ff      	lsls	r7, r7, #23
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025f4:	432c      	orrs	r4, r5
 80025f6:	6194      	str	r4, [r2, #24]
 80025f8:	6992      	ldr	r2, [r2, #24]
        temp = SYSCFG->EXTICR[position >> 2u];
 80025fa:	089c      	lsrs	r4, r3, #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025fc:	402a      	ands	r2, r5
 80025fe:	9205      	str	r2, [sp, #20]
 8002600:	9a05      	ldr	r2, [sp, #20]
        temp = SYSCFG->EXTICR[position >> 2u];
 8002602:	4a22      	ldr	r2, [pc, #136]	; (800268c <HAL_GPIO_Init+0x150>)
 8002604:	00a4      	lsls	r4, r4, #2
 8002606:	18a4      	adds	r4, r4, r2
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002608:	220f      	movs	r2, #15
 800260a:	3502      	adds	r5, #2
 800260c:	401d      	ands	r5, r3
 800260e:	00ad      	lsls	r5, r5, #2
 8002610:	40aa      	lsls	r2, r5
        temp = SYSCFG->EXTICR[position >> 2u];
 8002612:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002614:	4396      	bics	r6, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002616:	2200      	movs	r2, #0
 8002618:	42b8      	cmp	r0, r7
 800261a:	d008      	beq.n	800262e <HAL_GPIO_Init+0xf2>
 800261c:	4f1c      	ldr	r7, [pc, #112]	; (8002690 <HAL_GPIO_Init+0x154>)
 800261e:	3201      	adds	r2, #1
 8002620:	42b8      	cmp	r0, r7
 8002622:	d004      	beq.n	800262e <HAL_GPIO_Init+0xf2>
 8002624:	4f1b      	ldr	r7, [pc, #108]	; (8002694 <HAL_GPIO_Init+0x158>)
 8002626:	3201      	adds	r2, #1
 8002628:	42b8      	cmp	r0, r7
 800262a:	d000      	beq.n	800262e <HAL_GPIO_Init+0xf2>
 800262c:	3203      	adds	r2, #3
 800262e:	40aa      	lsls	r2, r5
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002630:	4667      	mov	r7, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002632:	4332      	orrs	r2, r6
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002634:	60a2      	str	r2, [r4, #8]
        temp = EXTI->IMR;
 8002636:	4a18      	ldr	r2, [pc, #96]	; (8002698 <HAL_GPIO_Init+0x15c>)
        temp &= ~(iocurrent);
 8002638:	9c01      	ldr	r4, [sp, #4]
        temp = EXTI->IMR;
 800263a:	6816      	ldr	r6, [r2, #0]
          temp |= iocurrent;
 800263c:	9d01      	ldr	r5, [sp, #4]
        temp &= ~(iocurrent);
 800263e:	43e4      	mvns	r4, r4
          temp |= iocurrent;
 8002640:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002642:	03ff      	lsls	r7, r7, #15
 8002644:	d401      	bmi.n	800264a <HAL_GPIO_Init+0x10e>
        temp &= ~(iocurrent);
 8002646:	0035      	movs	r5, r6
 8002648:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800264a:	4667      	mov	r7, ip
        EXTI->IMR = temp;
 800264c:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 800264e:	6856      	ldr	r6, [r2, #4]
          temp |= iocurrent;
 8002650:	9d01      	ldr	r5, [sp, #4]
 8002652:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002654:	03bf      	lsls	r7, r7, #14
 8002656:	d401      	bmi.n	800265c <HAL_GPIO_Init+0x120>
        temp &= ~(iocurrent);
 8002658:	0035      	movs	r5, r6
 800265a:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800265c:	4667      	mov	r7, ip
        EXTI->EMR = temp;
 800265e:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 8002660:	6896      	ldr	r6, [r2, #8]
          temp |= iocurrent;
 8002662:	9d01      	ldr	r5, [sp, #4]
 8002664:	4335      	orrs	r5, r6
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002666:	02ff      	lsls	r7, r7, #11
 8002668:	d401      	bmi.n	800266e <HAL_GPIO_Init+0x132>
        temp &= ~(iocurrent);
 800266a:	0035      	movs	r5, r6
 800266c:	4025      	ands	r5, r4
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800266e:	4667      	mov	r7, ip
        EXTI->RTSR = temp;
 8002670:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 8002672:	68d5      	ldr	r5, [r2, #12]
          temp |= iocurrent;
 8002674:	9e01      	ldr	r6, [sp, #4]
 8002676:	432e      	orrs	r6, r5
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002678:	02bf      	lsls	r7, r7, #10
 800267a:	d401      	bmi.n	8002680 <HAL_GPIO_Init+0x144>
        temp &= ~(iocurrent);
 800267c:	4025      	ands	r5, r4
 800267e:	002e      	movs	r6, r5
        EXTI->FTSR = temp;
 8002680:	60d6      	str	r6, [r2, #12]
    position++;
 8002682:	3301      	adds	r3, #1
 8002684:	e75d      	b.n	8002542 <HAL_GPIO_Init+0x6>
 8002686:	46c0      	nop			; (mov r8, r8)
 8002688:	40021000 	.word	0x40021000
 800268c:	40010000 	.word	0x40010000
 8002690:	48000400 	.word	0x48000400
 8002694:	48000800 	.word	0x48000800
 8002698:	40010400 	.word	0x40010400

0800269c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800269c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t position = 0x00u;
 800269e:	2300      	movs	r3, #0
{
 80026a0:	000f      	movs	r7, r1
 80026a2:	b085      	sub	sp, #20
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 80026a4:	003a      	movs	r2, r7
 80026a6:	40da      	lsrs	r2, r3
 80026a8:	d101      	bne.n	80026ae <HAL_GPIO_DeInit+0x12>

    }

    position++;
  }
}
 80026aa:	b005      	add	sp, #20
 80026ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
    iocurrent = (GPIO_Pin) & (1uL << position);
 80026ae:	2201      	movs	r2, #1
 80026b0:	409a      	lsls	r2, r3
 80026b2:	0014      	movs	r4, r2
 80026b4:	9201      	str	r2, [sp, #4]
 80026b6:	403c      	ands	r4, r7
    if (iocurrent != 0x00u)
 80026b8:	4217      	tst	r7, r2
 80026ba:	d04c      	beq.n	8002756 <HAL_GPIO_DeInit+0xba>
      tmp = SYSCFG->EXTICR[position >> 2u];
 80026bc:	4927      	ldr	r1, [pc, #156]	; (800275c <HAL_GPIO_DeInit+0xc0>)
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80026be:	2503      	movs	r5, #3
      tmp = SYSCFG->EXTICR[position >> 2u];
 80026c0:	089a      	lsrs	r2, r3, #2
 80026c2:	0092      	lsls	r2, r2, #2
 80026c4:	1852      	adds	r2, r2, r1
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80026c6:	210f      	movs	r1, #15
 80026c8:	401d      	ands	r5, r3
 80026ca:	00ad      	lsls	r5, r5, #2
 80026cc:	40a9      	lsls	r1, r5
      tmp = SYSCFG->EXTICR[position >> 2u];
 80026ce:	6896      	ldr	r6, [r2, #8]
      tmp &= (0x0FuL << (4u * (position & 0x03u)));
 80026d0:	9102      	str	r1, [sp, #8]
 80026d2:	400e      	ands	r6, r1
 80026d4:	9603      	str	r6, [sp, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u))))
 80026d6:	2690      	movs	r6, #144	; 0x90
 80026d8:	2100      	movs	r1, #0
 80026da:	05f6      	lsls	r6, r6, #23
 80026dc:	42b0      	cmp	r0, r6
 80026de:	d00a      	beq.n	80026f6 <HAL_GPIO_DeInit+0x5a>
 80026e0:	491f      	ldr	r1, [pc, #124]	; (8002760 <HAL_GPIO_DeInit+0xc4>)
 80026e2:	468c      	mov	ip, r1
 80026e4:	2101      	movs	r1, #1
 80026e6:	4560      	cmp	r0, ip
 80026e8:	d005      	beq.n	80026f6 <HAL_GPIO_DeInit+0x5a>
 80026ea:	491e      	ldr	r1, [pc, #120]	; (8002764 <HAL_GPIO_DeInit+0xc8>)
 80026ec:	468c      	mov	ip, r1
 80026ee:	2102      	movs	r1, #2
 80026f0:	4560      	cmp	r0, ip
 80026f2:	d000      	beq.n	80026f6 <HAL_GPIO_DeInit+0x5a>
 80026f4:	3103      	adds	r1, #3
 80026f6:	40a9      	lsls	r1, r5
 80026f8:	9d03      	ldr	r5, [sp, #12]
 80026fa:	42a9      	cmp	r1, r5
 80026fc:	d110      	bne.n	8002720 <HAL_GPIO_DeInit+0x84>
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80026fe:	491a      	ldr	r1, [pc, #104]	; (8002768 <HAL_GPIO_DeInit+0xcc>)
 8002700:	680d      	ldr	r5, [r1, #0]
 8002702:	43a5      	bics	r5, r4
 8002704:	600d      	str	r5, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 8002706:	684d      	ldr	r5, [r1, #4]
 8002708:	43a5      	bics	r5, r4
 800270a:	604d      	str	r5, [r1, #4]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 800270c:	688d      	ldr	r5, [r1, #8]
 800270e:	43a5      	bics	r5, r4
 8002710:	608d      	str	r5, [r1, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 8002712:	68cd      	ldr	r5, [r1, #12]
 8002714:	43a5      	bics	r5, r4
 8002716:	60cd      	str	r5, [r1, #12]
        SYSCFG->EXTICR[position >> 2u] &= ~tmp;
 8002718:	6891      	ldr	r1, [r2, #8]
 800271a:	9c02      	ldr	r4, [sp, #8]
 800271c:	43a1      	bics	r1, r4
 800271e:	6091      	str	r1, [r2, #8]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002720:	2403      	movs	r4, #3
 8002722:	0059      	lsls	r1, r3, #1
 8002724:	408c      	lsls	r4, r1
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002726:	2107      	movs	r1, #7
 8002728:	260f      	movs	r6, #15
 800272a:	4019      	ands	r1, r3
 800272c:	0089      	lsls	r1, r1, #2
 800272e:	408e      	lsls	r6, r1
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002730:	6802      	ldr	r2, [r0, #0]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002732:	9901      	ldr	r1, [sp, #4]
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002734:	43a2      	bics	r2, r4
 8002736:	6002      	str	r2, [r0, #0]
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((uint32_t)(position & 0x07u) * 4u)) ;
 8002738:	08da      	lsrs	r2, r3, #3
 800273a:	0092      	lsls	r2, r2, #2
 800273c:	1882      	adds	r2, r0, r2
 800273e:	6a15      	ldr	r5, [r2, #32]
 8002740:	43b5      	bics	r5, r6
 8002742:	6215      	str	r5, [r2, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002744:	68c2      	ldr	r2, [r0, #12]
 8002746:	43a2      	bics	r2, r4
 8002748:	60c2      	str	r2, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800274a:	6842      	ldr	r2, [r0, #4]
 800274c:	438a      	bics	r2, r1
 800274e:	6042      	str	r2, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002750:	6882      	ldr	r2, [r0, #8]
 8002752:	43a2      	bics	r2, r4
 8002754:	6082      	str	r2, [r0, #8]
    position++;
 8002756:	3301      	adds	r3, #1
 8002758:	e7a4      	b.n	80026a4 <HAL_GPIO_DeInit+0x8>
 800275a:	46c0      	nop			; (mov r8, r8)
 800275c:	40010000 	.word	0x40010000
 8002760:	48000400 	.word	0x48000400
 8002764:	48000800 	.word	0x48000800
 8002768:	40010400 	.word	0x40010400

0800276c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800276c:	6900      	ldr	r0, [r0, #16]
 800276e:	4008      	ands	r0, r1
 8002770:	1e41      	subs	r1, r0, #1
 8002772:	4188      	sbcs	r0, r1
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
 8002774:	b2c0      	uxtb	r0, r0
  }
 8002776:	4770      	bx	lr

08002778 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002778:	2a00      	cmp	r2, #0
 800277a:	d001      	beq.n	8002780 <HAL_GPIO_WritePin+0x8>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800277c:	6181      	str	r1, [r0, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800277e:	4770      	bx	lr
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002780:	6281      	str	r1, [r0, #40]	; 0x28
}
 8002782:	e7fc      	b.n	800277e <HAL_GPIO_WritePin+0x6>

08002784 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002784:	b570      	push	{r4, r5, r6, lr}
 8002786:	0004      	movs	r4, r0
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
  {
    return HAL_ERROR;
 8002788:	2001      	movs	r0, #1
  if (hi2c == NULL)
 800278a:	2c00      	cmp	r4, #0
 800278c:	d03f      	beq.n	800280e <HAL_I2C_Init+0x8a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800278e:	0025      	movs	r5, r4
 8002790:	3541      	adds	r5, #65	; 0x41
 8002792:	782b      	ldrb	r3, [r5, #0]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	2b00      	cmp	r3, #0
 8002798:	d105      	bne.n	80027a6 <HAL_I2C_Init+0x22>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800279a:	0023      	movs	r3, r4
 800279c:	3340      	adds	r3, #64	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800279e:	0020      	movs	r0, r4
    hi2c->Lock = HAL_UNLOCKED;
 80027a0:	701a      	strb	r2, [r3, #0]
    HAL_I2C_MspInit(hi2c);
 80027a2:	f7ff fab5 	bl	8001d10 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80027a6:	2324      	movs	r3, #36	; 0x24

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80027a8:	2101      	movs	r1, #1
  hi2c->State = HAL_I2C_STATE_BUSY;
 80027aa:	702b      	strb	r3, [r5, #0]
  __HAL_I2C_DISABLE(hi2c);
 80027ac:	6823      	ldr	r3, [r4, #0]
  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027ae:	68e0      	ldr	r0, [r4, #12]
  __HAL_I2C_DISABLE(hi2c);
 80027b0:	681a      	ldr	r2, [r3, #0]
 80027b2:	68a6      	ldr	r6, [r4, #8]
 80027b4:	438a      	bics	r2, r1
 80027b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80027b8:	6861      	ldr	r1, [r4, #4]
 80027ba:	4a1a      	ldr	r2, [pc, #104]	; (8002824 <HAL_I2C_Init+0xa0>)
 80027bc:	400a      	ands	r2, r1
 80027be:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80027c0:	6899      	ldr	r1, [r3, #8]
 80027c2:	4a19      	ldr	r2, [pc, #100]	; (8002828 <HAL_I2C_Init+0xa4>)
 80027c4:	4011      	ands	r1, r2
 80027c6:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80027c8:	2801      	cmp	r0, #1
 80027ca:	d121      	bne.n	8002810 <HAL_I2C_Init+0x8c>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80027cc:	2180      	movs	r1, #128	; 0x80
 80027ce:	0209      	lsls	r1, r1, #8
 80027d0:	4331      	orrs	r1, r6
 80027d2:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80027d4:	6858      	ldr	r0, [r3, #4]
 80027d6:	4915      	ldr	r1, [pc, #84]	; (800282c <HAL_I2C_Init+0xa8>)
 80027d8:	4301      	orrs	r1, r0
 80027da:	6059      	str	r1, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027dc:	68d9      	ldr	r1, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027de:	2000      	movs	r0, #0
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80027e0:	400a      	ands	r2, r1
 80027e2:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027e4:	6961      	ldr	r1, [r4, #20]
 80027e6:	6922      	ldr	r2, [r4, #16]
 80027e8:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027ea:	69a1      	ldr	r1, [r4, #24]
 80027ec:	0209      	lsls	r1, r1, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ee:	430a      	orrs	r2, r1
 80027f0:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027f2:	6a21      	ldr	r1, [r4, #32]
 80027f4:	69e2      	ldr	r2, [r4, #28]
 80027f6:	430a      	orrs	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 80027fa:	2201      	movs	r2, #1
 80027fc:	6819      	ldr	r1, [r3, #0]
 80027fe:	430a      	orrs	r2, r1
 8002800:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002802:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002804:	6460      	str	r0, [r4, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8002806:	702b      	strb	r3, [r5, #0]
  hi2c->PreviousState = I2C_STATE_NONE;
 8002808:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800280a:	3442      	adds	r4, #66	; 0x42
 800280c:	7020      	strb	r0, [r4, #0]

  return HAL_OK;
}
 800280e:	bd70      	pop	{r4, r5, r6, pc}
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002810:	2184      	movs	r1, #132	; 0x84
 8002812:	0209      	lsls	r1, r1, #8
 8002814:	4331      	orrs	r1, r6
 8002816:	6099      	str	r1, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002818:	2802      	cmp	r0, #2
 800281a:	d1db      	bne.n	80027d4 <HAL_I2C_Init+0x50>
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800281c:	2180      	movs	r1, #128	; 0x80
 800281e:	0109      	lsls	r1, r1, #4
 8002820:	6059      	str	r1, [r3, #4]
 8002822:	e7d7      	b.n	80027d4 <HAL_I2C_Init+0x50>
 8002824:	f0ffffff 	.word	0xf0ffffff
 8002828:	ffff7fff 	.word	0xffff7fff
 800282c:	02008000 	.word	0x02008000

08002830 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002830:	b5f0      	push	{r4, r5, r6, r7, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002832:	0004      	movs	r4, r0
 8002834:	3441      	adds	r4, #65	; 0x41
 8002836:	7822      	ldrb	r2, [r4, #0]
{
 8002838:	0003      	movs	r3, r0
 800283a:	000f      	movs	r7, r1

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 800283c:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800283e:	b2d6      	uxtb	r6, r2
 8002840:	2a20      	cmp	r2, #32
 8002842:	d118      	bne.n	8002876 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    __HAL_LOCK(hi2c);
 8002844:	001d      	movs	r5, r3
 8002846:	3540      	adds	r5, #64	; 0x40
 8002848:	782a      	ldrb	r2, [r5, #0]
 800284a:	2a01      	cmp	r2, #1
 800284c:	d013      	beq.n	8002876 <HAL_I2CEx_ConfigAnalogFilter+0x46>
    hi2c->State = HAL_I2C_STATE_BUSY;
 800284e:	2224      	movs	r2, #36	; 0x24
 8002850:	7022      	strb	r2, [r4, #0]
    __HAL_I2C_DISABLE(hi2c);
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	3a23      	subs	r2, #35	; 0x23
 8002856:	6819      	ldr	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002858:	4807      	ldr	r0, [pc, #28]	; (8002878 <HAL_I2CEx_ConfigAnalogFilter+0x48>)
    __HAL_I2C_DISABLE(hi2c);
 800285a:	4391      	bics	r1, r2
 800285c:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800285e:	6819      	ldr	r1, [r3, #0]
 8002860:	4001      	ands	r1, r0
    __HAL_UNLOCK(hi2c);
 8002862:	2000      	movs	r0, #0
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002864:	6019      	str	r1, [r3, #0]
    hi2c->Instance->CR1 |= AnalogFilter;
 8002866:	6819      	ldr	r1, [r3, #0]
 8002868:	4339      	orrs	r1, r7
 800286a:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 800286c:	6819      	ldr	r1, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002872:	7026      	strb	r6, [r4, #0]
    __HAL_UNLOCK(hi2c);
 8002874:	7028      	strb	r0, [r5, #0]
  }
}
 8002876:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002878:	ffffefff 	.word	0xffffefff

0800287c <HAL_I2CEx_ConfigDigitalFilter>:

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800287c:	0002      	movs	r2, r0
{
 800287e:	b5f0      	push	{r4, r5, r6, r7, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002880:	3241      	adds	r2, #65	; 0x41
 8002882:	7814      	ldrb	r4, [r2, #0]
{
 8002884:	0003      	movs	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002886:	b2e5      	uxtb	r5, r4

    return HAL_OK;
  }
  else
  {
    return HAL_BUSY;
 8002888:	2002      	movs	r0, #2
  if (hi2c->State == HAL_I2C_STATE_READY)
 800288a:	2c20      	cmp	r4, #32
 800288c:	d117      	bne.n	80028be <HAL_I2CEx_ConfigDigitalFilter+0x42>
    __HAL_LOCK(hi2c);
 800288e:	001c      	movs	r4, r3
 8002890:	3440      	adds	r4, #64	; 0x40
 8002892:	7826      	ldrb	r6, [r4, #0]
 8002894:	2e01      	cmp	r6, #1
 8002896:	d012      	beq.n	80028be <HAL_I2CEx_ConfigDigitalFilter+0x42>
    hi2c->State = HAL_I2C_STATE_BUSY;
 8002898:	3022      	adds	r0, #34	; 0x22
 800289a:	7010      	strb	r0, [r2, #0]
    __HAL_I2C_DISABLE(hi2c);
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	3823      	subs	r0, #35	; 0x23
 80028a0:	681e      	ldr	r6, [r3, #0]
    tmpreg &= ~(I2C_CR1_DNF);
 80028a2:	4f07      	ldr	r7, [pc, #28]	; (80028c0 <HAL_I2CEx_ConfigDigitalFilter+0x44>)
    __HAL_I2C_DISABLE(hi2c);
 80028a4:	4386      	bics	r6, r0
 80028a6:	601e      	str	r6, [r3, #0]
    tmpreg = hi2c->Instance->CR1;
 80028a8:	681e      	ldr	r6, [r3, #0]
    tmpreg |= DigitalFilter << 8U;
 80028aa:	0209      	lsls	r1, r1, #8
    tmpreg &= ~(I2C_CR1_DNF);
 80028ac:	403e      	ands	r6, r7
    tmpreg |= DigitalFilter << 8U;
 80028ae:	4331      	orrs	r1, r6
    hi2c->Instance->CR1 = tmpreg;
 80028b0:	6019      	str	r1, [r3, #0]
    __HAL_I2C_ENABLE(hi2c);
 80028b2:	6819      	ldr	r1, [r3, #0]
 80028b4:	4308      	orrs	r0, r1
 80028b6:	6018      	str	r0, [r3, #0]
    __HAL_UNLOCK(hi2c);
 80028b8:	2000      	movs	r0, #0
    hi2c->State = HAL_I2C_STATE_READY;
 80028ba:	7015      	strb	r5, [r2, #0]
    __HAL_UNLOCK(hi2c);
 80028bc:	7020      	strb	r0, [r4, #0]
  }
}
 80028be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80028c0:	fffff0ff 	.word	0xfffff0ff

080028c4 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80028c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80028c6:	0004      	movs	r4, r0
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
  {
    return HAL_ERROR;
 80028c8:	2501      	movs	r5, #1
{
 80028ca:	b087      	sub	sp, #28
  if (hpcd == NULL)
 80028cc:	2800      	cmp	r0, #0
 80028ce:	d032      	beq.n	8002936 <HAL_PCD_Init+0x72>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80028d0:	4d31      	ldr	r5, [pc, #196]	; (8002998 <HAL_PCD_Init+0xd4>)
 80028d2:	5d43      	ldrb	r3, [r0, r5]
 80028d4:	b2da      	uxtb	r2, r3
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d104      	bne.n	80028e4 <HAL_PCD_Init+0x20>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80028da:	23aa      	movs	r3, #170	; 0xaa
 80028dc:	009b      	lsls	r3, r3, #2
 80028de:	54c2      	strb	r2, [r0, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80028e0:	f003 fc7a 	bl	80061d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80028e4:	2303      	movs	r3, #3
 80028e6:	5563      	strb	r3, [r4, r5]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80028e8:	6820      	ldr	r0, [r4, #0]
 80028ea:	f002 f8c1 	bl	8004a70 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ee:	2300      	movs	r3, #0
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028f0:	2701      	movs	r7, #1
    hpcd->IN_ep[i].num = i;
    hpcd->IN_ep[i].tx_fifo_num = i;
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028f2:	0019      	movs	r1, r3
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028f4:	6860      	ldr	r0, [r4, #4]
 80028f6:	4283      	cmp	r3, r0
 80028f8:	d320      	bcc.n	800293c <HAL_PCD_Init+0x78>
    hpcd->IN_ep[i].maxpacket = 0U;
    hpcd->IN_ep[i].xfer_buff = 0U;
    hpcd->IN_ep[i].xfer_len = 0U;
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028fa:	2200      	movs	r2, #0
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80028fc:	2628      	movs	r6, #40	; 0x28
 80028fe:	0011      	movs	r1, r2
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002900:	4290      	cmp	r0, r2
 8002902:	d834      	bhi.n	800296e <HAL_PCD_Init+0xaa>
    hpcd->OUT_ep[i].xfer_buff = 0U;
    hpcd->OUT_ep[i].xfer_len = 0U;
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 8002904:	0023      	movs	r3, r4
 8002906:	466a      	mov	r2, sp
 8002908:	3310      	adds	r3, #16
 800290a:	cb43      	ldmia	r3!, {r0, r1, r6}
 800290c:	c243      	stmia	r2!, {r0, r1, r6}
 800290e:	cb03      	ldmia	r3!, {r0, r1}
 8002910:	c203      	stmia	r2!, {r0, r1}
 8002912:	68a2      	ldr	r2, [r4, #8]
 8002914:	68e3      	ldr	r3, [r4, #12]
 8002916:	6861      	ldr	r1, [r4, #4]
 8002918:	6820      	ldr	r0, [r4, #0]
 800291a:	f002 f8b3 	bl	8004a84 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800291e:	2300      	movs	r3, #0
 8002920:	1d62      	adds	r2, r4, #5
 8002922:	77d3      	strb	r3, [r2, #31]
  hpcd->State = HAL_PCD_STATE_READY;
 8002924:	2201      	movs	r2, #1
 8002926:	5562      	strb	r2, [r4, r5]
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }

  return HAL_OK;
 8002928:	001d      	movs	r5, r3
  if (hpcd->Init.lpm_enable == 1U)
 800292a:	69e3      	ldr	r3, [r4, #28]
 800292c:	4293      	cmp	r3, r2
 800292e:	d102      	bne.n	8002936 <HAL_PCD_Init+0x72>
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002930:	0020      	movs	r0, r4
 8002932:	f000 fe82 	bl	800363a <HAL_PCDEx_ActivateLPM>
}
 8002936:	0028      	movs	r0, r5
 8002938:	b007      	add	sp, #28
 800293a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hpcd->IN_ep[i].is_in = 1U;
 800293c:	2629      	movs	r6, #41	; 0x29
 800293e:	2228      	movs	r2, #40	; 0x28
 8002940:	46b4      	mov	ip, r6
 8002942:	435a      	muls	r2, r3
 8002944:	18a2      	adds	r2, r4, r2
 8002946:	4494      	add	ip, r2
 8002948:	4666      	mov	r6, ip
 800294a:	7037      	strb	r7, [r6, #0]
    hpcd->IN_ep[i].num = i;
 800294c:	2628      	movs	r6, #40	; 0x28
 800294e:	46b4      	mov	ip, r6
 8002950:	4494      	add	ip, r2
 8002952:	4666      	mov	r6, ip
 8002954:	7033      	strb	r3, [r6, #0]
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002956:	262b      	movs	r6, #43	; 0x2b
 8002958:	46b4      	mov	ip, r6
 800295a:	4494      	add	ip, r2
 800295c:	4666      	mov	r6, ip
    hpcd->IN_ep[i].tx_fifo_num = i;
 800295e:	86d3      	strh	r3, [r2, #54]	; 0x36
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002960:	3301      	adds	r3, #1
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002962:	7031      	strb	r1, [r6, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002964:	b2db      	uxtb	r3, r3
    hpcd->IN_ep[i].maxpacket = 0U;
 8002966:	6391      	str	r1, [r2, #56]	; 0x38
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002968:	63d1      	str	r1, [r2, #60]	; 0x3c
    hpcd->IN_ep[i].xfer_len = 0U;
 800296a:	6411      	str	r1, [r2, #64]	; 0x40
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800296c:	e7c3      	b.n	80028f6 <HAL_PCD_Init+0x32>
    hpcd->OUT_ep[i].is_in = 0U;
 800296e:	0033      	movs	r3, r6
 8002970:	4353      	muls	r3, r2
 8002972:	18e3      	adds	r3, r4, r3
 8002974:	001f      	movs	r7, r3
 8002976:	376a      	adds	r7, #106	; 0x6a
 8002978:	37ff      	adds	r7, #255	; 0xff
 800297a:	7039      	strb	r1, [r7, #0]
    hpcd->OUT_ep[i].num = i;
 800297c:	3f01      	subs	r7, #1
 800297e:	703a      	strb	r2, [r7, #0]
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002980:	70f9      	strb	r1, [r7, #3]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002982:	3381      	adds	r3, #129	; 0x81
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002984:	3f6c      	subs	r7, #108	; 0x6c
 8002986:	67f9      	str	r1, [r7, #124]	; 0x7c
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002988:	33ff      	adds	r3, #255	; 0xff
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800298a:	3780      	adds	r7, #128	; 0x80
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800298c:	3201      	adds	r2, #1
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800298e:	6039      	str	r1, [r7, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002990:	b2d2      	uxtb	r2, r2
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002992:	6019      	str	r1, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002994:	e7b4      	b.n	8002900 <HAL_PCD_Init+0x3c>
 8002996:	46c0      	nop			; (mov r8, r8)
 8002998:	000002a9 	.word	0x000002a9

0800299c <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800299c:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 800299e:	25aa      	movs	r5, #170	; 0xaa
 80029a0:	00ad      	lsls	r5, r5, #2
 80029a2:	5d43      	ldrb	r3, [r0, r5]
{
 80029a4:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 80029a6:	2002      	movs	r0, #2
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d009      	beq.n	80029c0 <HAL_PCD_Start+0x24>
 80029ac:	2301      	movs	r3, #1
 80029ae:	5563      	strb	r3, [r4, r5]
  __HAL_PCD_ENABLE(hpcd);
 80029b0:	6820      	ldr	r0, [r4, #0]
 80029b2:	f002 f853 	bl	8004a5c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80029b6:	6820      	ldr	r0, [r4, #0]
 80029b8:	f002 fab3 	bl	8004f22 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80029bc:	2000      	movs	r0, #0
 80029be:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 80029c0:	bd70      	pop	{r4, r5, r6, pc}

080029c2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80029c2:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(hpcd);
 80029c4:	25aa      	movs	r5, #170	; 0xaa
 80029c6:	00ad      	lsls	r5, r5, #2
 80029c8:	5d43      	ldrb	r3, [r0, r5]
{
 80029ca:	0004      	movs	r4, r0
  __HAL_LOCK(hpcd);
 80029cc:	2002      	movs	r0, #2
 80029ce:	2b01      	cmp	r3, #1
 80029d0:	d008      	beq.n	80029e4 <HAL_PCD_SetAddress+0x22>
 80029d2:	2301      	movs	r3, #1
 80029d4:	5563      	strb	r3, [r4, r5]
  hpcd->USB_Address = address;
 80029d6:	1d63      	adds	r3, r4, #5
 80029d8:	77d9      	strb	r1, [r3, #31]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80029da:	6820      	ldr	r0, [r4, #0]
 80029dc:	f002 fa9a 	bl	8004f14 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80029e0:	2000      	movs	r0, #0
 80029e2:	5560      	strb	r0, [r4, r5]

  return HAL_OK;
}
 80029e4:	bd70      	pop	{r4, r5, r6, pc}
	...

080029e8 <HAL_PCD_IRQHandler>:
{
 80029e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029ea:	0004      	movs	r4, r0
 80029ec:	b085      	sub	sp, #20
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_CTR))
 80029ee:	6800      	ldr	r0, [r0, #0]
 80029f0:	f002 fa9f 	bl	8004f32 <USB_ReadInterrupts>
 80029f4:	0403      	lsls	r3, r0, #16
 80029f6:	d500      	bpl.n	80029fa <HAL_PCD_IRQHandler+0x12>
 80029f8:	e0db      	b.n	8002bb2 <HAL_PCD_IRQHandler+0x1ca>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_RESET))
 80029fa:	6820      	ldr	r0, [r4, #0]
 80029fc:	f002 fa99 	bl	8004f32 <USB_ReadInterrupts>
 8002a00:	0543      	lsls	r3, r0, #21
 8002a02:	d50c      	bpl.n	8002a1e <HAL_PCD_IRQHandler+0x36>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a04:	6823      	ldr	r3, [r4, #0]
 8002a06:	49b3      	ldr	r1, [pc, #716]	; (8002cd4 <HAL_PCD_IRQHandler+0x2ec>)
 8002a08:	3306      	adds	r3, #6
 8002a0a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8002a0c:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8002a0e:	400a      	ands	r2, r1
 8002a10:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_ResetCallback(hpcd);
 8002a12:	f003 fc25 	bl	8006260 <HAL_PCD_ResetCallback>
    (void)HAL_PCD_SetAddress(hpcd, 0U);
 8002a16:	2100      	movs	r1, #0
 8002a18:	0020      	movs	r0, r4
 8002a1a:	f7ff ffd2 	bl	80029c2 <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_PMAOVR))
 8002a1e:	6820      	ldr	r0, [r4, #0]
 8002a20:	f002 fa87 	bl	8004f32 <USB_ReadInterrupts>
 8002a24:	0443      	lsls	r3, r0, #17
 8002a26:	d505      	bpl.n	8002a34 <HAL_PCD_IRQHandler+0x4c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 8002a28:	6823      	ldr	r3, [r4, #0]
 8002a2a:	49ab      	ldr	r1, [pc, #684]	; (8002cd8 <HAL_PCD_IRQHandler+0x2f0>)
 8002a2c:	3306      	adds	r3, #6
 8002a2e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002a30:	400a      	ands	r2, r1
 8002a32:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ERR))
 8002a34:	6820      	ldr	r0, [r4, #0]
 8002a36:	f002 fa7c 	bl	8004f32 <USB_ReadInterrupts>
 8002a3a:	0483      	lsls	r3, r0, #18
 8002a3c:	d505      	bpl.n	8002a4a <HAL_PCD_IRQHandler+0x62>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 8002a3e:	6823      	ldr	r3, [r4, #0]
 8002a40:	49a6      	ldr	r1, [pc, #664]	; (8002cdc <HAL_PCD_IRQHandler+0x2f4>)
 8002a42:	3306      	adds	r3, #6
 8002a44:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002a46:	400a      	ands	r2, r1
 8002a48:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_WKUP))
 8002a4a:	6820      	ldr	r0, [r4, #0]
 8002a4c:	f002 fa71 	bl	8004f32 <USB_ReadInterrupts>
 8002a50:	04c3      	lsls	r3, r0, #19
 8002a52:	d51c      	bpl.n	8002a8e <HAL_PCD_IRQHandler+0xa6>
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 8002a54:	2104      	movs	r1, #4
 8002a56:	6823      	ldr	r3, [r4, #0]
 8002a58:	3302      	adds	r3, #2
 8002a5a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002a5c:	438a      	bics	r2, r1
 8002a5e:	87da      	strh	r2, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 8002a60:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002a62:	1849      	adds	r1, r1, r1
 8002a64:	438a      	bics	r2, r1
 8002a66:	87da      	strh	r2, [r3, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L1)
 8002a68:	23b8      	movs	r3, #184	; 0xb8
 8002a6a:	009b      	lsls	r3, r3, #2
 8002a6c:	5ce2      	ldrb	r2, [r4, r3]
 8002a6e:	2a01      	cmp	r2, #1
 8002a70:	d104      	bne.n	8002a7c <HAL_PCD_IRQHandler+0x94>
      hpcd->LPM_State = LPM_L0;
 8002a72:	2100      	movs	r1, #0
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a74:	0020      	movs	r0, r4
      hpcd->LPM_State = LPM_L0;
 8002a76:	54e1      	strb	r1, [r4, r3]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002a78:	f000 fdf3 	bl	8003662 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8002a7c:	0020      	movs	r0, r4
 8002a7e:	f003 fc13 	bl	80062a8 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 8002a82:	6823      	ldr	r3, [r4, #0]
 8002a84:	4996      	ldr	r1, [pc, #600]	; (8002ce0 <HAL_PCD_IRQHandler+0x2f8>)
 8002a86:	3306      	adds	r3, #6
 8002a88:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002a8a:	400a      	ands	r2, r1
 8002a8c:	87da      	strh	r2, [r3, #62]	; 0x3e
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SUSP))
 8002a8e:	6820      	ldr	r0, [r4, #0]
 8002a90:	f002 fa4f 	bl	8004f32 <USB_ReadInterrupts>
 8002a94:	0503      	lsls	r3, r0, #20
 8002a96:	d511      	bpl.n	8002abc <HAL_PCD_IRQHandler+0xd4>
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002a98:	2108      	movs	r1, #8
 8002a9a:	6823      	ldr	r3, [r4, #0]
 8002a9c:	1c9a      	adds	r2, r3, #2
 8002a9e:	8fd0      	ldrh	r0, [r2, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002aa0:	3306      	adds	r3, #6
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002aa2:	4301      	orrs	r1, r0
 8002aa4:	87d1      	strh	r1, [r2, #62]	; 0x3e
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 8002aa6:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
 8002aa8:	488e      	ldr	r0, [pc, #568]	; (8002ce4 <HAL_PCD_IRQHandler+0x2fc>)
 8002aaa:	4001      	ands	r1, r0
 8002aac:	87d9      	strh	r1, [r3, #62]	; 0x3e
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002aae:	2304      	movs	r3, #4
 8002ab0:	8fd1      	ldrh	r1, [r2, #62]	; 0x3e
    HAL_PCD_SuspendCallback(hpcd);
 8002ab2:	0020      	movs	r0, r4
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ab4:	430b      	orrs	r3, r1
 8002ab6:	87d3      	strh	r3, [r2, #62]	; 0x3e
    HAL_PCD_SuspendCallback(hpcd);
 8002ab8:	f003 fbe4 	bl	8006284 <HAL_PCD_SuspendCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8002abc:	6820      	ldr	r0, [r4, #0]
 8002abe:	f002 fa38 	bl	8004f32 <USB_ReadInterrupts>
 8002ac2:	2580      	movs	r5, #128	; 0x80
 8002ac4:	4228      	tst	r0, r5
 8002ac6:	d021      	beq.n	8002b0c <HAL_PCD_IRQHandler+0x124>
    if (hpcd->LPM_State == LPM_L0)
 8002ac8:	20b8      	movs	r0, #184	; 0xb8
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002aca:	6823      	ldr	r3, [r4, #0]
    if (hpcd->LPM_State == LPM_L0)
 8002acc:	0080      	lsls	r0, r0, #2
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 8002ace:	1d99      	adds	r1, r3, #6
 8002ad0:	8fca      	ldrh	r2, [r1, #62]	; 0x3e
 8002ad2:	43aa      	bics	r2, r5
 8002ad4:	87ca      	strh	r2, [r1, #62]	; 0x3e
    if (hpcd->LPM_State == LPM_L0)
 8002ad6:	5c22      	ldrb	r2, [r4, r0]
 8002ad8:	2a00      	cmp	r2, #0
 8002ada:	d001      	beq.n	8002ae0 <HAL_PCD_IRQHandler+0xf8>
 8002adc:	f000 fc95 	bl	800340a <HAL_PCD_IRQHandler+0xa22>
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 8002ae0:	1c99      	adds	r1, r3, #2
 8002ae2:	8fcd      	ldrh	r5, [r1, #62]	; 0x3e
 8002ae4:	3204      	adds	r2, #4
 8002ae6:	432a      	orrs	r2, r5
 8002ae8:	87ca      	strh	r2, [r1, #62]	; 0x3e
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002aea:	2208      	movs	r2, #8
 8002aec:	8fcd      	ldrh	r5, [r1, #62]	; 0x3e
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002aee:	3354      	adds	r3, #84	; 0x54
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 8002af0:	432a      	orrs	r2, r5
 8002af2:	87ca      	strh	r2, [r1, #62]	; 0x3e
      hpcd->LPM_State = LPM_L1;
 8002af4:	2101      	movs	r1, #1
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002af6:	223c      	movs	r2, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 8002af8:	5421      	strb	r1, [r4, r0]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002afa:	881b      	ldrh	r3, [r3, #0]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002afc:	0020      	movs	r0, r4
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 8002afe:	089b      	lsrs	r3, r3, #2
 8002b00:	4013      	ands	r3, r2
 8002b02:	22b9      	movs	r2, #185	; 0xb9
 8002b04:	0092      	lsls	r2, r2, #2
 8002b06:	50a3      	str	r3, [r4, r2]
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002b08:	f000 fdab 	bl	8003662 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_SOF))
 8002b0c:	6820      	ldr	r0, [r4, #0]
 8002b0e:	f002 fa10 	bl	8004f32 <USB_ReadInterrupts>
 8002b12:	0583      	lsls	r3, r0, #22
 8002b14:	d508      	bpl.n	8002b28 <HAL_PCD_IRQHandler+0x140>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b16:	6823      	ldr	r3, [r4, #0]
 8002b18:	4973      	ldr	r1, [pc, #460]	; (8002ce8 <HAL_PCD_IRQHandler+0x300>)
 8002b1a:	3306      	adds	r3, #6
 8002b1c:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8002b1e:	0020      	movs	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 8002b20:	400a      	ands	r2, r1
 8002b22:	87da      	strh	r2, [r3, #62]	; 0x3e
    HAL_PCD_SOFCallback(hpcd);
 8002b24:	f003 fb95 	bl	8006252 <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_ESOF))
 8002b28:	6820      	ldr	r0, [r4, #0]
 8002b2a:	f002 fa02 	bl	8004f32 <USB_ReadInterrupts>
 8002b2e:	05c3      	lsls	r3, r0, #23
 8002b30:	d505      	bpl.n	8002b3e <HAL_PCD_IRQHandler+0x156>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 8002b32:	6823      	ldr	r3, [r4, #0]
 8002b34:	496d      	ldr	r1, [pc, #436]	; (8002cec <HAL_PCD_IRQHandler+0x304>)
 8002b36:	3306      	adds	r3, #6
 8002b38:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002b3a:	400a      	ands	r2, r1
 8002b3c:	87da      	strh	r2, [r3, #62]	; 0x3e
}
 8002b3e:	b005      	add	sp, #20
 8002b40:	bdf0      	pop	{r4, r5, r6, r7, pc}
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
  {
    wIstr = hpcd->Instance->ISTR;

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b42:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8002b44:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8002b46:	4019      	ands	r1, r3
 8002b48:	9100      	str	r1, [sp, #0]

    if (epindex == 0U)
 8002b4a:	210f      	movs	r1, #15
    wIstr = hpcd->Instance->ISTR;
 8002b4c:	b29a      	uxth	r2, r3
    if (epindex == 0U)
 8002b4e:	420b      	tst	r3, r1
 8002b50:	d000      	beq.n	8002b54 <HAL_PCD_IRQHandler+0x16c>
 8002b52:	e0dd      	b.n	8002d10 <HAL_PCD_IRQHandler+0x328>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 8002b54:	2310      	movs	r3, #16
 8002b56:	0011      	movs	r1, r2
 8002b58:	4019      	ands	r1, r3
 8002b5a:	421a      	tst	r2, r3
 8002b5c:	d130      	bne.n	8002bc0 <HAL_PCD_IRQHandler+0x1d8>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002b5e:	8803      	ldrh	r3, [r0, #0]
 8002b60:	4a63      	ldr	r2, [pc, #396]	; (8002cf0 <HAL_PCD_IRQHandler+0x308>)
 8002b62:	4013      	ands	r3, r2
 8002b64:	2280      	movs	r2, #128	; 0x80
 8002b66:	0212      	lsls	r2, r2, #8
 8002b68:	4313      	orrs	r3, r2
 8002b6a:	8003      	strh	r3, [r0, #0]
        ep = &hpcd->IN_ep[0];

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b6c:	0003      	movs	r3, r0
 8002b6e:	3350      	adds	r3, #80	; 0x50
 8002b70:	881a      	ldrh	r2, [r3, #0]
 8002b72:	0023      	movs	r3, r4
 8002b74:	3328      	adds	r3, #40	; 0x28
 8002b76:	781b      	ldrb	r3, [r3, #0]
 8002b78:	00db      	lsls	r3, r3, #3
 8002b7a:	18c3      	adds	r3, r0, r3
 8002b7c:	189b      	adds	r3, r3, r2
 8002b7e:	4a5d      	ldr	r2, [pc, #372]	; (8002cf4 <HAL_PCD_IRQHandler+0x30c>)

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b80:	0020      	movs	r0, r4
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b82:	189b      	adds	r3, r3, r2
 8002b84:	881b      	ldrh	r3, [r3, #0]
        ep->xfer_buff += ep->xfer_count;
 8002b86:	6be2      	ldr	r2, [r4, #60]	; 0x3c
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8002b88:	059b      	lsls	r3, r3, #22
 8002b8a:	0d9b      	lsrs	r3, r3, #22
 8002b8c:	6463      	str	r3, [r4, #68]	; 0x44
        ep->xfer_buff += ep->xfer_count;
 8002b8e:	18d3      	adds	r3, r2, r3
 8002b90:	63e3      	str	r3, [r4, #60]	; 0x3c
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8002b92:	f003 fb53 	bl	800623c <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8002b96:	1d63      	adds	r3, r4, #5
 8002b98:	7fda      	ldrb	r2, [r3, #31]
 8002b9a:	2a00      	cmp	r2, #0
 8002b9c:	d009      	beq.n	8002bb2 <HAL_PCD_IRQHandler+0x1ca>
 8002b9e:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8002ba0:	2800      	cmp	r0, #0
 8002ba2:	d106      	bne.n	8002bb2 <HAL_PCD_IRQHandler+0x1ca>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 8002ba4:	2280      	movs	r2, #128	; 0x80
 8002ba6:	7fd9      	ldrb	r1, [r3, #31]
 8002ba8:	4311      	orrs	r1, r2
 8002baa:	6822      	ldr	r2, [r4, #0]
 8002bac:	324c      	adds	r2, #76	; 0x4c
 8002bae:	8011      	strh	r1, [r2, #0]
          hpcd->USB_Address = 0U;
 8002bb0:	77d8      	strb	r0, [r3, #31]
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8002bb2:	6820      	ldr	r0, [r4, #0]
 8002bb4:	1d82      	adds	r2, r0, #6
 8002bb6:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8002bb8:	b21b      	sxth	r3, r3
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	dbc1      	blt.n	8002b42 <HAL_PCD_IRQHandler+0x15a>
 8002bbe:	e71c      	b.n	80029fa <HAL_PCD_IRQHandler+0x12>
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bc0:	8802      	ldrh	r2, [r0, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002bc2:	2180      	movs	r1, #128	; 0x80
 8002bc4:	0016      	movs	r6, r2
 8002bc6:	0109      	lsls	r1, r1, #4
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8002bc8:	b293      	uxth	r3, r2
        if ((wEPVal & USB_EP_SETUP) != 0U)
 8002bca:	400e      	ands	r6, r1
 8002bcc:	420a      	tst	r2, r1
 8002bce:	d022      	beq.n	8002c16 <HAL_PCD_IRQHandler+0x22e>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bd0:	0003      	movs	r3, r0
 8002bd2:	3350      	adds	r3, #80	; 0x50
 8002bd4:	881a      	ldrh	r2, [r3, #0]
 8002bd6:	23b4      	movs	r3, #180	; 0xb4
 8002bd8:	005b      	lsls	r3, r3, #1
 8002bda:	5ce3      	ldrb	r3, [r4, r3]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bdc:	21ac      	movs	r1, #172	; 0xac
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002bde:	00db      	lsls	r3, r3, #3
 8002be0:	18c3      	adds	r3, r0, r3
 8002be2:	189b      	adds	r3, r3, r2
 8002be4:	4a44      	ldr	r2, [pc, #272]	; (8002cf8 <HAL_PCD_IRQHandler+0x310>)
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002be6:	0089      	lsls	r1, r1, #2
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002be8:	189b      	adds	r3, r3, r2
 8002bea:	0022      	movs	r2, r4
 8002bec:	881b      	ldrh	r3, [r3, #0]
 8002bee:	3269      	adds	r2, #105	; 0x69
 8002bf0:	059b      	lsls	r3, r3, #22
 8002bf2:	0d9b      	lsrs	r3, r3, #22
 8002bf4:	32ff      	adds	r2, #255	; 0xff
 8002bf6:	61d3      	str	r3, [r2, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8002bf8:	1861      	adds	r1, r4, r1
 8002bfa:	88d2      	ldrh	r2, [r2, #6]
 8002bfc:	f002 fc5c 	bl	80054b8 <USB_ReadPMA>
                      ep->pmaadress, (uint16_t)ep->xfer_count);

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c00:	6822      	ldr	r2, [r4, #0]
 8002c02:	493e      	ldr	r1, [pc, #248]	; (8002cfc <HAL_PCD_IRQHandler+0x314>)
 8002c04:	8813      	ldrh	r3, [r2, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8002c06:	0020      	movs	r0, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c08:	400b      	ands	r3, r1
 8002c0a:	2180      	movs	r1, #128	; 0x80
 8002c0c:	430b      	orrs	r3, r1
 8002c0e:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8002c10:	f003 fafe 	bl	8006210 <HAL_PCD_SetupStageCallback>
 8002c14:	e7cd      	b.n	8002bb2 <HAL_PCD_IRQHandler+0x1ca>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002c16:	b21b      	sxth	r3, r3
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	daca      	bge.n	8002bb2 <HAL_PCD_IRQHandler+0x1ca>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c1c:	8803      	ldrh	r3, [r0, #0]
 8002c1e:	4a37      	ldr	r2, [pc, #220]	; (8002cfc <HAL_PCD_IRQHandler+0x314>)

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c20:	0025      	movs	r5, r4
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8002c22:	4013      	ands	r3, r2
 8002c24:	2280      	movs	r2, #128	; 0x80
 8002c26:	4313      	orrs	r3, r2
 8002c28:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002c2a:	0003      	movs	r3, r0
 8002c2c:	3350      	adds	r3, #80	; 0x50
 8002c2e:	881a      	ldrh	r2, [r3, #0]
 8002c30:	23b4      	movs	r3, #180	; 0xb4
 8002c32:	005b      	lsls	r3, r3, #1
 8002c34:	5ce3      	ldrb	r3, [r4, r3]
 8002c36:	3569      	adds	r5, #105	; 0x69
 8002c38:	00db      	lsls	r3, r3, #3
 8002c3a:	18c3      	adds	r3, r0, r3
 8002c3c:	189b      	adds	r3, r3, r2
 8002c3e:	4a2e      	ldr	r2, [pc, #184]	; (8002cf8 <HAL_PCD_IRQHandler+0x310>)
 8002c40:	35ff      	adds	r5, #255	; 0xff
 8002c42:	189b      	adds	r3, r3, r2
 8002c44:	881b      	ldrh	r3, [r3, #0]
 8002c46:	059b      	lsls	r3, r3, #22
 8002c48:	0d9b      	lsrs	r3, r3, #22
 8002c4a:	61eb      	str	r3, [r5, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 8002c4c:	d00d      	beq.n	8002c6a <HAL_PCD_IRQHandler+0x282>
 8002c4e:	6969      	ldr	r1, [r5, #20]
 8002c50:	2900      	cmp	r1, #0
 8002c52:	d00a      	beq.n	8002c6a <HAL_PCD_IRQHandler+0x282>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 8002c54:	88ea      	ldrh	r2, [r5, #6]
 8002c56:	f002 fc2f 	bl	80054b8 <USB_ReadPMA>
                        ep->pmaadress, (uint16_t)ep->xfer_count);

            ep->xfer_buff += ep->xfer_count;
 8002c5a:	696b      	ldr	r3, [r5, #20]
 8002c5c:	69ea      	ldr	r2, [r5, #28]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c5e:	0031      	movs	r1, r6
            ep->xfer_buff += ep->xfer_count;
 8002c60:	189b      	adds	r3, r3, r2
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c62:	0020      	movs	r0, r4
            ep->xfer_buff += ep->xfer_count;
 8002c64:	616b      	str	r3, [r5, #20]
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 8002c66:	f003 fadc 	bl	8006222 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          if ((PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0) & USB_EP_SETUP) == 0U)
 8002c6a:	6821      	ldr	r1, [r4, #0]
 8002c6c:	880b      	ldrh	r3, [r1, #0]
 8002c6e:	051b      	lsls	r3, r3, #20
 8002c70:	d49f      	bmi.n	8002bb2 <HAL_PCD_IRQHandler+0x1ca>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002c72:	000b      	movs	r3, r1
 8002c74:	4a20      	ldr	r2, [pc, #128]	; (8002cf8 <HAL_PCD_IRQHandler+0x310>)
 8002c76:	3350      	adds	r3, #80	; 0x50
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	188a      	adds	r2, r1, r2
 8002c7c:	18d2      	adds	r2, r2, r3
 8002c7e:	692b      	ldr	r3, [r5, #16]
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d109      	bne.n	8002c98 <HAL_PCD_IRQHandler+0x2b0>
 8002c84:	8813      	ldrh	r3, [r2, #0]
 8002c86:	481e      	ldr	r0, [pc, #120]	; (8002d00 <HAL_PCD_IRQHandler+0x318>)
 8002c88:	4003      	ands	r3, r0
 8002c8a:	2080      	movs	r0, #128	; 0x80
 8002c8c:	8013      	strh	r3, [r2, #0]
 8002c8e:	8813      	ldrh	r3, [r2, #0]
 8002c90:	0200      	lsls	r0, r0, #8
 8002c92:	4303      	orrs	r3, r0
 8002c94:	8013      	strh	r3, [r2, #0]
 8002c96:	e008      	b.n	8002caa <HAL_PCD_IRQHandler+0x2c2>
 8002c98:	2b3e      	cmp	r3, #62	; 0x3e
 8002c9a:	d810      	bhi.n	8002cbe <HAL_PCD_IRQHandler+0x2d6>
 8002c9c:	2501      	movs	r5, #1
 8002c9e:	0858      	lsrs	r0, r3, #1
 8002ca0:	402b      	ands	r3, r5
 8002ca2:	18c0      	adds	r0, r0, r3
 8002ca4:	0280      	lsls	r0, r0, #10
 8002ca6:	b280      	uxth	r0, r0
 8002ca8:	8010      	strh	r0, [r2, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8002caa:	880b      	ldrh	r3, [r1, #0]
 8002cac:	4a15      	ldr	r2, [pc, #84]	; (8002d04 <HAL_PCD_IRQHandler+0x31c>)
 8002cae:	401a      	ands	r2, r3
 8002cb0:	23c0      	movs	r3, #192	; 0xc0
 8002cb2:	019b      	lsls	r3, r3, #6
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 8002cb4:	4053      	eors	r3, r2
 8002cb6:	4a14      	ldr	r2, [pc, #80]	; (8002d08 <HAL_PCD_IRQHandler+0x320>)
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	800b      	strh	r3, [r1, #0]

  return HAL_OK;
 8002cbc:	e779      	b.n	8002bb2 <HAL_PCD_IRQHandler+0x1ca>
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8002cbe:	251f      	movs	r5, #31
 8002cc0:	0958      	lsrs	r0, r3, #5
 8002cc2:	402b      	ands	r3, r5
 8002cc4:	425d      	negs	r5, r3
 8002cc6:	416b      	adcs	r3, r5
 8002cc8:	1ac0      	subs	r0, r0, r3
 8002cca:	4b10      	ldr	r3, [pc, #64]	; (8002d0c <HAL_PCD_IRQHandler+0x324>)
 8002ccc:	0280      	lsls	r0, r0, #10
 8002cce:	4303      	orrs	r3, r0
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	e7df      	b.n	8002c94 <HAL_PCD_IRQHandler+0x2ac>
 8002cd4:	fffffbff 	.word	0xfffffbff
 8002cd8:	ffffbfff 	.word	0xffffbfff
 8002cdc:	ffffdfff 	.word	0xffffdfff
 8002ce0:	ffffefff 	.word	0xffffefff
 8002ce4:	fffff7ff 	.word	0xfffff7ff
 8002ce8:	fffffdff 	.word	0xfffffdff
 8002cec:	fffffeff 	.word	0xfffffeff
 8002cf0:	ffff8f0f 	.word	0xffff8f0f
 8002cf4:	00000402 	.word	0x00000402
 8002cf8:	00000406 	.word	0x00000406
 8002cfc:	00000f8f 	.word	0x00000f8f
 8002d00:	ffff83ff 	.word	0xffff83ff
 8002d04:	ffffbf8f 	.word	0xffffbf8f
 8002d08:	00008080 	.word	0x00008080
 8002d0c:	ffff8000 	.word	0xffff8000
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d10:	9b00      	ldr	r3, [sp, #0]
 8002d12:	009f      	lsls	r7, r3, #2
 8002d14:	19c2      	adds	r2, r0, r7
 8002d16:	8813      	ldrh	r3, [r2, #0]
 8002d18:	b299      	uxth	r1, r3
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d1a:	b21b      	sxth	r3, r3
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8002d1c:	9101      	str	r1, [sp, #4]
      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	db00      	blt.n	8002d24 <HAL_PCD_IRQHandler+0x33c>
 8002d22:	e0f2      	b.n	8002f0a <HAL_PCD_IRQHandler+0x522>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8002d24:	8813      	ldrh	r3, [r2, #0]
 8002d26:	49c7      	ldr	r1, [pc, #796]	; (8003044 <HAL_PCD_IRQHandler+0x65c>)
 8002d28:	400b      	ands	r3, r1
 8002d2a:	2180      	movs	r1, #128	; 0x80
 8002d2c:	430b      	orrs	r3, r1
 8002d2e:	8013      	strh	r3, [r2, #0]
        if (ep->doublebuffer == 0U)
 8002d30:	2328      	movs	r3, #40	; 0x28
 8002d32:	9a00      	ldr	r2, [sp, #0]
 8002d34:	4353      	muls	r3, r2
 8002d36:	18e3      	adds	r3, r4, r3
 8002d38:	001a      	movs	r2, r3
 8002d3a:	001d      	movs	r5, r3
 8002d3c:	3275      	adds	r2, #117	; 0x75
 8002d3e:	32ff      	adds	r2, #255	; 0xff
 8002d40:	7812      	ldrb	r2, [r2, #0]
 8002d42:	3569      	adds	r5, #105	; 0x69
 8002d44:	35ff      	adds	r5, #255	; 0xff
 8002d46:	2a00      	cmp	r2, #0
 8002d48:	d11a      	bne.n	8002d80 <HAL_PCD_IRQHandler+0x398>
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8002d4a:	0002      	movs	r2, r0
 8002d4c:	3250      	adds	r2, #80	; 0x50
 8002d4e:	8811      	ldrh	r1, [r2, #0]
 8002d50:	782a      	ldrb	r2, [r5, #0]
 8002d52:	00d2      	lsls	r2, r2, #3
 8002d54:	1852      	adds	r2, r2, r1
 8002d56:	49bc      	ldr	r1, [pc, #752]	; (8003048 <HAL_PCD_IRQHandler+0x660>)
 8002d58:	1812      	adds	r2, r2, r0
 8002d5a:	1852      	adds	r2, r2, r1
 8002d5c:	8812      	ldrh	r2, [r2, #0]
 8002d5e:	0592      	lsls	r2, r2, #22
 8002d60:	0d95      	lsrs	r5, r2, #22
          if (count != 0U)
 8002d62:	2a00      	cmp	r2, #0
 8002d64:	d100      	bne.n	8002d68 <HAL_PCD_IRQHandler+0x380>
 8002d66:	e0af      	b.n	8002ec8 <HAL_PCD_IRQHandler+0x4e0>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8002d68:	001a      	movs	r2, r3
 8002d6a:	326f      	adds	r2, #111	; 0x6f
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002d6c:	337d      	adds	r3, #125	; 0x7d
 8002d6e:	33ff      	adds	r3, #255	; 0xff
 8002d70:	0019      	movs	r1, r3
 8002d72:	32ff      	adds	r2, #255	; 0xff
 8002d74:	002b      	movs	r3, r5
 8002d76:	8812      	ldrh	r2, [r2, #0]
 8002d78:	6809      	ldr	r1, [r1, #0]
 8002d7a:	f002 fb9d 	bl	80054b8 <USB_ReadPMA>
 8002d7e:	e0a3      	b.n	8002ec8 <HAL_PCD_IRQHandler+0x4e0>
          if (ep->type == EP_TYPE_BULK)
 8002d80:	0019      	movs	r1, r3
 8002d82:	316c      	adds	r1, #108	; 0x6c
 8002d84:	31ff      	adds	r1, #255	; 0xff
 8002d86:	7809      	ldrb	r1, [r1, #0]
 8002d88:	782a      	ldrb	r2, [r5, #0]
 8002d8a:	2902      	cmp	r1, #2
 8002d8c:	d000      	beq.n	8002d90 <HAL_PCD_IRQHandler+0x3a8>
 8002d8e:	e080      	b.n	8002e92 <HAL_PCD_IRQHandler+0x4aa>
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8002d90:	2680      	movs	r6, #128	; 0x80
 8002d92:	01f6      	lsls	r6, r6, #7
 8002d94:	46b4      	mov	ip, r6
 8002d96:	4665      	mov	r5, ip
 8002d98:	9e01      	ldr	r6, [sp, #4]
 8002d9a:	3381      	adds	r3, #129	; 0x81
 8002d9c:	402e      	ands	r6, r5
 8002d9e:	9603      	str	r6, [sp, #12]
 8002da0:	0006      	movs	r6, r0
 8002da2:	3650      	adds	r6, #80	; 0x50
 8002da4:	9602      	str	r6, [sp, #8]
 8002da6:	4666      	mov	r6, ip
 8002da8:	9d01      	ldr	r5, [sp, #4]
 8002daa:	33ff      	adds	r3, #255	; 0xff
 8002dac:	6819      	ldr	r1, [r3, #0]
 8002dae:	4235      	tst	r5, r6
 8002db0:	d037      	beq.n	8002e22 <HAL_PCD_IRQHandler+0x43a>
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002db2:	9d02      	ldr	r5, [sp, #8]
 8002db4:	882e      	ldrh	r6, [r5, #0]
 8002db6:	00d5      	lsls	r5, r2, #3
 8002db8:	1976      	adds	r6, r6, r5
 8002dba:	4da4      	ldr	r5, [pc, #656]	; (800304c <HAL_PCD_IRQHandler+0x664>)
 8002dbc:	1836      	adds	r6, r6, r0
 8002dbe:	1976      	adds	r6, r6, r5
 8002dc0:	8835      	ldrh	r5, [r6, #0]
 8002dc2:	05ad      	lsls	r5, r5, #22
 8002dc4:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 8002dc6:	428d      	cmp	r5, r1
 8002dc8:	d90d      	bls.n	8002de6 <HAL_PCD_IRQHandler+0x3fe>
 8002dca:	2100      	movs	r1, #0
 8002dcc:	6019      	str	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002dce:	0092      	lsls	r2, r2, #2
 8002dd0:	1882      	adds	r2, r0, r2
 8002dd2:	8813      	ldrh	r3, [r2, #0]
 8002dd4:	499e      	ldr	r1, [pc, #632]	; (8003050 <HAL_PCD_IRQHandler+0x668>)
 8002dd6:	4019      	ands	r1, r3
 8002dd8:	2380      	movs	r3, #128	; 0x80
 8002dda:	019b      	lsls	r3, r3, #6
 8002ddc:	404b      	eors	r3, r1
 8002dde:	499d      	ldr	r1, [pc, #628]	; (8003054 <HAL_PCD_IRQHandler+0x66c>)
 8002de0:	430b      	orrs	r3, r1
 8002de2:	8013      	strh	r3, [r2, #0]
 8002de4:	e002      	b.n	8002dec <HAL_PCD_IRQHandler+0x404>
      ep->xfer_len -= count;
 8002de6:	1b49      	subs	r1, r1, r5
 8002de8:	6019      	str	r1, [r3, #0]
    if (ep->xfer_len == 0U)
 8002dea:	d0f0      	beq.n	8002dce <HAL_PCD_IRQHandler+0x3e6>
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002dec:	9b01      	ldr	r3, [sp, #4]
 8002dee:	065b      	lsls	r3, r3, #25
 8002df0:	d50e      	bpl.n	8002e10 <HAL_PCD_IRQHandler+0x428>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002df2:	2328      	movs	r3, #40	; 0x28
 8002df4:	9a00      	ldr	r2, [sp, #0]
 8002df6:	4998      	ldr	r1, [pc, #608]	; (8003058 <HAL_PCD_IRQHandler+0x670>)
 8002df8:	4353      	muls	r3, r2
 8002dfa:	18e3      	adds	r3, r4, r3
 8002dfc:	3369      	adds	r3, #105	; 0x69
 8002dfe:	33ff      	adds	r3, #255	; 0xff
 8002e00:	781b      	ldrb	r3, [r3, #0]
 8002e02:	009b      	lsls	r3, r3, #2
 8002e04:	18c3      	adds	r3, r0, r3
 8002e06:	881a      	ldrh	r2, [r3, #0]
 8002e08:	400a      	ands	r2, r1
 8002e0a:	4994      	ldr	r1, [pc, #592]	; (800305c <HAL_PCD_IRQHandler+0x674>)
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	801a      	strh	r2, [r3, #0]
    if (count != 0U)
 8002e10:	2d00      	cmp	r5, #0
 8002e12:	d059      	beq.n	8002ec8 <HAL_PCD_IRQHandler+0x4e0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e14:	2328      	movs	r3, #40	; 0x28
 8002e16:	9a00      	ldr	r2, [sp, #0]
 8002e18:	4353      	muls	r3, r2
 8002e1a:	18e3      	adds	r3, r4, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8002e1c:	001a      	movs	r2, r3
 8002e1e:	3271      	adds	r2, #113	; 0x71
 8002e20:	e7a4      	b.n	8002d6c <HAL_PCD_IRQHandler+0x384>
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002e22:	9d02      	ldr	r5, [sp, #8]
 8002e24:	882e      	ldrh	r6, [r5, #0]
 8002e26:	00d5      	lsls	r5, r2, #3
 8002e28:	1976      	adds	r6, r6, r5
 8002e2a:	4d87      	ldr	r5, [pc, #540]	; (8003048 <HAL_PCD_IRQHandler+0x660>)
 8002e2c:	1836      	adds	r6, r6, r0
 8002e2e:	1976      	adds	r6, r6, r5
 8002e30:	8835      	ldrh	r5, [r6, #0]
 8002e32:	05ad      	lsls	r5, r5, #22
 8002e34:	0dad      	lsrs	r5, r5, #22
    if (ep->xfer_len >= count)
 8002e36:	428d      	cmp	r5, r1
 8002e38:	d90d      	bls.n	8002e56 <HAL_PCD_IRQHandler+0x46e>
 8002e3a:	9903      	ldr	r1, [sp, #12]
 8002e3c:	6019      	str	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8002e3e:	0092      	lsls	r2, r2, #2
 8002e40:	1882      	adds	r2, r0, r2
 8002e42:	8813      	ldrh	r3, [r2, #0]
 8002e44:	4982      	ldr	r1, [pc, #520]	; (8003050 <HAL_PCD_IRQHandler+0x668>)
 8002e46:	4019      	ands	r1, r3
 8002e48:	2380      	movs	r3, #128	; 0x80
 8002e4a:	019b      	lsls	r3, r3, #6
 8002e4c:	404b      	eors	r3, r1
 8002e4e:	4981      	ldr	r1, [pc, #516]	; (8003054 <HAL_PCD_IRQHandler+0x66c>)
 8002e50:	430b      	orrs	r3, r1
 8002e52:	8013      	strh	r3, [r2, #0]
 8002e54:	e002      	b.n	8002e5c <HAL_PCD_IRQHandler+0x474>
      ep->xfer_len -= count;
 8002e56:	1b49      	subs	r1, r1, r5
 8002e58:	6019      	str	r1, [r3, #0]
    if (ep->xfer_len == 0U)
 8002e5a:	d0f0      	beq.n	8002e3e <HAL_PCD_IRQHandler+0x456>
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8002e5c:	9b01      	ldr	r3, [sp, #4]
 8002e5e:	065b      	lsls	r3, r3, #25
 8002e60:	d40e      	bmi.n	8002e80 <HAL_PCD_IRQHandler+0x498>
      PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e62:	2328      	movs	r3, #40	; 0x28
 8002e64:	9a00      	ldr	r2, [sp, #0]
 8002e66:	497c      	ldr	r1, [pc, #496]	; (8003058 <HAL_PCD_IRQHandler+0x670>)
 8002e68:	4353      	muls	r3, r2
 8002e6a:	18e3      	adds	r3, r4, r3
 8002e6c:	3369      	adds	r3, #105	; 0x69
 8002e6e:	33ff      	adds	r3, #255	; 0xff
 8002e70:	781b      	ldrb	r3, [r3, #0]
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	18c3      	adds	r3, r0, r3
 8002e76:	881a      	ldrh	r2, [r3, #0]
 8002e78:	400a      	ands	r2, r1
 8002e7a:	4978      	ldr	r1, [pc, #480]	; (800305c <HAL_PCD_IRQHandler+0x674>)
 8002e7c:	430a      	orrs	r2, r1
 8002e7e:	801a      	strh	r2, [r3, #0]
    if (count != 0U)
 8002e80:	2d00      	cmp	r5, #0
 8002e82:	d021      	beq.n	8002ec8 <HAL_PCD_IRQHandler+0x4e0>
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e84:	2328      	movs	r3, #40	; 0x28
 8002e86:	9a00      	ldr	r2, [sp, #0]
 8002e88:	4353      	muls	r3, r2
 8002e8a:	18e3      	adds	r3, r4, r3
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8002e8c:	001a      	movs	r2, r3
 8002e8e:	3273      	adds	r2, #115	; 0x73
 8002e90:	e76c      	b.n	8002d6c <HAL_PCD_IRQHandler+0x384>
            PCD_FreeUserBuffer(hpcd->Instance, ep->num, 0U);
 8002e92:	0092      	lsls	r2, r2, #2
 8002e94:	1882      	adds	r2, r0, r2
 8002e96:	8816      	ldrh	r6, [r2, #0]
 8002e98:	496f      	ldr	r1, [pc, #444]	; (8003058 <HAL_PCD_IRQHandler+0x670>)
 8002e9a:	4031      	ands	r1, r6
 8002e9c:	4e6f      	ldr	r6, [pc, #444]	; (800305c <HAL_PCD_IRQHandler+0x674>)
 8002e9e:	4331      	orrs	r1, r6
 8002ea0:	8011      	strh	r1, [r2, #0]
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002ea2:	782a      	ldrb	r2, [r5, #0]
 8002ea4:	0091      	lsls	r1, r2, #2
 8002ea6:	1841      	adds	r1, r0, r1
 8002ea8:	880d      	ldrh	r5, [r1, #0]
 8002eaa:	0001      	movs	r1, r0
 8002eac:	3150      	adds	r1, #80	; 0x50
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002eae:	8809      	ldrh	r1, [r1, #0]
 8002eb0:	00d2      	lsls	r2, r2, #3
 8002eb2:	1852      	adds	r2, r2, r1
 8002eb4:	1812      	adds	r2, r2, r0
            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8002eb6:	046d      	lsls	r5, r5, #17
 8002eb8:	d55f      	bpl.n	8002f7a <HAL_PCD_IRQHandler+0x592>
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8002eba:	4964      	ldr	r1, [pc, #400]	; (800304c <HAL_PCD_IRQHandler+0x664>)
 8002ebc:	1852      	adds	r2, r2, r1
 8002ebe:	8812      	ldrh	r2, [r2, #0]
 8002ec0:	0592      	lsls	r2, r2, #22
 8002ec2:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 8002ec4:	2a00      	cmp	r2, #0
 8002ec6:	d1a9      	bne.n	8002e1c <HAL_PCD_IRQHandler+0x434>
        ep->xfer_count += count;
 8002ec8:	2328      	movs	r3, #40	; 0x28
 8002eca:	9900      	ldr	r1, [sp, #0]
 8002ecc:	4359      	muls	r1, r3
 8002ece:	1862      	adds	r2, r4, r1
 8002ed0:	0016      	movs	r6, r2
 8002ed2:	3685      	adds	r6, #133	; 0x85
 8002ed4:	36ff      	adds	r6, #255	; 0xff
 8002ed6:	6830      	ldr	r0, [r6, #0]
        ep->xfer_buff += count;
 8002ed8:	3e08      	subs	r6, #8
        ep->xfer_count += count;
 8002eda:	1940      	adds	r0, r0, r5
 8002edc:	60b0      	str	r0, [r6, #8]
        ep->xfer_buff += count;
 8002ede:	6830      	ldr	r0, [r6, #0]
 8002ee0:	1940      	adds	r0, r0, r5
 8002ee2:	6030      	str	r0, [r6, #0]
        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8002ee4:	0010      	movs	r0, r2
 8002ee6:	3081      	adds	r0, #129	; 0x81
 8002ee8:	30ff      	adds	r0, #255	; 0xff
 8002eea:	6800      	ldr	r0, [r0, #0]
 8002eec:	2800      	cmp	r0, #0
 8002eee:	d003      	beq.n	8002ef8 <HAL_PCD_IRQHandler+0x510>
 8002ef0:	32fc      	adds	r2, #252	; 0xfc
 8002ef2:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8002ef4:	4295      	cmp	r5, r2
 8002ef6:	d248      	bcs.n	8002f8a <HAL_PCD_IRQHandler+0x5a2>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8002ef8:	9a00      	ldr	r2, [sp, #0]
 8002efa:	0020      	movs	r0, r4
 8002efc:	4353      	muls	r3, r2
 8002efe:	18e3      	adds	r3, r4, r3
 8002f00:	3369      	adds	r3, #105	; 0x69
 8002f02:	33ff      	adds	r3, #255	; 0xff
 8002f04:	7819      	ldrb	r1, [r3, #0]
 8002f06:	f003 f98c 	bl	8006222 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8002f0a:	2280      	movs	r2, #128	; 0x80
 8002f0c:	9b01      	ldr	r3, [sp, #4]
 8002f0e:	4213      	tst	r3, r2
 8002f10:	d100      	bne.n	8002f14 <HAL_PCD_IRQHandler+0x52c>
 8002f12:	e64e      	b.n	8002bb2 <HAL_PCD_IRQHandler+0x1ca>
 8002f14:	6820      	ldr	r0, [r4, #0]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8002f16:	4b52      	ldr	r3, [pc, #328]	; (8003060 <HAL_PCD_IRQHandler+0x678>)
 8002f18:	19c1      	adds	r1, r0, r7
 8002f1a:	880a      	ldrh	r2, [r1, #0]
 8002f1c:	9d00      	ldr	r5, [sp, #0]
 8002f1e:	401a      	ands	r2, r3
 8002f20:	4b50      	ldr	r3, [pc, #320]	; (8003064 <HAL_PCD_IRQHandler+0x67c>)
 8002f22:	431a      	orrs	r2, r3
 8002f24:	b292      	uxth	r2, r2
 8002f26:	800a      	strh	r2, [r1, #0]
        if (ep->type != EP_TYPE_BULK)
 8002f28:	2228      	movs	r2, #40	; 0x28
 8002f2a:	4355      	muls	r5, r2
 8002f2c:	1965      	adds	r5, r4, r5
 8002f2e:	002a      	movs	r2, r5
 8002f30:	002e      	movs	r6, r5
 8002f32:	322b      	adds	r2, #43	; 0x2b
 8002f34:	7812      	ldrb	r2, [r2, #0]
 8002f36:	3628      	adds	r6, #40	; 0x28
 8002f38:	2a02      	cmp	r2, #2
 8002f3a:	d057      	beq.n	8002fec <HAL_PCD_IRQHandler+0x604>
          ep->xfer_len = 0U;
 8002f3c:	2200      	movs	r2, #0
          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f3e:	2140      	movs	r1, #64	; 0x40
          ep->xfer_len = 0U;
 8002f40:	642a      	str	r2, [r5, #64]	; 0x40
 8002f42:	4694      	mov	ip, r2
          if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8002f44:	9f01      	ldr	r7, [sp, #4]
 8002f46:	9a01      	ldr	r2, [sp, #4]
 8002f48:	400f      	ands	r7, r1
 8002f4a:	3529      	adds	r5, #41	; 0x29
 8002f4c:	420a      	tst	r2, r1
 8002f4e:	d034      	beq.n	8002fba <HAL_PCD_IRQHandler+0x5d2>
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f50:	782d      	ldrb	r5, [r5, #0]
 8002f52:	7831      	ldrb	r1, [r6, #0]
 8002f54:	4565      	cmp	r5, ip
 8002f56:	d11f      	bne.n	8002f98 <HAL_PCD_IRQHandler+0x5b0>
 8002f58:	0002      	movs	r2, r0
 8002f5a:	4d3c      	ldr	r5, [pc, #240]	; (800304c <HAL_PCD_IRQHandler+0x664>)
 8002f5c:	3250      	adds	r2, #80	; 0x50
 8002f5e:	8812      	ldrh	r2, [r2, #0]
 8002f60:	1940      	adds	r0, r0, r5
 8002f62:	1880      	adds	r0, r0, r2
 8002f64:	00c9      	lsls	r1, r1, #3
 8002f66:	1840      	adds	r0, r0, r1
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f68:	8802      	ldrh	r2, [r0, #0]
 8002f6a:	493f      	ldr	r1, [pc, #252]	; (8003068 <HAL_PCD_IRQHandler+0x680>)
 8002f6c:	400a      	ands	r2, r1
 8002f6e:	8002      	strh	r2, [r0, #0]
 8002f70:	8802      	ldrh	r2, [r0, #0]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	b29b      	uxth	r3, r3
 8002f76:	8003      	strh	r3, [r0, #0]
 8002f78:	e01a      	b.n	8002fb0 <HAL_PCD_IRQHandler+0x5c8>
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8002f7a:	4933      	ldr	r1, [pc, #204]	; (8003048 <HAL_PCD_IRQHandler+0x660>)
 8002f7c:	1852      	adds	r2, r2, r1
 8002f7e:	8812      	ldrh	r2, [r2, #0]
 8002f80:	0592      	lsls	r2, r2, #22
 8002f82:	0d95      	lsrs	r5, r2, #22
              if (count != 0U)
 8002f84:	2a00      	cmp	r2, #0
 8002f86:	d09f      	beq.n	8002ec8 <HAL_PCD_IRQHandler+0x4e0>
 8002f88:	e780      	b.n	8002e8c <HAL_PCD_IRQHandler+0x4a4>
        ep = &hpcd->OUT_ep[epindex];
 8002f8a:	3169      	adds	r1, #105	; 0x69
 8002f8c:	31ff      	adds	r1, #255	; 0xff
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002f8e:	6820      	ldr	r0, [r4, #0]
        ep = &hpcd->OUT_ep[epindex];
 8002f90:	1861      	adds	r1, r4, r1
          (void) USB_EPStartXfer(hpcd->Instance, ep);
 8002f92:	f001 ffe7 	bl	8004f64 <USB_EPStartXfer>
 8002f96:	e7b8      	b.n	8002f0a <HAL_PCD_IRQHandler+0x522>
            PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002f98:	2d01      	cmp	r5, #1
 8002f9a:	d109      	bne.n	8002fb0 <HAL_PCD_IRQHandler+0x5c8>
 8002f9c:	0003      	movs	r3, r0
 8002f9e:	4a2b      	ldr	r2, [pc, #172]	; (800304c <HAL_PCD_IRQHandler+0x664>)
 8002fa0:	3350      	adds	r3, #80	; 0x50
 8002fa2:	881b      	ldrh	r3, [r3, #0]
 8002fa4:	1880      	adds	r0, r0, r2
 8002fa6:	18c0      	adds	r0, r0, r3
 8002fa8:	4663      	mov	r3, ip
 8002faa:	00c9      	lsls	r1, r1, #3
 8002fac:	1841      	adds	r1, r0, r1
 8002fae:	800b      	strh	r3, [r1, #0]
            HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fb0:	0020      	movs	r0, r4
 8002fb2:	7831      	ldrb	r1, [r6, #0]
 8002fb4:	f003 f942 	bl	800623c <HAL_PCD_DataInStageCallback>
 8002fb8:	e5fb      	b.n	8002bb2 <HAL_PCD_IRQHandler+0x1ca>
            PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8002fba:	7829      	ldrb	r1, [r5, #0]
 8002fbc:	7832      	ldrb	r2, [r6, #0]
 8002fbe:	2900      	cmp	r1, #0
 8002fc0:	d108      	bne.n	8002fd4 <HAL_PCD_IRQHandler+0x5ec>
 8002fc2:	0001      	movs	r1, r0
 8002fc4:	4d20      	ldr	r5, [pc, #128]	; (8003048 <HAL_PCD_IRQHandler+0x660>)
 8002fc6:	3150      	adds	r1, #80	; 0x50
 8002fc8:	8809      	ldrh	r1, [r1, #0]
 8002fca:	1940      	adds	r0, r0, r5
 8002fcc:	1840      	adds	r0, r0, r1
 8002fce:	00d2      	lsls	r2, r2, #3
 8002fd0:	1880      	adds	r0, r0, r2
 8002fd2:	e7c9      	b.n	8002f68 <HAL_PCD_IRQHandler+0x580>
 8002fd4:	2901      	cmp	r1, #1
 8002fd6:	d1eb      	bne.n	8002fb0 <HAL_PCD_IRQHandler+0x5c8>
 8002fd8:	0003      	movs	r3, r0
 8002fda:	491b      	ldr	r1, [pc, #108]	; (8003048 <HAL_PCD_IRQHandler+0x660>)
 8002fdc:	3350      	adds	r3, #80	; 0x50
 8002fde:	881b      	ldrh	r3, [r3, #0]
 8002fe0:	1840      	adds	r0, r0, r1
 8002fe2:	18c0      	adds	r0, r0, r3
 8002fe4:	00d2      	lsls	r2, r2, #3
 8002fe6:	1882      	adds	r2, r0, r2
 8002fe8:	8017      	strh	r7, [r2, #0]
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8002fea:	e7e1      	b.n	8002fb0 <HAL_PCD_IRQHandler+0x5c8>
        if ((ep->type == EP_TYPE_BULK) && ((wEPVal & USB_EP_KIND) == 0U))
 8002fec:	2780      	movs	r7, #128	; 0x80
 8002fee:	9901      	ldr	r1, [sp, #4]
 8002ff0:	007f      	lsls	r7, r7, #1
 8002ff2:	4039      	ands	r1, r7
 8002ff4:	7833      	ldrb	r3, [r6, #0]
 8002ff6:	468c      	mov	ip, r1
 8002ff8:	9901      	ldr	r1, [sp, #4]
 8002ffa:	9303      	str	r3, [sp, #12]
 8002ffc:	00da      	lsls	r2, r3, #3
 8002ffe:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003000:	4239      	tst	r1, r7
 8003002:	d133      	bne.n	800306c <HAL_PCD_IRQHandler+0x684>
          TxByteNbre = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8003004:	0007      	movs	r7, r0
 8003006:	3750      	adds	r7, #80	; 0x50
 8003008:	883f      	ldrh	r7, [r7, #0]
 800300a:	4910      	ldr	r1, [pc, #64]	; (800304c <HAL_PCD_IRQHandler+0x664>)
 800300c:	19c7      	adds	r7, r0, r7
 800300e:	18ba      	adds	r2, r7, r2
 8003010:	1852      	adds	r2, r2, r1
 8003012:	8812      	ldrh	r2, [r2, #0]
 8003014:	0592      	lsls	r2, r2, #22
          if (ep->xfer_len > TxByteNbre)
 8003016:	0d92      	lsrs	r2, r2, #22
 8003018:	429a      	cmp	r2, r3
 800301a:	d302      	bcc.n	8003022 <HAL_PCD_IRQHandler+0x63a>
 800301c:	4663      	mov	r3, ip
 800301e:	642b      	str	r3, [r5, #64]	; 0x40
 8003020:	e7c6      	b.n	8002fb0 <HAL_PCD_IRQHandler+0x5c8>
        ep = &hpcd->IN_ep[epindex];
 8003022:	2128      	movs	r1, #40	; 0x28
            ep->xfer_len -= TxByteNbre;
 8003024:	1a9b      	subs	r3, r3, r2
 8003026:	642b      	str	r3, [r5, #64]	; 0x40
            ep->xfer_buff += TxByteNbre;
 8003028:	6beb      	ldr	r3, [r5, #60]	; 0x3c
 800302a:	189b      	adds	r3, r3, r2
 800302c:	63eb      	str	r3, [r5, #60]	; 0x3c
            ep->xfer_count += TxByteNbre;
 800302e:	6c6b      	ldr	r3, [r5, #68]	; 0x44
 8003030:	189a      	adds	r2, r3, r2
        ep = &hpcd->IN_ep[epindex];
 8003032:	9b00      	ldr	r3, [sp, #0]
            ep->xfer_count += TxByteNbre;
 8003034:	646a      	str	r2, [r5, #68]	; 0x44
        ep = &hpcd->IN_ep[epindex];
 8003036:	3301      	adds	r3, #1
 8003038:	4359      	muls	r1, r3
 800303a:	1861      	adds	r1, r4, r1
            (void)USB_EPStartXfer(hpcd->Instance, ep);
 800303c:	f001 ff92 	bl	8004f64 <USB_EPStartXfer>
 8003040:	e5b7      	b.n	8002bb2 <HAL_PCD_IRQHandler+0x1ca>
 8003042:	46c0      	nop			; (mov r8, r8)
 8003044:	00000f8f 	.word	0x00000f8f
 8003048:	00000406 	.word	0x00000406
 800304c:	00000402 	.word	0x00000402
 8003050:	ffffbf8f 	.word	0xffffbf8f
 8003054:	00008080 	.word	0x00008080
 8003058:	ffff8f8f 	.word	0xffff8f8f
 800305c:	000080c0 	.word	0x000080c0
 8003060:	ffff8f0f 	.word	0xffff8f0f
 8003064:	ffff8000 	.word	0xffff8000
 8003068:	ffff83ff 	.word	0xffff83ff
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 800306c:	2750      	movs	r7, #80	; 0x50
 800306e:	2640      	movs	r6, #64	; 0x40
 8003070:	46bc      	mov	ip, r7
 8003072:	9901      	ldr	r1, [sp, #4]
 8003074:	9f01      	ldr	r7, [sp, #4]
 8003076:	4031      	ands	r1, r6
 8003078:	4484      	add	ip, r0
 800307a:	4237      	tst	r7, r6
 800307c:	d100      	bne.n	8003080 <HAL_PCD_IRQHandler+0x698>
 800307e:	e0dd      	b.n	800323c <HAL_PCD_IRQHandler+0x854>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8003080:	4661      	mov	r1, ip
 8003082:	4ec8      	ldr	r6, [pc, #800]	; (80033a4 <HAL_PCD_IRQHandler+0x9bc>)
 8003084:	8809      	ldrh	r1, [r1, #0]
 8003086:	1986      	adds	r6, r0, r6
 8003088:	1871      	adds	r1, r6, r1
 800308a:	5a89      	ldrh	r1, [r1, r2]
      ep->xfer_len = 0U;
 800308c:	2700      	movs	r7, #0
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800308e:	0589      	lsls	r1, r1, #22
 8003090:	9602      	str	r6, [sp, #8]
    if (ep->xfer_len > TxByteNbre)
 8003092:	0d89      	lsrs	r1, r1, #22
 8003094:	4299      	cmp	r1, r3
 8003096:	d200      	bcs.n	800309a <HAL_PCD_IRQHandler+0x6b2>
      ep->xfer_len -= TxByteNbre;
 8003098:	1a5f      	subs	r7, r3, r1
 800309a:	2328      	movs	r3, #40	; 0x28
 800309c:	9e00      	ldr	r6, [sp, #0]
 800309e:	4373      	muls	r3, r6
 80030a0:	2680      	movs	r6, #128	; 0x80
 80030a2:	18e3      	adds	r3, r4, r3
 80030a4:	641f      	str	r7, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 80030a6:	9b01      	ldr	r3, [sp, #4]
 80030a8:	01f6      	lsls	r6, r6, #7
 80030aa:	4033      	ands	r3, r6
 80030ac:	001e      	movs	r6, r3
 80030ae:	2f00      	cmp	r7, #0
 80030b0:	d153      	bne.n	800315a <HAL_PCD_IRQHandler+0x772>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030b2:	0029      	movs	r1, r5
 80030b4:	3129      	adds	r1, #41	; 0x29
 80030b6:	780b      	ldrb	r3, [r1, #0]
 80030b8:	9100      	str	r1, [sp, #0]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d136      	bne.n	800312c <HAL_PCD_IRQHandler+0x744>
 80030be:	4663      	mov	r3, ip
 80030c0:	9f02      	ldr	r7, [sp, #8]
 80030c2:	881b      	ldrh	r3, [r3, #0]
 80030c4:	18fb      	adds	r3, r7, r3
 80030c6:	189a      	adds	r2, r3, r2
 80030c8:	8813      	ldrh	r3, [r2, #0]
 80030ca:	4fb7      	ldr	r7, [pc, #732]	; (80033a8 <HAL_PCD_IRQHandler+0x9c0>)
 80030cc:	403b      	ands	r3, r7
 80030ce:	8013      	strh	r3, [r2, #0]
 80030d0:	8813      	ldrh	r3, [r2, #0]
 80030d2:	4fb6      	ldr	r7, [pc, #728]	; (80033ac <HAL_PCD_IRQHandler+0x9c4>)
 80030d4:	433b      	orrs	r3, r7
 80030d6:	b29b      	uxth	r3, r3
 80030d8:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80030da:	002f      	movs	r7, r5
 80030dc:	9b00      	ldr	r3, [sp, #0]
 80030de:	3728      	adds	r7, #40	; 0x28
 80030e0:	781a      	ldrb	r2, [r3, #0]
 80030e2:	783b      	ldrb	r3, [r7, #0]
 80030e4:	2a00      	cmp	r2, #0
 80030e6:	d12b      	bne.n	8003140 <HAL_PCD_IRQHandler+0x758>
 80030e8:	4662      	mov	r2, ip
 80030ea:	49b1      	ldr	r1, [pc, #708]	; (80033b0 <HAL_PCD_IRQHandler+0x9c8>)
 80030ec:	8812      	ldrh	r2, [r2, #0]
 80030ee:	1840      	adds	r0, r0, r1
 80030f0:	1880      	adds	r0, r0, r2
 80030f2:	00db      	lsls	r3, r3, #3
 80030f4:	18c0      	adds	r0, r0, r3
 80030f6:	8803      	ldrh	r3, [r0, #0]
 80030f8:	4aab      	ldr	r2, [pc, #684]	; (80033a8 <HAL_PCD_IRQHandler+0x9c0>)
 80030fa:	4013      	ands	r3, r2
 80030fc:	8003      	strh	r3, [r0, #0]
 80030fe:	8801      	ldrh	r1, [r0, #0]
 8003100:	4baa      	ldr	r3, [pc, #680]	; (80033ac <HAL_PCD_IRQHandler+0x9c4>)
 8003102:	4319      	orrs	r1, r3
 8003104:	b289      	uxth	r1, r1
 8003106:	8001      	strh	r1, [r0, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8003108:	0020      	movs	r0, r4
 800310a:	7839      	ldrb	r1, [r7, #0]
 800310c:	f003 f896 	bl	800623c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8003110:	2e00      	cmp	r6, #0
 8003112:	d100      	bne.n	8003116 <HAL_PCD_IRQHandler+0x72e>
 8003114:	e0dc      	b.n	80032d0 <HAL_PCD_IRQHandler+0x8e8>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003116:	783b      	ldrb	r3, [r7, #0]
 8003118:	6822      	ldr	r2, [r4, #0]
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	18d2      	adds	r2, r2, r3
 800311e:	8813      	ldrh	r3, [r2, #0]
 8003120:	49a4      	ldr	r1, [pc, #656]	; (80033b4 <HAL_PCD_IRQHandler+0x9cc>)
 8003122:	400b      	ands	r3, r1
 8003124:	49a4      	ldr	r1, [pc, #656]	; (80033b8 <HAL_PCD_IRQHandler+0x9d0>)
 8003126:	430b      	orrs	r3, r1
 8003128:	8013      	strh	r3, [r2, #0]
 800312a:	e0d1      	b.n	80032d0 <HAL_PCD_IRQHandler+0x8e8>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800312c:	2b01      	cmp	r3, #1
 800312e:	d1d4      	bne.n	80030da <HAL_PCD_IRQHandler+0x6f2>
 8003130:	0003      	movs	r3, r0
 8003132:	3350      	adds	r3, #80	; 0x50
 8003134:	881b      	ldrh	r3, [r3, #0]
 8003136:	9902      	ldr	r1, [sp, #8]
 8003138:	18cb      	adds	r3, r1, r3
 800313a:	189b      	adds	r3, r3, r2
 800313c:	801f      	strh	r7, [r3, #0]
 800313e:	e7cc      	b.n	80030da <HAL_PCD_IRQHandler+0x6f2>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003140:	2a01      	cmp	r2, #1
 8003142:	d1e1      	bne.n	8003108 <HAL_PCD_IRQHandler+0x720>
 8003144:	0002      	movs	r2, r0
 8003146:	499a      	ldr	r1, [pc, #616]	; (80033b0 <HAL_PCD_IRQHandler+0x9c8>)
 8003148:	3250      	adds	r2, #80	; 0x50
 800314a:	8812      	ldrh	r2, [r2, #0]
 800314c:	1840      	adds	r0, r0, r1
 800314e:	1880      	adds	r0, r0, r2
 8003150:	2200      	movs	r2, #0
 8003152:	00db      	lsls	r3, r3, #3
 8003154:	18c3      	adds	r3, r0, r3
 8003156:	801a      	strh	r2, [r3, #0]
 8003158:	e7d6      	b.n	8003108 <HAL_PCD_IRQHandler+0x720>
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 800315a:	2b00      	cmp	r3, #0
 800315c:	d008      	beq.n	8003170 <HAL_PCD_IRQHandler+0x788>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 800315e:	9b03      	ldr	r3, [sp, #12]
 8003160:	009a      	lsls	r2, r3, #2
 8003162:	1882      	adds	r2, r0, r2
 8003164:	8816      	ldrh	r6, [r2, #0]
 8003166:	4b93      	ldr	r3, [pc, #588]	; (80033b4 <HAL_PCD_IRQHandler+0x9cc>)
 8003168:	4033      	ands	r3, r6
 800316a:	4e93      	ldr	r6, [pc, #588]	; (80033b8 <HAL_PCD_IRQHandler+0x9d0>)
 800316c:	4333      	orrs	r3, r6
 800316e:	8013      	strh	r3, [r2, #0]
      if (ep->xfer_fill_db == 1U)
 8003170:	2328      	movs	r3, #40	; 0x28
 8003172:	9a00      	ldr	r2, [sp, #0]
 8003174:	4353      	muls	r3, r2
 8003176:	18e3      	adds	r3, r4, r3
 8003178:	001f      	movs	r7, r3
 800317a:	374c      	adds	r7, #76	; 0x4c
 800317c:	783a      	ldrb	r2, [r7, #0]
 800317e:	2a01      	cmp	r2, #1
 8003180:	d000      	beq.n	8003184 <HAL_PCD_IRQHandler+0x79c>
 8003182:	e0a5      	b.n	80032d0 <HAL_PCD_IRQHandler+0x8e8>
        ep->xfer_buff += TxByteNbre;
 8003184:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 8003186:	6b9e      	ldr	r6, [r3, #56]	; 0x38
        ep->xfer_buff += TxByteNbre;
 8003188:	4694      	mov	ip, r2
 800318a:	448c      	add	ip, r1
 800318c:	4662      	mov	r2, ip
 800318e:	63da      	str	r2, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8003190:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003192:	1852      	adds	r2, r2, r1
 8003194:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 8003196:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003198:	42b2      	cmp	r2, r6
 800319a:	d325      	bcc.n	80031e8 <HAL_PCD_IRQHandler+0x800>
          ep->xfer_len_db -= len;
 800319c:	1b92      	subs	r2, r2, r6
 800319e:	649a      	str	r2, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031a0:	002b      	movs	r3, r5
 80031a2:	002f      	movs	r7, r5
 80031a4:	3329      	adds	r3, #41	; 0x29
 80031a6:	781a      	ldrb	r2, [r3, #0]
 80031a8:	3728      	adds	r7, #40	; 0x28
 80031aa:	b2b3      	uxth	r3, r6
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d139      	bne.n	8003224 <HAL_PCD_IRQHandler+0x83c>
 80031b0:	0002      	movs	r2, r0
 80031b2:	3250      	adds	r2, #80	; 0x50
 80031b4:	8811      	ldrh	r1, [r2, #0]
 80031b6:	783a      	ldrb	r2, [r7, #0]
 80031b8:	9f02      	ldr	r7, [sp, #8]
 80031ba:	00d2      	lsls	r2, r2, #3
 80031bc:	1879      	adds	r1, r7, r1
 80031be:	1852      	adds	r2, r2, r1
 80031c0:	2e00      	cmp	r6, #0
 80031c2:	d11b      	bne.n	80031fc <HAL_PCD_IRQHandler+0x814>
 80031c4:	8811      	ldrh	r1, [r2, #0]
 80031c6:	4e78      	ldr	r6, [pc, #480]	; (80033a8 <HAL_PCD_IRQHandler+0x9c0>)
 80031c8:	4031      	ands	r1, r6
 80031ca:	8011      	strh	r1, [r2, #0]
 80031cc:	8817      	ldrh	r7, [r2, #0]
 80031ce:	4977      	ldr	r1, [pc, #476]	; (80033ac <HAL_PCD_IRQHandler+0x9c4>)
 80031d0:	430f      	orrs	r7, r1
 80031d2:	b2bf      	uxth	r7, r7
 80031d4:	8017      	strh	r7, [r2, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80031d6:	2128      	movs	r1, #40	; 0x28
 80031d8:	9a00      	ldr	r2, [sp, #0]
 80031da:	4351      	muls	r1, r2
 80031dc:	1861      	adds	r1, r4, r1
 80031de:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 80031e0:	4661      	mov	r1, ip
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80031e2:	f001 feaa 	bl	8004f3a <USB_WritePMA>
 80031e6:	e073      	b.n	80032d0 <HAL_PCD_IRQHandler+0x8e8>
        else if (ep->xfer_len_db == 0U)
 80031e8:	2a00      	cmp	r2, #0
 80031ea:	d102      	bne.n	80031f2 <HAL_PCD_IRQHandler+0x80a>
    if (ep->xfer_len > TxByteNbre)
 80031ec:	000e      	movs	r6, r1
          ep->xfer_fill_db = 0U;
 80031ee:	703a      	strb	r2, [r7, #0]
 80031f0:	e7d6      	b.n	80031a0 <HAL_PCD_IRQHandler+0x7b8>
          ep->xfer_fill_db = 0U;
 80031f2:	2100      	movs	r1, #0
          ep->xfer_len_db = 0U;
 80031f4:	0016      	movs	r6, r2
          ep->xfer_fill_db = 0U;
 80031f6:	7039      	strb	r1, [r7, #0]
          ep->xfer_len_db = 0U;
 80031f8:	6499      	str	r1, [r3, #72]	; 0x48
 80031fa:	e7d1      	b.n	80031a0 <HAL_PCD_IRQHandler+0x7b8>
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80031fc:	2e3e      	cmp	r6, #62	; 0x3e
 80031fe:	d807      	bhi.n	8003210 <HAL_PCD_IRQHandler+0x828>
 8003200:	2701      	movs	r7, #1
 8003202:	0871      	lsrs	r1, r6, #1
 8003204:	403e      	ands	r6, r7
 8003206:	1989      	adds	r1, r1, r6
 8003208:	0289      	lsls	r1, r1, #10
 800320a:	b289      	uxth	r1, r1
 800320c:	8011      	strh	r1, [r2, #0]
 800320e:	e7e2      	b.n	80031d6 <HAL_PCD_IRQHandler+0x7ee>
 8003210:	271f      	movs	r7, #31
 8003212:	0971      	lsrs	r1, r6, #5
 8003214:	403e      	ands	r6, r7
 8003216:	4277      	negs	r7, r6
 8003218:	4177      	adcs	r7, r6
 800321a:	4e64      	ldr	r6, [pc, #400]	; (80033ac <HAL_PCD_IRQHandler+0x9c4>)
 800321c:	1bc9      	subs	r1, r1, r7
 800321e:	0289      	lsls	r1, r1, #10
 8003220:	4331      	orrs	r1, r6
 8003222:	e7f2      	b.n	800320a <HAL_PCD_IRQHandler+0x822>
 8003224:	2a01      	cmp	r2, #1
 8003226:	d1d6      	bne.n	80031d6 <HAL_PCD_IRQHandler+0x7ee>
 8003228:	0002      	movs	r2, r0
 800322a:	3250      	adds	r2, #80	; 0x50
 800322c:	8812      	ldrh	r2, [r2, #0]
 800322e:	7839      	ldrb	r1, [r7, #0]
 8003230:	9e02      	ldr	r6, [sp, #8]
 8003232:	00c9      	lsls	r1, r1, #3
 8003234:	18b2      	adds	r2, r6, r2
 8003236:	188a      	adds	r2, r1, r2
 8003238:	8013      	strh	r3, [r2, #0]
 800323a:	e7cc      	b.n	80031d6 <HAL_PCD_IRQHandler+0x7ee>
    TxByteNbre = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 800323c:	4666      	mov	r6, ip
 800323e:	4f5c      	ldr	r7, [pc, #368]	; (80033b0 <HAL_PCD_IRQHandler+0x9c8>)
 8003240:	8836      	ldrh	r6, [r6, #0]
 8003242:	19c7      	adds	r7, r0, r7
 8003244:	19be      	adds	r6, r7, r6
 8003246:	9702      	str	r7, [sp, #8]
 8003248:	5ab7      	ldrh	r7, [r6, r2]
 800324a:	05bf      	lsls	r7, r7, #22
    if (ep->xfer_len >= TxByteNbre)
 800324c:	0dbf      	lsrs	r7, r7, #22
 800324e:	429f      	cmp	r7, r3
 8003250:	d800      	bhi.n	8003254 <HAL_PCD_IRQHandler+0x86c>
      ep->xfer_len -= TxByteNbre;
 8003252:	1bd9      	subs	r1, r3, r7
 8003254:	2328      	movs	r3, #40	; 0x28
 8003256:	9e00      	ldr	r6, [sp, #0]
 8003258:	4373      	muls	r3, r6
 800325a:	2680      	movs	r6, #128	; 0x80
 800325c:	18e3      	adds	r3, r4, r3
 800325e:	6419      	str	r1, [r3, #64]	; 0x40
    if (ep->xfer_len == 0U)
 8003260:	9b01      	ldr	r3, [sp, #4]
 8003262:	01f6      	lsls	r6, r6, #7
 8003264:	4033      	ands	r3, r6
 8003266:	001e      	movs	r6, r3
 8003268:	2900      	cmp	r1, #0
 800326a:	d151      	bne.n	8003310 <HAL_PCD_IRQHandler+0x928>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 800326c:	002b      	movs	r3, r5
 800326e:	3329      	adds	r3, #41	; 0x29
 8003270:	781b      	ldrb	r3, [r3, #0]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d136      	bne.n	80032e4 <HAL_PCD_IRQHandler+0x8fc>
 8003276:	4663      	mov	r3, ip
 8003278:	8819      	ldrh	r1, [r3, #0]
 800327a:	4b4a      	ldr	r3, [pc, #296]	; (80033a4 <HAL_PCD_IRQHandler+0x9bc>)
 800327c:	18c3      	adds	r3, r0, r3
 800327e:	185b      	adds	r3, r3, r1
 8003280:	189a      	adds	r2, r3, r2
 8003282:	8813      	ldrh	r3, [r2, #0]
 8003284:	4948      	ldr	r1, [pc, #288]	; (80033a8 <HAL_PCD_IRQHandler+0x9c0>)
 8003286:	400b      	ands	r3, r1
 8003288:	8013      	strh	r3, [r2, #0]
 800328a:	8813      	ldrh	r3, [r2, #0]
 800328c:	4947      	ldr	r1, [pc, #284]	; (80033ac <HAL_PCD_IRQHandler+0x9c4>)
 800328e:	430b      	orrs	r3, r1
 8003290:	b29b      	uxth	r3, r3
 8003292:	8013      	strh	r3, [r2, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8003294:	002b      	movs	r3, r5
 8003296:	002f      	movs	r7, r5
 8003298:	3329      	adds	r3, #41	; 0x29
 800329a:	781a      	ldrb	r2, [r3, #0]
 800329c:	3728      	adds	r7, #40	; 0x28
 800329e:	783b      	ldrb	r3, [r7, #0]
 80032a0:	2a00      	cmp	r2, #0
 80032a2:	d12a      	bne.n	80032fa <HAL_PCD_IRQHandler+0x912>
 80032a4:	4662      	mov	r2, ip
 80032a6:	9902      	ldr	r1, [sp, #8]
 80032a8:	8812      	ldrh	r2, [r2, #0]
 80032aa:	00db      	lsls	r3, r3, #3
 80032ac:	188a      	adds	r2, r1, r2
 80032ae:	189b      	adds	r3, r3, r2
 80032b0:	881a      	ldrh	r2, [r3, #0]
 80032b2:	493d      	ldr	r1, [pc, #244]	; (80033a8 <HAL_PCD_IRQHandler+0x9c0>)
 80032b4:	400a      	ands	r2, r1
 80032b6:	801a      	strh	r2, [r3, #0]
 80032b8:	8819      	ldrh	r1, [r3, #0]
 80032ba:	4a3c      	ldr	r2, [pc, #240]	; (80033ac <HAL_PCD_IRQHandler+0x9c4>)
 80032bc:	4311      	orrs	r1, r2
 80032be:	b289      	uxth	r1, r1
 80032c0:	8019      	strh	r1, [r3, #0]
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80032c2:	0020      	movs	r0, r4
 80032c4:	7839      	ldrb	r1, [r7, #0]
 80032c6:	f002 ffb9 	bl	800623c <HAL_PCD_DataInStageCallback>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80032ca:	2e00      	cmp	r6, #0
 80032cc:	d100      	bne.n	80032d0 <HAL_PCD_IRQHandler+0x8e8>
 80032ce:	e722      	b.n	8003116 <HAL_PCD_IRQHandler+0x72e>
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80032d0:	3528      	adds	r5, #40	; 0x28
 80032d2:	782b      	ldrb	r3, [r5, #0]
 80032d4:	6822      	ldr	r2, [r4, #0]
 80032d6:	009b      	lsls	r3, r3, #2
 80032d8:	18d1      	adds	r1, r2, r3
 80032da:	880b      	ldrh	r3, [r1, #0]
 80032dc:	4a37      	ldr	r2, [pc, #220]	; (80033bc <HAL_PCD_IRQHandler+0x9d4>)
 80032de:	401a      	ands	r2, r3
 80032e0:	2330      	movs	r3, #48	; 0x30
 80032e2:	e4e7      	b.n	8002cb4 <HAL_PCD_IRQHandler+0x2cc>
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d1d5      	bne.n	8003294 <HAL_PCD_IRQHandler+0x8ac>
 80032e8:	0003      	movs	r3, r0
 80032ea:	3350      	adds	r3, #80	; 0x50
 80032ec:	881f      	ldrh	r7, [r3, #0]
 80032ee:	4b2d      	ldr	r3, [pc, #180]	; (80033a4 <HAL_PCD_IRQHandler+0x9bc>)
 80032f0:	18c3      	adds	r3, r0, r3
 80032f2:	19db      	adds	r3, r3, r7
 80032f4:	189b      	adds	r3, r3, r2
 80032f6:	8019      	strh	r1, [r3, #0]
 80032f8:	e7cc      	b.n	8003294 <HAL_PCD_IRQHandler+0x8ac>
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80032fa:	2a01      	cmp	r2, #1
 80032fc:	d1e1      	bne.n	80032c2 <HAL_PCD_IRQHandler+0x8da>
 80032fe:	3050      	adds	r0, #80	; 0x50
 8003300:	8802      	ldrh	r2, [r0, #0]
 8003302:	9902      	ldr	r1, [sp, #8]
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	188a      	adds	r2, r1, r2
 8003308:	189b      	adds	r3, r3, r2
 800330a:	2200      	movs	r2, #0
 800330c:	801a      	strh	r2, [r3, #0]
 800330e:	e7d8      	b.n	80032c2 <HAL_PCD_IRQHandler+0x8da>
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 8003310:	2b00      	cmp	r3, #0
 8003312:	d108      	bne.n	8003326 <HAL_PCD_IRQHandler+0x93e>
        PCD_FreeUserBuffer(hpcd->Instance, ep->num, 1U);
 8003314:	9b03      	ldr	r3, [sp, #12]
 8003316:	4a27      	ldr	r2, [pc, #156]	; (80033b4 <HAL_PCD_IRQHandler+0x9cc>)
 8003318:	009b      	lsls	r3, r3, #2
 800331a:	18c3      	adds	r3, r0, r3
 800331c:	8819      	ldrh	r1, [r3, #0]
 800331e:	400a      	ands	r2, r1
 8003320:	4925      	ldr	r1, [pc, #148]	; (80033b8 <HAL_PCD_IRQHandler+0x9d0>)
 8003322:	430a      	orrs	r2, r1
 8003324:	801a      	strh	r2, [r3, #0]
      if (ep->xfer_fill_db == 1U)
 8003326:	2328      	movs	r3, #40	; 0x28
 8003328:	9a00      	ldr	r2, [sp, #0]
 800332a:	4353      	muls	r3, r2
 800332c:	224c      	movs	r2, #76	; 0x4c
 800332e:	4694      	mov	ip, r2
 8003330:	18e3      	adds	r3, r4, r3
 8003332:	449c      	add	ip, r3
 8003334:	4662      	mov	r2, ip
 8003336:	7812      	ldrb	r2, [r2, #0]
 8003338:	2a01      	cmp	r2, #1
 800333a:	d1c9      	bne.n	80032d0 <HAL_PCD_IRQHandler+0x8e8>
        ep->xfer_buff += TxByteNbre;
 800333c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
        if (ep->xfer_len_db >= ep->maxpacket)
 800333e:	6c9e      	ldr	r6, [r3, #72]	; 0x48
        ep->xfer_buff += TxByteNbre;
 8003340:	19d1      	adds	r1, r2, r7
        ep->xfer_count += TxByteNbre;
 8003342:	6c5a      	ldr	r2, [r3, #68]	; 0x44
        ep->xfer_buff += TxByteNbre;
 8003344:	63d9      	str	r1, [r3, #60]	; 0x3c
        ep->xfer_count += TxByteNbre;
 8003346:	19d2      	adds	r2, r2, r7
 8003348:	645a      	str	r2, [r3, #68]	; 0x44
        if (ep->xfer_len_db >= ep->maxpacket)
 800334a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800334c:	4296      	cmp	r6, r2
 800334e:	d31c      	bcc.n	800338a <HAL_PCD_IRQHandler+0x9a2>
          ep->xfer_len_db -= len;
 8003350:	1ab6      	subs	r6, r6, r2
 8003352:	649e      	str	r6, [r3, #72]	; 0x48
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8003354:	002b      	movs	r3, r5
 8003356:	002e      	movs	r6, r5
 8003358:	3329      	adds	r3, #41	; 0x29
 800335a:	781f      	ldrb	r7, [r3, #0]
 800335c:	b293      	uxth	r3, r2
 800335e:	9301      	str	r3, [sp, #4]
 8003360:	3628      	adds	r6, #40	; 0x28
 8003362:	2f00      	cmp	r7, #0
 8003364:	d144      	bne.n	80033f0 <HAL_PCD_IRQHandler+0xa08>
 8003366:	0007      	movs	r7, r0
 8003368:	3750      	adds	r7, #80	; 0x50
 800336a:	883f      	ldrh	r7, [r7, #0]
 800336c:	7836      	ldrb	r6, [r6, #0]
 800336e:	9b02      	ldr	r3, [sp, #8]
 8003370:	00f6      	lsls	r6, r6, #3
 8003372:	19df      	adds	r7, r3, r7
 8003374:	19f6      	adds	r6, r6, r7
 8003376:	2a00      	cmp	r2, #0
 8003378:	d122      	bne.n	80033c0 <HAL_PCD_IRQHandler+0x9d8>
 800337a:	8832      	ldrh	r2, [r6, #0]
 800337c:	4f0a      	ldr	r7, [pc, #40]	; (80033a8 <HAL_PCD_IRQHandler+0x9c0>)
 800337e:	403a      	ands	r2, r7
 8003380:	8032      	strh	r2, [r6, #0]
 8003382:	8837      	ldrh	r7, [r6, #0]
 8003384:	4b09      	ldr	r3, [pc, #36]	; (80033ac <HAL_PCD_IRQHandler+0x9c4>)
 8003386:	431f      	orrs	r7, r3
 8003388:	e021      	b.n	80033ce <HAL_PCD_IRQHandler+0x9e6>
        else if (ep->xfer_len_db == 0U)
 800338a:	2e00      	cmp	r6, #0
 800338c:	d103      	bne.n	8003396 <HAL_PCD_IRQHandler+0x9ae>
          ep->xfer_fill_db = 0U;
 800338e:	4663      	mov	r3, ip
    if (ep->xfer_len >= TxByteNbre)
 8003390:	003a      	movs	r2, r7
          ep->xfer_fill_db = 0U;
 8003392:	701e      	strb	r6, [r3, #0]
 8003394:	e7de      	b.n	8003354 <HAL_PCD_IRQHandler+0x96c>
          ep->xfer_len_db = 0U;
 8003396:	2200      	movs	r2, #0
 8003398:	649a      	str	r2, [r3, #72]	; 0x48
          ep->xfer_fill_db = 0;
 800339a:	4663      	mov	r3, ip
 800339c:	701a      	strb	r2, [r3, #0]
 800339e:	0032      	movs	r2, r6
 80033a0:	e7d8      	b.n	8003354 <HAL_PCD_IRQHandler+0x96c>
 80033a2:	46c0      	nop			; (mov r8, r8)
 80033a4:	00000402 	.word	0x00000402
 80033a8:	ffff83ff 	.word	0xffff83ff
 80033ac:	ffff8000 	.word	0xffff8000
 80033b0:	00000406 	.word	0x00000406
 80033b4:	ffff8f8f 	.word	0xffff8f8f
 80033b8:	0000c080 	.word	0x0000c080
 80033bc:	ffff8fbf 	.word	0xffff8fbf
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033c0:	2a3e      	cmp	r2, #62	; 0x3e
 80033c2:	d80d      	bhi.n	80033e0 <HAL_PCD_IRQHandler+0x9f8>
 80033c4:	2301      	movs	r3, #1
 80033c6:	0857      	lsrs	r7, r2, #1
 80033c8:	401a      	ands	r2, r3
 80033ca:	18bf      	adds	r7, r7, r2
 80033cc:	02bf      	lsls	r7, r7, #10
 80033ce:	b2bf      	uxth	r7, r7
 80033d0:	8037      	strh	r7, [r6, #0]
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80033d2:	2228      	movs	r2, #40	; 0x28
 80033d4:	9b00      	ldr	r3, [sp, #0]
 80033d6:	435a      	muls	r2, r3
 80033d8:	18a2      	adds	r2, r4, r2
 80033da:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 80033dc:	9b01      	ldr	r3, [sp, #4]
 80033de:	e700      	b.n	80031e2 <HAL_PCD_IRQHandler+0x7fa>
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 80033e0:	231f      	movs	r3, #31
 80033e2:	0957      	lsrs	r7, r2, #5
 80033e4:	401a      	ands	r2, r3
 80033e6:	4253      	negs	r3, r2
 80033e8:	4153      	adcs	r3, r2
 80033ea:	1aff      	subs	r7, r7, r3
 80033ec:	02bf      	lsls	r7, r7, #10
 80033ee:	e7c9      	b.n	8003384 <HAL_PCD_IRQHandler+0x99c>
 80033f0:	2f01      	cmp	r7, #1
 80033f2:	d1ee      	bne.n	80033d2 <HAL_PCD_IRQHandler+0x9ea>
 80033f4:	0002      	movs	r2, r0
 80033f6:	3250      	adds	r2, #80	; 0x50
 80033f8:	8812      	ldrh	r2, [r2, #0]
 80033fa:	7836      	ldrb	r6, [r6, #0]
 80033fc:	9b02      	ldr	r3, [sp, #8]
 80033fe:	00f6      	lsls	r6, r6, #3
 8003400:	189a      	adds	r2, r3, r2
 8003402:	9b01      	ldr	r3, [sp, #4]
 8003404:	18b2      	adds	r2, r6, r2
 8003406:	8013      	strh	r3, [r2, #0]
 8003408:	e7e3      	b.n	80033d2 <HAL_PCD_IRQHandler+0x9ea>
      HAL_PCD_SuspendCallback(hpcd);
 800340a:	0020      	movs	r0, r4
 800340c:	f002 ff3a 	bl	8006284 <HAL_PCD_SuspendCallback>
 8003410:	f7ff fb7c 	bl	8002b0c <HAL_PCD_IRQHandler+0x124>

08003414 <HAL_PCD_EP_Open>:
{
 8003414:	b570      	push	{r4, r5, r6, lr}
 8003416:	0005      	movs	r5, r0
 8003418:	2007      	movs	r0, #7
 800341a:	4008      	ands	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800341c:	b249      	sxtb	r1, r1
 800341e:	2428      	movs	r4, #40	; 0x28
 8003420:	2900      	cmp	r1, #0
 8003422:	da1d      	bge.n	8003460 <HAL_PCD_EP_Open+0x4c>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003424:	1c41      	adds	r1, r0, #1
 8003426:	4361      	muls	r1, r4
    ep->is_in = 1U;
 8003428:	3c27      	subs	r4, #39	; 0x27
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800342a:	1869      	adds	r1, r5, r1
    ep->is_in = 1U;
 800342c:	704c      	strb	r4, [r1, #1]
  ep->maxpacket = ep_mps;
 800342e:	610a      	str	r2, [r1, #16]
  if (ep->is_in != 0U)
 8003430:	784a      	ldrb	r2, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003432:	7008      	strb	r0, [r1, #0]
  ep->type = ep_type;
 8003434:	70cb      	strb	r3, [r1, #3]
  if (ep->is_in != 0U)
 8003436:	2a00      	cmp	r2, #0
 8003438:	d000      	beq.n	800343c <HAL_PCD_EP_Open+0x28>
    ep->tx_fifo_num = ep->num;
 800343a:	81c8      	strh	r0, [r1, #14]
  if (ep_type == EP_TYPE_BULK)
 800343c:	2b02      	cmp	r3, #2
 800343e:	d101      	bne.n	8003444 <HAL_PCD_EP_Open+0x30>
    ep->data_pid_start = 0U;
 8003440:	2300      	movs	r3, #0
 8003442:	710b      	strb	r3, [r1, #4]
  __HAL_LOCK(hpcd);
 8003444:	24aa      	movs	r4, #170	; 0xaa
 8003446:	00a4      	lsls	r4, r4, #2
 8003448:	5d2b      	ldrb	r3, [r5, r4]
 800344a:	2002      	movs	r0, #2
 800344c:	2b01      	cmp	r3, #1
 800344e:	d006      	beq.n	800345e <HAL_PCD_EP_Open+0x4a>
 8003450:	2301      	movs	r3, #1
 8003452:	552b      	strb	r3, [r5, r4]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8003454:	6828      	ldr	r0, [r5, #0]
 8003456:	f001 fb29 	bl	8004aac <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800345a:	2000      	movs	r0, #0
 800345c:	5528      	strb	r0, [r5, r4]
}
 800345e:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003460:	4344      	muls	r4, r0
 8003462:	0021      	movs	r1, r4
    ep->is_in = 0U;
 8003464:	2600      	movs	r6, #0
 8003466:	192c      	adds	r4, r5, r4
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003468:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 800346a:	346a      	adds	r4, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800346c:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 800346e:	34ff      	adds	r4, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003470:	1869      	adds	r1, r5, r1
    ep->is_in = 0U;
 8003472:	7026      	strb	r6, [r4, #0]
 8003474:	e7db      	b.n	800342e <HAL_PCD_EP_Open+0x1a>

08003476 <HAL_PCD_EP_Close>:
{
 8003476:	b570      	push	{r4, r5, r6, lr}
 8003478:	0004      	movs	r4, r0
 800347a:	2007      	movs	r0, #7
 800347c:	4008      	ands	r0, r1
  if ((ep_addr & 0x80U) == 0x80U)
 800347e:	b249      	sxtb	r1, r1
 8003480:	2328      	movs	r3, #40	; 0x28
 8003482:	2900      	cmp	r1, #0
 8003484:	da13      	bge.n	80034ae <HAL_PCD_EP_Close+0x38>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003486:	1c41      	adds	r1, r0, #1
 8003488:	4359      	muls	r1, r3
    ep->is_in = 1U;
 800348a:	3b27      	subs	r3, #39	; 0x27
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800348c:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 800348e:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 8003490:	25aa      	movs	r5, #170	; 0xaa
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003492:	7008      	strb	r0, [r1, #0]
  __HAL_LOCK(hpcd);
 8003494:	00ad      	lsls	r5, r5, #2
 8003496:	5d63      	ldrb	r3, [r4, r5]
 8003498:	2002      	movs	r0, #2
 800349a:	2b01      	cmp	r3, #1
 800349c:	d006      	beq.n	80034ac <HAL_PCD_EP_Close+0x36>
 800349e:	2301      	movs	r3, #1
 80034a0:	5563      	strb	r3, [r4, r5]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034a2:	6820      	ldr	r0, [r4, #0]
 80034a4:	f001 fc40 	bl	8004d28 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034a8:	2000      	movs	r0, #0
 80034aa:	5560      	strb	r0, [r4, r5]
}
 80034ac:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ae:	4343      	muls	r3, r0
 80034b0:	0019      	movs	r1, r3
    ep->is_in = 0U;
 80034b2:	18e2      	adds	r2, r4, r3
 80034b4:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034b6:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 80034b8:	326a      	adds	r2, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034ba:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 80034bc:	32ff      	adds	r2, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034be:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80034c0:	7013      	strb	r3, [r2, #0]
 80034c2:	e7e5      	b.n	8003490 <HAL_PCD_EP_Close+0x1a>

080034c4 <HAL_PCD_EP_Receive>:
{
 80034c4:	b570      	push	{r4, r5, r6, lr}
 80034c6:	2407      	movs	r4, #7
 80034c8:	4021      	ands	r1, r4
  ep->xfer_buff = pBuf;
 80034ca:	3421      	adds	r4, #33	; 0x21
 80034cc:	434c      	muls	r4, r1
 80034ce:	1905      	adds	r5, r0, r4
 80034d0:	002e      	movs	r6, r5
 80034d2:	367d      	adds	r6, #125	; 0x7d
 80034d4:	36ff      	adds	r6, #255	; 0xff
 80034d6:	6032      	str	r2, [r6, #0]
  ep->xfer_len = len;
 80034d8:	002a      	movs	r2, r5
 80034da:	3281      	adds	r2, #129	; 0x81
 80034dc:	32ff      	adds	r2, #255	; 0xff
 80034de:	6013      	str	r3, [r2, #0]
  ep->xfer_count = 0U;
 80034e0:	002b      	movs	r3, r5
 80034e2:	2600      	movs	r6, #0
 80034e4:	3385      	adds	r3, #133	; 0x85
 80034e6:	33ff      	adds	r3, #255	; 0xff
  ep->num = ep_addr & EP_ADDR_MSK;
 80034e8:	3569      	adds	r5, #105	; 0x69
  ep->xfer_count = 0U;
 80034ea:	601e      	str	r6, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034ec:	35ff      	adds	r5, #255	; 0xff
  ep->is_in = 0U;
 80034ee:	3b1b      	subs	r3, #27
 80034f0:	701e      	strb	r6, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034f2:	7029      	strb	r1, [r5, #0]
  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034f4:	0021      	movs	r1, r4
 80034f6:	3169      	adds	r1, #105	; 0x69
 80034f8:	31ff      	adds	r1, #255	; 0xff
 80034fa:	1841      	adds	r1, r0, r1
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 80034fc:	6800      	ldr	r0, [r0, #0]
 80034fe:	f001 fd31 	bl	8004f64 <USB_EPStartXfer>
}
 8003502:	0030      	movs	r0, r6
 8003504:	bd70      	pop	{r4, r5, r6, pc}

08003506 <HAL_PCD_EP_GetRxCount>:
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003506:	2307      	movs	r3, #7
 8003508:	400b      	ands	r3, r1
 800350a:	2128      	movs	r1, #40	; 0x28
 800350c:	4359      	muls	r1, r3
 800350e:	1840      	adds	r0, r0, r1
 8003510:	3085      	adds	r0, #133	; 0x85
 8003512:	30ff      	adds	r0, #255	; 0xff
 8003514:	6800      	ldr	r0, [r0, #0]
}
 8003516:	4770      	bx	lr

08003518 <HAL_PCD_EP_Transmit>:
{
 8003518:	b570      	push	{r4, r5, r6, lr}
  ep->xfer_buff = pBuf;
 800351a:	2628      	movs	r6, #40	; 0x28
 800351c:	2407      	movs	r4, #7
 800351e:	4021      	ands	r1, r4
 8003520:	0034      	movs	r4, r6
 8003522:	434c      	muls	r4, r1
 8003524:	1904      	adds	r4, r0, r4
  ep->xfer_fill_db = 1U;
 8003526:	0025      	movs	r5, r4
  ep->xfer_buff = pBuf;
 8003528:	63e2      	str	r2, [r4, #60]	; 0x3c
  ep->xfer_fill_db = 1U;
 800352a:	2201      	movs	r2, #1
 800352c:	354c      	adds	r5, #76	; 0x4c
  ep->xfer_len = len;
 800352e:	6423      	str	r3, [r4, #64]	; 0x40
  ep->xfer_fill_db = 1U;
 8003530:	702a      	strb	r2, [r5, #0]
  ep->xfer_count = 0U;
 8003532:	2500      	movs	r5, #0
  ep->xfer_len_db = len;
 8003534:	64a3      	str	r3, [r4, #72]	; 0x48
  ep->is_in = 1U;
 8003536:	0023      	movs	r3, r4
  ep->xfer_count = 0U;
 8003538:	6465      	str	r5, [r4, #68]	; 0x44
  ep->is_in = 1U;
 800353a:	3329      	adds	r3, #41	; 0x29
  ep->num = ep_addr & EP_ADDR_MSK;
 800353c:	19a4      	adds	r4, r4, r6
  ep->is_in = 1U;
 800353e:	701a      	strb	r2, [r3, #0]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003540:	7021      	strb	r1, [r4, #0]
  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003542:	1889      	adds	r1, r1, r2
 8003544:	4371      	muls	r1, r6
 8003546:	1841      	adds	r1, r0, r1
    (void)USB_EPStartXfer(hpcd->Instance, ep);
 8003548:	6800      	ldr	r0, [r0, #0]
 800354a:	f001 fd0b 	bl	8004f64 <USB_EPStartXfer>
}
 800354e:	0028      	movs	r0, r5
 8003550:	bd70      	pop	{r4, r5, r6, pc}

08003552 <HAL_PCD_EP_SetStall>:
{
 8003552:	b570      	push	{r4, r5, r6, lr}
 8003554:	0004      	movs	r4, r0
 8003556:	2507      	movs	r5, #7
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003558:	6863      	ldr	r3, [r4, #4]
    return HAL_ERROR;
 800355a:	2001      	movs	r0, #1
 800355c:	400d      	ands	r5, r1
  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800355e:	429d      	cmp	r5, r3
 8003560:	d816      	bhi.n	8003590 <HAL_PCD_EP_SetStall+0x3e>
  if ((0x80U & ep_addr) == 0x80U)
 8003562:	b24a      	sxtb	r2, r1
 8003564:	2328      	movs	r3, #40	; 0x28
 8003566:	2a00      	cmp	r2, #0
 8003568:	da13      	bge.n	8003592 <HAL_PCD_EP_SetStall+0x40>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800356a:	1829      	adds	r1, r5, r0
 800356c:	4359      	muls	r1, r3
 800356e:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 8003570:	7048      	strb	r0, [r1, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003572:	700d      	strb	r5, [r1, #0]
  ep->is_stall = 1U;
 8003574:	2301      	movs	r3, #1
  __HAL_LOCK(hpcd);
 8003576:	25aa      	movs	r5, #170	; 0xaa
  ep->is_stall = 1U;
 8003578:	708b      	strb	r3, [r1, #2]
  __HAL_LOCK(hpcd);
 800357a:	00ad      	lsls	r5, r5, #2
 800357c:	5d62      	ldrb	r2, [r4, r5]
 800357e:	2002      	movs	r0, #2
 8003580:	429a      	cmp	r2, r3
 8003582:	d005      	beq.n	8003590 <HAL_PCD_EP_SetStall+0x3e>
 8003584:	5563      	strb	r3, [r4, r5]
  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003586:	6820      	ldr	r0, [r4, #0]
 8003588:	f001 fc64 	bl	8004e54 <USB_EPSetStall>
  __HAL_UNLOCK(hpcd);
 800358c:	2000      	movs	r0, #0
 800358e:	5560      	strb	r0, [r4, r5]
}
 8003590:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003592:	434b      	muls	r3, r1
 8003594:	0019      	movs	r1, r3
    ep->is_in = 0U;
 8003596:	18e2      	adds	r2, r4, r3
 8003598:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr];
 800359a:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 800359c:	326a      	adds	r2, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr];
 800359e:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 80035a0:	32ff      	adds	r2, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr];
 80035a2:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 80035a4:	7013      	strb	r3, [r2, #0]
 80035a6:	e7e4      	b.n	8003572 <HAL_PCD_EP_SetStall+0x20>

080035a8 <HAL_PCD_EP_ClrStall>:
{
 80035a8:	b570      	push	{r4, r5, r6, lr}
 80035aa:	0004      	movs	r4, r0
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035ac:	230f      	movs	r3, #15
 80035ae:	6862      	ldr	r2, [r4, #4]
    return HAL_ERROR;
 80035b0:	2001      	movs	r0, #1
  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80035b2:	400b      	ands	r3, r1
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d81a      	bhi.n	80035ee <HAL_PCD_EP_ClrStall+0x46>
  if ((0x80U & ep_addr) == 0x80U)
 80035b8:	3006      	adds	r0, #6
 80035ba:	4008      	ands	r0, r1
 80035bc:	b249      	sxtb	r1, r1
 80035be:	2328      	movs	r3, #40	; 0x28
 80035c0:	2900      	cmp	r1, #0
 80035c2:	da15      	bge.n	80035f0 <HAL_PCD_EP_ClrStall+0x48>
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035c4:	1c41      	adds	r1, r0, #1
 80035c6:	4359      	muls	r1, r3
    ep->is_in = 1U;
 80035c8:	3b27      	subs	r3, #39	; 0x27
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035ca:	1861      	adds	r1, r4, r1
    ep->is_in = 1U;
 80035cc:	704b      	strb	r3, [r1, #1]
  ep->is_stall = 0U;
 80035ce:	2500      	movs	r5, #0
  __HAL_LOCK(hpcd);
 80035d0:	26aa      	movs	r6, #170	; 0xaa
  ep->num = ep_addr & EP_ADDR_MSK;
 80035d2:	7008      	strb	r0, [r1, #0]
  ep->is_stall = 0U;
 80035d4:	708d      	strb	r5, [r1, #2]
  __HAL_LOCK(hpcd);
 80035d6:	00b6      	lsls	r6, r6, #2
 80035d8:	5da3      	ldrb	r3, [r4, r6]
 80035da:	2002      	movs	r0, #2
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d006      	beq.n	80035ee <HAL_PCD_EP_ClrStall+0x46>
 80035e0:	2301      	movs	r3, #1
 80035e2:	55a3      	strb	r3, [r4, r6]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80035e4:	6820      	ldr	r0, [r4, #0]
 80035e6:	f001 fc53 	bl	8004e90 <USB_EPClearStall>
  return HAL_OK;
 80035ea:	0028      	movs	r0, r5
  __HAL_UNLOCK(hpcd);
 80035ec:	55a5      	strb	r5, [r4, r6]
}
 80035ee:	bd70      	pop	{r4, r5, r6, pc}
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f0:	4343      	muls	r3, r0
 80035f2:	0019      	movs	r1, r3
    ep->is_in = 0U;
 80035f4:	18e2      	adds	r2, r4, r3
 80035f6:	2300      	movs	r3, #0
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035f8:	3169      	adds	r1, #105	; 0x69
    ep->is_in = 0U;
 80035fa:	326a      	adds	r2, #106	; 0x6a
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035fc:	31ff      	adds	r1, #255	; 0xff
    ep->is_in = 0U;
 80035fe:	32ff      	adds	r2, #255	; 0xff
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003600:	1861      	adds	r1, r4, r1
    ep->is_in = 0U;
 8003602:	7013      	strb	r3, [r2, #0]
 8003604:	e7e3      	b.n	80035ce <HAL_PCD_EP_ClrStall+0x26>

08003606 <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 8003606:	b510      	push	{r4, lr}
 8003608:	000c      	movs	r4, r1
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 800360a:	0621      	lsls	r1, r4, #24
 800360c:	d50c      	bpl.n	8003628 <HAL_PCDEx_PMAConfig+0x22>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800360e:	2107      	movs	r1, #7
 8003610:	4021      	ands	r1, r4
 8003612:	2428      	movs	r4, #40	; 0x28
 8003614:	3101      	adds	r1, #1
 8003616:	4361      	muls	r1, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003618:	1840      	adds	r0, r0, r1
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 800361a:	b299      	uxth	r1, r3
 800361c:	2a00      	cmp	r2, #0
 800361e:	d108      	bne.n	8003632 <HAL_PCDEx_PMAConfig+0x2c>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8003620:	7302      	strb	r2, [r0, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 8003622:	80c1      	strh	r1, [r0, #6]
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
  }

  return HAL_OK;
}
 8003624:	2000      	movs	r0, #0
 8003626:	bd10      	pop	{r4, pc}
    ep = &hpcd->OUT_ep[ep_addr];
 8003628:	2128      	movs	r1, #40	; 0x28
 800362a:	4361      	muls	r1, r4
 800362c:	3169      	adds	r1, #105	; 0x69
 800362e:	31ff      	adds	r1, #255	; 0xff
 8003630:	e7f2      	b.n	8003618 <HAL_PCDEx_PMAConfig+0x12>
    ep->doublebuffer = 1U;
 8003632:	2201      	movs	r2, #1
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 8003634:	6083      	str	r3, [r0, #8]
    ep->doublebuffer = 1U;
 8003636:	7302      	strb	r2, [r0, #12]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 8003638:	e7f4      	b.n	8003624 <HAL_PCDEx_PMAConfig+0x1e>

0800363a <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 800363a:	6803      	ldr	r3, [r0, #0]
{
 800363c:	0002      	movs	r2, r0
  hpcd->lpm_active = 1U;
 800363e:	20ba      	movs	r0, #186	; 0xba
 8003640:	2101      	movs	r1, #1
{
 8003642:	b510      	push	{r4, lr}
  hpcd->lpm_active = 1U;
 8003644:	0080      	lsls	r0, r0, #2
  hpcd->LPM_State = LPM_L0;
 8003646:	24b8      	movs	r4, #184	; 0xb8
  hpcd->lpm_active = 1U;
 8003648:	5011      	str	r1, [r2, r0]
  hpcd->LPM_State = LPM_L0;
 800364a:	2000      	movs	r0, #0
 800364c:	00a4      	lsls	r4, r4, #2
 800364e:	5510      	strb	r0, [r2, r4]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003650:	3354      	adds	r3, #84	; 0x54
 8003652:	881a      	ldrh	r2, [r3, #0]
 8003654:	4311      	orrs	r1, r2
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 8003656:	2202      	movs	r2, #2
  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 8003658:	8019      	strh	r1, [r3, #0]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 800365a:	8819      	ldrh	r1, [r3, #0]
 800365c:	430a      	orrs	r2, r1
 800365e:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
}
 8003660:	bd10      	pop	{r4, pc}

08003662 <HAL_PCDEx_LPM_Callback>:
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003662:	4770      	bx	lr

08003664 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003664:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003666:	0004      	movs	r4, r0
 8003668:	b085      	sub	sp, #20
  uint32_t tickstart;
  uint32_t pll_config;
  uint32_t pll_config2;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800366a:	2800      	cmp	r0, #0
 800366c:	d04e      	beq.n	800370c <HAL_RCC_OscConfig+0xa8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800366e:	6803      	ldr	r3, [r0, #0]
 8003670:	07db      	lsls	r3, r3, #31
 8003672:	d433      	bmi.n	80036dc <HAL_RCC_OscConfig+0x78>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003674:	6823      	ldr	r3, [r4, #0]
 8003676:	079b      	lsls	r3, r3, #30
 8003678:	d500      	bpl.n	800367c <HAL_RCC_OscConfig+0x18>
 800367a:	e08a      	b.n	8003792 <HAL_RCC_OscConfig+0x12e>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800367c:	6823      	ldr	r3, [r4, #0]
 800367e:	071b      	lsls	r3, r3, #28
 8003680:	d500      	bpl.n	8003684 <HAL_RCC_OscConfig+0x20>
 8003682:	e0ca      	b.n	800381a <HAL_RCC_OscConfig+0x1b6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003684:	6823      	ldr	r3, [r4, #0]
 8003686:	075b      	lsls	r3, r3, #29
 8003688:	d500      	bpl.n	800368c <HAL_RCC_OscConfig+0x28>
 800368a:	e0ed      	b.n	8003868 <HAL_RCC_OscConfig+0x204>
      __HAL_RCC_PWR_CLK_DISABLE();
    }
  }

  /*----------------------------- HSI14 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI14) == RCC_OSCILLATORTYPE_HSI14)
 800368c:	6823      	ldr	r3, [r4, #0]
 800368e:	06db      	lsls	r3, r3, #27
 8003690:	d51a      	bpl.n	80036c8 <HAL_RCC_OscConfig+0x64>
    /* Check the parameters */
    assert_param(IS_RCC_HSI14(RCC_OscInitStruct->HSI14State));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSI14CalibrationValue));

    /* Check the HSI14 State */
    if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ON)
 8003692:	6962      	ldr	r2, [r4, #20]
 8003694:	2304      	movs	r3, #4
 8003696:	4dbc      	ldr	r5, [pc, #752]	; (8003988 <HAL_RCC_OscConfig+0x324>)
 8003698:	2a01      	cmp	r2, #1
 800369a:	d000      	beq.n	800369e <HAL_RCC_OscConfig+0x3a>
 800369c:	e158      	b.n	8003950 <HAL_RCC_OscConfig+0x2ec>
    {
      /* Disable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_DISABLE();
 800369e:	6b69      	ldr	r1, [r5, #52]	; 0x34

      /* Get Start Tick */
      tickstart = HAL_GetTick();
      
      /* Wait till HSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80036a0:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 80036a2:	430b      	orrs	r3, r1
 80036a4:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_ENABLE();
 80036a6:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80036a8:	431a      	orrs	r2, r3
 80036aa:	636a      	str	r2, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80036ac:	f7fe fc80 	bl	8001fb0 <HAL_GetTick>
 80036b0:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) == RESET)
 80036b2:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80036b4:	423b      	tst	r3, r7
 80036b6:	d100      	bne.n	80036ba <HAL_RCC_OscConfig+0x56>
 80036b8:	e143      	b.n	8003942 <HAL_RCC_OscConfig+0x2de>
    {
      /* Enable ADC control of the Internal High Speed oscillator HSI14 */
      __HAL_RCC_HSI14ADC_ENABLE();

      /* Adjusts the Internal High Speed oscillator 14Mhz (HSI14) calibration value. */
      __HAL_RCC_HSI14_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSI14CalibrationValue);
 80036ba:	21f8      	movs	r1, #248	; 0xf8
 80036bc:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80036be:	69a3      	ldr	r3, [r4, #24]
 80036c0:	438a      	bics	r2, r1
 80036c2:	00db      	lsls	r3, r3, #3
 80036c4:	4313      	orrs	r3, r2
 80036c6:	636b      	str	r3, [r5, #52]	; 0x34
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	069b      	lsls	r3, r3, #26
 80036cc:	d500      	bpl.n	80036d0 <HAL_RCC_OscConfig+0x6c>
 80036ce:	e167      	b.n	80039a0 <HAL_RCC_OscConfig+0x33c>
#endif /* RCC_HSI48_SUPPORT */
       
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d000      	beq.n	80036d8 <HAL_RCC_OscConfig+0x74>
 80036d6:	e1a4      	b.n	8003a22 <HAL_RCC_OscConfig+0x3be>
        }
      }
    }
  }

  return HAL_OK;
 80036d8:	2000      	movs	r0, #0
 80036da:	e02f      	b.n	800373c <HAL_RCC_OscConfig+0xd8>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80036dc:	210c      	movs	r1, #12
 80036de:	4daa      	ldr	r5, [pc, #680]	; (8003988 <HAL_RCC_OscConfig+0x324>)
 80036e0:	686a      	ldr	r2, [r5, #4]
 80036e2:	400a      	ands	r2, r1
 80036e4:	2a04      	cmp	r2, #4
 80036e6:	d00b      	beq.n	8003700 <HAL_RCC_OscConfig+0x9c>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80036e8:	686b      	ldr	r3, [r5, #4]
 80036ea:	400b      	ands	r3, r1
 80036ec:	2b08      	cmp	r3, #8
 80036ee:	d10f      	bne.n	8003710 <HAL_RCC_OscConfig+0xac>
 80036f0:	22c0      	movs	r2, #192	; 0xc0
 80036f2:	686b      	ldr	r3, [r5, #4]
 80036f4:	0252      	lsls	r2, r2, #9
 80036f6:	4013      	ands	r3, r2
 80036f8:	2280      	movs	r2, #128	; 0x80
 80036fa:	0252      	lsls	r2, r2, #9
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d107      	bne.n	8003710 <HAL_RCC_OscConfig+0xac>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003700:	682b      	ldr	r3, [r5, #0]
 8003702:	039b      	lsls	r3, r3, #14
 8003704:	d5b6      	bpl.n	8003674 <HAL_RCC_OscConfig+0x10>
 8003706:	6863      	ldr	r3, [r4, #4]
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1b3      	bne.n	8003674 <HAL_RCC_OscConfig+0x10>
          return HAL_ERROR;
 800370c:	2001      	movs	r0, #1
 800370e:	e015      	b.n	800373c <HAL_RCC_OscConfig+0xd8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003710:	6863      	ldr	r3, [r4, #4]
 8003712:	2b01      	cmp	r3, #1
 8003714:	d114      	bne.n	8003740 <HAL_RCC_OscConfig+0xdc>
 8003716:	2380      	movs	r3, #128	; 0x80
 8003718:	682a      	ldr	r2, [r5, #0]
 800371a:	025b      	lsls	r3, r3, #9
 800371c:	4313      	orrs	r3, r2
 800371e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003720:	f7fe fc46 	bl	8001fb0 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003724:	2780      	movs	r7, #128	; 0x80
        tickstart = HAL_GetTick();
 8003726:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003728:	02bf      	lsls	r7, r7, #10
 800372a:	682b      	ldr	r3, [r5, #0]
 800372c:	423b      	tst	r3, r7
 800372e:	d1a1      	bne.n	8003674 <HAL_RCC_OscConfig+0x10>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003730:	f7fe fc3e 	bl	8001fb0 <HAL_GetTick>
 8003734:	1b80      	subs	r0, r0, r6
 8003736:	2864      	cmp	r0, #100	; 0x64
 8003738:	d9f7      	bls.n	800372a <HAL_RCC_OscConfig+0xc6>
            return HAL_TIMEOUT;
 800373a:	2003      	movs	r0, #3
}
 800373c:	b005      	add	sp, #20
 800373e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003740:	2b00      	cmp	r3, #0
 8003742:	d116      	bne.n	8003772 <HAL_RCC_OscConfig+0x10e>
 8003744:	682b      	ldr	r3, [r5, #0]
 8003746:	4a91      	ldr	r2, [pc, #580]	; (800398c <HAL_RCC_OscConfig+0x328>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003748:	2780      	movs	r7, #128	; 0x80
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800374a:	4013      	ands	r3, r2
 800374c:	602b      	str	r3, [r5, #0]
 800374e:	682b      	ldr	r3, [r5, #0]
 8003750:	4a8f      	ldr	r2, [pc, #572]	; (8003990 <HAL_RCC_OscConfig+0x32c>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003752:	02bf      	lsls	r7, r7, #10
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003754:	4013      	ands	r3, r2
 8003756:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003758:	f7fe fc2a 	bl	8001fb0 <HAL_GetTick>
 800375c:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800375e:	682b      	ldr	r3, [r5, #0]
 8003760:	423b      	tst	r3, r7
 8003762:	d100      	bne.n	8003766 <HAL_RCC_OscConfig+0x102>
 8003764:	e786      	b.n	8003674 <HAL_RCC_OscConfig+0x10>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003766:	f7fe fc23 	bl	8001fb0 <HAL_GetTick>
 800376a:	1b80      	subs	r0, r0, r6
 800376c:	2864      	cmp	r0, #100	; 0x64
 800376e:	d9f6      	bls.n	800375e <HAL_RCC_OscConfig+0xfa>
 8003770:	e7e3      	b.n	800373a <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003772:	2b05      	cmp	r3, #5
 8003774:	d105      	bne.n	8003782 <HAL_RCC_OscConfig+0x11e>
 8003776:	2380      	movs	r3, #128	; 0x80
 8003778:	682a      	ldr	r2, [r5, #0]
 800377a:	02db      	lsls	r3, r3, #11
 800377c:	4313      	orrs	r3, r2
 800377e:	602b      	str	r3, [r5, #0]
 8003780:	e7c9      	b.n	8003716 <HAL_RCC_OscConfig+0xb2>
 8003782:	682b      	ldr	r3, [r5, #0]
 8003784:	4a81      	ldr	r2, [pc, #516]	; (800398c <HAL_RCC_OscConfig+0x328>)
 8003786:	4013      	ands	r3, r2
 8003788:	602b      	str	r3, [r5, #0]
 800378a:	682b      	ldr	r3, [r5, #0]
 800378c:	4a80      	ldr	r2, [pc, #512]	; (8003990 <HAL_RCC_OscConfig+0x32c>)
 800378e:	4013      	ands	r3, r2
 8003790:	e7c5      	b.n	800371e <HAL_RCC_OscConfig+0xba>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8003792:	220c      	movs	r2, #12
 8003794:	4d7c      	ldr	r5, [pc, #496]	; (8003988 <HAL_RCC_OscConfig+0x324>)
 8003796:	686b      	ldr	r3, [r5, #4]
 8003798:	4213      	tst	r3, r2
 800379a:	d00b      	beq.n	80037b4 <HAL_RCC_OscConfig+0x150>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800379c:	686b      	ldr	r3, [r5, #4]
 800379e:	4013      	ands	r3, r2
 80037a0:	2b08      	cmp	r3, #8
 80037a2:	d115      	bne.n	80037d0 <HAL_RCC_OscConfig+0x16c>
 80037a4:	22c0      	movs	r2, #192	; 0xc0
 80037a6:	686b      	ldr	r3, [r5, #4]
 80037a8:	0252      	lsls	r2, r2, #9
 80037aa:	4013      	ands	r3, r2
 80037ac:	2280      	movs	r2, #128	; 0x80
 80037ae:	0212      	lsls	r2, r2, #8
 80037b0:	4293      	cmp	r3, r2
 80037b2:	d10d      	bne.n	80037d0 <HAL_RCC_OscConfig+0x16c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80037b4:	682b      	ldr	r3, [r5, #0]
 80037b6:	079b      	lsls	r3, r3, #30
 80037b8:	d502      	bpl.n	80037c0 <HAL_RCC_OscConfig+0x15c>
 80037ba:	68e3      	ldr	r3, [r4, #12]
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d1a5      	bne.n	800370c <HAL_RCC_OscConfig+0xa8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80037c0:	21f8      	movs	r1, #248	; 0xf8
 80037c2:	682a      	ldr	r2, [r5, #0]
 80037c4:	6923      	ldr	r3, [r4, #16]
 80037c6:	438a      	bics	r2, r1
 80037c8:	00db      	lsls	r3, r3, #3
 80037ca:	4313      	orrs	r3, r2
 80037cc:	602b      	str	r3, [r5, #0]
 80037ce:	e755      	b.n	800367c <HAL_RCC_OscConfig+0x18>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80037d0:	68e2      	ldr	r2, [r4, #12]
 80037d2:	2301      	movs	r3, #1
 80037d4:	2a00      	cmp	r2, #0
 80037d6:	d00f      	beq.n	80037f8 <HAL_RCC_OscConfig+0x194>
        __HAL_RCC_HSI_ENABLE();
 80037d8:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037da:	2702      	movs	r7, #2
        __HAL_RCC_HSI_ENABLE();
 80037dc:	4313      	orrs	r3, r2
 80037de:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80037e0:	f7fe fbe6 	bl	8001fb0 <HAL_GetTick>
 80037e4:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e6:	682b      	ldr	r3, [r5, #0]
 80037e8:	423b      	tst	r3, r7
 80037ea:	d1e9      	bne.n	80037c0 <HAL_RCC_OscConfig+0x15c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80037ec:	f7fe fbe0 	bl	8001fb0 <HAL_GetTick>
 80037f0:	1b80      	subs	r0, r0, r6
 80037f2:	2802      	cmp	r0, #2
 80037f4:	d9f7      	bls.n	80037e6 <HAL_RCC_OscConfig+0x182>
 80037f6:	e7a0      	b.n	800373a <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI_DISABLE();
 80037f8:	682a      	ldr	r2, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037fa:	2702      	movs	r7, #2
        __HAL_RCC_HSI_DISABLE();
 80037fc:	439a      	bics	r2, r3
 80037fe:	602a      	str	r2, [r5, #0]
        tickstart = HAL_GetTick();
 8003800:	f7fe fbd6 	bl	8001fb0 <HAL_GetTick>
 8003804:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003806:	682b      	ldr	r3, [r5, #0]
 8003808:	423b      	tst	r3, r7
 800380a:	d100      	bne.n	800380e <HAL_RCC_OscConfig+0x1aa>
 800380c:	e736      	b.n	800367c <HAL_RCC_OscConfig+0x18>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800380e:	f7fe fbcf 	bl	8001fb0 <HAL_GetTick>
 8003812:	1b80      	subs	r0, r0, r6
 8003814:	2802      	cmp	r0, #2
 8003816:	d9f6      	bls.n	8003806 <HAL_RCC_OscConfig+0x1a2>
 8003818:	e78f      	b.n	800373a <HAL_RCC_OscConfig+0xd6>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800381a:	69e2      	ldr	r2, [r4, #28]
 800381c:	2301      	movs	r3, #1
 800381e:	4d5a      	ldr	r5, [pc, #360]	; (8003988 <HAL_RCC_OscConfig+0x324>)
 8003820:	2a00      	cmp	r2, #0
 8003822:	d010      	beq.n	8003846 <HAL_RCC_OscConfig+0x1e2>
      __HAL_RCC_LSI_ENABLE();
 8003824:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003826:	2702      	movs	r7, #2
      __HAL_RCC_LSI_ENABLE();
 8003828:	4313      	orrs	r3, r2
 800382a:	626b      	str	r3, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800382c:	f7fe fbc0 	bl	8001fb0 <HAL_GetTick>
 8003830:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003832:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003834:	423b      	tst	r3, r7
 8003836:	d000      	beq.n	800383a <HAL_RCC_OscConfig+0x1d6>
 8003838:	e724      	b.n	8003684 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800383a:	f7fe fbb9 	bl	8001fb0 <HAL_GetTick>
 800383e:	1b80      	subs	r0, r0, r6
 8003840:	2802      	cmp	r0, #2
 8003842:	d9f6      	bls.n	8003832 <HAL_RCC_OscConfig+0x1ce>
 8003844:	e779      	b.n	800373a <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_LSI_DISABLE();
 8003846:	6a6a      	ldr	r2, [r5, #36]	; 0x24
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003848:	2702      	movs	r7, #2
      __HAL_RCC_LSI_DISABLE();
 800384a:	439a      	bics	r2, r3
 800384c:	626a      	str	r2, [r5, #36]	; 0x24
      tickstart = HAL_GetTick();
 800384e:	f7fe fbaf 	bl	8001fb0 <HAL_GetTick>
 8003852:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003854:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8003856:	423b      	tst	r3, r7
 8003858:	d100      	bne.n	800385c <HAL_RCC_OscConfig+0x1f8>
 800385a:	e713      	b.n	8003684 <HAL_RCC_OscConfig+0x20>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800385c:	f7fe fba8 	bl	8001fb0 <HAL_GetTick>
 8003860:	1b80      	subs	r0, r0, r6
 8003862:	2802      	cmp	r0, #2
 8003864:	d9f6      	bls.n	8003854 <HAL_RCC_OscConfig+0x1f0>
 8003866:	e768      	b.n	800373a <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003868:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 800386a:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800386c:	4d46      	ldr	r5, [pc, #280]	; (8003988 <HAL_RCC_OscConfig+0x324>)
 800386e:	0552      	lsls	r2, r2, #21
 8003870:	69eb      	ldr	r3, [r5, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003872:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003874:	4213      	tst	r3, r2
 8003876:	d108      	bne.n	800388a <HAL_RCC_OscConfig+0x226>
      __HAL_RCC_PWR_CLK_ENABLE();
 8003878:	69eb      	ldr	r3, [r5, #28]
 800387a:	4313      	orrs	r3, r2
 800387c:	61eb      	str	r3, [r5, #28]
 800387e:	69eb      	ldr	r3, [r5, #28]
 8003880:	4013      	ands	r3, r2
 8003882:	9303      	str	r3, [sp, #12]
 8003884:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003886:	2301      	movs	r3, #1
 8003888:	9300      	str	r3, [sp, #0]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800388a:	2780      	movs	r7, #128	; 0x80
 800388c:	4e41      	ldr	r6, [pc, #260]	; (8003994 <HAL_RCC_OscConfig+0x330>)
 800388e:	007f      	lsls	r7, r7, #1
 8003890:	6833      	ldr	r3, [r6, #0]
 8003892:	423b      	tst	r3, r7
 8003894:	d006      	beq.n	80038a4 <HAL_RCC_OscConfig+0x240>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003896:	68a3      	ldr	r3, [r4, #8]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d113      	bne.n	80038c4 <HAL_RCC_OscConfig+0x260>
 800389c:	6a2a      	ldr	r2, [r5, #32]
 800389e:	4313      	orrs	r3, r2
 80038a0:	622b      	str	r3, [r5, #32]
 80038a2:	e030      	b.n	8003906 <HAL_RCC_OscConfig+0x2a2>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80038a4:	6833      	ldr	r3, [r6, #0]
 80038a6:	433b      	orrs	r3, r7
 80038a8:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80038aa:	f7fe fb81 	bl	8001fb0 <HAL_GetTick>
 80038ae:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b0:	6833      	ldr	r3, [r6, #0]
 80038b2:	423b      	tst	r3, r7
 80038b4:	d1ef      	bne.n	8003896 <HAL_RCC_OscConfig+0x232>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80038b6:	f7fe fb7b 	bl	8001fb0 <HAL_GetTick>
 80038ba:	9b01      	ldr	r3, [sp, #4]
 80038bc:	1ac0      	subs	r0, r0, r3
 80038be:	2864      	cmp	r0, #100	; 0x64
 80038c0:	d9f6      	bls.n	80038b0 <HAL_RCC_OscConfig+0x24c>
 80038c2:	e73a      	b.n	800373a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c4:	2201      	movs	r2, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d114      	bne.n	80038f4 <HAL_RCC_OscConfig+0x290>
 80038ca:	6a2b      	ldr	r3, [r5, #32]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038cc:	2702      	movs	r7, #2
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038ce:	4393      	bics	r3, r2
 80038d0:	622b      	str	r3, [r5, #32]
 80038d2:	6a2b      	ldr	r3, [r5, #32]
 80038d4:	3203      	adds	r2, #3
 80038d6:	4393      	bics	r3, r2
 80038d8:	622b      	str	r3, [r5, #32]
      tickstart = HAL_GetTick();
 80038da:	f7fe fb69 	bl	8001fb0 <HAL_GetTick>
 80038de:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038e0:	6a2b      	ldr	r3, [r5, #32]
 80038e2:	423b      	tst	r3, r7
 80038e4:	d016      	beq.n	8003914 <HAL_RCC_OscConfig+0x2b0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038e6:	f7fe fb63 	bl	8001fb0 <HAL_GetTick>
 80038ea:	4b2b      	ldr	r3, [pc, #172]	; (8003998 <HAL_RCC_OscConfig+0x334>)
 80038ec:	1b80      	subs	r0, r0, r6
 80038ee:	4298      	cmp	r0, r3
 80038f0:	d9f6      	bls.n	80038e0 <HAL_RCC_OscConfig+0x27c>
 80038f2:	e722      	b.n	800373a <HAL_RCC_OscConfig+0xd6>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038f4:	2b05      	cmp	r3, #5
 80038f6:	d116      	bne.n	8003926 <HAL_RCC_OscConfig+0x2c2>
 80038f8:	6a29      	ldr	r1, [r5, #32]
 80038fa:	3b01      	subs	r3, #1
 80038fc:	430b      	orrs	r3, r1
 80038fe:	622b      	str	r3, [r5, #32]
 8003900:	6a2b      	ldr	r3, [r5, #32]
 8003902:	431a      	orrs	r2, r3
 8003904:	622a      	str	r2, [r5, #32]
      tickstart = HAL_GetTick();
 8003906:	f7fe fb53 	bl	8001fb0 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390a:	2702      	movs	r7, #2
      tickstart = HAL_GetTick();
 800390c:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800390e:	6a2b      	ldr	r3, [r5, #32]
 8003910:	423b      	tst	r3, r7
 8003912:	d00f      	beq.n	8003934 <HAL_RCC_OscConfig+0x2d0>
    if(pwrclkchanged == SET)
 8003914:	9b00      	ldr	r3, [sp, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d000      	beq.n	800391c <HAL_RCC_OscConfig+0x2b8>
 800391a:	e6b7      	b.n	800368c <HAL_RCC_OscConfig+0x28>
      __HAL_RCC_PWR_CLK_DISABLE();
 800391c:	69eb      	ldr	r3, [r5, #28]
 800391e:	4a1f      	ldr	r2, [pc, #124]	; (800399c <HAL_RCC_OscConfig+0x338>)
 8003920:	4013      	ands	r3, r2
 8003922:	61eb      	str	r3, [r5, #28]
 8003924:	e6b2      	b.n	800368c <HAL_RCC_OscConfig+0x28>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003926:	6a2b      	ldr	r3, [r5, #32]
 8003928:	4393      	bics	r3, r2
 800392a:	2204      	movs	r2, #4
 800392c:	622b      	str	r3, [r5, #32]
 800392e:	6a2b      	ldr	r3, [r5, #32]
 8003930:	4393      	bics	r3, r2
 8003932:	e7b5      	b.n	80038a0 <HAL_RCC_OscConfig+0x23c>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003934:	f7fe fb3c 	bl	8001fb0 <HAL_GetTick>
 8003938:	4b17      	ldr	r3, [pc, #92]	; (8003998 <HAL_RCC_OscConfig+0x334>)
 800393a:	1b80      	subs	r0, r0, r6
 800393c:	4298      	cmp	r0, r3
 800393e:	d9e6      	bls.n	800390e <HAL_RCC_OscConfig+0x2aa>
 8003940:	e6fb      	b.n	800373a <HAL_RCC_OscConfig+0xd6>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 8003942:	f7fe fb35 	bl	8001fb0 <HAL_GetTick>
 8003946:	1b80      	subs	r0, r0, r6
 8003948:	2802      	cmp	r0, #2
 800394a:	d800      	bhi.n	800394e <HAL_RCC_OscConfig+0x2ea>
 800394c:	e6b1      	b.n	80036b2 <HAL_RCC_OscConfig+0x4e>
 800394e:	e6f4      	b.n	800373a <HAL_RCC_OscConfig+0xd6>
    else if(RCC_OscInitStruct->HSI14State == RCC_HSI14_ADC_CONTROL)
 8003950:	3205      	adds	r2, #5
 8003952:	d103      	bne.n	800395c <HAL_RCC_OscConfig+0x2f8>
      __HAL_RCC_HSI14ADC_ENABLE();
 8003954:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8003956:	439a      	bics	r2, r3
 8003958:	636a      	str	r2, [r5, #52]	; 0x34
 800395a:	e6ae      	b.n	80036ba <HAL_RCC_OscConfig+0x56>
      __HAL_RCC_HSI14ADC_DISABLE();
 800395c:	6b6a      	ldr	r2, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 800395e:	2702      	movs	r7, #2
      __HAL_RCC_HSI14ADC_DISABLE();
 8003960:	4313      	orrs	r3, r2
      __HAL_RCC_HSI14_DISABLE();
 8003962:	2201      	movs	r2, #1
      __HAL_RCC_HSI14ADC_DISABLE();
 8003964:	636b      	str	r3, [r5, #52]	; 0x34
      __HAL_RCC_HSI14_DISABLE();
 8003966:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003968:	4393      	bics	r3, r2
 800396a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800396c:	f7fe fb20 	bl	8001fb0 <HAL_GetTick>
 8003970:	0006      	movs	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI14RDY) != RESET)
 8003972:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003974:	423b      	tst	r3, r7
 8003976:	d100      	bne.n	800397a <HAL_RCC_OscConfig+0x316>
 8003978:	e6a6      	b.n	80036c8 <HAL_RCC_OscConfig+0x64>
        if((HAL_GetTick() - tickstart) > HSI14_TIMEOUT_VALUE)
 800397a:	f7fe fb19 	bl	8001fb0 <HAL_GetTick>
 800397e:	1b80      	subs	r0, r0, r6
 8003980:	2802      	cmp	r0, #2
 8003982:	d9f6      	bls.n	8003972 <HAL_RCC_OscConfig+0x30e>
 8003984:	e6d9      	b.n	800373a <HAL_RCC_OscConfig+0xd6>
 8003986:	46c0      	nop			; (mov r8, r8)
 8003988:	40021000 	.word	0x40021000
 800398c:	fffeffff 	.word	0xfffeffff
 8003990:	fffbffff 	.word	0xfffbffff
 8003994:	40007000 	.word	0x40007000
 8003998:	00001388 	.word	0x00001388
 800399c:	efffffff 	.word	0xefffffff
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80039a0:	210c      	movs	r1, #12
 80039a2:	4d54      	ldr	r5, [pc, #336]	; (8003af4 <HAL_RCC_OscConfig+0x490>)
 80039a4:	686a      	ldr	r2, [r5, #4]
 80039a6:	400a      	ands	r2, r1
 80039a8:	428a      	cmp	r2, r1
 80039aa:	d009      	beq.n	80039c0 <HAL_RCC_OscConfig+0x35c>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80039ac:	686b      	ldr	r3, [r5, #4]
 80039ae:	400b      	ands	r3, r1
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI48) ||
 80039b0:	2b08      	cmp	r3, #8
 80039b2:	d10e      	bne.n	80039d2 <HAL_RCC_OscConfig+0x36e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI48)))
 80039b4:	22c0      	movs	r2, #192	; 0xc0
 80039b6:	686b      	ldr	r3, [r5, #4]
 80039b8:	0252      	lsls	r2, r2, #9
 80039ba:	4013      	ands	r3, r2
 80039bc:	4293      	cmp	r3, r2
 80039be:	d108      	bne.n	80039d2 <HAL_RCC_OscConfig+0x36e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET) && (RCC_OscInitStruct->HSI48State != RCC_HSI48_ON))
 80039c0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80039c2:	03db      	lsls	r3, r3, #15
 80039c4:	d400      	bmi.n	80039c8 <HAL_RCC_OscConfig+0x364>
 80039c6:	e683      	b.n	80036d0 <HAL_RCC_OscConfig+0x6c>
 80039c8:	6a23      	ldr	r3, [r4, #32]
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d000      	beq.n	80039d0 <HAL_RCC_OscConfig+0x36c>
 80039ce:	e69d      	b.n	800370c <HAL_RCC_OscConfig+0xa8>
 80039d0:	e67e      	b.n	80036d0 <HAL_RCC_OscConfig+0x6c>
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80039d2:	6a23      	ldr	r3, [r4, #32]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d011      	beq.n	80039fc <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_HSI48_ENABLE();
 80039d8:	2680      	movs	r6, #128	; 0x80
 80039da:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80039dc:	0276      	lsls	r6, r6, #9
 80039de:	4333      	orrs	r3, r6
 80039e0:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 80039e2:	f7fe fae5 	bl	8001fb0 <HAL_GetTick>
 80039e6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 80039e8:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80039ea:	4233      	tst	r3, r6
 80039ec:	d000      	beq.n	80039f0 <HAL_RCC_OscConfig+0x38c>
 80039ee:	e66f      	b.n	80036d0 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80039f0:	f7fe fade 	bl	8001fb0 <HAL_GetTick>
 80039f4:	1bc0      	subs	r0, r0, r7
 80039f6:	2802      	cmp	r0, #2
 80039f8:	d9f6      	bls.n	80039e8 <HAL_RCC_OscConfig+0x384>
 80039fa:	e69e      	b.n	800373a <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_HSI48_DISABLE();
 80039fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80039fe:	4a3e      	ldr	r2, [pc, #248]	; (8003af8 <HAL_RCC_OscConfig+0x494>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003a00:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_HSI48_DISABLE();
 8003a02:	4013      	ands	r3, r2
 8003a04:	636b      	str	r3, [r5, #52]	; 0x34
        tickstart = HAL_GetTick();
 8003a06:	f7fe fad3 	bl	8001fb0 <HAL_GetTick>
 8003a0a:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != RESET)
 8003a0c:	027f      	lsls	r7, r7, #9
 8003a0e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8003a10:	423b      	tst	r3, r7
 8003a12:	d100      	bne.n	8003a16 <HAL_RCC_OscConfig+0x3b2>
 8003a14:	e65c      	b.n	80036d0 <HAL_RCC_OscConfig+0x6c>
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003a16:	f7fe facb 	bl	8001fb0 <HAL_GetTick>
 8003a1a:	1b80      	subs	r0, r0, r6
 8003a1c:	2802      	cmp	r0, #2
 8003a1e:	d9f6      	bls.n	8003a0e <HAL_RCC_OscConfig+0x3aa>
 8003a20:	e68b      	b.n	800373a <HAL_RCC_OscConfig+0xd6>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a22:	200c      	movs	r0, #12
 8003a24:	4a33      	ldr	r2, [pc, #204]	; (8003af4 <HAL_RCC_OscConfig+0x490>)
 8003a26:	6851      	ldr	r1, [r2, #4]
 8003a28:	0015      	movs	r5, r2
 8003a2a:	4001      	ands	r1, r0
 8003a2c:	2908      	cmp	r1, #8
 8003a2e:	d047      	beq.n	8003ac0 <HAL_RCC_OscConfig+0x45c>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003a30:	4a32      	ldr	r2, [pc, #200]	; (8003afc <HAL_RCC_OscConfig+0x498>)
 8003a32:	2b02      	cmp	r3, #2
 8003a34:	d132      	bne.n	8003a9c <HAL_RCC_OscConfig+0x438>
        __HAL_RCC_PLL_DISABLE();
 8003a36:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a38:	2780      	movs	r7, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a3e:	f7fe fab7 	bl	8001fb0 <HAL_GetTick>
 8003a42:	0006      	movs	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a44:	04bf      	lsls	r7, r7, #18
 8003a46:	682b      	ldr	r3, [r5, #0]
 8003a48:	423b      	tst	r3, r7
 8003a4a:	d121      	bne.n	8003a90 <HAL_RCC_OscConfig+0x42c>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a4c:	220f      	movs	r2, #15
 8003a4e:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a50:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a52:	4393      	bics	r3, r2
 8003a54:	6b22      	ldr	r2, [r4, #48]	; 0x30
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a56:	04b6      	lsls	r6, r6, #18
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003a58:	4313      	orrs	r3, r2
 8003a5a:	62eb      	str	r3, [r5, #44]	; 0x2c
 8003a5c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8003a5e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003a60:	686a      	ldr	r2, [r5, #4]
 8003a62:	430b      	orrs	r3, r1
 8003a64:	4926      	ldr	r1, [pc, #152]	; (8003b00 <HAL_RCC_OscConfig+0x49c>)
 8003a66:	400a      	ands	r2, r1
 8003a68:	4313      	orrs	r3, r2
 8003a6a:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8003a6c:	2380      	movs	r3, #128	; 0x80
 8003a6e:	682a      	ldr	r2, [r5, #0]
 8003a70:	045b      	lsls	r3, r3, #17
 8003a72:	4313      	orrs	r3, r2
 8003a74:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003a76:	f7fe fa9b 	bl	8001fb0 <HAL_GetTick>
 8003a7a:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003a7c:	682b      	ldr	r3, [r5, #0]
 8003a7e:	4233      	tst	r3, r6
 8003a80:	d000      	beq.n	8003a84 <HAL_RCC_OscConfig+0x420>
 8003a82:	e629      	b.n	80036d8 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a84:	f7fe fa94 	bl	8001fb0 <HAL_GetTick>
 8003a88:	1b00      	subs	r0, r0, r4
 8003a8a:	2802      	cmp	r0, #2
 8003a8c:	d9f6      	bls.n	8003a7c <HAL_RCC_OscConfig+0x418>
 8003a8e:	e654      	b.n	800373a <HAL_RCC_OscConfig+0xd6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a90:	f7fe fa8e 	bl	8001fb0 <HAL_GetTick>
 8003a94:	1b80      	subs	r0, r0, r6
 8003a96:	2802      	cmp	r0, #2
 8003a98:	d9d5      	bls.n	8003a46 <HAL_RCC_OscConfig+0x3e2>
 8003a9a:	e64e      	b.n	800373a <HAL_RCC_OscConfig+0xd6>
        __HAL_RCC_PLL_DISABLE();
 8003a9c:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003a9e:	2680      	movs	r6, #128	; 0x80
        __HAL_RCC_PLL_DISABLE();
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8003aa4:	f7fe fa84 	bl	8001fb0 <HAL_GetTick>
 8003aa8:	0004      	movs	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003aaa:	04b6      	lsls	r6, r6, #18
 8003aac:	682b      	ldr	r3, [r5, #0]
 8003aae:	4233      	tst	r3, r6
 8003ab0:	d100      	bne.n	8003ab4 <HAL_RCC_OscConfig+0x450>
 8003ab2:	e611      	b.n	80036d8 <HAL_RCC_OscConfig+0x74>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ab4:	f7fe fa7c 	bl	8001fb0 <HAL_GetTick>
 8003ab8:	1b00      	subs	r0, r0, r4
 8003aba:	2802      	cmp	r0, #2
 8003abc:	d9f6      	bls.n	8003aac <HAL_RCC_OscConfig+0x448>
 8003abe:	e63c      	b.n	800373a <HAL_RCC_OscConfig+0xd6>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003ac0:	2b01      	cmp	r3, #1
 8003ac2:	d100      	bne.n	8003ac6 <HAL_RCC_OscConfig+0x462>
 8003ac4:	e622      	b.n	800370c <HAL_RCC_OscConfig+0xa8>
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ac6:	21c0      	movs	r1, #192	; 0xc0
        pll_config  = RCC->CFGR;
 8003ac8:	6853      	ldr	r3, [r2, #4]
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003aca:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003acc:	0249      	lsls	r1, r1, #9
        pll_config2 = RCC->CFGR2;
 8003ace:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003ad0:	4019      	ands	r1, r3
 8003ad2:	4281      	cmp	r1, r0
 8003ad4:	d000      	beq.n	8003ad8 <HAL_RCC_OscConfig+0x474>
 8003ad6:	e619      	b.n	800370c <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003ad8:	210f      	movs	r1, #15
 8003ada:	400a      	ands	r2, r1
        if((READ_BIT(pll_config,  RCC_CFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003adc:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8003ade:	428a      	cmp	r2, r1
 8003ae0:	d000      	beq.n	8003ae4 <HAL_RCC_OscConfig+0x480>
 8003ae2:	e613      	b.n	800370c <HAL_RCC_OscConfig+0xa8>
           (READ_BIT(pll_config,  RCC_CFGR_PLLMUL)  != RCC_OscInitStruct->PLL.PLLMUL))
 8003ae4:	22f0      	movs	r2, #240	; 0xf0
 8003ae6:	0392      	lsls	r2, r2, #14
 8003ae8:	4013      	ands	r3, r2
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV) != RCC_OscInitStruct->PLL.PREDIV)    ||
 8003aea:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d100      	bne.n	8003af2 <HAL_RCC_OscConfig+0x48e>
 8003af0:	e5f2      	b.n	80036d8 <HAL_RCC_OscConfig+0x74>
 8003af2:	e60b      	b.n	800370c <HAL_RCC_OscConfig+0xa8>
 8003af4:	40021000 	.word	0x40021000
 8003af8:	fffeffff 	.word	0xfffeffff
 8003afc:	feffffff 	.word	0xfeffffff
 8003b00:	ffc27fff 	.word	0xffc27fff

08003b04 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b04:	b530      	push	{r4, r5, lr}
 8003b06:	b089      	sub	sp, #36	; 0x24
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003b08:	2210      	movs	r2, #16
 8003b0a:	4919      	ldr	r1, [pc, #100]	; (8003b70 <HAL_RCC_GetSysClockFreq+0x6c>)
 8003b0c:	4668      	mov	r0, sp
                                         10U, 11U, 12U, 13U, 14U, 15U, 16U, 16U};
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003b0e:	ad04      	add	r5, sp, #16
  const uint8_t aPLLMULFactorTable[16] = { 2U,  3U,  4U,  5U,  6U,  7U,  8U,  9U,
 8003b10:	f002 fcf4 	bl	80064fc <memcpy>
  const uint8_t aPredivFactorTable[16] = { 1U, 2U,  3U,  4U,  5U,  6U,  7U,  8U,
 8003b14:	2210      	movs	r2, #16
 8003b16:	0028      	movs	r0, r5
 8003b18:	4916      	ldr	r1, [pc, #88]	; (8003b74 <HAL_RCC_GetSysClockFreq+0x70>)
 8003b1a:	f002 fcef 	bl	80064fc <memcpy>
  uint32_t sysclockfreq = 0U;
  
  tmpreg = RCC->CFGR;
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b1e:	200c      	movs	r0, #12
  tmpreg = RCC->CFGR;
 8003b20:	4a15      	ldr	r2, [pc, #84]	; (8003b78 <HAL_RCC_GetSysClockFreq+0x74>)
 8003b22:	6853      	ldr	r3, [r2, #4]
  switch (tmpreg & RCC_CFGR_SWS)
 8003b24:	4018      	ands	r0, r3
 8003b26:	2808      	cmp	r0, #8
 8003b28:	d009      	beq.n	8003b3e <HAL_RCC_GetSysClockFreq+0x3a>
 8003b2a:	380c      	subs	r0, #12
 8003b2c:	1e43      	subs	r3, r0, #1
 8003b2e:	4198      	sbcs	r0, r3
 8003b30:	4b12      	ldr	r3, [pc, #72]	; (8003b7c <HAL_RCC_GetSysClockFreq+0x78>)
 8003b32:	4240      	negs	r0, r0
 8003b34:	4018      	ands	r0, r3
 8003b36:	4b12      	ldr	r3, [pc, #72]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x7c>)
 8003b38:	18c0      	adds	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8003b3a:	b009      	add	sp, #36	; 0x24
 8003b3c:	bd30      	pop	{r4, r5, pc}
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003b3e:	200f      	movs	r0, #15
 8003b40:	466c      	mov	r4, sp
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003b42:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003b44:	0c99      	lsrs	r1, r3, #18
 8003b46:	4001      	ands	r1, r0
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003b48:	4002      	ands	r2, r0
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8003b4a:	5c64      	ldrb	r4, [r4, r1]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_BITNUMBER];
 8003b4c:	5ca9      	ldrb	r1, [r5, r2]
      if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003b4e:	22c0      	movs	r2, #192	; 0xc0
 8003b50:	2080      	movs	r0, #128	; 0x80
 8003b52:	0252      	lsls	r2, r2, #9
 8003b54:	4013      	ands	r3, r2
 8003b56:	0240      	lsls	r0, r0, #9
 8003b58:	4283      	cmp	r3, r0
 8003b5a:	d101      	bne.n	8003b60 <HAL_RCC_GetSysClockFreq+0x5c>
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b5c:	4809      	ldr	r0, [pc, #36]	; (8003b84 <HAL_RCC_GetSysClockFreq+0x80>)
 8003b5e:	e002      	b.n	8003b66 <HAL_RCC_GetSysClockFreq+0x62>
      else if ((tmpreg & RCC_CFGR_PLLSRC) == RCC_PLLSOURCE_HSI48)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d1fb      	bne.n	8003b5c <HAL_RCC_GetSysClockFreq+0x58>
        pllclk = (uint32_t)((uint64_t) HSI48_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b64:	4806      	ldr	r0, [pc, #24]	; (8003b80 <HAL_RCC_GetSysClockFreq+0x7c>)
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8003b66:	f7fc faff 	bl	8000168 <__udivsi3>
 8003b6a:	4360      	muls	r0, r4
 8003b6c:	e7e5      	b.n	8003b3a <HAL_RCC_GetSysClockFreq+0x36>
 8003b6e:	46c0      	nop			; (mov r8, r8)
 8003b70:	08007310 	.word	0x08007310
 8003b74:	08007321 	.word	0x08007321
 8003b78:	40021000 	.word	0x40021000
 8003b7c:	fd9da600 	.word	0xfd9da600
 8003b80:	02dc6c00 	.word	0x02dc6c00
 8003b84:	007a1200 	.word	0x007a1200

08003b88 <HAL_RCC_ClockConfig>:
{
 8003b88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003b8a:	0005      	movs	r5, r0
 8003b8c:	000f      	movs	r7, r1
  if(RCC_ClkInitStruct == NULL)
 8003b8e:	2800      	cmp	r0, #0
 8003b90:	d101      	bne.n	8003b96 <HAL_RCC_ClockConfig+0xe>
    return HAL_ERROR;
 8003b92:	2001      	movs	r0, #1
}
 8003b94:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003b96:	2201      	movs	r2, #1
 8003b98:	4c3b      	ldr	r4, [pc, #236]	; (8003c88 <HAL_RCC_ClockConfig+0x100>)
 8003b9a:	6823      	ldr	r3, [r4, #0]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	428b      	cmp	r3, r1
 8003ba0:	d31c      	bcc.n	8003bdc <HAL_RCC_ClockConfig+0x54>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003ba2:	6829      	ldr	r1, [r5, #0]
 8003ba4:	078b      	lsls	r3, r1, #30
 8003ba6:	d422      	bmi.n	8003bee <HAL_RCC_ClockConfig+0x66>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003ba8:	07cb      	lsls	r3, r1, #31
 8003baa:	d42f      	bmi.n	8003c0c <HAL_RCC_ClockConfig+0x84>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bac:	2301      	movs	r3, #1
 8003bae:	6822      	ldr	r2, [r4, #0]
 8003bb0:	401a      	ands	r2, r3
 8003bb2:	42ba      	cmp	r2, r7
 8003bb4:	d859      	bhi.n	8003c6a <HAL_RCC_ClockConfig+0xe2>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bb6:	682b      	ldr	r3, [r5, #0]
 8003bb8:	4c34      	ldr	r4, [pc, #208]	; (8003c8c <HAL_RCC_ClockConfig+0x104>)
 8003bba:	075b      	lsls	r3, r3, #29
 8003bbc:	d45c      	bmi.n	8003c78 <HAL_RCC_ClockConfig+0xf0>
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8003bbe:	f7ff ffa1 	bl	8003b04 <HAL_RCC_GetSysClockFreq>
 8003bc2:	6863      	ldr	r3, [r4, #4]
 8003bc4:	4a32      	ldr	r2, [pc, #200]	; (8003c90 <HAL_RCC_ClockConfig+0x108>)
 8003bc6:	061b      	lsls	r3, r3, #24
 8003bc8:	0f1b      	lsrs	r3, r3, #28
 8003bca:	5cd3      	ldrb	r3, [r2, r3]
 8003bcc:	40d8      	lsrs	r0, r3
 8003bce:	4b31      	ldr	r3, [pc, #196]	; (8003c94 <HAL_RCC_ClockConfig+0x10c>)
 8003bd0:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8003bd2:	2000      	movs	r0, #0
 8003bd4:	f7fe f928 	bl	8001e28 <HAL_InitTick>
  return HAL_OK;
 8003bd8:	2000      	movs	r0, #0
 8003bda:	e7db      	b.n	8003b94 <HAL_RCC_ClockConfig+0xc>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bdc:	6823      	ldr	r3, [r4, #0]
 8003bde:	4393      	bics	r3, r2
 8003be0:	430b      	orrs	r3, r1
 8003be2:	6023      	str	r3, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003be4:	6823      	ldr	r3, [r4, #0]
 8003be6:	4013      	ands	r3, r2
 8003be8:	428b      	cmp	r3, r1
 8003bea:	d1d2      	bne.n	8003b92 <HAL_RCC_ClockConfig+0xa>
 8003bec:	e7d9      	b.n	8003ba2 <HAL_RCC_ClockConfig+0x1a>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bee:	4a27      	ldr	r2, [pc, #156]	; (8003c8c <HAL_RCC_ClockConfig+0x104>)
 8003bf0:	074b      	lsls	r3, r1, #29
 8003bf2:	d504      	bpl.n	8003bfe <HAL_RCC_ClockConfig+0x76>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8003bf4:	23e0      	movs	r3, #224	; 0xe0
 8003bf6:	6850      	ldr	r0, [r2, #4]
 8003bf8:	00db      	lsls	r3, r3, #3
 8003bfa:	4303      	orrs	r3, r0
 8003bfc:	6053      	str	r3, [r2, #4]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003bfe:	20f0      	movs	r0, #240	; 0xf0
 8003c00:	6853      	ldr	r3, [r2, #4]
 8003c02:	4383      	bics	r3, r0
 8003c04:	68a8      	ldr	r0, [r5, #8]
 8003c06:	4303      	orrs	r3, r0
 8003c08:	6053      	str	r3, [r2, #4]
 8003c0a:	e7cd      	b.n	8003ba8 <HAL_RCC_ClockConfig+0x20>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003c0c:	686a      	ldr	r2, [r5, #4]
 8003c0e:	4e1f      	ldr	r6, [pc, #124]	; (8003c8c <HAL_RCC_ClockConfig+0x104>)
 8003c10:	2a01      	cmp	r2, #1
 8003c12:	d11a      	bne.n	8003c4a <HAL_RCC_ClockConfig+0xc2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c14:	6833      	ldr	r3, [r6, #0]
 8003c16:	039b      	lsls	r3, r3, #14
 8003c18:	d5bb      	bpl.n	8003b92 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003c1a:	2103      	movs	r1, #3
 8003c1c:	6873      	ldr	r3, [r6, #4]
 8003c1e:	438b      	bics	r3, r1
 8003c20:	4313      	orrs	r3, r2
 8003c22:	6073      	str	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8003c24:	f7fe f9c4 	bl	8001fb0 <HAL_GetTick>
 8003c28:	9001      	str	r0, [sp, #4]
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c2a:	230c      	movs	r3, #12
 8003c2c:	6872      	ldr	r2, [r6, #4]
 8003c2e:	401a      	ands	r2, r3
 8003c30:	686b      	ldr	r3, [r5, #4]
 8003c32:	009b      	lsls	r3, r3, #2
 8003c34:	429a      	cmp	r2, r3
 8003c36:	d0b9      	beq.n	8003bac <HAL_RCC_ClockConfig+0x24>
      if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c38:	f7fe f9ba 	bl	8001fb0 <HAL_GetTick>
 8003c3c:	9b01      	ldr	r3, [sp, #4]
 8003c3e:	1ac0      	subs	r0, r0, r3
 8003c40:	4b15      	ldr	r3, [pc, #84]	; (8003c98 <HAL_RCC_ClockConfig+0x110>)
 8003c42:	4298      	cmp	r0, r3
 8003c44:	d9f1      	bls.n	8003c2a <HAL_RCC_ClockConfig+0xa2>
        return HAL_TIMEOUT;
 8003c46:	2003      	movs	r0, #3
 8003c48:	e7a4      	b.n	8003b94 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003c4a:	2a02      	cmp	r2, #2
 8003c4c:	d103      	bne.n	8003c56 <HAL_RCC_ClockConfig+0xce>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003c4e:	6833      	ldr	r3, [r6, #0]
 8003c50:	019b      	lsls	r3, r3, #6
 8003c52:	d4e2      	bmi.n	8003c1a <HAL_RCC_ClockConfig+0x92>
 8003c54:	e79d      	b.n	8003b92 <HAL_RCC_ClockConfig+0xa>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI48)
 8003c56:	2a03      	cmp	r2, #3
 8003c58:	d103      	bne.n	8003c62 <HAL_RCC_ClockConfig+0xda>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == RESET)
 8003c5a:	6b73      	ldr	r3, [r6, #52]	; 0x34
 8003c5c:	03db      	lsls	r3, r3, #15
 8003c5e:	d4dc      	bmi.n	8003c1a <HAL_RCC_ClockConfig+0x92>
 8003c60:	e797      	b.n	8003b92 <HAL_RCC_ClockConfig+0xa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c62:	6833      	ldr	r3, [r6, #0]
 8003c64:	079b      	lsls	r3, r3, #30
 8003c66:	d4d8      	bmi.n	8003c1a <HAL_RCC_ClockConfig+0x92>
 8003c68:	e793      	b.n	8003b92 <HAL_RCC_ClockConfig+0xa>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c6a:	6822      	ldr	r2, [r4, #0]
 8003c6c:	439a      	bics	r2, r3
 8003c6e:	6022      	str	r2, [r4, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c70:	6822      	ldr	r2, [r4, #0]
 8003c72:	421a      	tst	r2, r3
 8003c74:	d09f      	beq.n	8003bb6 <HAL_RCC_ClockConfig+0x2e>
 8003c76:	e78c      	b.n	8003b92 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8003c78:	6863      	ldr	r3, [r4, #4]
 8003c7a:	4a08      	ldr	r2, [pc, #32]	; (8003c9c <HAL_RCC_ClockConfig+0x114>)
 8003c7c:	4013      	ands	r3, r2
 8003c7e:	68ea      	ldr	r2, [r5, #12]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	6063      	str	r3, [r4, #4]
 8003c84:	e79b      	b.n	8003bbe <HAL_RCC_ClockConfig+0x36>
 8003c86:	46c0      	nop			; (mov r8, r8)
 8003c88:	40022000 	.word	0x40022000
 8003c8c:	40021000 	.word	0x40021000
 8003c90:	080071bf 	.word	0x080071bf
 8003c94:	20000000 	.word	0x20000000
 8003c98:	00001388 	.word	0x00001388
 8003c9c:	fffff8ff 	.word	0xfffff8ff

08003ca0 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE) >> RCC_CFGR_PPRE_BITNUMBER]);
 8003ca0:	4b04      	ldr	r3, [pc, #16]	; (8003cb4 <HAL_RCC_GetPCLK1Freq+0x14>)
 8003ca2:	4a05      	ldr	r2, [pc, #20]	; (8003cb8 <HAL_RCC_GetPCLK1Freq+0x18>)
 8003ca4:	685b      	ldr	r3, [r3, #4]
 8003ca6:	055b      	lsls	r3, r3, #21
 8003ca8:	0f5b      	lsrs	r3, r3, #29
 8003caa:	5cd3      	ldrb	r3, [r2, r3]
 8003cac:	4a03      	ldr	r2, [pc, #12]	; (8003cbc <HAL_RCC_GetPCLK1Freq+0x1c>)
 8003cae:	6810      	ldr	r0, [r2, #0]
 8003cb0:	40d8      	lsrs	r0, r3
}    
 8003cb2:	4770      	bx	lr
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	080071cf 	.word	0x080071cf
 8003cbc:	20000000 	.word	0x20000000

08003cc0 <HAL_RCC_GetClockConfig>:
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003cc0:	2307      	movs	r3, #7
{
 8003cc2:	b510      	push	{r4, lr}
  
  /* Get the SYSCLK configuration --------------------------------------------*/ 
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cc4:	2403      	movs	r4, #3
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8003cc6:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003cc8:	4b09      	ldr	r3, [pc, #36]	; (8003cf0 <HAL_RCC_GetClockConfig+0x30>)
 8003cca:	685a      	ldr	r2, [r3, #4]
 8003ccc:	4022      	ands	r2, r4
 8003cce:	6042      	str	r2, [r0, #4]
  
  /* Get the HCLK configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE); 
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	34ed      	adds	r4, #237	; 0xed
 8003cd4:	4022      	ands	r2, r4
 8003cd6:	6082      	str	r2, [r0, #8]
  
  /* Get the APB1 configuration ----------------------------------------------*/ 
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003cd8:	22e0      	movs	r2, #224	; 0xe0
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	00d2      	lsls	r2, r2, #3
 8003cde:	4013      	ands	r3, r2
  /* Get the Flash Wait State (Latency) configuration ------------------------*/   
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003ce0:	2201      	movs	r2, #1
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);   
 8003ce2:	60c3      	str	r3, [r0, #12]
  *pFLatency = __HAL_FLASH_GET_LATENCY(); 
 8003ce4:	4b03      	ldr	r3, [pc, #12]	; (8003cf4 <HAL_RCC_GetClockConfig+0x34>)
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	4013      	ands	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
}
 8003cec:	bd10      	pop	{r4, pc}
 8003cee:	46c0      	nop			; (mov r8, r8)
 8003cf0:	40021000 	.word	0x40021000
 8003cf4:	40022000 	.word	0x40022000

08003cf8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003cf8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003cfa:	6803      	ldr	r3, [r0, #0]
{
 8003cfc:	0005      	movs	r5, r0
 8003cfe:	b085      	sub	sp, #20
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003d00:	03db      	lsls	r3, r3, #15
 8003d02:	d52a      	bpl.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x62>
    FlagStatus       pwrclkchanged = RESET;

    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d04:	2280      	movs	r2, #128	; 0x80
    FlagStatus       pwrclkchanged = RESET;
 8003d06:	2100      	movs	r1, #0
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d08:	4c41      	ldr	r4, [pc, #260]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003d0a:	0552      	lsls	r2, r2, #21
 8003d0c:	69e3      	ldr	r3, [r4, #28]
    FlagStatus       pwrclkchanged = RESET;
 8003d0e:	9100      	str	r1, [sp, #0]
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d10:	4213      	tst	r3, r2
 8003d12:	d108      	bne.n	8003d26 <HAL_RCCEx_PeriphCLKConfig+0x2e>
    {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003d14:	69e3      	ldr	r3, [r4, #28]
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61e3      	str	r3, [r4, #28]
 8003d1a:	69e3      	ldr	r3, [r4, #28]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	9303      	str	r3, [sp, #12]
 8003d20:	9b03      	ldr	r3, [sp, #12]
      pwrclkchanged = SET;
 8003d22:	2301      	movs	r3, #1
 8003d24:	9300      	str	r3, [sp, #0]
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003d26:	2780      	movs	r7, #128	; 0x80
 8003d28:	4e3a      	ldr	r6, [pc, #232]	; (8003e14 <HAL_RCCEx_PeriphCLKConfig+0x11c>)
 8003d2a:	007f      	lsls	r7, r7, #1
 8003d2c:	6833      	ldr	r3, [r6, #0]
 8003d2e:	423b      	tst	r3, r7
 8003d30:	d03a      	beq.n	8003da8 <HAL_RCCEx_PeriphCLKConfig+0xb0>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003d32:	6a22      	ldr	r2, [r4, #32]
 8003d34:	23c0      	movs	r3, #192	; 0xc0
 8003d36:	0011      	movs	r1, r2
 8003d38:	009b      	lsls	r3, r3, #2
 8003d3a:	4e37      	ldr	r6, [pc, #220]	; (8003e18 <HAL_RCCEx_PeriphCLKConfig+0x120>)
 8003d3c:	4019      	ands	r1, r3
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003d3e:	421a      	tst	r2, r3
 8003d40:	d144      	bne.n	8003dcc <HAL_RCCEx_PeriphCLKConfig+0xd4>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d42:	6a23      	ldr	r3, [r4, #32]
 8003d44:	401e      	ands	r6, r3
 8003d46:	686b      	ldr	r3, [r5, #4]
 8003d48:	431e      	orrs	r6, r3

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d4a:	9b00      	ldr	r3, [sp, #0]
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003d4c:	6226      	str	r6, [r4, #32]
    if(pwrclkchanged == SET)
 8003d4e:	2b01      	cmp	r3, #1
 8003d50:	d103      	bne.n	8003d5a <HAL_RCCEx_PeriphCLKConfig+0x62>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d52:	69e3      	ldr	r3, [r4, #28]
 8003d54:	4a31      	ldr	r2, [pc, #196]	; (8003e1c <HAL_RCCEx_PeriphCLKConfig+0x124>)
 8003d56:	4013      	ands	r3, r2
 8003d58:	61e3      	str	r3, [r4, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003d5a:	682a      	ldr	r2, [r5, #0]
 8003d5c:	07d3      	lsls	r3, r2, #31
 8003d5e:	d506      	bpl.n	8003d6e <HAL_RCCEx_PeriphCLKConfig+0x76>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003d60:	2003      	movs	r0, #3
 8003d62:	492b      	ldr	r1, [pc, #172]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003d64:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003d66:	4383      	bics	r3, r0
 8003d68:	68a8      	ldr	r0, [r5, #8]
 8003d6a:	4303      	orrs	r3, r0
 8003d6c:	630b      	str	r3, [r1, #48]	; 0x30
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
  }
#endif /* STM32F091xC || STM32F098xx */  

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003d6e:	0693      	lsls	r3, r2, #26
 8003d70:	d506      	bpl.n	8003d80 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003d72:	2010      	movs	r0, #16
 8003d74:	4926      	ldr	r1, [pc, #152]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003d76:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003d78:	4383      	bics	r3, r0
 8003d7a:	68e8      	ldr	r0, [r5, #12]
 8003d7c:	4303      	orrs	r3, r0
 8003d7e:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(STM32F042x6) || defined(STM32F048xx) || defined(STM32F072xB) || defined(STM32F078xx) || defined(STM32F070xB) || defined(STM32F070x6)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003d80:	0393      	lsls	r3, r2, #14
 8003d82:	d506      	bpl.n	8003d92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003d84:	2080      	movs	r0, #128	; 0x80
 8003d86:	4922      	ldr	r1, [pc, #136]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003d88:	6b0b      	ldr	r3, [r1, #48]	; 0x30
 8003d8a:	4383      	bics	r3, r0
 8003d8c:	6968      	ldr	r0, [r5, #20]
 8003d8e:	4303      	orrs	r3, r0
 8003d90:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F042x6 || STM32F048xx ||                */
       /* STM32F051x8 || STM32F058xx ||                */
       /* STM32F071xB || STM32F072xB || STM32F078xx || */
       /* STM32F091xC || STM32F098xx */
  
  return HAL_OK;
 8003d92:	2000      	movs	r0, #0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003d94:	0553      	lsls	r3, r2, #21
 8003d96:	d517      	bpl.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003d98:	2140      	movs	r1, #64	; 0x40
 8003d9a:	4a1d      	ldr	r2, [pc, #116]	; (8003e10 <HAL_RCCEx_PeriphCLKConfig+0x118>)
 8003d9c:	6b13      	ldr	r3, [r2, #48]	; 0x30
 8003d9e:	438b      	bics	r3, r1
 8003da0:	6929      	ldr	r1, [r5, #16]
 8003da2:	430b      	orrs	r3, r1
 8003da4:	6313      	str	r3, [r2, #48]	; 0x30
 8003da6:	e00f      	b.n	8003dc8 <HAL_RCCEx_PeriphCLKConfig+0xd0>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003da8:	6833      	ldr	r3, [r6, #0]
 8003daa:	433b      	orrs	r3, r7
 8003dac:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8003dae:	f7fe f8ff 	bl	8001fb0 <HAL_GetTick>
 8003db2:	9001      	str	r0, [sp, #4]
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db4:	6833      	ldr	r3, [r6, #0]
 8003db6:	423b      	tst	r3, r7
 8003db8:	d1bb      	bne.n	8003d32 <HAL_RCCEx_PeriphCLKConfig+0x3a>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dba:	f7fe f8f9 	bl	8001fb0 <HAL_GetTick>
 8003dbe:	9b01      	ldr	r3, [sp, #4]
 8003dc0:	1ac0      	subs	r0, r0, r3
 8003dc2:	2864      	cmp	r0, #100	; 0x64
 8003dc4:	d9f6      	bls.n	8003db4 <HAL_RCCEx_PeriphCLKConfig+0xbc>
          return HAL_TIMEOUT;
 8003dc6:	2003      	movs	r0, #3
}
 8003dc8:	b005      	add	sp, #20
 8003dca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003dcc:	686a      	ldr	r2, [r5, #4]
 8003dce:	4013      	ands	r3, r2
 8003dd0:	428b      	cmp	r3, r1
 8003dd2:	d0b6      	beq.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dd4:	2380      	movs	r3, #128	; 0x80
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dd6:	6a22      	ldr	r2, [r4, #32]
      __HAL_RCC_BACKUPRESET_FORCE();
 8003dd8:	6a20      	ldr	r0, [r4, #32]
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003dda:	0011      	movs	r1, r2
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ddc:	025b      	lsls	r3, r3, #9
 8003dde:	4303      	orrs	r3, r0
 8003de0:	6223      	str	r3, [r4, #32]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003de2:	6a23      	ldr	r3, [r4, #32]
 8003de4:	480e      	ldr	r0, [pc, #56]	; (8003e20 <HAL_RCCEx_PeriphCLKConfig+0x128>)
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003de6:	4031      	ands	r1, r6
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003de8:	4003      	ands	r3, r0
 8003dea:	6223      	str	r3, [r4, #32]
      RCC->BDCR = temp_reg;
 8003dec:	6221      	str	r1, [r4, #32]
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8003dee:	07d3      	lsls	r3, r2, #31
 8003df0:	d5a7      	bpl.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
        tickstart = HAL_GetTick();
 8003df2:	f7fe f8dd 	bl	8001fb0 <HAL_GetTick>
 8003df6:	0007      	movs	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003df8:	2202      	movs	r2, #2
 8003dfa:	6a23      	ldr	r3, [r4, #32]
 8003dfc:	4213      	tst	r3, r2
 8003dfe:	d1a0      	bne.n	8003d42 <HAL_RCCEx_PeriphCLKConfig+0x4a>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003e00:	f7fe f8d6 	bl	8001fb0 <HAL_GetTick>
 8003e04:	4b07      	ldr	r3, [pc, #28]	; (8003e24 <HAL_RCCEx_PeriphCLKConfig+0x12c>)
 8003e06:	1bc0      	subs	r0, r0, r7
 8003e08:	4298      	cmp	r0, r3
 8003e0a:	d9f5      	bls.n	8003df8 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003e0c:	e7db      	b.n	8003dc6 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003e0e:	46c0      	nop			; (mov r8, r8)
 8003e10:	40021000 	.word	0x40021000
 8003e14:	40007000 	.word	0x40007000
 8003e18:	fffffcff 	.word	0xfffffcff
 8003e1c:	efffffff 	.word	0xefffffff
 8003e20:	fffeffff 	.word	0xfffeffff
 8003e24:	00001388 	.word	0x00001388

08003e28 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8003e28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e2a:	000e      	movs	r6, r1
 8003e2c:	b085      	sub	sp, #20
 8003e2e:	0015      	movs	r5, r2
 8003e30:	0004      	movs	r4, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003e32:	f7fe f8bd 	bl	8001fb0 <HAL_GetTick>
 8003e36:	19ad      	adds	r5, r5, r6
 8003e38:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8003e3a:	f7fe f8b9 	bl	8001fb0 <HAL_GetTick>

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e3e:	2780      	movs	r7, #128	; 0x80
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e40:	4b25      	ldr	r3, [pc, #148]	; (8003ed8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb0>)
  tmp_tickstart = HAL_GetTick();
 8003e42:	9001      	str	r0, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	015b      	lsls	r3, r3, #5
 8003e48:	0d1b      	lsrs	r3, r3, #20
 8003e4a:	436b      	muls	r3, r5
 8003e4c:	9303      	str	r3, [sp, #12]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003e4e:	6822      	ldr	r2, [r4, #0]
 8003e50:	6893      	ldr	r3, [r2, #8]
 8003e52:	0018      	movs	r0, r3
 8003e54:	4038      	ands	r0, r7
 8003e56:	423b      	tst	r3, r7
 8003e58:	d032      	beq.n	8003ec0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003e5a:	1c73      	adds	r3, r6, #1
 8003e5c:	d0f8      	beq.n	8003e50 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003e5e:	f7fe f8a7 	bl	8001fb0 <HAL_GetTick>
 8003e62:	9b01      	ldr	r3, [sp, #4]
 8003e64:	1ac0      	subs	r0, r0, r3
 8003e66:	42a8      	cmp	r0, r5
 8003e68:	d32c      	bcc.n	8003ec4 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x9c>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003e6a:	21e0      	movs	r1, #224	; 0xe0
 8003e6c:	6823      	ldr	r3, [r4, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	438a      	bics	r2, r1
 8003e72:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e74:	2282      	movs	r2, #130	; 0x82
 8003e76:	6861      	ldr	r1, [r4, #4]
 8003e78:	0052      	lsls	r2, r2, #1
 8003e7a:	4291      	cmp	r1, r2
 8003e7c:	d10c      	bne.n	8003e98 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
 8003e7e:	2180      	movs	r1, #128	; 0x80
 8003e80:	68a2      	ldr	r2, [r4, #8]
 8003e82:	0209      	lsls	r1, r1, #8
 8003e84:	428a      	cmp	r2, r1
 8003e86:	d003      	beq.n	8003e90 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x68>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003e88:	2180      	movs	r1, #128	; 0x80
 8003e8a:	00c9      	lsls	r1, r1, #3
 8003e8c:	428a      	cmp	r2, r1
 8003e8e:	d103      	bne.n	8003e98 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x70>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003e90:	2140      	movs	r1, #64	; 0x40
 8003e92:	681a      	ldr	r2, [r3, #0]
 8003e94:	438a      	bics	r2, r1
 8003e96:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003e98:	2180      	movs	r1, #128	; 0x80
 8003e9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003e9c:	0189      	lsls	r1, r1, #6
 8003e9e:	428a      	cmp	r2, r1
 8003ea0:	d106      	bne.n	8003eb0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x88>
        {
          SPI_RESET_CRC(hspi);
 8003ea2:	6819      	ldr	r1, [r3, #0]
 8003ea4:	480d      	ldr	r0, [pc, #52]	; (8003edc <SPI_WaitFlagStateUntilTimeout.constprop.0+0xb4>)
 8003ea6:	4001      	ands	r1, r0
 8003ea8:	6019      	str	r1, [r3, #0]
 8003eaa:	6819      	ldr	r1, [r3, #0]
 8003eac:	430a      	orrs	r2, r1
 8003eae:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003eb0:	0023      	movs	r3, r4
 8003eb2:	2201      	movs	r2, #1
 8003eb4:	335d      	adds	r3, #93	; 0x5d
 8003eb6:	701a      	strb	r2, [r3, #0]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003eb8:	2300      	movs	r3, #0
 8003eba:	2003      	movs	r0, #3
 8003ebc:	345c      	adds	r4, #92	; 0x5c
 8003ebe:	7023      	strb	r3, [r4, #0]
      count--;
    }
  }

  return HAL_OK;
}
 8003ec0:	b005      	add	sp, #20
 8003ec2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8003ec4:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8003ec6:	1e5a      	subs	r2, r3, #1
 8003ec8:	4193      	sbcs	r3, r2
 8003eca:	425b      	negs	r3, r3
 8003ecc:	401d      	ands	r5, r3
      count--;
 8003ece:	9b03      	ldr	r3, [sp, #12]
 8003ed0:	3b01      	subs	r3, #1
 8003ed2:	9303      	str	r3, [sp, #12]
 8003ed4:	e7bb      	b.n	8003e4e <SPI_WaitFlagStateUntilTimeout.constprop.0+0x26>
 8003ed6:	46c0      	nop			; (mov r8, r8)
 8003ed8:	20000000 	.word	0x20000000
 8003edc:	ffffdfff 	.word	0xffffdfff

08003ee0 <SPI_WaitFifoStateUntilTimeout.constprop.0>:
  * @param  State Fifo state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003ee0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003ee2:	0017      	movs	r7, r2
{
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  * ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003ee4:	2200      	movs	r2, #0
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003ee6:	b085      	sub	sp, #20
 8003ee8:	001d      	movs	r5, r3
  __IO uint8_t  tmpreg8 = 0;
 8003eea:	ab02      	add	r3, sp, #8
 8003eec:	70da      	strb	r2, [r3, #3]
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
 8003eee:	0004      	movs	r4, r0
 8003ef0:	000e      	movs	r6, r1

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003ef2:	f7fe f85d 	bl	8001fb0 <HAL_GetTick>
 8003ef6:	19ed      	adds	r5, r5, r7
 8003ef8:	1a2d      	subs	r5, r5, r0
  tmp_tickstart = HAL_GetTick();
 8003efa:	f7fe f859 	bl	8001fb0 <HAL_GetTick>

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003efe:	2223      	movs	r2, #35	; 0x23
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f00:	6823      	ldr	r3, [r4, #0]
  tmp_tickstart = HAL_GetTick();
 8003f02:	9000      	str	r0, [sp, #0]
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003f04:	9301      	str	r3, [sp, #4]
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003f06:	4b2a      	ldr	r3, [pc, #168]	; (8003fb0 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd0>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4353      	muls	r3, r2
 8003f0c:	0d1b      	lsrs	r3, r3, #20
 8003f0e:	436b      	muls	r3, r5
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }      
      count--;
 8003f10:	9303      	str	r3, [sp, #12]
  while ((hspi->Instance->SR & Fifo) != State)
 8003f12:	6821      	ldr	r1, [r4, #0]
      tmpreg8 = *ptmpreg8;
 8003f14:	ab02      	add	r3, sp, #8
 8003f16:	1cda      	adds	r2, r3, #3
  while ((hspi->Instance->SR & Fifo) != State)
 8003f18:	688b      	ldr	r3, [r1, #8]
 8003f1a:	0018      	movs	r0, r3
 8003f1c:	4030      	ands	r0, r6
 8003f1e:	4233      	tst	r3, r6
 8003f20:	d03b      	beq.n	8003f9a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xba>
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8003f22:	23c0      	movs	r3, #192	; 0xc0
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	429e      	cmp	r6, r3
 8003f28:	d104      	bne.n	8003f34 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x54>
      tmpreg8 = *ptmpreg8;
 8003f2a:	9b01      	ldr	r3, [sp, #4]
 8003f2c:	7b1b      	ldrb	r3, [r3, #12]
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	7013      	strb	r3, [r2, #0]
      UNUSED(tmpreg8);
 8003f32:	7813      	ldrb	r3, [r2, #0]
    if (Timeout != HAL_MAX_DELAY)
 8003f34:	1c7b      	adds	r3, r7, #1
 8003f36:	d0ef      	beq.n	8003f18 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x38>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f38:	f7fe f83a 	bl	8001fb0 <HAL_GetTick>
 8003f3c:	9b00      	ldr	r3, [sp, #0]
 8003f3e:	1ac0      	subs	r0, r0, r3
 8003f40:	42a8      	cmp	r0, r5
 8003f42:	d32c      	bcc.n	8003f9e <SPI_WaitFifoStateUntilTimeout.constprop.0+0xbe>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f44:	21e0      	movs	r1, #224	; 0xe0
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	685a      	ldr	r2, [r3, #4]
 8003f4a:	438a      	bics	r2, r1
 8003f4c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f4e:	2282      	movs	r2, #130	; 0x82
 8003f50:	6861      	ldr	r1, [r4, #4]
 8003f52:	0052      	lsls	r2, r2, #1
 8003f54:	4291      	cmp	r1, r2
 8003f56:	d10c      	bne.n	8003f72 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
 8003f58:	2180      	movs	r1, #128	; 0x80
 8003f5a:	68a2      	ldr	r2, [r4, #8]
 8003f5c:	0209      	lsls	r1, r1, #8
 8003f5e:	428a      	cmp	r2, r1
 8003f60:	d003      	beq.n	8003f6a <SPI_WaitFifoStateUntilTimeout.constprop.0+0x8a>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f62:	2180      	movs	r1, #128	; 0x80
 8003f64:	00c9      	lsls	r1, r1, #3
 8003f66:	428a      	cmp	r2, r1
 8003f68:	d103      	bne.n	8003f72 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x92>
          __HAL_SPI_DISABLE(hspi);
 8003f6a:	2140      	movs	r1, #64	; 0x40
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	438a      	bics	r2, r1
 8003f70:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003f72:	2180      	movs	r1, #128	; 0x80
 8003f74:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8003f76:	0189      	lsls	r1, r1, #6
 8003f78:	428a      	cmp	r2, r1
 8003f7a:	d106      	bne.n	8003f8a <SPI_WaitFifoStateUntilTimeout.constprop.0+0xaa>
          SPI_RESET_CRC(hspi);
 8003f7c:	6819      	ldr	r1, [r3, #0]
 8003f7e:	480d      	ldr	r0, [pc, #52]	; (8003fb4 <SPI_WaitFifoStateUntilTimeout.constprop.0+0xd4>)
 8003f80:	4001      	ands	r1, r0
 8003f82:	6019      	str	r1, [r3, #0]
 8003f84:	6819      	ldr	r1, [r3, #0]
 8003f86:	430a      	orrs	r2, r1
 8003f88:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8003f8a:	0023      	movs	r3, r4
 8003f8c:	2201      	movs	r2, #1
 8003f8e:	335d      	adds	r3, #93	; 0x5d
 8003f90:	701a      	strb	r2, [r3, #0]
        __HAL_UNLOCK(hspi);
 8003f92:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8003f94:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8003f96:	345c      	adds	r4, #92	; 0x5c
 8003f98:	7023      	strb	r3, [r4, #0]
    }
  }

  return HAL_OK;
}
 8003f9a:	b005      	add	sp, #20
 8003f9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if(count == 0U)
 8003f9e:	9b03      	ldr	r3, [sp, #12]
        tmp_timeout = 0U;
 8003fa0:	1e5a      	subs	r2, r3, #1
 8003fa2:	4193      	sbcs	r3, r2
 8003fa4:	425b      	negs	r3, r3
 8003fa6:	401d      	ands	r5, r3
      count--;
 8003fa8:	9b03      	ldr	r3, [sp, #12]
 8003faa:	3b01      	subs	r3, #1
 8003fac:	e7b0      	b.n	8003f10 <SPI_WaitFifoStateUntilTimeout.constprop.0+0x30>
 8003fae:	46c0      	nop			; (mov r8, r8)
 8003fb0:	20000000 	.word	0x20000000
 8003fb4:	ffffdfff 	.word	0xffffdfff

08003fb8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8003fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fba:	2382      	movs	r3, #130	; 0x82
{
 8003fbc:	0017      	movs	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fbe:	6842      	ldr	r2, [r0, #4]
{
 8003fc0:	0004      	movs	r4, r0
 8003fc2:	000e      	movs	r6, r1
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	429a      	cmp	r2, r3
 8003fc8:	d10d      	bne.n	8003fe6 <SPI_EndRxTransaction+0x2e>
 8003fca:	2280      	movs	r2, #128	; 0x80
 8003fcc:	6883      	ldr	r3, [r0, #8]
 8003fce:	0212      	lsls	r2, r2, #8
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d003      	beq.n	8003fdc <SPI_EndRxTransaction+0x24>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003fd4:	2280      	movs	r2, #128	; 0x80
 8003fd6:	00d2      	lsls	r2, r2, #3
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d104      	bne.n	8003fe6 <SPI_EndRxTransaction+0x2e>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003fdc:	2140      	movs	r1, #64	; 0x40
 8003fde:	6822      	ldr	r2, [r4, #0]
 8003fe0:	6813      	ldr	r3, [r2, #0]
 8003fe2:	438b      	bics	r3, r1
 8003fe4:	6013      	str	r3, [r2, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003fe6:	003a      	movs	r2, r7
 8003fe8:	0031      	movs	r1, r6
 8003fea:	0020      	movs	r0, r4
 8003fec:	f7ff ff1c 	bl	8003e28 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8003ff0:	1e05      	subs	r5, r0, #0
 8003ff2:	d005      	beq.n	8004000 <SPI_EndRxTransaction+0x48>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ff4:	2320      	movs	r3, #32
 8003ff6:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ff8:	2503      	movs	r5, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8003ffe:	e016      	b.n	800402e <SPI_EndRxTransaction+0x76>
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004000:	2382      	movs	r3, #130	; 0x82
 8004002:	6862      	ldr	r2, [r4, #4]
 8004004:	005b      	lsls	r3, r3, #1
 8004006:	429a      	cmp	r2, r3
 8004008:	d111      	bne.n	800402e <SPI_EndRxTransaction+0x76>
 800400a:	2280      	movs	r2, #128	; 0x80
 800400c:	68a3      	ldr	r3, [r4, #8]
 800400e:	0212      	lsls	r2, r2, #8
 8004010:	4293      	cmp	r3, r2
 8004012:	d003      	beq.n	800401c <SPI_EndRxTransaction+0x64>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004014:	2280      	movs	r2, #128	; 0x80
 8004016:	00d2      	lsls	r2, r2, #3
 8004018:	4293      	cmp	r3, r2
 800401a:	d108      	bne.n	800402e <SPI_EndRxTransaction+0x76>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800401c:	21c0      	movs	r1, #192	; 0xc0
 800401e:	003b      	movs	r3, r7
 8004020:	0032      	movs	r2, r6
 8004022:	0020      	movs	r0, r4
 8004024:	00c9      	lsls	r1, r1, #3
 8004026:	f7ff ff5b 	bl	8003ee0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 800402a:	2800      	cmp	r0, #0
 800402c:	d1e2      	bne.n	8003ff4 <SPI_EndRxTransaction+0x3c>
}
 800402e:	0028      	movs	r0, r5
 8004030:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004032 <SPI_EndRxTxTransaction>:
{
 8004032:	b570      	push	{r4, r5, r6, lr}
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004034:	0013      	movs	r3, r2
{
 8004036:	000d      	movs	r5, r1
 8004038:	0016      	movs	r6, r2
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800403a:	000a      	movs	r2, r1
 800403c:	21c0      	movs	r1, #192	; 0xc0
 800403e:	0149      	lsls	r1, r1, #5
{
 8004040:	0004      	movs	r4, r0
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004042:	f7ff ff4d 	bl	8003ee0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8004046:	2800      	cmp	r0, #0
 8004048:	d005      	beq.n	8004056 <SPI_EndRxTxTransaction+0x24>
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800404a:	2320      	movs	r3, #32
 800404c:	6e22      	ldr	r2, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 800404e:	2003      	movs	r0, #3
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004050:	4313      	orrs	r3, r2
 8004052:	6623      	str	r3, [r4, #96]	; 0x60
    return HAL_TIMEOUT;
 8004054:	e00f      	b.n	8004076 <SPI_EndRxTxTransaction+0x44>
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004056:	0032      	movs	r2, r6
 8004058:	0029      	movs	r1, r5
 800405a:	0020      	movs	r0, r4
 800405c:	f7ff fee4 	bl	8003e28 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8004060:	2800      	cmp	r0, #0
 8004062:	d1f2      	bne.n	800404a <SPI_EndRxTxTransaction+0x18>
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8004064:	21c0      	movs	r1, #192	; 0xc0
 8004066:	0033      	movs	r3, r6
 8004068:	002a      	movs	r2, r5
 800406a:	0020      	movs	r0, r4
 800406c:	00c9      	lsls	r1, r1, #3
 800406e:	f7ff ff37 	bl	8003ee0 <SPI_WaitFifoStateUntilTimeout.constprop.0>
 8004072:	2800      	cmp	r0, #0
 8004074:	d1e9      	bne.n	800404a <SPI_EndRxTxTransaction+0x18>
  }

  return HAL_OK;
}
 8004076:	bd70      	pop	{r4, r5, r6, pc}

08004078 <HAL_SPI_Init>:
{
 8004078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800407a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800407c:	2001      	movs	r0, #1
  if (hspi == NULL)
 800407e:	2c00      	cmp	r4, #0
 8004080:	d067      	beq.n	8004152 <HAL_SPI_Init+0xda>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004082:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004084:	2b00      	cmp	r3, #0
 8004086:	d165      	bne.n	8004154 <HAL_SPI_Init+0xdc>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004088:	2282      	movs	r2, #130	; 0x82
 800408a:	6861      	ldr	r1, [r4, #4]
 800408c:	0052      	lsls	r2, r2, #1
 800408e:	4291      	cmp	r1, r2
 8004090:	d000      	beq.n	8004094 <HAL_SPI_Init+0x1c>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004092:	61e3      	str	r3, [r4, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004094:	2300      	movs	r3, #0
  if (hspi->State == HAL_SPI_STATE_RESET)
 8004096:	0025      	movs	r5, r4
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004098:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 800409a:	355d      	adds	r5, #93	; 0x5d
 800409c:	782b      	ldrb	r3, [r5, #0]
 800409e:	b2da      	uxtb	r2, r3
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d105      	bne.n	80040b0 <HAL_SPI_Init+0x38>
    hspi->Lock = HAL_UNLOCKED;
 80040a4:	0023      	movs	r3, r4
 80040a6:	335c      	adds	r3, #92	; 0x5c
    HAL_SPI_MspInit(hspi);
 80040a8:	0020      	movs	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 80040aa:	701a      	strb	r2, [r3, #0]
    HAL_SPI_MspInit(hspi);
 80040ac:	f7fd fe66 	bl	8001d7c <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 80040b0:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 80040b2:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 80040b4:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 80040b6:	6822      	ldr	r2, [r4, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040b8:	68e5      	ldr	r5, [r4, #12]
  __HAL_SPI_DISABLE(hspi);
 80040ba:	6813      	ldr	r3, [r2, #0]
 80040bc:	438b      	bics	r3, r1
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040be:	21e0      	movs	r1, #224	; 0xe0
  __HAL_SPI_DISABLE(hspi);
 80040c0:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80040c2:	00c9      	lsls	r1, r1, #3
 80040c4:	2300      	movs	r3, #0
 80040c6:	428d      	cmp	r5, r1
 80040c8:	d848      	bhi.n	800415c <HAL_SPI_Init+0xe4>
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80040ca:	2080      	movs	r0, #128	; 0x80
 80040cc:	0140      	lsls	r0, r0, #5
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80040ce:	428d      	cmp	r5, r1
 80040d0:	d000      	beq.n	80040d4 <HAL_SPI_Init+0x5c>
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80040d2:	62a3      	str	r3, [r4, #40]	; 0x28
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80040d4:	2382      	movs	r3, #130	; 0x82
 80040d6:	6866      	ldr	r6, [r4, #4]
 80040d8:	005b      	lsls	r3, r3, #1
 80040da:	4033      	ands	r3, r6
 80040dc:	2684      	movs	r6, #132	; 0x84
 80040de:	68a7      	ldr	r7, [r4, #8]
 80040e0:	0236      	lsls	r6, r6, #8
 80040e2:	403e      	ands	r6, r7
 80040e4:	4333      	orrs	r3, r6
 80040e6:	2602      	movs	r6, #2
 80040e8:	6927      	ldr	r7, [r4, #16]
 80040ea:	69a1      	ldr	r1, [r4, #24]
 80040ec:	403e      	ands	r6, r7
 80040ee:	4333      	orrs	r3, r6
 80040f0:	2601      	movs	r6, #1
 80040f2:	6967      	ldr	r7, [r4, #20]
 80040f4:	46b4      	mov	ip, r6
 80040f6:	4037      	ands	r7, r6
 80040f8:	433b      	orrs	r3, r7
 80040fa:	2780      	movs	r7, #128	; 0x80
 80040fc:	00bf      	lsls	r7, r7, #2
 80040fe:	400f      	ands	r7, r1
 8004100:	433b      	orrs	r3, r7
 8004102:	2738      	movs	r7, #56	; 0x38
 8004104:	69e6      	ldr	r6, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004106:	0c09      	lsrs	r1, r1, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004108:	4037      	ands	r7, r6
 800410a:	433b      	orrs	r3, r7
 800410c:	2780      	movs	r7, #128	; 0x80
 800410e:	6a26      	ldr	r6, [r4, #32]
 8004110:	4037      	ands	r7, r6
 8004112:	433b      	orrs	r3, r7
 8004114:	2780      	movs	r7, #128	; 0x80
 8004116:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004118:	01bf      	lsls	r7, r7, #6
 800411a:	4037      	ands	r7, r6
 800411c:	433b      	orrs	r3, r7
 800411e:	6013      	str	r3, [r2, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004120:	2310      	movs	r3, #16
 8004122:	2708      	movs	r7, #8
 8004124:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8004126:	4033      	ands	r3, r6
 8004128:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800412a:	4037      	ands	r7, r6
 800412c:	433b      	orrs	r3, r7
 800412e:	27f0      	movs	r7, #240	; 0xf0
 8004130:	013f      	lsls	r7, r7, #4
 8004132:	403d      	ands	r5, r7
 8004134:	431d      	orrs	r5, r3
 8004136:	2304      	movs	r3, #4
 8004138:	4019      	ands	r1, r3
 800413a:	4329      	orrs	r1, r5
 800413c:	4308      	orrs	r0, r1
 800413e:	6050      	str	r0, [r2, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004140:	69d3      	ldr	r3, [r2, #28]
 8004142:	4908      	ldr	r1, [pc, #32]	; (8004164 <HAL_SPI_Init+0xec>)
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004144:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004146:	400b      	ands	r3, r1
 8004148:	61d3      	str	r3, [r2, #28]
  hspi->State     = HAL_SPI_STATE_READY;
 800414a:	4663      	mov	r3, ip
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800414c:	6620      	str	r0, [r4, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800414e:	345d      	adds	r4, #93	; 0x5d
 8004150:	7023      	strb	r3, [r4, #0]
}
 8004152:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004154:	2300      	movs	r3, #0
 8004156:	6123      	str	r3, [r4, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004158:	6163      	str	r3, [r4, #20]
 800415a:	e79b      	b.n	8004094 <HAL_SPI_Init+0x1c>
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800415c:	21f0      	movs	r1, #240	; 0xf0
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800415e:	0018      	movs	r0, r3
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004160:	0109      	lsls	r1, r1, #4
 8004162:	e7b4      	b.n	80040ce <HAL_SPI_Init+0x56>
 8004164:	fffff7ff 	.word	0xfffff7ff

08004168 <HAL_SPI_DeInit>:
{
 8004168:	b570      	push	{r4, r5, r6, lr}
 800416a:	0004      	movs	r4, r0
    return HAL_ERROR;
 800416c:	2001      	movs	r0, #1
  if (hspi == NULL)
 800416e:	2c00      	cmp	r4, #0
 8004170:	d010      	beq.n	8004194 <HAL_SPI_DeInit+0x2c>
  hspi->State = HAL_SPI_STATE_BUSY;
 8004172:	0025      	movs	r5, r4
 8004174:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8004176:	2140      	movs	r1, #64	; 0x40
  hspi->State = HAL_SPI_STATE_BUSY;
 8004178:	355d      	adds	r5, #93	; 0x5d
 800417a:	702b      	strb	r3, [r5, #0]
  __HAL_SPI_DISABLE(hspi);
 800417c:	6822      	ldr	r2, [r4, #0]
  HAL_SPI_MspDeInit(hspi);
 800417e:	0020      	movs	r0, r4
  __HAL_SPI_DISABLE(hspi);
 8004180:	6813      	ldr	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8004182:	345c      	adds	r4, #92	; 0x5c
  __HAL_SPI_DISABLE(hspi);
 8004184:	438b      	bics	r3, r1
 8004186:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8004188:	f7fd fe34 	bl	8001df4 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800418c:	2000      	movs	r0, #0
 800418e:	6060      	str	r0, [r4, #4]
  hspi->State = HAL_SPI_STATE_RESET;
 8004190:	7028      	strb	r0, [r5, #0]
  __HAL_UNLOCK(hspi);
 8004192:	7020      	strb	r0, [r4, #0]
}
 8004194:	bd70      	pop	{r4, r5, r6, pc}

08004196 <HAL_SPI_Transmit>:
{
 8004196:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004198:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 800419a:	0003      	movs	r3, r0
{
 800419c:	b085      	sub	sp, #20
  __HAL_LOCK(hspi);
 800419e:	335c      	adds	r3, #92	; 0x5c
 80041a0:	9301      	str	r3, [sp, #4]
 80041a2:	781b      	ldrb	r3, [r3, #0]
{
 80041a4:	0004      	movs	r4, r0
 80041a6:	000d      	movs	r5, r1
 80041a8:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 80041aa:	2002      	movs	r0, #2
 80041ac:	2b01      	cmp	r3, #1
 80041ae:	d100      	bne.n	80041b2 <HAL_SPI_Transmit+0x1c>
 80041b0:	e07d      	b.n	80042ae <HAL_SPI_Transmit+0x118>
 80041b2:	2301      	movs	r3, #1
 80041b4:	9a01      	ldr	r2, [sp, #4]
 80041b6:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 80041b8:	f7fd fefa 	bl	8001fb0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80041bc:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 80041be:	9000      	str	r0, [sp, #0]
  if (hspi->State != HAL_SPI_STATE_READY)
 80041c0:	335d      	adds	r3, #93	; 0x5d
 80041c2:	781a      	ldrb	r2, [r3, #0]
 80041c4:	b2d0      	uxtb	r0, r2
 80041c6:	2a01      	cmp	r2, #1
 80041c8:	d000      	beq.n	80041cc <HAL_SPI_Transmit+0x36>
 80041ca:	e09f      	b.n	800430c <HAL_SPI_Transmit+0x176>
  if ((pData == NULL) || (Size == 0U))
 80041cc:	2d00      	cmp	r5, #0
 80041ce:	d068      	beq.n	80042a2 <HAL_SPI_Transmit+0x10c>
 80041d0:	2f00      	cmp	r7, #0
 80041d2:	d066      	beq.n	80042a2 <HAL_SPI_Transmit+0x10c>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80041d4:	3202      	adds	r2, #2
 80041d6:	701a      	strb	r2, [r3, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041d8:	2300      	movs	r3, #0
  hspi->RxXferSize  = 0U;
 80041da:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80041dc:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80041de:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80041e0:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferSize  = Size;
 80041e2:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80041e4:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->RxXferCount = 0U;
 80041e6:	3202      	adds	r2, #2
  hspi->RxXferSize  = 0U;
 80041e8:	8793      	strh	r3, [r2, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80041ea:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80041ec:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->RxISR       = NULL;
 80041ee:	64e3      	str	r3, [r4, #76]	; 0x4c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80041f0:	2380      	movs	r3, #128	; 0x80
 80041f2:	68a1      	ldr	r1, [r4, #8]
 80041f4:	6822      	ldr	r2, [r4, #0]
 80041f6:	021b      	lsls	r3, r3, #8
 80041f8:	4299      	cmp	r1, r3
 80041fa:	d108      	bne.n	800420e <HAL_SPI_Transmit+0x78>
    __HAL_SPI_DISABLE(hspi);
 80041fc:	2140      	movs	r1, #64	; 0x40
 80041fe:	6813      	ldr	r3, [r2, #0]
 8004200:	438b      	bics	r3, r1
 8004202:	6013      	str	r3, [r2, #0]
    SPI_1LINE_TX(hspi);
 8004204:	2380      	movs	r3, #128	; 0x80
 8004206:	6811      	ldr	r1, [r2, #0]
 8004208:	01db      	lsls	r3, r3, #7
 800420a:	430b      	orrs	r3, r1
 800420c:	6013      	str	r3, [r2, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800420e:	2340      	movs	r3, #64	; 0x40
 8004210:	6811      	ldr	r1, [r2, #0]
 8004212:	4219      	tst	r1, r3
 8004214:	d102      	bne.n	800421c <HAL_SPI_Transmit+0x86>
    __HAL_SPI_ENABLE(hspi);
 8004216:	6811      	ldr	r1, [r2, #0]
 8004218:	430b      	orrs	r3, r1
 800421a:	6013      	str	r3, [r2, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800421c:	21e0      	movs	r1, #224	; 0xe0
 800421e:	68e0      	ldr	r0, [r4, #12]
 8004220:	6863      	ldr	r3, [r4, #4]
 8004222:	00c9      	lsls	r1, r1, #3
 8004224:	4288      	cmp	r0, r1
 8004226:	d944      	bls.n	80042b2 <HAL_SPI_Transmit+0x11c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004228:	2b00      	cmp	r3, #0
 800422a:	d001      	beq.n	8004230 <HAL_SPI_Transmit+0x9a>
 800422c:	2f01      	cmp	r7, #1
 800422e:	d107      	bne.n	8004240 <HAL_SPI_Transmit+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004230:	882b      	ldrh	r3, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004232:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004234:	60d3      	str	r3, [r2, #12]
      hspi->TxXferCount--;
 8004236:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004238:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 800423a:	3b01      	subs	r3, #1
 800423c:	b29b      	uxth	r3, r3
 800423e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004240:	2502      	movs	r5, #2
 8004242:	e00c      	b.n	800425e <HAL_SPI_Transmit+0xc8>
 8004244:	6822      	ldr	r2, [r4, #0]
 8004246:	6893      	ldr	r3, [r2, #8]
 8004248:	422b      	tst	r3, r5
 800424a:	d021      	beq.n	8004290 <HAL_SPI_Transmit+0xfa>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800424c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800424e:	8819      	ldrh	r1, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004250:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004252:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004254:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 8004256:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004258:	3b01      	subs	r3, #1
 800425a:	b29b      	uxth	r3, r3
 800425c:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 800425e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1ef      	bne.n	8004244 <HAL_SPI_Transmit+0xae>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004264:	0031      	movs	r1, r6
 8004266:	0020      	movs	r0, r4
 8004268:	9a00      	ldr	r2, [sp, #0]
 800426a:	f7ff fee2 	bl	8004032 <SPI_EndRxTxTransaction>
 800426e:	2800      	cmp	r0, #0
 8004270:	d149      	bne.n	8004306 <HAL_SPI_Transmit+0x170>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004272:	68a3      	ldr	r3, [r4, #8]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d106      	bne.n	8004286 <HAL_SPI_Transmit+0xf0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004278:	9303      	str	r3, [sp, #12]
 800427a:	6823      	ldr	r3, [r4, #0]
 800427c:	68da      	ldr	r2, [r3, #12]
 800427e:	9203      	str	r2, [sp, #12]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	9303      	str	r3, [sp, #12]
 8004284:	9b03      	ldr	r3, [sp, #12]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004286:	6e20      	ldr	r0, [r4, #96]	; 0x60
 8004288:	1e43      	subs	r3, r0, #1
 800428a:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 800428c:	b2c0      	uxtb	r0, r0
error:
 800428e:	e008      	b.n	80042a2 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004290:	f7fd fe8e 	bl	8001fb0 <HAL_GetTick>
 8004294:	9b00      	ldr	r3, [sp, #0]
 8004296:	1ac0      	subs	r0, r0, r3
 8004298:	42b0      	cmp	r0, r6
 800429a:	d3e0      	bcc.n	800425e <HAL_SPI_Transmit+0xc8>
 800429c:	1c73      	adds	r3, r6, #1
 800429e:	d0de      	beq.n	800425e <HAL_SPI_Transmit+0xc8>
          errorcode = HAL_TIMEOUT;
 80042a0:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80042a2:	2301      	movs	r3, #1
 80042a4:	345d      	adds	r4, #93	; 0x5d
 80042a6:	7023      	strb	r3, [r4, #0]
  __HAL_UNLOCK(hspi);
 80042a8:	2300      	movs	r3, #0
 80042aa:	9a01      	ldr	r2, [sp, #4]
 80042ac:	7013      	strb	r3, [r2, #0]
}
 80042ae:	b005      	add	sp, #20
 80042b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d001      	beq.n	80042ba <HAL_SPI_Transmit+0x124>
 80042b6:	2f01      	cmp	r7, #1
 80042b8:	d108      	bne.n	80042cc <HAL_SPI_Transmit+0x136>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042ba:	782b      	ldrb	r3, [r5, #0]
 80042bc:	7313      	strb	r3, [r2, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80042be:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042c0:	3301      	adds	r3, #1
 80042c2:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80042c4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80042c6:	3b01      	subs	r3, #1
 80042c8:	b29b      	uxth	r3, r3
 80042ca:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80042cc:	2502      	movs	r5, #2
 80042ce:	e00d      	b.n	80042ec <HAL_SPI_Transmit+0x156>
 80042d0:	6823      	ldr	r3, [r4, #0]
 80042d2:	689a      	ldr	r2, [r3, #8]
 80042d4:	422a      	tst	r2, r5
 80042d6:	d00d      	beq.n	80042f4 <HAL_SPI_Transmit+0x15e>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80042d8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80042da:	7812      	ldrb	r2, [r2, #0]
 80042dc:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80042de:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80042e0:	3301      	adds	r3, #1
 80042e2:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80042e4:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80042e6:	3b01      	subs	r3, #1
 80042e8:	b29b      	uxth	r3, r3
 80042ea:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->TxXferCount > 0U)
 80042ec:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d1ee      	bne.n	80042d0 <HAL_SPI_Transmit+0x13a>
 80042f2:	e7b7      	b.n	8004264 <HAL_SPI_Transmit+0xce>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80042f4:	f7fd fe5c 	bl	8001fb0 <HAL_GetTick>
 80042f8:	9b00      	ldr	r3, [sp, #0]
 80042fa:	1ac0      	subs	r0, r0, r3
 80042fc:	42b0      	cmp	r0, r6
 80042fe:	d3f5      	bcc.n	80042ec <HAL_SPI_Transmit+0x156>
 8004300:	1c73      	adds	r3, r6, #1
 8004302:	d0f3      	beq.n	80042ec <HAL_SPI_Transmit+0x156>
 8004304:	e7cc      	b.n	80042a0 <HAL_SPI_Transmit+0x10a>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004306:	2320      	movs	r3, #32
 8004308:	6623      	str	r3, [r4, #96]	; 0x60
 800430a:	e7b2      	b.n	8004272 <HAL_SPI_Transmit+0xdc>
    errorcode = HAL_BUSY;
 800430c:	2002      	movs	r0, #2
 800430e:	e7c8      	b.n	80042a2 <HAL_SPI_Transmit+0x10c>

08004310 <HAL_SPI_TransmitReceive>:
{
 8004310:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004312:	001e      	movs	r6, r3
  __HAL_LOCK(hspi);
 8004314:	0003      	movs	r3, r0
 8004316:	335c      	adds	r3, #92	; 0x5c
{
 8004318:	0017      	movs	r7, r2
  __HAL_LOCK(hspi);
 800431a:	781a      	ldrb	r2, [r3, #0]
{
 800431c:	0004      	movs	r4, r0
 800431e:	000d      	movs	r5, r1
  __HAL_LOCK(hspi);
 8004320:	2002      	movs	r0, #2
 8004322:	2a01      	cmp	r2, #1
 8004324:	d100      	bne.n	8004328 <HAL_SPI_TransmitReceive+0x18>
 8004326:	e0aa      	b.n	800447e <HAL_SPI_TransmitReceive+0x16e>
 8004328:	2201      	movs	r2, #1
 800432a:	701a      	strb	r2, [r3, #0]
  tickstart = HAL_GetTick();
 800432c:	f7fd fe40 	bl	8001fb0 <HAL_GetTick>
  tmp_state           = hspi->State;
 8004330:	0023      	movs	r3, r4
  tickstart = HAL_GetTick();
 8004332:	9001      	str	r0, [sp, #4]
  tmp_state           = hspi->State;
 8004334:	335d      	adds	r3, #93	; 0x5d
 8004336:	781b      	ldrb	r3, [r3, #0]
  tmp_mode            = hspi->Init.Mode;
 8004338:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 800433a:	b2da      	uxtb	r2, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800433c:	2b01      	cmp	r3, #1
 800433e:	d00c      	beq.n	800435a <HAL_SPI_TransmitReceive+0x4a>
 8004340:	2382      	movs	r3, #130	; 0x82
    errorcode = HAL_BUSY;
 8004342:	2002      	movs	r0, #2
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	4299      	cmp	r1, r3
 8004348:	d000      	beq.n	800434c <HAL_SPI_TransmitReceive+0x3c>
 800434a:	e091      	b.n	8004470 <HAL_SPI_TransmitReceive+0x160>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800434c:	68a3      	ldr	r3, [r4, #8]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d000      	beq.n	8004354 <HAL_SPI_TransmitReceive+0x44>
 8004352:	e08d      	b.n	8004470 <HAL_SPI_TransmitReceive+0x160>
 8004354:	2a04      	cmp	r2, #4
 8004356:	d000      	beq.n	800435a <HAL_SPI_TransmitReceive+0x4a>
 8004358:	e08a      	b.n	8004470 <HAL_SPI_TransmitReceive+0x160>
    errorcode = HAL_ERROR;
 800435a:	2001      	movs	r0, #1
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800435c:	2d00      	cmp	r5, #0
 800435e:	d100      	bne.n	8004362 <HAL_SPI_TransmitReceive+0x52>
 8004360:	e086      	b.n	8004470 <HAL_SPI_TransmitReceive+0x160>
 8004362:	2f00      	cmp	r7, #0
 8004364:	d100      	bne.n	8004368 <HAL_SPI_TransmitReceive+0x58>
 8004366:	e083      	b.n	8004470 <HAL_SPI_TransmitReceive+0x160>
 8004368:	2e00      	cmp	r6, #0
 800436a:	d100      	bne.n	800436e <HAL_SPI_TransmitReceive+0x5e>
 800436c:	e080      	b.n	8004470 <HAL_SPI_TransmitReceive+0x160>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800436e:	0023      	movs	r3, r4
 8004370:	335d      	adds	r3, #93	; 0x5d
 8004372:	781a      	ldrb	r2, [r3, #0]
 8004374:	2a04      	cmp	r2, #4
 8004376:	d001      	beq.n	800437c <HAL_SPI_TransmitReceive+0x6c>
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004378:	2205      	movs	r2, #5
 800437a:	701a      	strb	r2, [r3, #0]
  hspi->RxXferCount = Size;
 800437c:	0022      	movs	r2, r4
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800437e:	2300      	movs	r3, #0
  hspi->RxXferCount = Size;
 8004380:	3208      	adds	r2, #8
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004382:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004384:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 8004386:	87d6      	strh	r6, [r2, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004388:	1da2      	adds	r2, r4, #6
 800438a:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800438c:	22e0      	movs	r2, #224	; 0xe0
 800438e:	68e0      	ldr	r0, [r4, #12]
  hspi->RxISR       = NULL;
 8004390:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004392:	6523      	str	r3, [r4, #80]	; 0x50
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004394:	63a5      	str	r5, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8004396:	6823      	ldr	r3, [r4, #0]
 8004398:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800439a:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800439c:	00d2      	lsls	r2, r2, #3
 800439e:	4290      	cmp	r0, r2
 80043a0:	d930      	bls.n	8004404 <HAL_SPI_TransmitReceive+0xf4>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043a2:	685a      	ldr	r2, [r3, #4]
 80043a4:	4f5c      	ldr	r7, [pc, #368]	; (8004518 <HAL_SPI_TransmitReceive+0x208>)
 80043a6:	403a      	ands	r2, r7
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80043a8:	605a      	str	r2, [r3, #4]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80043aa:	2240      	movs	r2, #64	; 0x40
 80043ac:	681f      	ldr	r7, [r3, #0]
 80043ae:	4217      	tst	r7, r2
 80043b0:	d102      	bne.n	80043b8 <HAL_SPI_TransmitReceive+0xa8>
    __HAL_SPI_ENABLE(hspi);
 80043b2:	681f      	ldr	r7, [r3, #0]
 80043b4:	433a      	orrs	r2, r7
 80043b6:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80043b8:	22e0      	movs	r2, #224	; 0xe0
 80043ba:	00d2      	lsls	r2, r2, #3
 80043bc:	4290      	cmp	r0, r2
 80043be:	d95f      	bls.n	8004480 <HAL_SPI_TransmitReceive+0x170>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80043c0:	2900      	cmp	r1, #0
 80043c2:	d001      	beq.n	80043c8 <HAL_SPI_TransmitReceive+0xb8>
 80043c4:	2e01      	cmp	r6, #1
 80043c6:	d107      	bne.n	80043d8 <HAL_SPI_TransmitReceive+0xc8>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043c8:	882a      	ldrh	r2, [r5, #0]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043ca:	3502      	adds	r5, #2
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80043cc:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 80043ce:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80043d0:	63a5      	str	r5, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 80043d2:	3b01      	subs	r3, #1
 80043d4:	b29b      	uxth	r3, r3
 80043d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 80043d8:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80043da:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80043dc:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80043de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d114      	bne.n	800440e <HAL_SPI_TransmitReceive+0xfe>
 80043e4:	0023      	movs	r3, r4
 80043e6:	3308      	adds	r3, #8
 80043e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10f      	bne.n	800440e <HAL_SPI_TransmitReceive+0xfe>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80043ee:	0020      	movs	r0, r4
 80043f0:	9a01      	ldr	r2, [sp, #4]
 80043f2:	9908      	ldr	r1, [sp, #32]
 80043f4:	f7ff fe1d 	bl	8004032 <SPI_EndRxTxTransaction>
 80043f8:	2800      	cmp	r0, #0
 80043fa:	d039      	beq.n	8004470 <HAL_SPI_TransmitReceive+0x160>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80043fc:	2320      	movs	r3, #32
    errorcode = HAL_ERROR;
 80043fe:	2001      	movs	r0, #1
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004400:	6623      	str	r3, [r4, #96]	; 0x60
 8004402:	e035      	b.n	8004470 <HAL_SPI_TransmitReceive+0x160>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004404:	2280      	movs	r2, #128	; 0x80
 8004406:	685f      	ldr	r7, [r3, #4]
 8004408:	0152      	lsls	r2, r2, #5
 800440a:	433a      	orrs	r2, r7
 800440c:	e7cc      	b.n	80043a8 <HAL_SPI_TransmitReceive+0x98>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800440e:	6820      	ldr	r0, [r4, #0]
 8004410:	6883      	ldr	r3, [r0, #8]
 8004412:	423b      	tst	r3, r7
 8004414:	d00e      	beq.n	8004434 <HAL_SPI_TransmitReceive+0x124>
 8004416:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004418:	2b00      	cmp	r3, #0
 800441a:	d00b      	beq.n	8004434 <HAL_SPI_TransmitReceive+0x124>
 800441c:	2d01      	cmp	r5, #1
 800441e:	d109      	bne.n	8004434 <HAL_SPI_TransmitReceive+0x124>
        txallowed = 0U;
 8004420:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004422:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8004424:	881a      	ldrh	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004426:	3302      	adds	r3, #2
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004428:	60c2      	str	r2, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800442a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 800442c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800442e:	3b01      	subs	r3, #1
 8004430:	b29b      	uxth	r3, r3
 8004432:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004434:	6883      	ldr	r3, [r0, #8]
 8004436:	0019      	movs	r1, r3
 8004438:	4031      	ands	r1, r6
 800443a:	4233      	tst	r3, r6
 800443c:	d00e      	beq.n	800445c <HAL_SPI_TransmitReceive+0x14c>
 800443e:	0022      	movs	r2, r4
 8004440:	3208      	adds	r2, #8
 8004442:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8004444:	2b00      	cmp	r3, #0
 8004446:	d009      	beq.n	800445c <HAL_SPI_TransmitReceive+0x14c>
        txallowed = 1U;
 8004448:	000d      	movs	r5, r1
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800444a:	68c0      	ldr	r0, [r0, #12]
 800444c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800444e:	8018      	strh	r0, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004450:	3302      	adds	r3, #2
 8004452:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004454:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 8004456:	3b01      	subs	r3, #1
 8004458:	b29b      	uxth	r3, r3
 800445a:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800445c:	f7fd fda8 	bl	8001fb0 <HAL_GetTick>
 8004460:	9b01      	ldr	r3, [sp, #4]
 8004462:	1ac0      	subs	r0, r0, r3
 8004464:	9b08      	ldr	r3, [sp, #32]
 8004466:	4298      	cmp	r0, r3
 8004468:	d3b9      	bcc.n	80043de <HAL_SPI_TransmitReceive+0xce>
 800446a:	3301      	adds	r3, #1
 800446c:	d0b7      	beq.n	80043de <HAL_SPI_TransmitReceive+0xce>
        errorcode = HAL_TIMEOUT;
 800446e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004470:	0023      	movs	r3, r4
 8004472:	2201      	movs	r2, #1
 8004474:	335d      	adds	r3, #93	; 0x5d
 8004476:	701a      	strb	r2, [r3, #0]
  __HAL_UNLOCK(hspi);
 8004478:	2300      	movs	r3, #0
 800447a:	345c      	adds	r4, #92	; 0x5c
 800447c:	7023      	strb	r3, [r4, #0]
}
 800447e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004480:	2900      	cmp	r1, #0
 8004482:	d001      	beq.n	8004488 <HAL_SPI_TransmitReceive+0x178>
 8004484:	2e01      	cmp	r6, #1
 8004486:	d108      	bne.n	800449a <HAL_SPI_TransmitReceive+0x18a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004488:	782a      	ldrb	r2, [r5, #0]
 800448a:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800448c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800448e:	3301      	adds	r3, #1
 8004490:	63a3      	str	r3, [r4, #56]	; 0x38
      hspi->TxXferCount--;
 8004492:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8004494:	3b01      	subs	r3, #1
 8004496:	b29b      	uxth	r3, r3
 8004498:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 800449a:	2501      	movs	r5, #1
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800449c:	2702      	movs	r7, #2
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800449e:	002e      	movs	r6, r5
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80044a0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d104      	bne.n	80044b0 <HAL_SPI_TransmitReceive+0x1a0>
 80044a6:	0023      	movs	r3, r4
 80044a8:	3308      	adds	r3, #8
 80044aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d09e      	beq.n	80043ee <HAL_SPI_TransmitReceive+0xde>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80044b0:	6823      	ldr	r3, [r4, #0]
 80044b2:	689a      	ldr	r2, [r3, #8]
 80044b4:	423a      	tst	r2, r7
 80044b6:	d00f      	beq.n	80044d8 <HAL_SPI_TransmitReceive+0x1c8>
 80044b8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
 80044ba:	2a00      	cmp	r2, #0
 80044bc:	d00c      	beq.n	80044d8 <HAL_SPI_TransmitReceive+0x1c8>
 80044be:	2d01      	cmp	r5, #1
 80044c0:	d10a      	bne.n	80044d8 <HAL_SPI_TransmitReceive+0x1c8>
        txallowed = 0U;
 80044c2:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80044c4:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80044c6:	7812      	ldrb	r2, [r2, #0]
 80044c8:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr++;
 80044ca:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80044cc:	3301      	adds	r3, #1
 80044ce:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->TxXferCount--;
 80044d0:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80044d2:	3b01      	subs	r3, #1
 80044d4:	b29b      	uxth	r3, r3
 80044d6:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80044d8:	6823      	ldr	r3, [r4, #0]
 80044da:	689a      	ldr	r2, [r3, #8]
 80044dc:	0011      	movs	r1, r2
 80044de:	4031      	ands	r1, r6
 80044e0:	4232      	tst	r2, r6
 80044e2:	d00f      	beq.n	8004504 <HAL_SPI_TransmitReceive+0x1f4>
 80044e4:	0022      	movs	r2, r4
 80044e6:	3208      	adds	r2, #8
 80044e8:	8fd0      	ldrh	r0, [r2, #62]	; 0x3e
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d00a      	beq.n	8004504 <HAL_SPI_TransmitReceive+0x1f4>
        txallowed = 1U;
 80044ee:	000d      	movs	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80044f0:	7b1b      	ldrb	r3, [r3, #12]
 80044f2:	6c20      	ldr	r0, [r4, #64]	; 0x40
 80044f4:	7003      	strb	r3, [r0, #0]
        hspi->pRxBuffPtr++;
 80044f6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80044f8:	3301      	adds	r3, #1
 80044fa:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 80044fc:	8fd3      	ldrh	r3, [r2, #62]	; 0x3e
 80044fe:	3b01      	subs	r3, #1
 8004500:	b29b      	uxth	r3, r3
 8004502:	87d3      	strh	r3, [r2, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8004504:	f7fd fd54 	bl	8001fb0 <HAL_GetTick>
 8004508:	9b01      	ldr	r3, [sp, #4]
 800450a:	1ac0      	subs	r0, r0, r3
 800450c:	9b08      	ldr	r3, [sp, #32]
 800450e:	4298      	cmp	r0, r3
 8004510:	d3c6      	bcc.n	80044a0 <HAL_SPI_TransmitReceive+0x190>
 8004512:	3301      	adds	r3, #1
 8004514:	d0c4      	beq.n	80044a0 <HAL_SPI_TransmitReceive+0x190>
 8004516:	e7aa      	b.n	800446e <HAL_SPI_TransmitReceive+0x15e>
 8004518:	ffffefff 	.word	0xffffefff

0800451c <HAL_SPI_Receive>:
{
 800451c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800451e:	001d      	movs	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004520:	2382      	movs	r3, #130	; 0x82
{
 8004522:	0016      	movs	r6, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004524:	6842      	ldr	r2, [r0, #4]
{
 8004526:	0004      	movs	r4, r0
 8004528:	000f      	movs	r7, r1
 800452a:	b087      	sub	sp, #28
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	429a      	cmp	r2, r3
 8004530:	d10d      	bne.n	800454e <HAL_SPI_Receive+0x32>
 8004532:	6883      	ldr	r3, [r0, #8]
 8004534:	2b00      	cmp	r3, #0
 8004536:	d10a      	bne.n	800454e <HAL_SPI_Receive+0x32>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004538:	0003      	movs	r3, r0
 800453a:	2204      	movs	r2, #4
 800453c:	335d      	adds	r3, #93	; 0x5d
 800453e:	701a      	strb	r2, [r3, #0]
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004540:	0033      	movs	r3, r6
 8004542:	000a      	movs	r2, r1
 8004544:	9500      	str	r5, [sp, #0]
 8004546:	f7ff fee3 	bl	8004310 <HAL_SPI_TransmitReceive>
}
 800454a:	b007      	add	sp, #28
 800454c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  __HAL_LOCK(hspi);
 800454e:	0023      	movs	r3, r4
 8004550:	335c      	adds	r3, #92	; 0x5c
 8004552:	9304      	str	r3, [sp, #16]
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	2002      	movs	r0, #2
 8004558:	2b01      	cmp	r3, #1
 800455a:	d0f6      	beq.n	800454a <HAL_SPI_Receive+0x2e>
 800455c:	2301      	movs	r3, #1
 800455e:	9a04      	ldr	r2, [sp, #16]
 8004560:	7013      	strb	r3, [r2, #0]
  tickstart = HAL_GetTick();
 8004562:	f7fd fd25 	bl	8001fb0 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8004566:	0023      	movs	r3, r4
 8004568:	335d      	adds	r3, #93	; 0x5d
  tickstart = HAL_GetTick();
 800456a:	9003      	str	r0, [sp, #12]
  if (hspi->State != HAL_SPI_STATE_READY)
 800456c:	9305      	str	r3, [sp, #20]
 800456e:	781b      	ldrb	r3, [r3, #0]
 8004570:	b2d8      	uxtb	r0, r3
 8004572:	2b01      	cmp	r3, #1
 8004574:	d000      	beq.n	8004578 <HAL_SPI_Receive+0x5c>
 8004576:	e087      	b.n	8004688 <HAL_SPI_Receive+0x16c>
  if ((pData == NULL) || (Size == 0U))
 8004578:	2f00      	cmp	r7, #0
 800457a:	d061      	beq.n	8004640 <HAL_SPI_Receive+0x124>
 800457c:	2e00      	cmp	r6, #0
 800457e:	d05f      	beq.n	8004640 <HAL_SPI_Receive+0x124>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004580:	9a05      	ldr	r2, [sp, #20]
 8004582:	3303      	adds	r3, #3
 8004584:	7013      	strb	r3, [r2, #0]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004586:	2300      	movs	r3, #0
  hspi->RxXferSize  = Size;
 8004588:	1da2      	adds	r2, r4, #6
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800458a:	6623      	str	r3, [r4, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800458c:	6427      	str	r7, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 800458e:	3202      	adds	r2, #2
  hspi->RxXferSize  = Size;
 8004590:	8796      	strh	r6, [r2, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004592:	87d6      	strh	r6, [r2, #62]	; 0x3e
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004594:	22e0      	movs	r2, #224	; 0xe0
 8004596:	68e1      	ldr	r1, [r4, #12]
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004598:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800459a:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800459c:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->RxISR       = NULL;
 800459e:	64e3      	str	r3, [r4, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80045a0:	6523      	str	r3, [r4, #80]	; 0x50
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80045a2:	00d2      	lsls	r2, r2, #3
 80045a4:	6823      	ldr	r3, [r4, #0]
 80045a6:	4291      	cmp	r1, r2
 80045a8:	d92d      	bls.n	8004606 <HAL_SPI_Receive+0xea>
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045aa:	685a      	ldr	r2, [r3, #4]
 80045ac:	4837      	ldr	r0, [pc, #220]	; (800468c <HAL_SPI_Receive+0x170>)
 80045ae:	4002      	ands	r2, r0
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80045b0:	605a      	str	r2, [r3, #4]
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045b2:	2280      	movs	r2, #128	; 0x80
 80045b4:	68a0      	ldr	r0, [r4, #8]
 80045b6:	0212      	lsls	r2, r2, #8
 80045b8:	4290      	cmp	r0, r2
 80045ba:	d107      	bne.n	80045cc <HAL_SPI_Receive+0xb0>
    __HAL_SPI_DISABLE(hspi);
 80045bc:	2040      	movs	r0, #64	; 0x40
 80045be:	681a      	ldr	r2, [r3, #0]
 80045c0:	4382      	bics	r2, r0
 80045c2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	4832      	ldr	r0, [pc, #200]	; (8004690 <HAL_SPI_Receive+0x174>)
 80045c8:	4002      	ands	r2, r0
 80045ca:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80045cc:	2240      	movs	r2, #64	; 0x40
 80045ce:	6818      	ldr	r0, [r3, #0]
 80045d0:	4210      	tst	r0, r2
 80045d2:	d102      	bne.n	80045da <HAL_SPI_Receive+0xbe>
    __HAL_SPI_ENABLE(hspi);
 80045d4:	6818      	ldr	r0, [r3, #0]
 80045d6:	4302      	orrs	r2, r0
 80045d8:	601a      	str	r2, [r3, #0]
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80045da:	23e0      	movs	r3, #224	; 0xe0
 80045dc:	0026      	movs	r6, r4
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80045de:	2701      	movs	r7, #1
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80045e0:	00db      	lsls	r3, r3, #3
 80045e2:	3608      	adds	r6, #8
 80045e4:	4299      	cmp	r1, r3
 80045e6:	d83f      	bhi.n	8004668 <HAL_SPI_Receive+0x14c>
    while (hspi->RxXferCount > 0U)
 80045e8:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d110      	bne.n	8004610 <HAL_SPI_Receive+0xf4>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80045ee:	0029      	movs	r1, r5
 80045f0:	0020      	movs	r0, r4
 80045f2:	9a03      	ldr	r2, [sp, #12]
 80045f4:	f7ff fce0 	bl	8003fb8 <SPI_EndRxTransaction>
 80045f8:	2800      	cmp	r0, #0
 80045fa:	d142      	bne.n	8004682 <HAL_SPI_Receive+0x166>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80045fc:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80045fe:	1e43      	subs	r3, r0, #1
 8004600:	4198      	sbcs	r0, r3
    errorcode = HAL_BUSY;
 8004602:	b2c0      	uxtb	r0, r0
error :
 8004604:	e01c      	b.n	8004640 <HAL_SPI_Receive+0x124>
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004606:	2280      	movs	r2, #128	; 0x80
 8004608:	6858      	ldr	r0, [r3, #4]
 800460a:	0152      	lsls	r2, r2, #5
 800460c:	4302      	orrs	r2, r0
 800460e:	e7cf      	b.n	80045b0 <HAL_SPI_Receive+0x94>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8004610:	6823      	ldr	r3, [r4, #0]
 8004612:	689a      	ldr	r2, [r3, #8]
 8004614:	423a      	tst	r2, r7
 8004616:	d00a      	beq.n	800462e <HAL_SPI_Receive+0x112>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8004618:	7b1b      	ldrb	r3, [r3, #12]
 800461a:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800461c:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800461e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004620:	3301      	adds	r3, #1
 8004622:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004624:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8004626:	3b01      	subs	r3, #1
 8004628:	b29b      	uxth	r3, r3
 800462a:	87f3      	strh	r3, [r6, #62]	; 0x3e
 800462c:	e7dc      	b.n	80045e8 <HAL_SPI_Receive+0xcc>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800462e:	f7fd fcbf 	bl	8001fb0 <HAL_GetTick>
 8004632:	9b03      	ldr	r3, [sp, #12]
 8004634:	1ac0      	subs	r0, r0, r3
 8004636:	42a8      	cmp	r0, r5
 8004638:	d3d6      	bcc.n	80045e8 <HAL_SPI_Receive+0xcc>
 800463a:	1c6b      	adds	r3, r5, #1
 800463c:	d0d4      	beq.n	80045e8 <HAL_SPI_Receive+0xcc>
          errorcode = HAL_TIMEOUT;
 800463e:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8004640:	2301      	movs	r3, #1
 8004642:	9a05      	ldr	r2, [sp, #20]
 8004644:	7013      	strb	r3, [r2, #0]
  __HAL_UNLOCK(hspi);
 8004646:	2300      	movs	r3, #0
 8004648:	9a04      	ldr	r2, [sp, #16]
 800464a:	7013      	strb	r3, [r2, #0]
  return errorcode;
 800464c:	e77d      	b.n	800454a <HAL_SPI_Receive+0x2e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800464e:	6823      	ldr	r3, [r4, #0]
 8004650:	689a      	ldr	r2, [r3, #8]
 8004652:	423a      	tst	r2, r7
 8004654:	d00c      	beq.n	8004670 <HAL_SPI_Receive+0x154>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004656:	68da      	ldr	r2, [r3, #12]
 8004658:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800465a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800465c:	3302      	adds	r3, #2
 800465e:	6423      	str	r3, [r4, #64]	; 0x40
        hspi->RxXferCount--;
 8004660:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 8004662:	3b01      	subs	r3, #1
 8004664:	b29b      	uxth	r3, r3
 8004666:	87f3      	strh	r3, [r6, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8004668:	8ff3      	ldrh	r3, [r6, #62]	; 0x3e
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1ef      	bne.n	800464e <HAL_SPI_Receive+0x132>
 800466e:	e7be      	b.n	80045ee <HAL_SPI_Receive+0xd2>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004670:	f7fd fc9e 	bl	8001fb0 <HAL_GetTick>
 8004674:	9b03      	ldr	r3, [sp, #12]
 8004676:	1ac0      	subs	r0, r0, r3
 8004678:	42a8      	cmp	r0, r5
 800467a:	d3f5      	bcc.n	8004668 <HAL_SPI_Receive+0x14c>
 800467c:	1c6b      	adds	r3, r5, #1
 800467e:	d0f3      	beq.n	8004668 <HAL_SPI_Receive+0x14c>
 8004680:	e7dd      	b.n	800463e <HAL_SPI_Receive+0x122>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004682:	2320      	movs	r3, #32
 8004684:	6623      	str	r3, [r4, #96]	; 0x60
 8004686:	e7b9      	b.n	80045fc <HAL_SPI_Receive+0xe0>
    errorcode = HAL_BUSY;
 8004688:	2002      	movs	r0, #2
 800468a:	e7d9      	b.n	8004640 <HAL_SPI_Receive+0x124>
 800468c:	ffffefff 	.word	0xffffefff
 8004690:	ffffbfff 	.word	0xffffbfff

08004694 <HAL_SPI_ErrorCallback>:
 8004694:	4770      	bx	lr
	...

08004698 <HAL_SPI_IRQHandler>:
  uint32_t itsource = hspi->Instance->CR2;
 8004698:	6803      	ldr	r3, [r0, #0]
{
 800469a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800469c:	0004      	movs	r4, r0
  uint32_t itsource = hspi->Instance->CR2;
 800469e:	6858      	ldr	r0, [r3, #4]
  uint32_t itflag   = hspi->Instance->SR;
 80046a0:	689a      	ldr	r2, [r3, #8]
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80046a2:	2501      	movs	r5, #1
 80046a4:	0991      	lsrs	r1, r2, #6
 80046a6:	000f      	movs	r7, r1
{
 80046a8:	b085      	sub	sp, #20
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80046aa:	402f      	ands	r7, r5
 80046ac:	4229      	tst	r1, r5
 80046ae:	d109      	bne.n	80046c4 <HAL_SPI_IRQHandler+0x2c>
 80046b0:	422a      	tst	r2, r5
 80046b2:	d007      	beq.n	80046c4 <HAL_SPI_IRQHandler+0x2c>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80046b4:	0986      	lsrs	r6, r0, #6
 80046b6:	422e      	tst	r6, r5
 80046b8:	d004      	beq.n	80046c4 <HAL_SPI_IRQHandler+0x2c>
    hspi->RxISR(hspi);
 80046ba:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    hspi->TxISR(hspi);
 80046bc:	0020      	movs	r0, r4
 80046be:	4798      	blx	r3
}
 80046c0:	b005      	add	sp, #20
 80046c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80046c4:	2501      	movs	r5, #1
 80046c6:	0796      	lsls	r6, r2, #30
 80046c8:	d504      	bpl.n	80046d4 <HAL_SPI_IRQHandler+0x3c>
 80046ca:	09c6      	lsrs	r6, r0, #7
 80046cc:	422e      	tst	r6, r5
 80046ce:	d001      	beq.n	80046d4 <HAL_SPI_IRQHandler+0x3c>
    hspi->TxISR(hspi);
 80046d0:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80046d2:	e7f3      	b.n	80046bc <HAL_SPI_IRQHandler+0x24>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80046d4:	2501      	movs	r5, #1
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046d6:	0956      	lsrs	r6, r2, #5
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 80046d8:	4331      	orrs	r1, r6
 80046da:	0a12      	lsrs	r2, r2, #8
 80046dc:	402a      	ands	r2, r5
 80046de:	4029      	ands	r1, r5
 80046e0:	4311      	orrs	r1, r2
 80046e2:	d0ed      	beq.n	80046c0 <HAL_SPI_IRQHandler+0x28>
 80046e4:	0941      	lsrs	r1, r0, #5
 80046e6:	4229      	tst	r1, r5
 80046e8:	d0ea      	beq.n	80046c0 <HAL_SPI_IRQHandler+0x28>
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 80046ea:	2f00      	cmp	r7, #0
 80046ec:	d00f      	beq.n	800470e <HAL_SPI_IRQHandler+0x76>
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 80046ee:	0021      	movs	r1, r4
 80046f0:	315d      	adds	r1, #93	; 0x5d
 80046f2:	7809      	ldrb	r1, [r1, #0]
 80046f4:	2903      	cmp	r1, #3
 80046f6:	d050      	beq.n	800479a <HAL_SPI_IRQHandler+0x102>
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 80046f8:	2104      	movs	r1, #4
 80046fa:	6e25      	ldr	r5, [r4, #96]	; 0x60
 80046fc:	4329      	orrs	r1, r5
 80046fe:	6621      	str	r1, [r4, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004700:	2100      	movs	r1, #0
 8004702:	9100      	str	r1, [sp, #0]
 8004704:	68d9      	ldr	r1, [r3, #12]
 8004706:	9100      	str	r1, [sp, #0]
 8004708:	6899      	ldr	r1, [r3, #8]
 800470a:	9100      	str	r1, [sp, #0]
 800470c:	9900      	ldr	r1, [sp, #0]
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800470e:	2101      	movs	r1, #1
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8004710:	420e      	tst	r6, r1
 8004712:	d00b      	beq.n	800472c <HAL_SPI_IRQHandler+0x94>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8004714:	6e25      	ldr	r5, [r4, #96]	; 0x60
 8004716:	4329      	orrs	r1, r5
 8004718:	6621      	str	r1, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800471a:	2100      	movs	r1, #0
 800471c:	2540      	movs	r5, #64	; 0x40
 800471e:	9102      	str	r1, [sp, #8]
 8004720:	6899      	ldr	r1, [r3, #8]
 8004722:	9102      	str	r1, [sp, #8]
 8004724:	6819      	ldr	r1, [r3, #0]
 8004726:	43a9      	bics	r1, r5
 8004728:	6019      	str	r1, [r3, #0]
 800472a:	9902      	ldr	r1, [sp, #8]
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800472c:	2a00      	cmp	r2, #0
 800472e:	d008      	beq.n	8004742 <HAL_SPI_IRQHandler+0xaa>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004730:	2208      	movs	r2, #8
 8004732:	6e21      	ldr	r1, [r4, #96]	; 0x60
 8004734:	430a      	orrs	r2, r1
 8004736:	6622      	str	r2, [r4, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004738:	2200      	movs	r2, #0
 800473a:	9203      	str	r2, [sp, #12]
 800473c:	689a      	ldr	r2, [r3, #8]
 800473e:	9203      	str	r2, [sp, #12]
 8004740:	9a03      	ldr	r2, [sp, #12]
    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004742:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004744:	2a00      	cmp	r2, #0
 8004746:	d0bb      	beq.n	80046c0 <HAL_SPI_IRQHandler+0x28>
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8004748:	21e0      	movs	r1, #224	; 0xe0
 800474a:	685a      	ldr	r2, [r3, #4]
 800474c:	438a      	bics	r2, r1
 800474e:	605a      	str	r2, [r3, #4]
      hspi->State = HAL_SPI_STATE_READY;
 8004750:	0022      	movs	r2, r4
 8004752:	39df      	subs	r1, #223	; 0xdf
 8004754:	325d      	adds	r2, #93	; 0x5d
 8004756:	7011      	strb	r1, [r2, #0]
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004758:	3102      	adds	r1, #2
 800475a:	4208      	tst	r0, r1
 800475c:	d025      	beq.n	80047aa <HAL_SPI_IRQHandler+0x112>
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800475e:	685a      	ldr	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8004760:	6da0      	ldr	r0, [r4, #88]	; 0x58
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004762:	438a      	bics	r2, r1
 8004764:	605a      	str	r2, [r3, #4]
        if (hspi->hdmarx != NULL)
 8004766:	2800      	cmp	r0, #0
 8004768:	d009      	beq.n	800477e <HAL_SPI_IRQHandler+0xe6>
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800476a:	4b12      	ldr	r3, [pc, #72]	; (80047b4 <HAL_SPI_IRQHandler+0x11c>)
 800476c:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800476e:	f7fd fda9 	bl	80022c4 <HAL_DMA_Abort_IT>
 8004772:	2800      	cmp	r0, #0
 8004774:	d003      	beq.n	800477e <HAL_SPI_IRQHandler+0xe6>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004776:	2340      	movs	r3, #64	; 0x40
 8004778:	6e22      	ldr	r2, [r4, #96]	; 0x60
 800477a:	4313      	orrs	r3, r2
 800477c:	6623      	str	r3, [r4, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800477e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004780:	2800      	cmp	r0, #0
 8004782:	d09d      	beq.n	80046c0 <HAL_SPI_IRQHandler+0x28>
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8004784:	4b0b      	ldr	r3, [pc, #44]	; (80047b4 <HAL_SPI_IRQHandler+0x11c>)
 8004786:	6343      	str	r3, [r0, #52]	; 0x34
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004788:	f7fd fd9c 	bl	80022c4 <HAL_DMA_Abort_IT>
 800478c:	2800      	cmp	r0, #0
 800478e:	d097      	beq.n	80046c0 <HAL_SPI_IRQHandler+0x28>
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004790:	2340      	movs	r3, #64	; 0x40
 8004792:	6e22      	ldr	r2, [r4, #96]	; 0x60
 8004794:	4313      	orrs	r3, r2
 8004796:	6623      	str	r3, [r4, #96]	; 0x60
 8004798:	e792      	b.n	80046c0 <HAL_SPI_IRQHandler+0x28>
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800479a:	2200      	movs	r2, #0
 800479c:	9201      	str	r2, [sp, #4]
 800479e:	68da      	ldr	r2, [r3, #12]
 80047a0:	9201      	str	r2, [sp, #4]
 80047a2:	689b      	ldr	r3, [r3, #8]
 80047a4:	9301      	str	r3, [sp, #4]
 80047a6:	9b01      	ldr	r3, [sp, #4]
        return;
 80047a8:	e78a      	b.n	80046c0 <HAL_SPI_IRQHandler+0x28>
        HAL_SPI_ErrorCallback(hspi);
 80047aa:	0020      	movs	r0, r4
 80047ac:	f7ff ff72 	bl	8004694 <HAL_SPI_ErrorCallback>
 80047b0:	e786      	b.n	80046c0 <HAL_SPI_IRQHandler+0x28>
 80047b2:	46c0      	nop			; (mov r8, r8)
 80047b4:	080047b9 	.word	0x080047b9

080047b8 <SPI_DMAAbortOnError>:
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80047b8:	6a40      	ldr	r0, [r0, #36]	; 0x24
  hspi->RxXferCount = 0U;
 80047ba:	2300      	movs	r3, #0
 80047bc:	0002      	movs	r2, r0
{
 80047be:	b510      	push	{r4, lr}
  hspi->RxXferCount = 0U;
 80047c0:	3208      	adds	r2, #8
 80047c2:	87d3      	strh	r3, [r2, #62]	; 0x3e
  hspi->TxXferCount = 0U;
 80047c4:	87c3      	strh	r3, [r0, #62]	; 0x3e
  HAL_SPI_ErrorCallback(hspi);
 80047c6:	f7ff ff65 	bl	8004694 <HAL_SPI_ErrorCallback>
}
 80047ca:	bd10      	pop	{r4, pc}

080047cc <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80047cc:	4770      	bx	lr
	...

080047d0 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80047d0:	0002      	movs	r2, r0
{
 80047d2:	0003      	movs	r3, r0
  {
    return HAL_ERROR;
 80047d4:	2001      	movs	r0, #1
  if (htim->State != HAL_TIM_STATE_READY)
 80047d6:	323d      	adds	r2, #61	; 0x3d
 80047d8:	7811      	ldrb	r1, [r2, #0]
 80047da:	4281      	cmp	r1, r0
 80047dc:	d119      	bne.n	8004812 <HAL_TIM_Base_Start_IT+0x42>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047de:	2102      	movs	r1, #2
 80047e0:	7011      	strb	r1, [r2, #0]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	4302      	orrs	r2, r0
 80047e8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047ea:	4a0d      	ldr	r2, [pc, #52]	; (8004820 <HAL_TIM_Base_Start_IT+0x50>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d006      	beq.n	80047fe <HAL_TIM_Base_Start_IT+0x2e>
 80047f0:	2280      	movs	r2, #128	; 0x80
 80047f2:	05d2      	lsls	r2, r2, #23
 80047f4:	4293      	cmp	r3, r2
 80047f6:	d002      	beq.n	80047fe <HAL_TIM_Base_Start_IT+0x2e>
 80047f8:	4a0a      	ldr	r2, [pc, #40]	; (8004824 <HAL_TIM_Base_Start_IT+0x54>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d10a      	bne.n	8004814 <HAL_TIM_Base_Start_IT+0x44>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047fe:	2107      	movs	r1, #7
 8004800:	689a      	ldr	r2, [r3, #8]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 8004802:	2000      	movs	r0, #0
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004804:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004806:	2a06      	cmp	r2, #6
 8004808:	d003      	beq.n	8004812 <HAL_TIM_Base_Start_IT+0x42>
      __HAL_TIM_ENABLE(htim);
 800480a:	2201      	movs	r2, #1
 800480c:	6819      	ldr	r1, [r3, #0]
 800480e:	430a      	orrs	r2, r1
 8004810:	601a      	str	r2, [r3, #0]
}
 8004812:	4770      	bx	lr
    __HAL_TIM_ENABLE(htim);
 8004814:	681a      	ldr	r2, [r3, #0]
 8004816:	4310      	orrs	r0, r2
 8004818:	6018      	str	r0, [r3, #0]
  return HAL_OK;
 800481a:	2000      	movs	r0, #0
 800481c:	e7f9      	b.n	8004812 <HAL_TIM_Base_Start_IT+0x42>
 800481e:	46c0      	nop			; (mov r8, r8)
 8004820:	40012c00 	.word	0x40012c00
 8004824:	40000400 	.word	0x40000400

08004828 <HAL_TIM_OC_DelayElapsedCallback>:
 8004828:	4770      	bx	lr

0800482a <HAL_TIM_IC_CaptureCallback>:
 800482a:	4770      	bx	lr

0800482c <HAL_TIM_PWM_PulseFinishedCallback>:
 800482c:	4770      	bx	lr

0800482e <HAL_TIM_TriggerCallback>:
 800482e:	4770      	bx	lr

08004830 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004830:	2202      	movs	r2, #2
 8004832:	6803      	ldr	r3, [r0, #0]
{
 8004834:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004836:	6919      	ldr	r1, [r3, #16]
{
 8004838:	0004      	movs	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800483a:	4211      	tst	r1, r2
 800483c:	d00e      	beq.n	800485c <HAL_TIM_IRQHandler+0x2c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800483e:	68d9      	ldr	r1, [r3, #12]
 8004840:	4211      	tst	r1, r2
 8004842:	d00b      	beq.n	800485c <HAL_TIM_IRQHandler+0x2c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004844:	3a05      	subs	r2, #5
 8004846:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004848:	3204      	adds	r2, #4
 800484a:	7702      	strb	r2, [r0, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800484c:	699b      	ldr	r3, [r3, #24]
 800484e:	079b      	lsls	r3, r3, #30
 8004850:	d100      	bne.n	8004854 <HAL_TIM_IRQHandler+0x24>
 8004852:	e079      	b.n	8004948 <HAL_TIM_IRQHandler+0x118>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004854:	f7ff ffe9 	bl	800482a <HAL_TIM_IC_CaptureCallback>
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004858:	2300      	movs	r3, #0
 800485a:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800485c:	2204      	movs	r2, #4
 800485e:	6823      	ldr	r3, [r4, #0]
 8004860:	6919      	ldr	r1, [r3, #16]
 8004862:	4211      	tst	r1, r2
 8004864:	d010      	beq.n	8004888 <HAL_TIM_IRQHandler+0x58>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004866:	68d9      	ldr	r1, [r3, #12]
 8004868:	4211      	tst	r1, r2
 800486a:	d00d      	beq.n	8004888 <HAL_TIM_IRQHandler+0x58>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800486c:	3a09      	subs	r2, #9
 800486e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004870:	3207      	adds	r2, #7
 8004872:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004874:	699a      	ldr	r2, [r3, #24]
 8004876:	23c0      	movs	r3, #192	; 0xc0
 8004878:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800487a:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800487c:	421a      	tst	r2, r3
 800487e:	d069      	beq.n	8004954 <HAL_TIM_IRQHandler+0x124>
        HAL_TIM_IC_CaptureCallback(htim);
 8004880:	f7ff ffd3 	bl	800482a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004884:	2300      	movs	r3, #0
 8004886:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004888:	2208      	movs	r2, #8
 800488a:	6823      	ldr	r3, [r4, #0]
 800488c:	6919      	ldr	r1, [r3, #16]
 800488e:	4211      	tst	r1, r2
 8004890:	d00e      	beq.n	80048b0 <HAL_TIM_IRQHandler+0x80>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004892:	68d9      	ldr	r1, [r3, #12]
 8004894:	4211      	tst	r1, r2
 8004896:	d00b      	beq.n	80048b0 <HAL_TIM_IRQHandler+0x80>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004898:	3a11      	subs	r2, #17
 800489a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800489c:	320d      	adds	r2, #13
 800489e:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a0:	69db      	ldr	r3, [r3, #28]
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048a2:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80048a4:	079b      	lsls	r3, r3, #30
 80048a6:	d05b      	beq.n	8004960 <HAL_TIM_IRQHandler+0x130>
        HAL_TIM_IC_CaptureCallback(htim);
 80048a8:	f7ff ffbf 	bl	800482a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048ac:	2300      	movs	r3, #0
 80048ae:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80048b0:	2210      	movs	r2, #16
 80048b2:	6823      	ldr	r3, [r4, #0]
 80048b4:	6919      	ldr	r1, [r3, #16]
 80048b6:	4211      	tst	r1, r2
 80048b8:	d010      	beq.n	80048dc <HAL_TIM_IRQHandler+0xac>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80048ba:	68d9      	ldr	r1, [r3, #12]
 80048bc:	4211      	tst	r1, r2
 80048be:	d00d      	beq.n	80048dc <HAL_TIM_IRQHandler+0xac>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80048c0:	3a21      	subs	r2, #33	; 0x21
 80048c2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80048c4:	3219      	adds	r2, #25
 80048c6:	7722      	strb	r2, [r4, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048c8:	69da      	ldr	r2, [r3, #28]
 80048ca:	23c0      	movs	r3, #192	; 0xc0
 80048cc:	009b      	lsls	r3, r3, #2
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ce:	0020      	movs	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048d0:	421a      	tst	r2, r3
 80048d2:	d04b      	beq.n	800496c <HAL_TIM_IRQHandler+0x13c>
        HAL_TIM_IC_CaptureCallback(htim);
 80048d4:	f7ff ffa9 	bl	800482a <HAL_TIM_IC_CaptureCallback>
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048d8:	2300      	movs	r3, #0
 80048da:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048dc:	2201      	movs	r2, #1
 80048de:	6823      	ldr	r3, [r4, #0]
 80048e0:	6919      	ldr	r1, [r3, #16]
 80048e2:	4211      	tst	r1, r2
 80048e4:	d007      	beq.n	80048f6 <HAL_TIM_IRQHandler+0xc6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048e6:	68d9      	ldr	r1, [r3, #12]
 80048e8:	4211      	tst	r1, r2
 80048ea:	d004      	beq.n	80048f6 <HAL_TIM_IRQHandler+0xc6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048ec:	3a03      	subs	r2, #3
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ee:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048f0:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 80048f2:	f7fc f951 	bl	8000b98 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048f6:	2280      	movs	r2, #128	; 0x80
 80048f8:	6823      	ldr	r3, [r4, #0]
 80048fa:	6919      	ldr	r1, [r3, #16]
 80048fc:	4211      	tst	r1, r2
 80048fe:	d008      	beq.n	8004912 <HAL_TIM_IRQHandler+0xe2>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004900:	68d9      	ldr	r1, [r3, #12]
 8004902:	4211      	tst	r1, r2
 8004904:	d005      	beq.n	8004912 <HAL_TIM_IRQHandler+0xe2>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004906:	3a02      	subs	r2, #2
 8004908:	3aff      	subs	r2, #255	; 0xff
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800490a:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800490c:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800490e:	f000 f8a4 	bl	8004a5a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004912:	2240      	movs	r2, #64	; 0x40
 8004914:	6823      	ldr	r3, [r4, #0]
 8004916:	6919      	ldr	r1, [r3, #16]
 8004918:	4211      	tst	r1, r2
 800491a:	d007      	beq.n	800492c <HAL_TIM_IRQHandler+0xfc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800491c:	68d9      	ldr	r1, [r3, #12]
 800491e:	4211      	tst	r1, r2
 8004920:	d004      	beq.n	800492c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004922:	3a81      	subs	r2, #129	; 0x81
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004924:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004926:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8004928:	f7ff ff81 	bl	800482e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800492c:	2220      	movs	r2, #32
 800492e:	6823      	ldr	r3, [r4, #0]
 8004930:	6919      	ldr	r1, [r3, #16]
 8004932:	4211      	tst	r1, r2
 8004934:	d007      	beq.n	8004946 <HAL_TIM_IRQHandler+0x116>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004936:	68d9      	ldr	r1, [r3, #12]
 8004938:	4211      	tst	r1, r2
 800493a:	d004      	beq.n	8004946 <HAL_TIM_IRQHandler+0x116>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800493c:	3a41      	subs	r2, #65	; 0x41
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800493e:	0020      	movs	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004940:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_CommutCallback(htim);
 8004942:	f000 f889 	bl	8004a58 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004946:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004948:	f7ff ff6e 	bl	8004828 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800494c:	0020      	movs	r0, r4
 800494e:	f7ff ff6d 	bl	800482c <HAL_TIM_PWM_PulseFinishedCallback>
 8004952:	e781      	b.n	8004858 <HAL_TIM_IRQHandler+0x28>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004954:	f7ff ff68 	bl	8004828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004958:	0020      	movs	r0, r4
 800495a:	f7ff ff67 	bl	800482c <HAL_TIM_PWM_PulseFinishedCallback>
 800495e:	e791      	b.n	8004884 <HAL_TIM_IRQHandler+0x54>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004960:	f7ff ff62 	bl	8004828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004964:	0020      	movs	r0, r4
 8004966:	f7ff ff61 	bl	800482c <HAL_TIM_PWM_PulseFinishedCallback>
 800496a:	e79f      	b.n	80048ac <HAL_TIM_IRQHandler+0x7c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800496c:	f7ff ff5c 	bl	8004828 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004970:	0020      	movs	r0, r4
 8004972:	f7ff ff5b 	bl	800482c <HAL_TIM_PWM_PulseFinishedCallback>
 8004976:	e7af      	b.n	80048d8 <HAL_TIM_IRQHandler+0xa8>

08004978 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004978:	4a1d      	ldr	r2, [pc, #116]	; (80049f0 <TIM_Base_SetConfig+0x78>)
{
 800497a:	b510      	push	{r4, lr}
  tmpcr1 = TIMx->CR1;
 800497c:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800497e:	4290      	cmp	r0, r2
 8004980:	d006      	beq.n	8004990 <TIM_Base_SetConfig+0x18>
 8004982:	2480      	movs	r4, #128	; 0x80
 8004984:	05e4      	lsls	r4, r4, #23
 8004986:	42a0      	cmp	r0, r4
 8004988:	d002      	beq.n	8004990 <TIM_Base_SetConfig+0x18>
 800498a:	4c1a      	ldr	r4, [pc, #104]	; (80049f4 <TIM_Base_SetConfig+0x7c>)
 800498c:	42a0      	cmp	r0, r4
 800498e:	d10c      	bne.n	80049aa <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004990:	2470      	movs	r4, #112	; 0x70
 8004992:	43a3      	bics	r3, r4
    tmpcr1 |= Structure->CounterMode;
 8004994:	684c      	ldr	r4, [r1, #4]
 8004996:	4323      	orrs	r3, r4
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004998:	4290      	cmp	r0, r2
 800499a:	d00f      	beq.n	80049bc <TIM_Base_SetConfig+0x44>
 800499c:	2480      	movs	r4, #128	; 0x80
 800499e:	05e4      	lsls	r4, r4, #23
 80049a0:	42a0      	cmp	r0, r4
 80049a2:	d00b      	beq.n	80049bc <TIM_Base_SetConfig+0x44>
 80049a4:	4c13      	ldr	r4, [pc, #76]	; (80049f4 <TIM_Base_SetConfig+0x7c>)
 80049a6:	42a0      	cmp	r0, r4
 80049a8:	d008      	beq.n	80049bc <TIM_Base_SetConfig+0x44>
 80049aa:	4c13      	ldr	r4, [pc, #76]	; (80049f8 <TIM_Base_SetConfig+0x80>)
 80049ac:	42a0      	cmp	r0, r4
 80049ae:	d005      	beq.n	80049bc <TIM_Base_SetConfig+0x44>
 80049b0:	4c12      	ldr	r4, [pc, #72]	; (80049fc <TIM_Base_SetConfig+0x84>)
 80049b2:	42a0      	cmp	r0, r4
 80049b4:	d002      	beq.n	80049bc <TIM_Base_SetConfig+0x44>
 80049b6:	4c12      	ldr	r4, [pc, #72]	; (8004a00 <TIM_Base_SetConfig+0x88>)
 80049b8:	42a0      	cmp	r0, r4
 80049ba:	d103      	bne.n	80049c4 <TIM_Base_SetConfig+0x4c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049bc:	4c11      	ldr	r4, [pc, #68]	; (8004a04 <TIM_Base_SetConfig+0x8c>)
 80049be:	4023      	ands	r3, r4
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049c0:	68cc      	ldr	r4, [r1, #12]
 80049c2:	4323      	orrs	r3, r4
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c4:	2480      	movs	r4, #128	; 0x80
 80049c6:	43a3      	bics	r3, r4
 80049c8:	694c      	ldr	r4, [r1, #20]
 80049ca:	4323      	orrs	r3, r4

  TIMx->CR1 = tmpcr1;
 80049cc:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049ce:	688b      	ldr	r3, [r1, #8]
 80049d0:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049d2:	680b      	ldr	r3, [r1, #0]
 80049d4:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80049d6:	4290      	cmp	r0, r2
 80049d8:	d005      	beq.n	80049e6 <TIM_Base_SetConfig+0x6e>
 80049da:	4b08      	ldr	r3, [pc, #32]	; (80049fc <TIM_Base_SetConfig+0x84>)
 80049dc:	4298      	cmp	r0, r3
 80049de:	d002      	beq.n	80049e6 <TIM_Base_SetConfig+0x6e>
 80049e0:	4b07      	ldr	r3, [pc, #28]	; (8004a00 <TIM_Base_SetConfig+0x88>)
 80049e2:	4298      	cmp	r0, r3
 80049e4:	d101      	bne.n	80049ea <TIM_Base_SetConfig+0x72>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80049e6:	690b      	ldr	r3, [r1, #16]
 80049e8:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049ea:	2301      	movs	r3, #1
 80049ec:	6143      	str	r3, [r0, #20]
}
 80049ee:	bd10      	pop	{r4, pc}
 80049f0:	40012c00 	.word	0x40012c00
 80049f4:	40000400 	.word	0x40000400
 80049f8:	40002000 	.word	0x40002000
 80049fc:	40014400 	.word	0x40014400
 8004a00:	40014800 	.word	0x40014800
 8004a04:	fffffcff 	.word	0xfffffcff

08004a08 <HAL_TIM_Base_Init>:
{
 8004a08:	b570      	push	{r4, r5, r6, lr}
 8004a0a:	0004      	movs	r4, r0
    return HAL_ERROR;
 8004a0c:	2001      	movs	r0, #1
  if (htim == NULL)
 8004a0e:	2c00      	cmp	r4, #0
 8004a10:	d021      	beq.n	8004a56 <HAL_TIM_Base_Init+0x4e>
  if (htim->State == HAL_TIM_STATE_RESET)
 8004a12:	0025      	movs	r5, r4
 8004a14:	353d      	adds	r5, #61	; 0x3d
 8004a16:	782b      	ldrb	r3, [r5, #0]
 8004a18:	b2da      	uxtb	r2, r3
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d105      	bne.n	8004a2a <HAL_TIM_Base_Init+0x22>
    htim->Lock = HAL_UNLOCKED;
 8004a1e:	0023      	movs	r3, r4
 8004a20:	333c      	adds	r3, #60	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004a22:	0020      	movs	r0, r4
    htim->Lock = HAL_UNLOCKED;
 8004a24:	701a      	strb	r2, [r3, #0]
    HAL_TIM_Base_MspInit(htim);
 8004a26:	f7ff fed1 	bl	80047cc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8004a2a:	2302      	movs	r3, #2
 8004a2c:	702b      	strb	r3, [r5, #0]
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004a2e:	6820      	ldr	r0, [r4, #0]
 8004a30:	1d21      	adds	r1, r4, #4
 8004a32:	f7ff ffa1 	bl	8004978 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a36:	0022      	movs	r2, r4
 8004a38:	2301      	movs	r3, #1
  return HAL_OK;
 8004a3a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004a3c:	3246      	adds	r2, #70	; 0x46
 8004a3e:	7013      	strb	r3, [r2, #0]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a40:	3445      	adds	r4, #69	; 0x45
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a42:	3a08      	subs	r2, #8
 8004a44:	7013      	strb	r3, [r2, #0]
 8004a46:	7053      	strb	r3, [r2, #1]
 8004a48:	7093      	strb	r3, [r2, #2]
 8004a4a:	70d3      	strb	r3, [r2, #3]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004a4c:	7113      	strb	r3, [r2, #4]
 8004a4e:	7153      	strb	r3, [r2, #5]
 8004a50:	7193      	strb	r3, [r2, #6]
 8004a52:	7023      	strb	r3, [r4, #0]
  htim->State = HAL_TIM_STATE_READY;
 8004a54:	702b      	strb	r3, [r5, #0]
}
 8004a56:	bd70      	pop	{r4, r5, r6, pc}

08004a58 <HAL_TIMEx_CommutCallback>:
 8004a58:	4770      	bx	lr

08004a5a <HAL_TIMEx_BreakCallback>:
 8004a5a:	4770      	bx	lr

08004a5c <USB_EnableGlobalInt>:
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a5c:	1d82      	adds	r2, r0, #6
{
 8004a5e:	0003      	movs	r3, r0
  USBx->ISTR = 0U;
 8004a60:	2000      	movs	r0, #0
 8004a62:	87d0      	strh	r0, [r2, #62]	; 0x3e
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 8004a64:	4a01      	ldr	r2, [pc, #4]	; (8004a6c <USB_EnableGlobalInt+0x10>)
 8004a66:	3302      	adds	r3, #2
 8004a68:	87da      	strh	r2, [r3, #62]	; 0x3e

  return HAL_OK;
}
 8004a6a:	4770      	bx	lr
 8004a6c:	ffffbf80 	.word	0xffffbf80

08004a70 <USB_DisableGlobalInt>:
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 8004a70:	3002      	adds	r0, #2
 8004a72:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
 8004a74:	4a02      	ldr	r2, [pc, #8]	; (8004a80 <USB_DisableGlobalInt+0x10>)
 8004a76:	4013      	ands	r3, r2
 8004a78:	87c3      	strh	r3, [r0, #62]	; 0x3e

  return HAL_OK;
}
 8004a7a:	2000      	movs	r0, #0
 8004a7c:	4770      	bx	lr
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	0000407f 	.word	0x0000407f

08004a84 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8004a84:	b084      	sub	sp, #16
 8004a86:	b510      	push	{r4, lr}
 8004a88:	0004      	movs	r4, r0
 8004a8a:	9204      	str	r2, [sp, #16]
 8004a8c:	9305      	str	r3, [sp, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a8e:	2201      	movs	r2, #1
 8004a90:	1c83      	adds	r3, r0, #2

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 8004a92:	2000      	movs	r0, #0
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8004a94:	87da      	strh	r2, [r3, #62]	; 0x3e
  USBx->CNTR = 0U;
 8004a96:	87d8      	strh	r0, [r3, #62]	; 0x3e

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8004a98:	1da3      	adds	r3, r4, #6

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 8004a9a:	3450      	adds	r4, #80	; 0x50
  USBx->ISTR = 0U;
 8004a9c:	87d8      	strh	r0, [r3, #62]	; 0x3e
{
 8004a9e:	9103      	str	r1, [sp, #12]
  USBx->BTABLE = BTABLE_ADDRESS;
 8004aa0:	8020      	strh	r0, [r4, #0]

  return HAL_OK;
}
 8004aa2:	bc10      	pop	{r4}
 8004aa4:	bc08      	pop	{r3}
 8004aa6:	b004      	add	sp, #16
 8004aa8:	4718      	bx	r3
	...

08004aac <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004aac:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef ret = HAL_OK;
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004aae:	780d      	ldrb	r5, [r1, #0]
{
 8004ab0:	0003      	movs	r3, r0
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004ab2:	00ad      	lsls	r5, r5, #2
 8004ab4:	1945      	adds	r5, r0, r5
 8004ab6:	882c      	ldrh	r4, [r5, #0]
 8004ab8:	4a8e      	ldr	r2, [pc, #568]	; (8004cf4 <USB_ActivateEndpoint+0x248>)

  /* initialize Endpoint */
  switch (ep->type)
 8004aba:	78c8      	ldrb	r0, [r1, #3]
  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8004abc:	4014      	ands	r4, r2
  switch (ep->type)
 8004abe:	2803      	cmp	r0, #3
 8004ac0:	d84b      	bhi.n	8004b5a <USB_ActivateEndpoint+0xae>
 8004ac2:	f7fb fb33 	bl	800012c <__gnu_thumb1_case_uqi>
 8004ac6:	4802      	.short	0x4802
 8004ac8:	4346      	.short	0x4346
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 8004aca:	2280      	movs	r2, #128	; 0x80
 8004acc:	0092      	lsls	r2, r2, #2
 8004ace:	4314      	orrs	r4, r2
    default:
      ret = HAL_ERROR;
      break;
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004ad0:	4a89      	ldr	r2, [pc, #548]	; (8004cf8 <USB_ActivateEndpoint+0x24c>)

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004ad2:	4f8a      	ldr	r7, [pc, #552]	; (8004cfc <USB_ActivateEndpoint+0x250>)
  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 8004ad4:	4314      	orrs	r4, r2
 8004ad6:	b2a4      	uxth	r4, r4
 8004ad8:	802c      	strh	r4, [r5, #0]
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8004ada:	780e      	ldrb	r6, [r1, #0]
 8004adc:	46bc      	mov	ip, r7
 8004ade:	00b5      	lsls	r5, r6, #2
 8004ae0:	195d      	adds	r5, r3, r5
 8004ae2:	882c      	ldrh	r4, [r5, #0]
 8004ae4:	403c      	ands	r4, r7
 8004ae6:	4334      	orrs	r4, r6
 8004ae8:	001e      	movs	r6, r3
 8004aea:	4314      	orrs	r4, r2
 8004aec:	b2a4      	uxth	r4, r4
 8004aee:	802c      	strh	r4, [r5, #0]

  if (ep->doublebuffer == 0U)
 8004af0:	7b0d      	ldrb	r5, [r1, #12]
 8004af2:	780c      	ldrb	r4, [r1, #0]
 8004af4:	3650      	adds	r6, #80	; 0x50
 8004af6:	2d00      	cmp	r5, #0
 8004af8:	d000      	beq.n	8004afc <USB_ActivateEndpoint+0x50>
 8004afa:	e076      	b.n	8004bea <USB_ActivateEndpoint+0x13e>
  {
    if (ep->is_in != 0U)
 8004afc:	00e4      	lsls	r4, r4, #3
 8004afe:	18e4      	adds	r4, r4, r3
 8004b00:	88cd      	ldrh	r5, [r1, #6]
 8004b02:	9401      	str	r4, [sp, #4]
 8004b04:	784c      	ldrb	r4, [r1, #1]
 8004b06:	086d      	lsrs	r5, r5, #1
 8004b08:	006d      	lsls	r5, r5, #1
 8004b0a:	2c00      	cmp	r4, #0
 8004b0c:	d02a      	beq.n	8004b64 <USB_ActivateEndpoint+0xb8>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b0e:	8836      	ldrh	r6, [r6, #0]
 8004b10:	9c01      	ldr	r4, [sp, #4]
 8004b12:	1934      	adds	r4, r6, r4
 8004b14:	2680      	movs	r6, #128	; 0x80
 8004b16:	00f6      	lsls	r6, r6, #3
 8004b18:	19a4      	adds	r4, r4, r6
 8004b1a:	8025      	strh	r5, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004b1c:	780c      	ldrb	r4, [r1, #0]
 8004b1e:	00a4      	lsls	r4, r4, #2
 8004b20:	191c      	adds	r4, r3, r4
 8004b22:	8825      	ldrh	r5, [r4, #0]
 8004b24:	066d      	lsls	r5, r5, #25
 8004b26:	d504      	bpl.n	8004b32 <USB_ActivateEndpoint+0x86>
 8004b28:	8825      	ldrh	r5, [r4, #0]
 8004b2a:	402f      	ands	r7, r5
 8004b2c:	4d74      	ldr	r5, [pc, #464]	; (8004d00 <USB_ActivateEndpoint+0x254>)
 8004b2e:	432f      	orrs	r7, r5
 8004b30:	8027      	strh	r7, [r4, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004b32:	780c      	ldrb	r4, [r1, #0]
 8004b34:	78c9      	ldrb	r1, [r1, #3]
 8004b36:	00a4      	lsls	r4, r4, #2
 8004b38:	191b      	adds	r3, r3, r4
 8004b3a:	4c72      	ldr	r4, [pc, #456]	; (8004d04 <USB_ActivateEndpoint+0x258>)
 8004b3c:	2901      	cmp	r1, #1
 8004b3e:	d00e      	beq.n	8004b5e <USB_ActivateEndpoint+0xb2>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004b40:	8819      	ldrh	r1, [r3, #0]
 8004b42:	400c      	ands	r4, r1
 8004b44:	2120      	movs	r1, #32
      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004b46:	4061      	eors	r1, r4
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b48:	430a      	orrs	r2, r1
 8004b4a:	e09f      	b.n	8004c8c <USB_ActivateEndpoint+0x1e0>
      wEpRegVal |= USB_EP_INTERRUPT;
 8004b4c:	22c0      	movs	r2, #192	; 0xc0
 8004b4e:	00d2      	lsls	r2, r2, #3
 8004b50:	4314      	orrs	r4, r2
  HAL_StatusTypeDef ret = HAL_OK;
 8004b52:	2000      	movs	r0, #0
      break;
 8004b54:	e7bc      	b.n	8004ad0 <USB_ActivateEndpoint+0x24>
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 8004b56:	2280      	movs	r2, #128	; 0x80
 8004b58:	e7f9      	b.n	8004b4e <USB_ActivateEndpoint+0xa2>
      ret = HAL_ERROR;
 8004b5a:	2001      	movs	r0, #1
 8004b5c:	e7b8      	b.n	8004ad0 <USB_ActivateEndpoint+0x24>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004b5e:	8819      	ldrh	r1, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004b60:	4021      	ands	r1, r4
 8004b62:	e7f1      	b.n	8004b48 <USB_ActivateEndpoint+0x9c>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8004b64:	8837      	ldrh	r7, [r6, #0]
 8004b66:	9c01      	ldr	r4, [sp, #4]
 8004b68:	193c      	adds	r4, r7, r4
 8004b6a:	4f67      	ldr	r7, [pc, #412]	; (8004d08 <USB_ActivateEndpoint+0x25c>)
 8004b6c:	19e4      	adds	r4, r4, r7
 8004b6e:	8025      	strh	r5, [r4, #0]
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004b70:	780c      	ldrb	r4, [r1, #0]
 8004b72:	8835      	ldrh	r5, [r6, #0]
 8004b74:	00e4      	lsls	r4, r4, #3
 8004b76:	4e65      	ldr	r6, [pc, #404]	; (8004d0c <USB_ActivateEndpoint+0x260>)
 8004b78:	18e4      	adds	r4, r4, r3
 8004b7a:	19a4      	adds	r4, r4, r6
 8004b7c:	1964      	adds	r4, r4, r5
 8004b7e:	690d      	ldr	r5, [r1, #16]
 8004b80:	2d00      	cmp	r5, #0
 8004b82:	d11d      	bne.n	8004bc0 <USB_ActivateEndpoint+0x114>
 8004b84:	8825      	ldrh	r5, [r4, #0]
 8004b86:	4e62      	ldr	r6, [pc, #392]	; (8004d10 <USB_ActivateEndpoint+0x264>)
 8004b88:	4035      	ands	r5, r6
 8004b8a:	2680      	movs	r6, #128	; 0x80
 8004b8c:	8025      	strh	r5, [r4, #0]
 8004b8e:	8825      	ldrh	r5, [r4, #0]
 8004b90:	0236      	lsls	r6, r6, #8
 8004b92:	4335      	orrs	r5, r6
 8004b94:	8025      	strh	r5, [r4, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004b96:	780c      	ldrb	r4, [r1, #0]
 8004b98:	00a4      	lsls	r4, r4, #2
 8004b9a:	191c      	adds	r4, r3, r4
 8004b9c:	8825      	ldrh	r5, [r4, #0]
 8004b9e:	046d      	lsls	r5, r5, #17
 8004ba0:	d505      	bpl.n	8004bae <USB_ActivateEndpoint+0x102>
 8004ba2:	4666      	mov	r6, ip
 8004ba4:	8825      	ldrh	r5, [r4, #0]
 8004ba6:	4035      	ands	r5, r6
 8004ba8:	4e5a      	ldr	r6, [pc, #360]	; (8004d14 <USB_ActivateEndpoint+0x268>)
 8004baa:	4335      	orrs	r5, r6
 8004bac:	8025      	strh	r5, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004bae:	7809      	ldrb	r1, [r1, #0]
 8004bb0:	4c59      	ldr	r4, [pc, #356]	; (8004d18 <USB_ActivateEndpoint+0x26c>)
 8004bb2:	0089      	lsls	r1, r1, #2
 8004bb4:	185b      	adds	r3, r3, r1
 8004bb6:	8819      	ldrh	r1, [r3, #0]
 8004bb8:	400c      	ands	r4, r1
 8004bba:	21c0      	movs	r1, #192	; 0xc0
 8004bbc:	0189      	lsls	r1, r1, #6
 8004bbe:	e7c2      	b.n	8004b46 <USB_ActivateEndpoint+0x9a>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8004bc0:	2d3e      	cmp	r5, #62	; 0x3e
 8004bc2:	d806      	bhi.n	8004bd2 <USB_ActivateEndpoint+0x126>
 8004bc4:	2701      	movs	r7, #1
 8004bc6:	086e      	lsrs	r6, r5, #1
 8004bc8:	403d      	ands	r5, r7
 8004bca:	1976      	adds	r6, r6, r5
 8004bcc:	02b6      	lsls	r6, r6, #10
 8004bce:	b2b5      	uxth	r5, r6
 8004bd0:	e7e0      	b.n	8004b94 <USB_ActivateEndpoint+0xe8>
 8004bd2:	271f      	movs	r7, #31
 8004bd4:	096e      	lsrs	r6, r5, #5
 8004bd6:	403d      	ands	r5, r7
 8004bd8:	426f      	negs	r7, r5
 8004bda:	417d      	adcs	r5, r7
 8004bdc:	1b76      	subs	r6, r6, r5
 8004bde:	02b5      	lsls	r5, r6, #10
 8004be0:	4e4e      	ldr	r6, [pc, #312]	; (8004d1c <USB_ActivateEndpoint+0x270>)
 8004be2:	432e      	orrs	r6, r5
 8004be4:	b2b6      	uxth	r6, r6
 8004be6:	8026      	strh	r6, [r4, #0]
 8004be8:	e7d5      	b.n	8004b96 <USB_ActivateEndpoint+0xea>
    if (ep->type == EP_TYPE_BULK)
 8004bea:	78cd      	ldrb	r5, [r1, #3]
 8004bec:	00a4      	lsls	r4, r4, #2
 8004bee:	191c      	adds	r4, r3, r4
 8004bf0:	2d02      	cmp	r5, #2
 8004bf2:	d14e      	bne.n	8004c92 <USB_ActivateEndpoint+0x1e6>
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004bf4:	8825      	ldrh	r5, [r4, #0]
 8004bf6:	403d      	ands	r5, r7
 8004bf8:	4f49      	ldr	r7, [pc, #292]	; (8004d20 <USB_ActivateEndpoint+0x274>)
 8004bfa:	433d      	orrs	r5, r7
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004bfc:	2780      	movs	r7, #128	; 0x80
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004bfe:	8025      	strh	r5, [r4, #0]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 8004c00:	780c      	ldrb	r4, [r1, #0]
 8004c02:	8835      	ldrh	r5, [r6, #0]
 8004c04:	00e4      	lsls	r4, r4, #3
 8004c06:	00ff      	lsls	r7, r7, #3
 8004c08:	191c      	adds	r4, r3, r4
 8004c0a:	19e4      	adds	r4, r4, r7
 8004c0c:	1964      	adds	r4, r4, r5
 8004c0e:	890d      	ldrh	r5, [r1, #8]
 8004c10:	086d      	lsrs	r5, r5, #1
 8004c12:	006d      	lsls	r5, r5, #1
 8004c14:	8025      	strh	r5, [r4, #0]
 8004c16:	780c      	ldrb	r4, [r1, #0]
 8004c18:	8835      	ldrh	r5, [r6, #0]
 8004c1a:	00e4      	lsls	r4, r4, #3
 8004c1c:	4e3a      	ldr	r6, [pc, #232]	; (8004d08 <USB_ActivateEndpoint+0x25c>)
 8004c1e:	191c      	adds	r4, r3, r4
 8004c20:	19a4      	adds	r4, r4, r6
 8004c22:	2680      	movs	r6, #128	; 0x80
 8004c24:	1964      	adds	r4, r4, r5
 8004c26:	894d      	ldrh	r5, [r1, #10]
 8004c28:	01f6      	lsls	r6, r6, #7
 8004c2a:	086d      	lsrs	r5, r5, #1
 8004c2c:	006d      	lsls	r5, r5, #1
 8004c2e:	8025      	strh	r5, [r4, #0]
    if (ep->is_in == 0U)
 8004c30:	780c      	ldrb	r4, [r1, #0]
 8004c32:	784f      	ldrb	r7, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c34:	00a4      	lsls	r4, r4, #2
 8004c36:	4d33      	ldr	r5, [pc, #204]	; (8004d04 <USB_ActivateEndpoint+0x258>)
 8004c38:	191c      	adds	r4, r3, r4
    if (ep->is_in == 0U)
 8004c3a:	2f00      	cmp	r7, #0
 8004c3c:	d12f      	bne.n	8004c9e <USB_ActivateEndpoint+0x1f2>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c3e:	8827      	ldrh	r7, [r4, #0]
 8004c40:	4237      	tst	r7, r6
 8004c42:	d005      	beq.n	8004c50 <USB_ActivateEndpoint+0x1a4>
 8004c44:	4667      	mov	r7, ip
 8004c46:	8826      	ldrh	r6, [r4, #0]
 8004c48:	403e      	ands	r6, r7
 8004c4a:	4f32      	ldr	r7, [pc, #200]	; (8004d14 <USB_ActivateEndpoint+0x268>)
 8004c4c:	433e      	orrs	r6, r7
 8004c4e:	8026      	strh	r6, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004c50:	780c      	ldrb	r4, [r1, #0]
 8004c52:	00a4      	lsls	r4, r4, #2
 8004c54:	191c      	adds	r4, r3, r4
 8004c56:	8826      	ldrh	r6, [r4, #0]
 8004c58:	0676      	lsls	r6, r6, #25
 8004c5a:	d505      	bpl.n	8004c68 <USB_ActivateEndpoint+0x1bc>
 8004c5c:	4667      	mov	r7, ip
 8004c5e:	8826      	ldrh	r6, [r4, #0]
 8004c60:	403e      	ands	r6, r7
 8004c62:	4f27      	ldr	r7, [pc, #156]	; (8004d00 <USB_ActivateEndpoint+0x254>)
 8004c64:	433e      	orrs	r6, r7
 8004c66:	8026      	strh	r6, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004c68:	780e      	ldrb	r6, [r1, #0]
 8004c6a:	4c2b      	ldr	r4, [pc, #172]	; (8004d18 <USB_ActivateEndpoint+0x26c>)
 8004c6c:	00b6      	lsls	r6, r6, #2
 8004c6e:	199e      	adds	r6, r3, r6
 8004c70:	8837      	ldrh	r7, [r6, #0]
 8004c72:	4027      	ands	r7, r4
 8004c74:	24c0      	movs	r4, #192	; 0xc0
 8004c76:	01a4      	lsls	r4, r4, #6
 8004c78:	407c      	eors	r4, r7
 8004c7a:	4314      	orrs	r4, r2
 8004c7c:	b2a4      	uxth	r4, r4
 8004c7e:	8034      	strh	r4, [r6, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004c80:	7809      	ldrb	r1, [r1, #0]
 8004c82:	0089      	lsls	r1, r1, #2
 8004c84:	185b      	adds	r3, r3, r1
 8004c86:	8819      	ldrh	r1, [r3, #0]
 8004c88:	400d      	ands	r5, r1
 8004c8a:	432a      	orrs	r2, r5
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004c8c:	b292      	uxth	r2, r2
 8004c8e:	801a      	strh	r2, [r3, #0]
    }
  }

  return ret;
}
 8004c90:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 8004c92:	8825      	ldrh	r5, [r4, #0]
 8004c94:	4f23      	ldr	r7, [pc, #140]	; (8004d24 <USB_ActivateEndpoint+0x278>)
 8004c96:	403d      	ands	r5, r7
 8004c98:	4315      	orrs	r5, r2
 8004c9a:	b2ad      	uxth	r5, r5
 8004c9c:	e7ae      	b.n	8004bfc <USB_ActivateEndpoint+0x150>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004c9e:	8827      	ldrh	r7, [r4, #0]
 8004ca0:	4237      	tst	r7, r6
 8004ca2:	d005      	beq.n	8004cb0 <USB_ActivateEndpoint+0x204>
 8004ca4:	4667      	mov	r7, ip
 8004ca6:	8826      	ldrh	r6, [r4, #0]
 8004ca8:	403e      	ands	r6, r7
 8004caa:	4f1a      	ldr	r7, [pc, #104]	; (8004d14 <USB_ActivateEndpoint+0x268>)
 8004cac:	433e      	orrs	r6, r7
 8004cae:	8026      	strh	r6, [r4, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004cb0:	780c      	ldrb	r4, [r1, #0]
 8004cb2:	00a4      	lsls	r4, r4, #2
 8004cb4:	191c      	adds	r4, r3, r4
 8004cb6:	8826      	ldrh	r6, [r4, #0]
 8004cb8:	0676      	lsls	r6, r6, #25
 8004cba:	d505      	bpl.n	8004cc8 <USB_ActivateEndpoint+0x21c>
 8004cbc:	4667      	mov	r7, ip
 8004cbe:	8826      	ldrh	r6, [r4, #0]
 8004cc0:	403e      	ands	r6, r7
 8004cc2:	4f0f      	ldr	r7, [pc, #60]	; (8004d00 <USB_ActivateEndpoint+0x254>)
 8004cc4:	433e      	orrs	r6, r7
 8004cc6:	8026      	strh	r6, [r4, #0]
      if (ep->type != EP_TYPE_ISOC)
 8004cc8:	780c      	ldrb	r4, [r1, #0]
 8004cca:	78ce      	ldrb	r6, [r1, #3]
 8004ccc:	00a4      	lsls	r4, r4, #2
 8004cce:	191c      	adds	r4, r3, r4
 8004cd0:	2e01      	cmp	r6, #1
 8004cd2:	d00c      	beq.n	8004cee <USB_ActivateEndpoint+0x242>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004cd4:	8826      	ldrh	r6, [r4, #0]
 8004cd6:	402e      	ands	r6, r5
 8004cd8:	2520      	movs	r5, #32
 8004cda:	4075      	eors	r5, r6
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cdc:	4315      	orrs	r5, r2
 8004cde:	b2ad      	uxth	r5, r5
 8004ce0:	8025      	strh	r5, [r4, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004ce2:	7809      	ldrb	r1, [r1, #0]
 8004ce4:	4c0c      	ldr	r4, [pc, #48]	; (8004d18 <USB_ActivateEndpoint+0x26c>)
 8004ce6:	0089      	lsls	r1, r1, #2
 8004ce8:	185b      	adds	r3, r3, r1
 8004cea:	8819      	ldrh	r1, [r3, #0]
 8004cec:	e738      	b.n	8004b60 <USB_ActivateEndpoint+0xb4>
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004cee:	8826      	ldrh	r6, [r4, #0]
 8004cf0:	4035      	ands	r5, r6
 8004cf2:	e7f3      	b.n	8004cdc <USB_ActivateEndpoint+0x230>
 8004cf4:	ffff898f 	.word	0xffff898f
 8004cf8:	ffff8080 	.word	0xffff8080
 8004cfc:	ffff8f8f 	.word	0xffff8f8f
 8004d00:	000080c0 	.word	0x000080c0
 8004d04:	ffff8fbf 	.word	0xffff8fbf
 8004d08:	00000404 	.word	0x00000404
 8004d0c:	00000406 	.word	0x00000406
 8004d10:	ffff83ff 	.word	0xffff83ff
 8004d14:	0000c080 	.word	0x0000c080
 8004d18:	ffffbf8f 	.word	0xffffbf8f
 8004d1c:	ffff8000 	.word	0xffff8000
 8004d20:	00008180 	.word	0x00008180
 8004d24:	ffff8e8f 	.word	0xffff8e8f

08004d28 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8004d28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004d2a:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0U)
 8004d2c:	7b0d      	ldrb	r5, [r1, #12]
 8004d2e:	009b      	lsls	r3, r3, #2
 8004d30:	784c      	ldrb	r4, [r1, #1]
 8004d32:	4a40      	ldr	r2, [pc, #256]	; (8004e34 <USB_DeactivateEndpoint+0x10c>)
 8004d34:	18c3      	adds	r3, r0, r3
 8004d36:	2d00      	cmp	r5, #0
 8004d38:	d121      	bne.n	8004d7e <USB_DeactivateEndpoint+0x56>
  {
    if (ep->is_in != 0U)
 8004d3a:	2c00      	cmp	r4, #0
 8004d3c:	d010      	beq.n	8004d60 <USB_DeactivateEndpoint+0x38>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d3e:	881c      	ldrh	r4, [r3, #0]
 8004d40:	0664      	lsls	r4, r4, #25
 8004d42:	d505      	bpl.n	8004d50 <USB_DeactivateEndpoint+0x28>
 8004d44:	881c      	ldrh	r4, [r3, #0]
 8004d46:	4d3c      	ldr	r5, [pc, #240]	; (8004e38 <USB_DeactivateEndpoint+0x110>)
 8004d48:	402c      	ands	r4, r5
 8004d4a:	4d3c      	ldr	r5, [pc, #240]	; (8004e3c <USB_DeactivateEndpoint+0x114>)
 8004d4c:	432c      	orrs	r4, r5
 8004d4e:	801c      	strh	r4, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004d50:	780b      	ldrb	r3, [r1, #0]
 8004d52:	493b      	ldr	r1, [pc, #236]	; (8004e40 <USB_DeactivateEndpoint+0x118>)
 8004d54:	009b      	lsls	r3, r3, #2
 8004d56:	18c0      	adds	r0, r0, r3
 8004d58:	8803      	ldrh	r3, [r0, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
      PCD_RX_DTOG(USBx, ep->num);

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d5a:	400b      	ands	r3, r1
 8004d5c:	431a      	orrs	r2, r3
 8004d5e:	e03f      	b.n	8004de0 <USB_DeactivateEndpoint+0xb8>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d60:	881c      	ldrh	r4, [r3, #0]
 8004d62:	0464      	lsls	r4, r4, #17
 8004d64:	d505      	bpl.n	8004d72 <USB_DeactivateEndpoint+0x4a>
 8004d66:	881c      	ldrh	r4, [r3, #0]
 8004d68:	4d33      	ldr	r5, [pc, #204]	; (8004e38 <USB_DeactivateEndpoint+0x110>)
 8004d6a:	402c      	ands	r4, r5
 8004d6c:	4d35      	ldr	r5, [pc, #212]	; (8004e44 <USB_DeactivateEndpoint+0x11c>)
 8004d6e:	432c      	orrs	r4, r5
 8004d70:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004d72:	780b      	ldrb	r3, [r1, #0]
 8004d74:	4934      	ldr	r1, [pc, #208]	; (8004e48 <USB_DeactivateEndpoint+0x120>)
 8004d76:	009b      	lsls	r3, r3, #2
 8004d78:	18c0      	adds	r0, r0, r3
 8004d7a:	8803      	ldrh	r3, [r0, #0]
 8004d7c:	e7ed      	b.n	8004d5a <USB_DeactivateEndpoint+0x32>
    if (ep->is_in == 0U)
 8004d7e:	2680      	movs	r6, #128	; 0x80
 8004d80:	4d2d      	ldr	r5, [pc, #180]	; (8004e38 <USB_DeactivateEndpoint+0x110>)
 8004d82:	4f2f      	ldr	r7, [pc, #188]	; (8004e40 <USB_DeactivateEndpoint+0x118>)
 8004d84:	01f6      	lsls	r6, r6, #7
 8004d86:	2c00      	cmp	r4, #0
 8004d88:	d12e      	bne.n	8004de8 <USB_DeactivateEndpoint+0xc0>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004d8a:	881c      	ldrh	r4, [r3, #0]
 8004d8c:	4234      	tst	r4, r6
 8004d8e:	d004      	beq.n	8004d9a <USB_DeactivateEndpoint+0x72>
 8004d90:	881c      	ldrh	r4, [r3, #0]
 8004d92:	4e2c      	ldr	r6, [pc, #176]	; (8004e44 <USB_DeactivateEndpoint+0x11c>)
 8004d94:	402c      	ands	r4, r5
 8004d96:	4334      	orrs	r4, r6
 8004d98:	801c      	strh	r4, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004d9a:	780b      	ldrb	r3, [r1, #0]
 8004d9c:	4c2b      	ldr	r4, [pc, #172]	; (8004e4c <USB_DeactivateEndpoint+0x124>)
 8004d9e:	009b      	lsls	r3, r3, #2
 8004da0:	18c3      	adds	r3, r0, r3
 8004da2:	881e      	ldrh	r6, [r3, #0]
 8004da4:	0676      	lsls	r6, r6, #25
 8004da6:	d504      	bpl.n	8004db2 <USB_DeactivateEndpoint+0x8a>
 8004da8:	881e      	ldrh	r6, [r3, #0]
 8004daa:	402e      	ands	r6, r5
 8004dac:	4326      	orrs	r6, r4
 8004dae:	b2b6      	uxth	r6, r6
 8004db0:	801e      	strh	r6, [r3, #0]
      PCD_TX_DTOG(USBx, ep->num);
 8004db2:	780b      	ldrb	r3, [r1, #0]
 8004db4:	009b      	lsls	r3, r3, #2
 8004db6:	18c3      	adds	r3, r0, r3
 8004db8:	881e      	ldrh	r6, [r3, #0]
 8004dba:	4035      	ands	r5, r6
 8004dbc:	432c      	orrs	r4, r5
 8004dbe:	b2a4      	uxth	r4, r4
 8004dc0:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004dc2:	780c      	ldrb	r4, [r1, #0]
 8004dc4:	4d20      	ldr	r5, [pc, #128]	; (8004e48 <USB_DeactivateEndpoint+0x120>)
 8004dc6:	00a4      	lsls	r4, r4, #2
 8004dc8:	1904      	adds	r4, r0, r4
 8004dca:	8823      	ldrh	r3, [r4, #0]
 8004dcc:	402b      	ands	r3, r5
 8004dce:	4313      	orrs	r3, r2
 8004dd0:	b29b      	uxth	r3, r3
 8004dd2:	8023      	strh	r3, [r4, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004dd4:	780b      	ldrb	r3, [r1, #0]
 8004dd6:	009b      	lsls	r3, r3, #2
 8004dd8:	18c0      	adds	r0, r0, r3
 8004dda:	8803      	ldrh	r3, [r0, #0]
 8004ddc:	401f      	ands	r7, r3
 8004dde:	433a      	orrs	r2, r7
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8004de0:	b292      	uxth	r2, r2
 8004de2:	8002      	strh	r2, [r0, #0]
    }
  }

  return HAL_OK;
}
 8004de4:	2000      	movs	r0, #0
 8004de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004de8:	881c      	ldrh	r4, [r3, #0]
 8004dea:	4234      	tst	r4, r6
 8004dec:	d005      	beq.n	8004dfa <USB_DeactivateEndpoint+0xd2>
 8004dee:	881e      	ldrh	r6, [r3, #0]
 8004df0:	4c17      	ldr	r4, [pc, #92]	; (8004e50 <USB_DeactivateEndpoint+0x128>)
 8004df2:	402e      	ands	r6, r5
 8004df4:	4326      	orrs	r6, r4
 8004df6:	b2b6      	uxth	r6, r6
 8004df8:	801e      	strh	r6, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004dfa:	780b      	ldrb	r3, [r1, #0]
 8004dfc:	009b      	lsls	r3, r3, #2
 8004dfe:	18c3      	adds	r3, r0, r3
 8004e00:	881e      	ldrh	r6, [r3, #0]
 8004e02:	0674      	lsls	r4, r6, #25
 8004e04:	d504      	bpl.n	8004e10 <USB_DeactivateEndpoint+0xe8>
 8004e06:	881e      	ldrh	r6, [r3, #0]
 8004e08:	4c0c      	ldr	r4, [pc, #48]	; (8004e3c <USB_DeactivateEndpoint+0x114>)
 8004e0a:	402e      	ands	r6, r5
 8004e0c:	4326      	orrs	r6, r4
 8004e0e:	801e      	strh	r6, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8004e10:	780b      	ldrb	r3, [r1, #0]
 8004e12:	4c0f      	ldr	r4, [pc, #60]	; (8004e50 <USB_DeactivateEndpoint+0x128>)
 8004e14:	009b      	lsls	r3, r3, #2
 8004e16:	18c3      	adds	r3, r0, r3
 8004e18:	881e      	ldrh	r6, [r3, #0]
 8004e1a:	4035      	ands	r5, r6
 8004e1c:	432c      	orrs	r4, r5
 8004e1e:	b2a4      	uxth	r4, r4
 8004e20:	801c      	strh	r4, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8004e22:	780b      	ldrb	r3, [r1, #0]
 8004e24:	009b      	lsls	r3, r3, #2
 8004e26:	18c3      	adds	r3, r0, r3
 8004e28:	881c      	ldrh	r4, [r3, #0]
 8004e2a:	4027      	ands	r7, r4
 8004e2c:	4317      	orrs	r7, r2
 8004e2e:	b2bf      	uxth	r7, r7
 8004e30:	801f      	strh	r7, [r3, #0]
 8004e32:	e79e      	b.n	8004d72 <USB_DeactivateEndpoint+0x4a>
 8004e34:	ffff8080 	.word	0xffff8080
 8004e38:	ffff8f8f 	.word	0xffff8f8f
 8004e3c:	000080c0 	.word	0x000080c0
 8004e40:	ffff8fbf 	.word	0xffff8fbf
 8004e44:	0000c080 	.word	0x0000c080
 8004e48:	ffffbf8f 	.word	0xffffbf8f
 8004e4c:	ffff80c0 	.word	0xffff80c0
 8004e50:	ffffc080 	.word	0xffffc080

08004e54 <USB_EPSetStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->is_in != 0U)
 8004e54:	780b      	ldrb	r3, [r1, #0]
 8004e56:	4a0b      	ldr	r2, [pc, #44]	; (8004e84 <USB_EPSetStall+0x30>)
 8004e58:	009b      	lsls	r3, r3, #2
 8004e5a:	18c0      	adds	r0, r0, r3
 8004e5c:	784b      	ldrb	r3, [r1, #1]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d009      	beq.n	8004e76 <USB_EPSetStall+0x22>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 8004e62:	8803      	ldrh	r3, [r0, #0]
 8004e64:	4908      	ldr	r1, [pc, #32]	; (8004e88 <USB_EPSetStall+0x34>)
 8004e66:	4019      	ands	r1, r3
 8004e68:	2310      	movs	r3, #16
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004e6a:	404b      	eors	r3, r1
 8004e6c:	4313      	orrs	r3, r2
 8004e6e:	b29b      	uxth	r3, r3
 8004e70:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8004e72:	2000      	movs	r0, #0
 8004e74:	4770      	bx	lr
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 8004e76:	8803      	ldrh	r3, [r0, #0]
 8004e78:	4904      	ldr	r1, [pc, #16]	; (8004e8c <USB_EPSetStall+0x38>)
 8004e7a:	4019      	ands	r1, r3
 8004e7c:	2380      	movs	r3, #128	; 0x80
 8004e7e:	015b      	lsls	r3, r3, #5
 8004e80:	e7f3      	b.n	8004e6a <USB_EPSetStall+0x16>
 8004e82:	46c0      	nop			; (mov r8, r8)
 8004e84:	ffff8080 	.word	0xffff8080
 8004e88:	ffff8fbf 	.word	0xffff8fbf
 8004e8c:	ffffbf8f 	.word	0xffffbf8f

08004e90 <USB_EPClearStall>:
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
  if (ep->doublebuffer == 0U)
 8004e90:	7b0b      	ldrb	r3, [r1, #12]
{
 8004e92:	b510      	push	{r4, lr}
  if (ep->doublebuffer == 0U)
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d11c      	bne.n	8004ed2 <USB_EPClearStall+0x42>
  {
    if (ep->is_in != 0U)
 8004e98:	780b      	ldrb	r3, [r1, #0]
 8004e9a:	784a      	ldrb	r2, [r1, #1]
 8004e9c:	009b      	lsls	r3, r3, #2
 8004e9e:	18c3      	adds	r3, r0, r3
 8004ea0:	2a00      	cmp	r2, #0
 8004ea2:	d018      	beq.n	8004ed6 <USB_EPClearStall+0x46>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8004ea4:	881a      	ldrh	r2, [r3, #0]
 8004ea6:	0652      	lsls	r2, r2, #25
 8004ea8:	d505      	bpl.n	8004eb6 <USB_EPClearStall+0x26>
 8004eaa:	881a      	ldrh	r2, [r3, #0]
 8004eac:	4c13      	ldr	r4, [pc, #76]	; (8004efc <USB_EPClearStall+0x6c>)
 8004eae:	4022      	ands	r2, r4
 8004eb0:	4c13      	ldr	r4, [pc, #76]	; (8004f00 <USB_EPClearStall+0x70>)
 8004eb2:	4322      	orrs	r2, r4
 8004eb4:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004eb6:	78cb      	ldrb	r3, [r1, #3]
 8004eb8:	2b01      	cmp	r3, #1
 8004eba:	d00a      	beq.n	8004ed2 <USB_EPClearStall+0x42>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8004ebc:	780b      	ldrb	r3, [r1, #0]
 8004ebe:	4a11      	ldr	r2, [pc, #68]	; (8004f04 <USB_EPClearStall+0x74>)
 8004ec0:	009b      	lsls	r3, r3, #2
 8004ec2:	18c0      	adds	r0, r0, r3
 8004ec4:	8803      	ldrh	r3, [r0, #0]
 8004ec6:	401a      	ands	r2, r3
 8004ec8:	2320      	movs	r3, #32
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004eca:	4053      	eors	r3, r2
 8004ecc:	4a0e      	ldr	r2, [pc, #56]	; (8004f08 <USB_EPClearStall+0x78>)
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	8003      	strh	r3, [r0, #0]
    }
  }

  return HAL_OK;
}
 8004ed2:	2000      	movs	r0, #0
 8004ed4:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8004ed6:	881a      	ldrh	r2, [r3, #0]
 8004ed8:	0452      	lsls	r2, r2, #17
 8004eda:	d505      	bpl.n	8004ee8 <USB_EPClearStall+0x58>
 8004edc:	881a      	ldrh	r2, [r3, #0]
 8004ede:	4c07      	ldr	r4, [pc, #28]	; (8004efc <USB_EPClearStall+0x6c>)
 8004ee0:	4022      	ands	r2, r4
 8004ee2:	4c0a      	ldr	r4, [pc, #40]	; (8004f0c <USB_EPClearStall+0x7c>)
 8004ee4:	4322      	orrs	r2, r4
 8004ee6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004ee8:	780b      	ldrb	r3, [r1, #0]
 8004eea:	4a09      	ldr	r2, [pc, #36]	; (8004f10 <USB_EPClearStall+0x80>)
 8004eec:	009b      	lsls	r3, r3, #2
 8004eee:	18c0      	adds	r0, r0, r3
 8004ef0:	8803      	ldrh	r3, [r0, #0]
 8004ef2:	401a      	ands	r2, r3
 8004ef4:	23c0      	movs	r3, #192	; 0xc0
 8004ef6:	019b      	lsls	r3, r3, #6
 8004ef8:	e7e7      	b.n	8004eca <USB_EPClearStall+0x3a>
 8004efa:	46c0      	nop			; (mov r8, r8)
 8004efc:	ffff8f8f 	.word	0xffff8f8f
 8004f00:	000080c0 	.word	0x000080c0
 8004f04:	ffff8fbf 	.word	0xffff8fbf
 8004f08:	00008080 	.word	0x00008080
 8004f0c:	0000c080 	.word	0x0000c080
 8004f10:	ffffbf8f 	.word	0xffffbf8f

08004f14 <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
  if (address == 0U)
 8004f14:	2900      	cmp	r1, #0
 8004f16:	d102      	bne.n	8004f1e <USB_SetDevAddress+0xa>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 8004f18:	2380      	movs	r3, #128	; 0x80
 8004f1a:	304c      	adds	r0, #76	; 0x4c
 8004f1c:	8003      	strh	r3, [r0, #0]
  }

  return HAL_OK;
}
 8004f1e:	2000      	movs	r0, #0
 8004f20:	4770      	bx	lr

08004f22 <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 8004f22:	2280      	movs	r2, #128	; 0x80
 8004f24:	3058      	adds	r0, #88	; 0x58
 8004f26:	8803      	ldrh	r3, [r0, #0]
 8004f28:	0212      	lsls	r2, r2, #8
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	8003      	strh	r3, [r0, #0]

  return HAL_OK;
}
 8004f2e:	2000      	movs	r0, #0
 8004f30:	4770      	bx	lr

08004f32 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts(USB_TypeDef *USBx)
{
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 8004f32:	3006      	adds	r0, #6
 8004f34:	8fc0      	ldrh	r0, [r0, #62]	; 0x3e
 8004f36:	b280      	uxth	r0, r0
  return tmpreg;
}
 8004f38:	4770      	bx	lr

08004f3a <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8004f3a:	b530      	push	{r4, r5, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp1, temp2;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f3c:	2480      	movs	r4, #128	; 0x80
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004f3e:	3301      	adds	r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f40:	00e4      	lsls	r4, r4, #3
 8004f42:	1912      	adds	r2, r2, r4
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8004f44:	085b      	lsrs	r3, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8004f46:	1880      	adds	r0, r0, r2

  for (i = n; i != 0U; i--)
 8004f48:	005b      	lsls	r3, r3, #1
 8004f4a:	18cb      	adds	r3, r1, r3
 8004f4c:	1a40      	subs	r0, r0, r1
 8004f4e:	1844      	adds	r4, r0, r1
 8004f50:	4299      	cmp	r1, r3
 8004f52:	d100      	bne.n	8004f56 <USB_WritePMA+0x1c>
    pdwVal++;
#endif

    pBuf++;
  }
}
 8004f54:	bd30      	pop	{r4, r5, pc}
    temp2 = temp1 | ((uint16_t)((uint16_t) *pBuf << 8));
 8004f56:	784a      	ldrb	r2, [r1, #1]
 8004f58:	780d      	ldrb	r5, [r1, #0]
 8004f5a:	0212      	lsls	r2, r2, #8
 8004f5c:	432a      	orrs	r2, r5
    *pdwVal = (uint16_t)temp2;
 8004f5e:	8022      	strh	r2, [r4, #0]
    pBuf++;
 8004f60:	3102      	adds	r1, #2
  for (i = n; i != 0U; i--)
 8004f62:	e7f4      	b.n	8004f4e <USB_WritePMA+0x14>

08004f64 <USB_EPStartXfer>:
{
 8004f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004f66:	000c      	movs	r4, r1
  if (ep->is_in == 1U)
 8004f68:	7849      	ldrb	r1, [r1, #1]
{
 8004f6a:	0005      	movs	r5, r0
 8004f6c:	7b22      	ldrb	r2, [r4, #12]
  if (ep->is_in == 1U)
 8004f6e:	2901      	cmp	r1, #1
 8004f70:	d000      	beq.n	8004f74 <USB_EPStartXfer+0x10>
 8004f72:	e171      	b.n	8005258 <USB_EPStartXfer+0x2f4>
    if (ep->xfer_len > ep->maxpacket)
 8004f74:	6927      	ldr	r7, [r4, #16]
 8004f76:	69a6      	ldr	r6, [r4, #24]
 8004f78:	42be      	cmp	r6, r7
 8004f7a:	d900      	bls.n	8004f7e <USB_EPStartXfer+0x1a>
 8004f7c:	003e      	movs	r6, r7
    if (ep->doublebuffer == 0U)
 8004f7e:	6963      	ldr	r3, [r4, #20]
 8004f80:	9301      	str	r3, [sp, #4]
 8004f82:	2a00      	cmp	r2, #0
 8004f84:	d11e      	bne.n	8004fc4 <USB_EPStartXfer+0x60>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8004f86:	b2b6      	uxth	r6, r6
 8004f88:	0033      	movs	r3, r6
 8004f8a:	88e2      	ldrh	r2, [r4, #6]
 8004f8c:	9901      	ldr	r1, [sp, #4]
 8004f8e:	0028      	movs	r0, r5
 8004f90:	f7ff ffd3 	bl	8004f3a <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8004f94:	002b      	movs	r3, r5
 8004f96:	4ac0      	ldr	r2, [pc, #768]	; (8005298 <USB_EPStartXfer+0x334>)
 8004f98:	3350      	adds	r3, #80	; 0x50
 8004f9a:	8819      	ldrh	r1, [r3, #0]
 8004f9c:	7823      	ldrb	r3, [r4, #0]
 8004f9e:	18aa      	adds	r2, r5, r2
 8004fa0:	00db      	lsls	r3, r3, #3
 8004fa2:	1852      	adds	r2, r2, r1
 8004fa4:	189b      	adds	r3, r3, r2
 8004fa6:	801e      	strh	r6, [r3, #0]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8004fa8:	7820      	ldrb	r0, [r4, #0]
 8004faa:	4abc      	ldr	r2, [pc, #752]	; (800529c <USB_EPStartXfer+0x338>)
 8004fac:	0080      	lsls	r0, r0, #2
 8004fae:	182d      	adds	r5, r5, r0
 8004fb0:	882b      	ldrh	r3, [r5, #0]
 8004fb2:	401a      	ands	r2, r3
 8004fb4:	2330      	movs	r3, #48	; 0x30
 8004fb6:	4053      	eors	r3, r2
 8004fb8:	4ab9      	ldr	r2, [pc, #740]	; (80052a0 <USB_EPStartXfer+0x33c>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	b29b      	uxth	r3, r3
  return HAL_OK;
 8004fbe:	2000      	movs	r0, #0
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8004fc0:	802b      	strh	r3, [r5, #0]
}
 8004fc2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      if (ep->type == EP_TYPE_BULK)
 8004fc4:	7820      	ldrb	r0, [r4, #0]
 8004fc6:	78e1      	ldrb	r1, [r4, #3]
 8004fc8:	0082      	lsls	r2, r0, #2
 8004fca:	6a23      	ldr	r3, [r4, #32]
 8004fcc:	18aa      	adds	r2, r5, r2
 8004fce:	2902      	cmp	r1, #2
 8004fd0:	d000      	beq.n	8004fd4 <USB_EPStartXfer+0x70>
 8004fd2:	e129      	b.n	8005228 <USB_EPStartXfer+0x2c4>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004fd4:	8810      	ldrh	r0, [r2, #0]
        if (ep->xfer_len_db > ep->maxpacket)
 8004fd6:	429f      	cmp	r7, r3
 8004fd8:	d300      	bcc.n	8004fdc <USB_EPStartXfer+0x78>
 8004fda:	e112      	b.n	8005202 <USB_EPStartXfer+0x29e>
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004fdc:	4fb1      	ldr	r7, [pc, #708]	; (80052a4 <USB_EPStartXfer+0x340>)
          ep->xfer_len_db -= len;
 8004fde:	1b9b      	subs	r3, r3, r6
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 8004fe0:	4038      	ands	r0, r7
 8004fe2:	4fb1      	ldr	r7, [pc, #708]	; (80052a8 <USB_EPStartXfer+0x344>)
 8004fe4:	4338      	orrs	r0, r7
 8004fe6:	8010      	strh	r0, [r2, #0]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fe8:	7820      	ldrb	r0, [r4, #0]
          ep->xfer_len_db -= len;
 8004fea:	6223      	str	r3, [r4, #32]
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8004fec:	0083      	lsls	r3, r0, #2
 8004fee:	18eb      	adds	r3, r5, r3
 8004ff0:	881f      	ldrh	r7, [r3, #0]
 8004ff2:	7862      	ldrb	r2, [r4, #1]
 8004ff4:	b2b3      	uxth	r3, r6
 8004ff6:	0679      	lsls	r1, r7, #25
 8004ff8:	d400      	bmi.n	8004ffc <USB_EPStartXfer+0x98>
 8004ffa:	e082      	b.n	8005102 <USB_EPStartXfer+0x19e>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8004ffc:	2a00      	cmp	r2, #0
 8004ffe:	d152      	bne.n	80050a6 <USB_EPStartXfer+0x142>
 8005000:	002a      	movs	r2, r5
 8005002:	3250      	adds	r2, #80	; 0x50
 8005004:	8817      	ldrh	r7, [r2, #0]
 8005006:	4aa9      	ldr	r2, [pc, #676]	; (80052ac <USB_EPStartXfer+0x348>)
 8005008:	00c0      	lsls	r0, r0, #3
 800500a:	18aa      	adds	r2, r5, r2
 800500c:	19d2      	adds	r2, r2, r7
 800500e:	1812      	adds	r2, r2, r0
 8005010:	2e00      	cmp	r6, #0
 8005012:	d135      	bne.n	8005080 <USB_EPStartXfer+0x11c>
 8005014:	8810      	ldrh	r0, [r2, #0]
 8005016:	4fa6      	ldr	r7, [pc, #664]	; (80052b0 <USB_EPStartXfer+0x34c>)
 8005018:	4038      	ands	r0, r7
 800501a:	2780      	movs	r7, #128	; 0x80
 800501c:	8010      	strh	r0, [r2, #0]
 800501e:	8810      	ldrh	r0, [r2, #0]
 8005020:	023f      	lsls	r7, r7, #8
 8005022:	4338      	orrs	r0, r7
 8005024:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005026:	0028      	movs	r0, r5
 8005028:	8962      	ldrh	r2, [r4, #10]
 800502a:	9901      	ldr	r1, [sp, #4]
 800502c:	f7ff ff85 	bl	8004f3a <USB_WritePMA>
            ep->xfer_buff += len;
 8005030:	6963      	ldr	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8005032:	6a22      	ldr	r2, [r4, #32]
 8005034:	6920      	ldr	r0, [r4, #16]
            ep->xfer_buff += len;
 8005036:	1999      	adds	r1, r3, r6
 8005038:	6161      	str	r1, [r4, #20]
              ep->xfer_len_db = 0U;
 800503a:	2300      	movs	r3, #0
            if (ep->xfer_len_db > ep->maxpacket)
 800503c:	4282      	cmp	r2, r0
 800503e:	d901      	bls.n	8005044 <USB_EPStartXfer+0xe0>
              ep->xfer_len_db -= len;
 8005040:	1b93      	subs	r3, r2, r6
 8005042:	0032      	movs	r2, r6
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005044:	7860      	ldrb	r0, [r4, #1]
 8005046:	6223      	str	r3, [r4, #32]
 8005048:	b293      	uxth	r3, r2
 800504a:	2800      	cmp	r0, #0
 800504c:	d14c      	bne.n	80050e8 <USB_EPStartXfer+0x184>
 800504e:	0028      	movs	r0, r5
 8005050:	3050      	adds	r0, #80	; 0x50
 8005052:	8807      	ldrh	r7, [r0, #0]
 8005054:	4890      	ldr	r0, [pc, #576]	; (8005298 <USB_EPStartXfer+0x334>)
 8005056:	7826      	ldrb	r6, [r4, #0]
 8005058:	1828      	adds	r0, r5, r0
 800505a:	00f6      	lsls	r6, r6, #3
 800505c:	19c0      	adds	r0, r0, r7
 800505e:	1830      	adds	r0, r6, r0
 8005060:	2a00      	cmp	r2, #0
 8005062:	d12c      	bne.n	80050be <USB_EPStartXfer+0x15a>
 8005064:	8802      	ldrh	r2, [r0, #0]
 8005066:	4e92      	ldr	r6, [pc, #584]	; (80052b0 <USB_EPStartXfer+0x34c>)
 8005068:	4032      	ands	r2, r6
 800506a:	2680      	movs	r6, #128	; 0x80
 800506c:	8002      	strh	r2, [r0, #0]
 800506e:	8802      	ldrh	r2, [r0, #0]
 8005070:	0236      	lsls	r6, r6, #8
 8005072:	4332      	orrs	r2, r6
 8005074:	8002      	strh	r2, [r0, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005076:	8922      	ldrh	r2, [r4, #8]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005078:	0028      	movs	r0, r5
 800507a:	f7ff ff5e 	bl	8004f3a <USB_WritePMA>
 800507e:	e793      	b.n	8004fa8 <USB_EPStartXfer+0x44>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005080:	2e3e      	cmp	r6, #62	; 0x3e
 8005082:	d806      	bhi.n	8005092 <USB_EPStartXfer+0x12e>
 8005084:	2701      	movs	r7, #1
 8005086:	0870      	lsrs	r0, r6, #1
 8005088:	4037      	ands	r7, r6
 800508a:	19c0      	adds	r0, r0, r7
 800508c:	0280      	lsls	r0, r0, #10
 800508e:	b280      	uxth	r0, r0
 8005090:	e7c8      	b.n	8005024 <USB_EPStartXfer+0xc0>
 8005092:	271f      	movs	r7, #31
 8005094:	4037      	ands	r7, r6
 8005096:	4279      	negs	r1, r7
 8005098:	4179      	adcs	r1, r7
 800509a:	0970      	lsrs	r0, r6, #5
 800509c:	1a40      	subs	r0, r0, r1
 800509e:	0287      	lsls	r7, r0, #10
 80050a0:	4884      	ldr	r0, [pc, #528]	; (80052b4 <USB_EPStartXfer+0x350>)
 80050a2:	4338      	orrs	r0, r7
 80050a4:	e7f3      	b.n	800508e <USB_EPStartXfer+0x12a>
 80050a6:	2a01      	cmp	r2, #1
 80050a8:	d1bd      	bne.n	8005026 <USB_EPStartXfer+0xc2>
 80050aa:	002a      	movs	r2, r5
 80050ac:	497f      	ldr	r1, [pc, #508]	; (80052ac <USB_EPStartXfer+0x348>)
 80050ae:	3250      	adds	r2, #80	; 0x50
 80050b0:	8812      	ldrh	r2, [r2, #0]
 80050b2:	186f      	adds	r7, r5, r1
 80050b4:	18bf      	adds	r7, r7, r2
 80050b6:	00c0      	lsls	r0, r0, #3
 80050b8:	1838      	adds	r0, r7, r0
 80050ba:	8003      	strh	r3, [r0, #0]
 80050bc:	e7b3      	b.n	8005026 <USB_EPStartXfer+0xc2>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80050be:	2a3e      	cmp	r2, #62	; 0x3e
 80050c0:	d806      	bhi.n	80050d0 <USB_EPStartXfer+0x16c>
 80050c2:	2701      	movs	r7, #1
 80050c4:	0856      	lsrs	r6, r2, #1
 80050c6:	403a      	ands	r2, r7
 80050c8:	18b6      	adds	r6, r6, r2
 80050ca:	02b6      	lsls	r6, r6, #10
 80050cc:	b2b2      	uxth	r2, r6
 80050ce:	e7d1      	b.n	8005074 <USB_EPStartXfer+0x110>
 80050d0:	271f      	movs	r7, #31
 80050d2:	0956      	lsrs	r6, r2, #5
 80050d4:	403a      	ands	r2, r7
 80050d6:	4257      	negs	r7, r2
 80050d8:	417a      	adcs	r2, r7
 80050da:	1ab6      	subs	r6, r6, r2
 80050dc:	02b2      	lsls	r2, r6, #10
 80050de:	4e75      	ldr	r6, [pc, #468]	; (80052b4 <USB_EPStartXfer+0x350>)
 80050e0:	4316      	orrs	r6, r2
 80050e2:	b2b6      	uxth	r6, r6
 80050e4:	8006      	strh	r6, [r0, #0]
 80050e6:	e7c6      	b.n	8005076 <USB_EPStartXfer+0x112>
 80050e8:	2801      	cmp	r0, #1
 80050ea:	d1c4      	bne.n	8005076 <USB_EPStartXfer+0x112>
 80050ec:	002a      	movs	r2, r5
 80050ee:	486a      	ldr	r0, [pc, #424]	; (8005298 <USB_EPStartXfer+0x334>)
 80050f0:	3250      	adds	r2, #80	; 0x50
 80050f2:	8816      	ldrh	r6, [r2, #0]
 80050f4:	7822      	ldrb	r2, [r4, #0]
 80050f6:	1828      	adds	r0, r5, r0
 80050f8:	00d2      	lsls	r2, r2, #3
 80050fa:	1980      	adds	r0, r0, r6
 80050fc:	1812      	adds	r2, r2, r0
 80050fe:	8013      	strh	r3, [r2, #0]
 8005100:	e7b9      	b.n	8005076 <USB_EPStartXfer+0x112>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005102:	2a00      	cmp	r2, #0
 8005104:	d14f      	bne.n	80051a6 <USB_EPStartXfer+0x242>
 8005106:	002a      	movs	r2, r5
 8005108:	3250      	adds	r2, #80	; 0x50
 800510a:	8817      	ldrh	r7, [r2, #0]
 800510c:	4a62      	ldr	r2, [pc, #392]	; (8005298 <USB_EPStartXfer+0x334>)
 800510e:	00c0      	lsls	r0, r0, #3
 8005110:	18aa      	adds	r2, r5, r2
 8005112:	19d2      	adds	r2, r2, r7
 8005114:	1812      	adds	r2, r2, r0
 8005116:	2e00      	cmp	r6, #0
 8005118:	d132      	bne.n	8005180 <USB_EPStartXfer+0x21c>
 800511a:	8810      	ldrh	r0, [r2, #0]
 800511c:	4f64      	ldr	r7, [pc, #400]	; (80052b0 <USB_EPStartXfer+0x34c>)
 800511e:	4038      	ands	r0, r7
 8005120:	2780      	movs	r7, #128	; 0x80
 8005122:	8010      	strh	r0, [r2, #0]
 8005124:	8810      	ldrh	r0, [r2, #0]
 8005126:	023f      	lsls	r7, r7, #8
 8005128:	4338      	orrs	r0, r7
 800512a:	8010      	strh	r0, [r2, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800512c:	0028      	movs	r0, r5
 800512e:	8922      	ldrh	r2, [r4, #8]
 8005130:	9901      	ldr	r1, [sp, #4]
 8005132:	f7ff ff02 	bl	8004f3a <USB_WritePMA>
            ep->xfer_buff += len;
 8005136:	6963      	ldr	r3, [r4, #20]
            if (ep->xfer_len_db > ep->maxpacket)
 8005138:	6a22      	ldr	r2, [r4, #32]
 800513a:	6920      	ldr	r0, [r4, #16]
            ep->xfer_buff += len;
 800513c:	1999      	adds	r1, r3, r6
 800513e:	6161      	str	r1, [r4, #20]
              ep->xfer_len_db = 0U;
 8005140:	2300      	movs	r3, #0
            if (ep->xfer_len_db > ep->maxpacket)
 8005142:	4282      	cmp	r2, r0
 8005144:	d901      	bls.n	800514a <USB_EPStartXfer+0x1e6>
              ep->xfer_len_db -= len;
 8005146:	1b93      	subs	r3, r2, r6
 8005148:	0032      	movs	r2, r6
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800514a:	7860      	ldrb	r0, [r4, #1]
 800514c:	6223      	str	r3, [r4, #32]
 800514e:	b293      	uxth	r3, r2
 8005150:	2800      	cmp	r0, #0
 8005152:	d149      	bne.n	80051e8 <USB_EPStartXfer+0x284>
 8005154:	0028      	movs	r0, r5
 8005156:	3050      	adds	r0, #80	; 0x50
 8005158:	8807      	ldrh	r7, [r0, #0]
 800515a:	4854      	ldr	r0, [pc, #336]	; (80052ac <USB_EPStartXfer+0x348>)
 800515c:	7826      	ldrb	r6, [r4, #0]
 800515e:	1828      	adds	r0, r5, r0
 8005160:	00f6      	lsls	r6, r6, #3
 8005162:	19c0      	adds	r0, r0, r7
 8005164:	1830      	adds	r0, r6, r0
 8005166:	2a00      	cmp	r2, #0
 8005168:	d129      	bne.n	80051be <USB_EPStartXfer+0x25a>
 800516a:	8802      	ldrh	r2, [r0, #0]
 800516c:	4e50      	ldr	r6, [pc, #320]	; (80052b0 <USB_EPStartXfer+0x34c>)
 800516e:	4032      	ands	r2, r6
 8005170:	2680      	movs	r6, #128	; 0x80
 8005172:	8002      	strh	r2, [r0, #0]
 8005174:	8802      	ldrh	r2, [r0, #0]
 8005176:	0236      	lsls	r6, r6, #8
 8005178:	4332      	orrs	r2, r6
 800517a:	8002      	strh	r2, [r0, #0]
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 800517c:	8962      	ldrh	r2, [r4, #10]
 800517e:	e77b      	b.n	8005078 <USB_EPStartXfer+0x114>
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8005180:	2e3e      	cmp	r6, #62	; 0x3e
 8005182:	d806      	bhi.n	8005192 <USB_EPStartXfer+0x22e>
 8005184:	2701      	movs	r7, #1
 8005186:	0870      	lsrs	r0, r6, #1
 8005188:	4037      	ands	r7, r6
 800518a:	19c0      	adds	r0, r0, r7
 800518c:	0280      	lsls	r0, r0, #10
 800518e:	b280      	uxth	r0, r0
 8005190:	e7cb      	b.n	800512a <USB_EPStartXfer+0x1c6>
 8005192:	271f      	movs	r7, #31
 8005194:	4037      	ands	r7, r6
 8005196:	4279      	negs	r1, r7
 8005198:	4179      	adcs	r1, r7
 800519a:	0970      	lsrs	r0, r6, #5
 800519c:	1a40      	subs	r0, r0, r1
 800519e:	0287      	lsls	r7, r0, #10
 80051a0:	4844      	ldr	r0, [pc, #272]	; (80052b4 <USB_EPStartXfer+0x350>)
 80051a2:	4338      	orrs	r0, r7
 80051a4:	e7f3      	b.n	800518e <USB_EPStartXfer+0x22a>
 80051a6:	2a01      	cmp	r2, #1
 80051a8:	d1c0      	bne.n	800512c <USB_EPStartXfer+0x1c8>
 80051aa:	002a      	movs	r2, r5
 80051ac:	3250      	adds	r2, #80	; 0x50
 80051ae:	8817      	ldrh	r7, [r2, #0]
 80051b0:	4a39      	ldr	r2, [pc, #228]	; (8005298 <USB_EPStartXfer+0x334>)
 80051b2:	00c0      	lsls	r0, r0, #3
 80051b4:	18aa      	adds	r2, r5, r2
 80051b6:	19d2      	adds	r2, r2, r7
 80051b8:	1810      	adds	r0, r2, r0
 80051ba:	8003      	strh	r3, [r0, #0]
 80051bc:	e7b6      	b.n	800512c <USB_EPStartXfer+0x1c8>
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80051be:	2a3e      	cmp	r2, #62	; 0x3e
 80051c0:	d806      	bhi.n	80051d0 <USB_EPStartXfer+0x26c>
 80051c2:	2701      	movs	r7, #1
 80051c4:	0856      	lsrs	r6, r2, #1
 80051c6:	403a      	ands	r2, r7
 80051c8:	18b6      	adds	r6, r6, r2
 80051ca:	02b6      	lsls	r6, r6, #10
 80051cc:	b2b2      	uxth	r2, r6
 80051ce:	e7d4      	b.n	800517a <USB_EPStartXfer+0x216>
 80051d0:	271f      	movs	r7, #31
 80051d2:	0956      	lsrs	r6, r2, #5
 80051d4:	403a      	ands	r2, r7
 80051d6:	4257      	negs	r7, r2
 80051d8:	417a      	adcs	r2, r7
 80051da:	1ab6      	subs	r6, r6, r2
 80051dc:	02b2      	lsls	r2, r6, #10
 80051de:	4e35      	ldr	r6, [pc, #212]	; (80052b4 <USB_EPStartXfer+0x350>)
 80051e0:	4316      	orrs	r6, r2
 80051e2:	b2b6      	uxth	r6, r6
 80051e4:	8006      	strh	r6, [r0, #0]
 80051e6:	e7c9      	b.n	800517c <USB_EPStartXfer+0x218>
 80051e8:	2801      	cmp	r0, #1
 80051ea:	d1c7      	bne.n	800517c <USB_EPStartXfer+0x218>
 80051ec:	002a      	movs	r2, r5
 80051ee:	482f      	ldr	r0, [pc, #188]	; (80052ac <USB_EPStartXfer+0x348>)
 80051f0:	3250      	adds	r2, #80	; 0x50
 80051f2:	8816      	ldrh	r6, [r2, #0]
 80051f4:	7822      	ldrb	r2, [r4, #0]
 80051f6:	1828      	adds	r0, r5, r0
 80051f8:	00d2      	lsls	r2, r2, #3
 80051fa:	1980      	adds	r0, r0, r6
 80051fc:	1812      	adds	r2, r2, r0
 80051fe:	8013      	strh	r3, [r2, #0]
 8005200:	e7bc      	b.n	800517c <USB_EPStartXfer+0x218>
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 8005202:	4e2d      	ldr	r6, [pc, #180]	; (80052b8 <USB_EPStartXfer+0x354>)
 8005204:	4926      	ldr	r1, [pc, #152]	; (80052a0 <USB_EPStartXfer+0x33c>)
 8005206:	4030      	ands	r0, r6
 8005208:	4308      	orrs	r0, r1
 800520a:	b280      	uxth	r0, r0
 800520c:	8010      	strh	r0, [r2, #0]
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 800520e:	002a      	movs	r2, r5
 8005210:	4921      	ldr	r1, [pc, #132]	; (8005298 <USB_EPStartXfer+0x334>)
 8005212:	3250      	adds	r2, #80	; 0x50
 8005214:	8816      	ldrh	r6, [r2, #0]
 8005216:	7822      	ldrb	r2, [r4, #0]
 8005218:	1868      	adds	r0, r5, r1
 800521a:	00d2      	lsls	r2, r2, #3
 800521c:	1980      	adds	r0, r0, r6
 800521e:	1812      	adds	r2, r2, r0
 8005220:	b29b      	uxth	r3, r3
 8005222:	8013      	strh	r3, [r2, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005224:	8922      	ldrh	r2, [r4, #8]
 8005226:	e00f      	b.n	8005248 <USB_EPStartXfer+0x2e4>
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005228:	8817      	ldrh	r7, [r2, #0]
 800522a:	00c2      	lsls	r2, r0, #3
 800522c:	0028      	movs	r0, r5
        ep->xfer_len_db -= len;
 800522e:	1b9b      	subs	r3, r3, r6
 8005230:	6223      	str	r3, [r4, #32]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005232:	3050      	adds	r0, #80	; 0x50
 8005234:	b2b3      	uxth	r3, r6
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8005236:	8806      	ldrh	r6, [r0, #0]
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8005238:	0679      	lsls	r1, r7, #25
 800523a:	d507      	bpl.n	800524c <USB_EPStartXfer+0x2e8>
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800523c:	491b      	ldr	r1, [pc, #108]	; (80052ac <USB_EPStartXfer+0x348>)
 800523e:	1868      	adds	r0, r5, r1
 8005240:	1980      	adds	r0, r0, r6
 8005242:	1880      	adds	r0, r0, r2
 8005244:	8003      	strh	r3, [r0, #0]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005246:	8962      	ldrh	r2, [r4, #10]
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8005248:	9901      	ldr	r1, [sp, #4]
 800524a:	e715      	b.n	8005078 <USB_EPStartXfer+0x114>
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 800524c:	4912      	ldr	r1, [pc, #72]	; (8005298 <USB_EPStartXfer+0x334>)
 800524e:	1868      	adds	r0, r5, r1
 8005250:	1980      	adds	r0, r0, r6
 8005252:	1880      	adds	r0, r0, r2
 8005254:	8003      	strh	r3, [r0, #0]
 8005256:	e7e5      	b.n	8005224 <USB_EPStartXfer+0x2c0>
    if (ep->doublebuffer == 0U)
 8005258:	2a00      	cmp	r2, #0
 800525a:	d12f      	bne.n	80052bc <USB_EPStartXfer+0x358>
      if (ep->xfer_len > ep->maxpacket)
 800525c:	69a3      	ldr	r3, [r4, #24]
 800525e:	6921      	ldr	r1, [r4, #16]
 8005260:	428b      	cmp	r3, r1
 8005262:	d901      	bls.n	8005268 <USB_EPStartXfer+0x304>
        ep->xfer_len -= len;
 8005264:	1a5a      	subs	r2, r3, r1
 8005266:	000b      	movs	r3, r1
 8005268:	61a2      	str	r2, [r4, #24]
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 800526a:	002a      	movs	r2, r5
 800526c:	490f      	ldr	r1, [pc, #60]	; (80052ac <USB_EPStartXfer+0x348>)
 800526e:	3250      	adds	r2, #80	; 0x50
 8005270:	8810      	ldrh	r0, [r2, #0]
 8005272:	7822      	ldrb	r2, [r4, #0]
 8005274:	1869      	adds	r1, r5, r1
 8005276:	00d2      	lsls	r2, r2, #3
 8005278:	1809      	adds	r1, r1, r0
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 800527a:	1889      	adds	r1, r1, r2
 800527c:	2b00      	cmp	r3, #0
 800527e:	d000      	beq.n	8005282 <USB_EPStartXfer+0x31e>
 8005280:	e0e7      	b.n	8005452 <USB_EPStartXfer+0x4ee>
 8005282:	880b      	ldrh	r3, [r1, #0]
 8005284:	4a0a      	ldr	r2, [pc, #40]	; (80052b0 <USB_EPStartXfer+0x34c>)
 8005286:	4013      	ands	r3, r2
 8005288:	2280      	movs	r2, #128	; 0x80
 800528a:	800b      	strh	r3, [r1, #0]
 800528c:	880b      	ldrh	r3, [r1, #0]
 800528e:	0212      	lsls	r2, r2, #8
 8005290:	4313      	orrs	r3, r2
 8005292:	800b      	strh	r3, [r1, #0]
 8005294:	e077      	b.n	8005386 <USB_EPStartXfer+0x422>
 8005296:	46c0      	nop			; (mov r8, r8)
 8005298:	00000402 	.word	0x00000402
 800529c:	ffff8fbf 	.word	0xffff8fbf
 80052a0:	ffff8080 	.word	0xffff8080
 80052a4:	ffff8f8f 	.word	0xffff8f8f
 80052a8:	00008180 	.word	0x00008180
 80052ac:	00000406 	.word	0x00000406
 80052b0:	ffff83ff 	.word	0xffff83ff
 80052b4:	ffff8000 	.word	0xffff8000
 80052b8:	ffff8e8f 	.word	0xffff8e8f
      if (ep->type == EP_TYPE_BULK)
 80052bc:	78e3      	ldrb	r3, [r4, #3]
 80052be:	2b02      	cmp	r3, #2
 80052c0:	d000      	beq.n	80052c4 <USB_EPStartXfer+0x360>
 80052c2:	e085      	b.n	80053d0 <USB_EPStartXfer+0x46c>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 80052c4:	2900      	cmp	r1, #0
 80052c6:	d11e      	bne.n	8005306 <USB_EPStartXfer+0x3a2>
 80052c8:	0003      	movs	r3, r0
 80052ca:	4a72      	ldr	r2, [pc, #456]	; (8005494 <USB_EPStartXfer+0x530>)
 80052cc:	3350      	adds	r3, #80	; 0x50
 80052ce:	8819      	ldrh	r1, [r3, #0]
 80052d0:	7823      	ldrb	r3, [r4, #0]
 80052d2:	1882      	adds	r2, r0, r2
 80052d4:	00db      	lsls	r3, r3, #3
 80052d6:	1852      	adds	r2, r2, r1
 80052d8:	189a      	adds	r2, r3, r2
 80052da:	6923      	ldr	r3, [r4, #16]
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d109      	bne.n	80052f4 <USB_EPStartXfer+0x390>
 80052e0:	8813      	ldrh	r3, [r2, #0]
 80052e2:	496d      	ldr	r1, [pc, #436]	; (8005498 <USB_EPStartXfer+0x534>)
 80052e4:	400b      	ands	r3, r1
 80052e6:	2180      	movs	r1, #128	; 0x80
 80052e8:	8013      	strh	r3, [r2, #0]
 80052ea:	8813      	ldrh	r3, [r2, #0]
 80052ec:	0209      	lsls	r1, r1, #8
 80052ee:	430b      	orrs	r3, r1
 80052f0:	8013      	strh	r3, [r2, #0]
 80052f2:	e008      	b.n	8005306 <USB_EPStartXfer+0x3a2>
 80052f4:	2b3e      	cmp	r3, #62	; 0x3e
 80052f6:	d81f      	bhi.n	8005338 <USB_EPStartXfer+0x3d4>
 80052f8:	2001      	movs	r0, #1
 80052fa:	0859      	lsrs	r1, r3, #1
 80052fc:	4003      	ands	r3, r0
 80052fe:	18c9      	adds	r1, r1, r3
 8005300:	0289      	lsls	r1, r1, #10
 8005302:	b289      	uxth	r1, r1
 8005304:	8011      	strh	r1, [r2, #0]
 8005306:	7862      	ldrb	r2, [r4, #1]
 8005308:	7823      	ldrb	r3, [r4, #0]
 800530a:	2a00      	cmp	r2, #0
 800530c:	d152      	bne.n	80053b4 <USB_EPStartXfer+0x450>
 800530e:	002a      	movs	r2, r5
 8005310:	3250      	adds	r2, #80	; 0x50
 8005312:	8811      	ldrh	r1, [r2, #0]
 8005314:	4a61      	ldr	r2, [pc, #388]	; (800549c <USB_EPStartXfer+0x538>)
 8005316:	00db      	lsls	r3, r3, #3
 8005318:	18aa      	adds	r2, r5, r2
 800531a:	1852      	adds	r2, r2, r1
 800531c:	18d2      	adds	r2, r2, r3
 800531e:	6923      	ldr	r3, [r4, #16]
 8005320:	2b00      	cmp	r3, #0
 8005322:	d114      	bne.n	800534e <USB_EPStartXfer+0x3ea>
 8005324:	8813      	ldrh	r3, [r2, #0]
 8005326:	495c      	ldr	r1, [pc, #368]	; (8005498 <USB_EPStartXfer+0x534>)
 8005328:	400b      	ands	r3, r1
 800532a:	2180      	movs	r1, #128	; 0x80
 800532c:	8013      	strh	r3, [r2, #0]
 800532e:	8813      	ldrh	r3, [r2, #0]
 8005330:	0209      	lsls	r1, r1, #8
 8005332:	430b      	orrs	r3, r1
 8005334:	8013      	strh	r3, [r2, #0]
 8005336:	e013      	b.n	8005360 <USB_EPStartXfer+0x3fc>
 8005338:	201f      	movs	r0, #31
 800533a:	0959      	lsrs	r1, r3, #5
 800533c:	4003      	ands	r3, r0
 800533e:	4258      	negs	r0, r3
 8005340:	4143      	adcs	r3, r0
 8005342:	1ac9      	subs	r1, r1, r3
 8005344:	4b56      	ldr	r3, [pc, #344]	; (80054a0 <USB_EPStartXfer+0x53c>)
 8005346:	0289      	lsls	r1, r1, #10
 8005348:	430b      	orrs	r3, r1
 800534a:	b29b      	uxth	r3, r3
 800534c:	e7d0      	b.n	80052f0 <USB_EPStartXfer+0x38c>
 800534e:	2b3e      	cmp	r3, #62	; 0x3e
 8005350:	d825      	bhi.n	800539e <USB_EPStartXfer+0x43a>
 8005352:	2001      	movs	r0, #1
 8005354:	0859      	lsrs	r1, r3, #1
 8005356:	4003      	ands	r3, r0
 8005358:	18c9      	adds	r1, r1, r3
 800535a:	0289      	lsls	r1, r1, #10
 800535c:	b289      	uxth	r1, r1
 800535e:	8011      	strh	r1, [r2, #0]
        if (ep->xfer_count != 0U)
 8005360:	69e3      	ldr	r3, [r4, #28]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d00f      	beq.n	8005386 <USB_EPStartXfer+0x422>
 8005366:	7823      	ldrb	r3, [r4, #0]
 8005368:	494e      	ldr	r1, [pc, #312]	; (80054a4 <USB_EPStartXfer+0x540>)
 800536a:	009b      	lsls	r3, r3, #2
 800536c:	18eb      	adds	r3, r5, r3
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 800536e:	881a      	ldrh	r2, [r3, #0]
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8005370:	400a      	ands	r2, r1
 8005372:	428a      	cmp	r2, r1
 8005374:	d001      	beq.n	800537a <USB_EPStartXfer+0x416>
 8005376:	2a00      	cmp	r2, #0
 8005378:	d105      	bne.n	8005386 <USB_EPStartXfer+0x422>
            PCD_FreeUserBuffer(USBx, ep->num, 0U);
 800537a:	881a      	ldrh	r2, [r3, #0]
 800537c:	494a      	ldr	r1, [pc, #296]	; (80054a8 <USB_EPStartXfer+0x544>)
 800537e:	400a      	ands	r2, r1
 8005380:	494a      	ldr	r1, [pc, #296]	; (80054ac <USB_EPStartXfer+0x548>)
 8005382:	430a      	orrs	r2, r1
 8005384:	801a      	strh	r2, [r3, #0]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8005386:	7820      	ldrb	r0, [r4, #0]
 8005388:	4a49      	ldr	r2, [pc, #292]	; (80054b0 <USB_EPStartXfer+0x54c>)
 800538a:	0080      	lsls	r0, r0, #2
 800538c:	182d      	adds	r5, r5, r0
 800538e:	882b      	ldrh	r3, [r5, #0]
 8005390:	401a      	ands	r2, r3
 8005392:	23c0      	movs	r3, #192	; 0xc0
 8005394:	019b      	lsls	r3, r3, #6
 8005396:	4053      	eors	r3, r2
 8005398:	4a46      	ldr	r2, [pc, #280]	; (80054b4 <USB_EPStartXfer+0x550>)
 800539a:	4313      	orrs	r3, r2
 800539c:	e60f      	b.n	8004fbe <USB_EPStartXfer+0x5a>
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 800539e:	201f      	movs	r0, #31
 80053a0:	0959      	lsrs	r1, r3, #5
 80053a2:	4003      	ands	r3, r0
 80053a4:	4258      	negs	r0, r3
 80053a6:	4143      	adcs	r3, r0
 80053a8:	1ac9      	subs	r1, r1, r3
 80053aa:	4b3d      	ldr	r3, [pc, #244]	; (80054a0 <USB_EPStartXfer+0x53c>)
 80053ac:	0289      	lsls	r1, r1, #10
 80053ae:	430b      	orrs	r3, r1
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	e7bf      	b.n	8005334 <USB_EPStartXfer+0x3d0>
 80053b4:	2a01      	cmp	r2, #1
 80053b6:	d1d3      	bne.n	8005360 <USB_EPStartXfer+0x3fc>
 80053b8:	002a      	movs	r2, r5
 80053ba:	4938      	ldr	r1, [pc, #224]	; (800549c <USB_EPStartXfer+0x538>)
 80053bc:	3250      	adds	r2, #80	; 0x50
 80053be:	8812      	ldrh	r2, [r2, #0]
 80053c0:	1869      	adds	r1, r5, r1
 80053c2:	1889      	adds	r1, r1, r2
 80053c4:	6922      	ldr	r2, [r4, #16]
 80053c6:	00db      	lsls	r3, r3, #3
 80053c8:	18cb      	adds	r3, r1, r3
 80053ca:	b292      	uxth	r2, r2
 80053cc:	801a      	strh	r2, [r3, #0]
 80053ce:	e7c7      	b.n	8005360 <USB_EPStartXfer+0x3fc>
        return HAL_ERROR;
 80053d0:	2001      	movs	r0, #1
      else if (ep->type == EP_TYPE_ISOC)
 80053d2:	4283      	cmp	r3, r0
 80053d4:	d000      	beq.n	80053d8 <USB_EPStartXfer+0x474>
 80053d6:	e5f4      	b.n	8004fc2 <USB_EPStartXfer+0x5e>
        if (ep->xfer_len > ep->maxpacket)
 80053d8:	69a3      	ldr	r3, [r4, #24]
 80053da:	6922      	ldr	r2, [r4, #16]
          ep->xfer_len = 0U;
 80053dc:	2000      	movs	r0, #0
        if (ep->xfer_len > ep->maxpacket)
 80053de:	4293      	cmp	r3, r2
 80053e0:	d901      	bls.n	80053e6 <USB_EPStartXfer+0x482>
          ep->xfer_len -= len;
 80053e2:	1a98      	subs	r0, r3, r2
 80053e4:	0013      	movs	r3, r2
 80053e6:	61a0      	str	r0, [r4, #24]
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 80053e8:	2900      	cmp	r1, #0
 80053ea:	d113      	bne.n	8005414 <USB_EPStartXfer+0x4b0>
 80053ec:	002a      	movs	r2, r5
 80053ee:	4929      	ldr	r1, [pc, #164]	; (8005494 <USB_EPStartXfer+0x530>)
 80053f0:	3250      	adds	r2, #80	; 0x50
 80053f2:	8810      	ldrh	r0, [r2, #0]
 80053f4:	7822      	ldrb	r2, [r4, #0]
 80053f6:	1869      	adds	r1, r5, r1
 80053f8:	00d2      	lsls	r2, r2, #3
 80053fa:	1809      	adds	r1, r1, r0
 80053fc:	1851      	adds	r1, r2, r1
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d114      	bne.n	800542c <USB_EPStartXfer+0x4c8>
 8005402:	880a      	ldrh	r2, [r1, #0]
 8005404:	4824      	ldr	r0, [pc, #144]	; (8005498 <USB_EPStartXfer+0x534>)
 8005406:	4002      	ands	r2, r0
 8005408:	2080      	movs	r0, #128	; 0x80
 800540a:	800a      	strh	r2, [r1, #0]
 800540c:	880a      	ldrh	r2, [r1, #0]
 800540e:	0200      	lsls	r0, r0, #8
 8005410:	4302      	orrs	r2, r0
 8005412:	800a      	strh	r2, [r1, #0]
 8005414:	7861      	ldrb	r1, [r4, #1]
 8005416:	7822      	ldrb	r2, [r4, #0]
 8005418:	2900      	cmp	r1, #0
 800541a:	d12f      	bne.n	800547c <USB_EPStartXfer+0x518>
 800541c:	0029      	movs	r1, r5
 800541e:	481f      	ldr	r0, [pc, #124]	; (800549c <USB_EPStartXfer+0x538>)
 8005420:	3150      	adds	r1, #80	; 0x50
 8005422:	8809      	ldrh	r1, [r1, #0]
 8005424:	1828      	adds	r0, r5, r0
 8005426:	1841      	adds	r1, r0, r1
 8005428:	00d2      	lsls	r2, r2, #3
 800542a:	e726      	b.n	800527a <USB_EPStartXfer+0x316>
 800542c:	2b3e      	cmp	r3, #62	; 0x3e
 800542e:	d806      	bhi.n	800543e <USB_EPStartXfer+0x4da>
 8005430:	2001      	movs	r0, #1
 8005432:	085a      	lsrs	r2, r3, #1
 8005434:	4018      	ands	r0, r3
 8005436:	1812      	adds	r2, r2, r0
 8005438:	0292      	lsls	r2, r2, #10
 800543a:	b292      	uxth	r2, r2
 800543c:	e7e9      	b.n	8005412 <USB_EPStartXfer+0x4ae>
 800543e:	201f      	movs	r0, #31
 8005440:	4018      	ands	r0, r3
 8005442:	4246      	negs	r6, r0
 8005444:	4170      	adcs	r0, r6
 8005446:	095a      	lsrs	r2, r3, #5
 8005448:	1a12      	subs	r2, r2, r0
 800544a:	0290      	lsls	r0, r2, #10
 800544c:	4a14      	ldr	r2, [pc, #80]	; (80054a0 <USB_EPStartXfer+0x53c>)
 800544e:	4302      	orrs	r2, r0
 8005450:	e7f3      	b.n	800543a <USB_EPStartXfer+0x4d6>
 8005452:	2b3e      	cmp	r3, #62	; 0x3e
 8005454:	d807      	bhi.n	8005466 <USB_EPStartXfer+0x502>
 8005456:	2001      	movs	r0, #1
 8005458:	085a      	lsrs	r2, r3, #1
 800545a:	4003      	ands	r3, r0
 800545c:	18d2      	adds	r2, r2, r3
 800545e:	0292      	lsls	r2, r2, #10
 8005460:	b292      	uxth	r2, r2
 8005462:	800a      	strh	r2, [r1, #0]
 8005464:	e78f      	b.n	8005386 <USB_EPStartXfer+0x422>
 8005466:	201f      	movs	r0, #31
 8005468:	095a      	lsrs	r2, r3, #5
 800546a:	4003      	ands	r3, r0
 800546c:	4258      	negs	r0, r3
 800546e:	4143      	adcs	r3, r0
 8005470:	1ad2      	subs	r2, r2, r3
 8005472:	4b0b      	ldr	r3, [pc, #44]	; (80054a0 <USB_EPStartXfer+0x53c>)
 8005474:	0292      	lsls	r2, r2, #10
 8005476:	4313      	orrs	r3, r2
 8005478:	b29b      	uxth	r3, r3
 800547a:	e70a      	b.n	8005292 <USB_EPStartXfer+0x32e>
 800547c:	2901      	cmp	r1, #1
 800547e:	d000      	beq.n	8005482 <USB_EPStartXfer+0x51e>
 8005480:	e781      	b.n	8005386 <USB_EPStartXfer+0x422>
 8005482:	0029      	movs	r1, r5
 8005484:	3150      	adds	r1, #80	; 0x50
 8005486:	8808      	ldrh	r0, [r1, #0]
 8005488:	4904      	ldr	r1, [pc, #16]	; (800549c <USB_EPStartXfer+0x538>)
 800548a:	00d2      	lsls	r2, r2, #3
 800548c:	1869      	adds	r1, r5, r1
 800548e:	1809      	adds	r1, r1, r0
 8005490:	1889      	adds	r1, r1, r2
 8005492:	e7f1      	b.n	8005478 <USB_EPStartXfer+0x514>
 8005494:	00000402 	.word	0x00000402
 8005498:	ffff83ff 	.word	0xffff83ff
 800549c:	00000406 	.word	0x00000406
 80054a0:	ffff8000 	.word	0xffff8000
 80054a4:	00004040 	.word	0x00004040
 80054a8:	ffff8f8f 	.word	0xffff8f8f
 80054ac:	000080c0 	.word	0x000080c0
 80054b0:	ffffbf8f 	.word	0xffffbf8f
 80054b4:	00008080 	.word	0x00008080

080054b8 <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 80054b8:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t BaseAddr = (uint32_t)USBx;
  uint32_t i, temp;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80054ba:	2580      	movs	r5, #128	; 0x80
  uint32_t n = (uint32_t)wNBytes >> 1;
 80054bc:	085c      	lsrs	r4, r3, #1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80054be:	00ed      	lsls	r5, r5, #3
 80054c0:	1952      	adds	r2, r2, r5

  for (i = n; i != 0U; i--)
 80054c2:	0026      	movs	r6, r4
  uint8_t *pBuf = pbUsrBuf;
 80054c4:	000d      	movs	r5, r1
  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80054c6:	1880      	adds	r0, r0, r2
  for (i = n; i != 0U; i--)
 80054c8:	1a47      	subs	r7, r0, r1
 80054ca:	197a      	adds	r2, r7, r5
 80054cc:	2e00      	cmp	r6, #0
 80054ce:	d107      	bne.n	80054e0 <USB_ReadPMA+0x28>
 80054d0:	0064      	lsls	r4, r4, #1
 80054d2:	1900      	adds	r0, r0, r4
 80054d4:	1909      	adds	r1, r1, r4
#if PMA_ACCESS > 1U
    pdwVal++;
#endif
  }

  if ((wNBytes % 2U) != 0U)
 80054d6:	07db      	lsls	r3, r3, #31
 80054d8:	d501      	bpl.n	80054de <USB_ReadPMA+0x26>
  {
    temp = *pdwVal;
 80054da:	8803      	ldrh	r3, [r0, #0]
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80054dc:	700b      	strb	r3, [r1, #0]
  }
}
 80054de:	bdf0      	pop	{r4, r5, r6, r7, pc}
    temp = *(__IO uint16_t *)pdwVal;
 80054e0:	8812      	ldrh	r2, [r2, #0]
  for (i = n; i != 0U; i--)
 80054e2:	3e01      	subs	r6, #1
    temp = *(__IO uint16_t *)pdwVal;
 80054e4:	b292      	uxth	r2, r2
    *pBuf = (uint8_t)((temp >> 0) & 0xFFU);
 80054e6:	702a      	strb	r2, [r5, #0]
    *pBuf = (uint8_t)((temp >> 8) & 0xFFU);
 80054e8:	0a12      	lsrs	r2, r2, #8
 80054ea:	706a      	strb	r2, [r5, #1]
    pBuf++;
 80054ec:	3502      	adds	r5, #2
  for (i = n; i != 0U; i--)
 80054ee:	e7ec      	b.n	80054ca <USB_ReadPMA+0x12>

080054f0 <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80054f0:	23af      	movs	r3, #175	; 0xaf
 80054f2:	009b      	lsls	r3, r3, #2
 80054f4:	58c3      	ldr	r3, [r0, r3]
{
 80054f6:	b570      	push	{r4, r5, r6, lr}
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00e      	beq.n	800551a <USBD_CDC_EP0_RxReady+0x2a>
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80054fc:	22ae      	movs	r2, #174	; 0xae
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 80054fe:	2580      	movs	r5, #128	; 0x80
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005500:	0092      	lsls	r2, r2, #2
 8005502:	5884      	ldr	r4, [r0, r2]
  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8005504:	00ad      	lsls	r5, r5, #2
 8005506:	5d60      	ldrb	r0, [r4, r5]
 8005508:	28ff      	cmp	r0, #255	; 0xff
 800550a:	d006      	beq.n	800551a <USBD_CDC_EP0_RxReady+0x2a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 800550c:	4a04      	ldr	r2, [pc, #16]	; (8005520 <USBD_CDC_EP0_RxReady+0x30>)
 800550e:	689b      	ldr	r3, [r3, #8]
 8005510:	0021      	movs	r1, r4
 8005512:	5ca2      	ldrb	r2, [r4, r2]
 8005514:	4798      	blx	r3
                                                      (uint8_t *)(void *)hcdc->data,
                                                      (uint16_t)hcdc->CmdLength);
    hcdc->CmdOpCode = 0xFFU;
 8005516:	23ff      	movs	r3, #255	; 0xff
 8005518:	5563      	strb	r3, [r4, r5]

  }
  return USBD_OK;
}
 800551a:	2000      	movs	r0, #0
 800551c:	bd70      	pop	{r4, r5, r6, pc}
 800551e:	46c0      	nop			; (mov r8, r8)
 8005520:	00000201 	.word	0x00000201

08005524 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8005524:	2343      	movs	r3, #67	; 0x43
 8005526:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 8005528:	4800      	ldr	r0, [pc, #0]	; (800552c <USBD_CDC_GetFSCfgDesc+0x8>)
 800552a:	4770      	bx	lr
 800552c:	20000088 	.word	0x20000088

08005530 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8005530:	2343      	movs	r3, #67	; 0x43
 8005532:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 8005534:	4800      	ldr	r0, [pc, #0]	; (8005538 <USBD_CDC_GetHSCfgDesc+0x8>)
 8005536:	4770      	bx	lr
 8005538:	200000cc 	.word	0x200000cc

0800553c <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 800553c:	2343      	movs	r3, #67	; 0x43
 800553e:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 8005540:	4800      	ldr	r0, [pc, #0]	; (8005544 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 8005542:	4770      	bx	lr
 8005544:	2000011c 	.word	0x2000011c

08005548 <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8005548:	230a      	movs	r3, #10
 800554a:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 800554c:	4800      	ldr	r0, [pc, #0]	; (8005550 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 800554e:	4770      	bx	lr
 8005550:	20000110 	.word	0x20000110

08005554 <USBD_CDC_DataOut>:
{
 8005554:	b570      	push	{r4, r5, r6, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8005556:	26ae      	movs	r6, #174	; 0xae
 8005558:	00b6      	lsls	r6, r6, #2
{
 800555a:	0004      	movs	r4, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 800555c:	5985      	ldr	r5, [r0, r6]
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 800555e:	f000 ff8f 	bl	8006480 <USBD_LL_GetRxDataSize>
 8005562:	2383      	movs	r3, #131	; 0x83
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	50e8      	str	r0, [r5, r3]
  if (pdev->pClassData != NULL)
 8005568:	59a3      	ldr	r3, [r4, r6]
    return USBD_FAIL;
 800556a:	2002      	movs	r0, #2
  if (pdev->pClassData != NULL)
 800556c:	2b00      	cmp	r3, #0
 800556e:	d00a      	beq.n	8005586 <USBD_CDC_DataOut+0x32>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8005570:	2383      	movs	r3, #131	; 0x83
 8005572:	2281      	movs	r2, #129	; 0x81
 8005574:	009b      	lsls	r3, r3, #2
 8005576:	18e9      	adds	r1, r5, r3
 8005578:	33b0      	adds	r3, #176	; 0xb0
 800557a:	58e3      	ldr	r3, [r4, r3]
 800557c:	0092      	lsls	r2, r2, #2
 800557e:	68db      	ldr	r3, [r3, #12]
 8005580:	58a8      	ldr	r0, [r5, r2]
 8005582:	4798      	blx	r3
    return USBD_OK;
 8005584:	2000      	movs	r0, #0
}
 8005586:	bd70      	pop	{r4, r5, r6, pc}

08005588 <USBD_CDC_DataIn>:
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005588:	23ae      	movs	r3, #174	; 0xae
{
 800558a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	58c3      	ldr	r3, [r0, r3]
{
 8005590:	0005      	movs	r5, r0
 8005592:	000f      	movs	r7, r1
    return USBD_FAIL;
 8005594:	2002      	movs	r0, #2
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 8005596:	9301      	str	r3, [sp, #4]
  if (pdev->pClassData != NULL)
 8005598:	2b00      	cmp	r3, #0
 800559a:	d018      	beq.n	80055ce <USBD_CDC_DataIn+0x46>
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 800559c:	2614      	movs	r6, #20
 800559e:	434e      	muls	r6, r1
 80055a0:	19ae      	adds	r6, r5, r6
 80055a2:	69f0      	ldr	r0, [r6, #28]
 80055a4:	2800      	cmp	r0, #0
 80055a6:	d013      	beq.n	80055d0 <USBD_CDC_DataIn+0x48>
 80055a8:	2228      	movs	r2, #40	; 0x28
 80055aa:	23b0      	movs	r3, #176	; 0xb0
 80055ac:	434a      	muls	r2, r1
 80055ae:	009b      	lsls	r3, r3, #2
 80055b0:	58eb      	ldr	r3, [r5, r3]
 80055b2:	189b      	adds	r3, r3, r2
 80055b4:	6b99      	ldr	r1, [r3, #56]	; 0x38
 80055b6:	f7fa fe5d 	bl	8000274 <__aeabi_uidivmod>
 80055ba:	1e0c      	subs	r4, r1, #0
 80055bc:	d108      	bne.n	80055d0 <USBD_CDC_DataIn+0x48>
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055be:	000b      	movs	r3, r1
 80055c0:	000a      	movs	r2, r1
      pdev->ep_in[epnum].total_length = 0U;
 80055c2:	61f1      	str	r1, [r6, #28]
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80055c4:	0028      	movs	r0, r5
 80055c6:	0039      	movs	r1, r7
 80055c8:	f000 ff3a 	bl	8006440 <USBD_LL_Transmit>
    return USBD_OK;
 80055cc:	0020      	movs	r0, r4
}
 80055ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
      hcdc->TxState = 0U;
 80055d0:	2385      	movs	r3, #133	; 0x85
 80055d2:	2000      	movs	r0, #0
 80055d4:	9a01      	ldr	r2, [sp, #4]
 80055d6:	009b      	lsls	r3, r3, #2
 80055d8:	50d0      	str	r0, [r2, r3]
 80055da:	e7f8      	b.n	80055ce <USBD_CDC_DataIn+0x46>

080055dc <USBD_CDC_Setup>:
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055dc:	23ae      	movs	r3, #174	; 0xae
{
 80055de:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80055e0:	009b      	lsls	r3, r3, #2
 80055e2:	58c7      	ldr	r7, [r0, r3]
  uint8_t ifalt = 0U;
 80055e4:	466b      	mov	r3, sp
  uint16_t status_info = 0U;
 80055e6:	466a      	mov	r2, sp
{
 80055e8:	000e      	movs	r6, r1
  uint8_t ifalt = 0U;
 80055ea:	1d59      	adds	r1, r3, #5
 80055ec:	2300      	movs	r3, #0
{
 80055ee:	0005      	movs	r5, r0
  uint8_t ifalt = 0U;
 80055f0:	700b      	strb	r3, [r1, #0]
  uint16_t status_info = 0U;
 80055f2:	80d3      	strh	r3, [r2, #6]
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055f4:	7833      	ldrb	r3, [r6, #0]
  uint16_t status_info = 0U;
 80055f6:	1d90      	adds	r0, r2, #6
 80055f8:	001c      	movs	r4, r3
 80055fa:	2260      	movs	r2, #96	; 0x60
 80055fc:	4014      	ands	r4, r2
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80055fe:	4213      	tst	r3, r2
 8005600:	d02a      	beq.n	8005658 <USBD_CDC_Setup+0x7c>
 8005602:	2c20      	cmp	r4, #32
 8005604:	d146      	bne.n	8005694 <USBD_CDC_Setup+0xb8>
      if (req->wLength)
 8005606:	88f4      	ldrh	r4, [r6, #6]
 8005608:	7870      	ldrb	r0, [r6, #1]
 800560a:	2c00      	cmp	r4, #0
 800560c:	d01c      	beq.n	8005648 <USBD_CDC_Setup+0x6c>
        if (req->bmRequest & 0x80U)
 800560e:	b25b      	sxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	da0e      	bge.n	8005632 <USBD_CDC_Setup+0x56>
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005614:	23af      	movs	r3, #175	; 0xaf
 8005616:	009b      	lsls	r3, r3, #2
 8005618:	58eb      	ldr	r3, [r5, r3]
 800561a:	0022      	movs	r2, r4
 800561c:	0039      	movs	r1, r7
 800561e:	689b      	ldr	r3, [r3, #8]
 8005620:	4798      	blx	r3
          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005622:	0039      	movs	r1, r7
 8005624:	0028      	movs	r0, r5
 8005626:	88f2      	ldrh	r2, [r6, #6]
 8005628:	f000 fcac 	bl	8005f84 <USBD_CtlSendData>
  uint8_t ret = USBD_OK;
 800562c:	2400      	movs	r4, #0
}
 800562e:	0020      	movs	r0, r4
 8005630:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
          hcdc->CmdOpCode = req->bRequest;
 8005632:	2380      	movs	r3, #128	; 0x80
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	54f8      	strb	r0, [r7, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005638:	4b19      	ldr	r3, [pc, #100]	; (80056a0 <USBD_CDC_Setup+0xc4>)
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 800563a:	0022      	movs	r2, r4
 800563c:	0039      	movs	r1, r7
 800563e:	0028      	movs	r0, r5
          hcdc->CmdLength = (uint8_t)req->wLength;
 8005640:	54fc      	strb	r4, [r7, r3]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8005642:	f000 fcb5 	bl	8005fb0 <USBD_CtlPrepareRx>
 8005646:	e7f1      	b.n	800562c <USBD_CDC_Setup+0x50>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8005648:	23af      	movs	r3, #175	; 0xaf
 800564a:	009b      	lsls	r3, r3, #2
 800564c:	58eb      	ldr	r3, [r5, r3]
 800564e:	0022      	movs	r2, r4
 8005650:	0031      	movs	r1, r6
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	4798      	blx	r3
 8005656:	e7ea      	b.n	800562e <USBD_CDC_Setup+0x52>
      switch (req->bRequest)
 8005658:	7873      	ldrb	r3, [r6, #1]
 800565a:	2b0a      	cmp	r3, #10
 800565c:	d00e      	beq.n	800567c <USBD_CDC_Setup+0xa0>
 800565e:	2b0b      	cmp	r3, #11
 8005660:	d013      	beq.n	800568a <USBD_CDC_Setup+0xae>
 8005662:	2b00      	cmp	r3, #0
 8005664:	d116      	bne.n	8005694 <USBD_CDC_Setup+0xb8>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005666:	23a7      	movs	r3, #167	; 0xa7
 8005668:	009b      	lsls	r3, r3, #2
 800566a:	5ceb      	ldrb	r3, [r5, r3]
 800566c:	2b03      	cmp	r3, #3
 800566e:	d111      	bne.n	8005694 <USBD_CDC_Setup+0xb8>
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 8005670:	2202      	movs	r2, #2
 8005672:	0001      	movs	r1, r0
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005674:	0028      	movs	r0, r5
 8005676:	f000 fc85 	bl	8005f84 <USBD_CtlSendData>
 800567a:	e7d8      	b.n	800562e <USBD_CDC_Setup+0x52>
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800567c:	23a7      	movs	r3, #167	; 0xa7
 800567e:	009b      	lsls	r3, r3, #2
 8005680:	5ceb      	ldrb	r3, [r5, r3]
 8005682:	2b03      	cmp	r3, #3
 8005684:	d106      	bne.n	8005694 <USBD_CDC_Setup+0xb8>
            USBD_CtlSendData(pdev, &ifalt, 1U);
 8005686:	2201      	movs	r2, #1
 8005688:	e7f4      	b.n	8005674 <USBD_CDC_Setup+0x98>
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 800568a:	23a7      	movs	r3, #167	; 0xa7
 800568c:	009b      	lsls	r3, r3, #2
 800568e:	5ceb      	ldrb	r3, [r5, r3]
 8005690:	2b03      	cmp	r3, #3
 8005692:	d0cc      	beq.n	800562e <USBD_CDC_Setup+0x52>
          USBD_CtlError(pdev, req);
 8005694:	0031      	movs	r1, r6
 8005696:	0028      	movs	r0, r5
 8005698:	f000 fc4c 	bl	8005f34 <USBD_CtlError>
          ret = USBD_FAIL;
 800569c:	2402      	movs	r4, #2
          break;
 800569e:	e7c6      	b.n	800562e <USBD_CDC_Setup+0x52>
 80056a0:	00000201 	.word	0x00000201

080056a4 <USBD_CDC_DeInit>:
{
 80056a4:	b570      	push	{r4, r5, r6, lr}
 80056a6:	0004      	movs	r4, r0
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80056a8:	2500      	movs	r5, #0
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 80056aa:	2181      	movs	r1, #129	; 0x81
 80056ac:	f000 fe72 	bl	8006394 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80056b0:	2101      	movs	r1, #1
 80056b2:	0020      	movs	r0, r4
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 80056b4:	62e5      	str	r5, [r4, #44]	; 0x2c
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 80056b6:	f000 fe6d 	bl	8006394 <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80056ba:	0023      	movs	r3, r4
  if (pdev->pClassData != NULL)
 80056bc:	26ae      	movs	r6, #174	; 0xae
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 80056be:	33fc      	adds	r3, #252	; 0xfc
 80056c0:	671d      	str	r5, [r3, #112]	; 0x70
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80056c2:	2182      	movs	r1, #130	; 0x82
 80056c4:	0020      	movs	r0, r4
  if (pdev->pClassData != NULL)
 80056c6:	00b6      	lsls	r6, r6, #2
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 80056c8:	f000 fe64 	bl	8006394 <USBD_LL_CloseEP>
  if (pdev->pClassData != NULL)
 80056cc:	59a3      	ldr	r3, [r4, r6]
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 80056ce:	6425      	str	r5, [r4, #64]	; 0x40
  if (pdev->pClassData != NULL)
 80056d0:	42ab      	cmp	r3, r5
 80056d2:	d008      	beq.n	80056e6 <USBD_CDC_DeInit+0x42>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80056d4:	23af      	movs	r3, #175	; 0xaf
 80056d6:	009b      	lsls	r3, r3, #2
 80056d8:	58e3      	ldr	r3, [r4, r3]
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80056de:	59a0      	ldr	r0, [r4, r6]
 80056e0:	f000 feda 	bl	8006498 <USBD_static_free>
    pdev->pClassData = NULL;
 80056e4:	51a5      	str	r5, [r4, r6]
}
 80056e6:	2000      	movs	r0, #0
 80056e8:	bd70      	pop	{r4, r5, r6, pc}

080056ea <USBD_CDC_Init>:
{
 80056ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80056ec:	0006      	movs	r6, r0
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056ee:	7c03      	ldrb	r3, [r0, #16]
{
 80056f0:	0004      	movs	r4, r0
 80056f2:	36fc      	adds	r6, #252	; 0xfc
  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d139      	bne.n	800576c <USBD_CDC_Init+0x82>
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 80056f8:	2380      	movs	r3, #128	; 0x80
 80056fa:	2202      	movs	r2, #2
 80056fc:	009b      	lsls	r3, r3, #2
 80056fe:	2181      	movs	r1, #129	; 0x81
 8005700:	f000 fe36 	bl	8006370 <USBD_LL_OpenEP>
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005704:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005706:	2380      	movs	r3, #128	; 0x80
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8005708:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800570a:	009b      	lsls	r3, r3, #2
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800570c:	0029      	movs	r1, r5
 800570e:	2202      	movs	r2, #2
 8005710:	0020      	movs	r0, r4
 8005712:	f000 fe2d 	bl	8006370 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8005716:	2308      	movs	r3, #8
    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 8005718:	6735      	str	r5, [r6, #112]	; 0x70
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 800571a:	2203      	movs	r2, #3
 800571c:	2182      	movs	r1, #130	; 0x82
 800571e:	0020      	movs	r0, r4
 8005720:	f000 fe26 	bl	8006370 <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005724:	2701      	movs	r7, #1
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005726:	2087      	movs	r0, #135	; 0x87
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 8005728:	6427      	str	r7, [r4, #64]	; 0x40
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 800572a:	0080      	lsls	r0, r0, #2
 800572c:	f000 feb0 	bl	8006490 <USBD_static_malloc>
 8005730:	23ae      	movs	r3, #174	; 0xae
 8005732:	009b      	lsls	r3, r3, #2
 8005734:	0005      	movs	r5, r0
    ret = 1U;
 8005736:	003e      	movs	r6, r7
  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8005738:	50e0      	str	r0, [r4, r3]
  if (pdev->pClassData == NULL)
 800573a:	2800      	cmp	r0, #0
 800573c:	d014      	beq.n	8005768 <USBD_CDC_Init+0x7e>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 800573e:	3304      	adds	r3, #4
 8005740:	58e3      	ldr	r3, [r4, r3]
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	4798      	blx	r3
    hcdc->TxState = 0U;
 8005746:	2385      	movs	r3, #133	; 0x85
 8005748:	2200      	movs	r2, #0
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	50ea      	str	r2, [r5, r3]
    hcdc->RxState = 0U;
 800574e:	3304      	adds	r3, #4
 8005750:	50ea      	str	r2, [r5, r3]
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005752:	2281      	movs	r2, #129	; 0x81
 8005754:	7c26      	ldrb	r6, [r4, #16]
 8005756:	0092      	lsls	r2, r2, #2
 8005758:	2e00      	cmp	r6, #0
 800575a:	d110      	bne.n	800577e <USBD_CDC_Init+0x94>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800575c:	0039      	movs	r1, r7
 800575e:	0020      	movs	r0, r4
 8005760:	58aa      	ldr	r2, [r5, r2]
 8005762:	3b18      	subs	r3, #24
 8005764:	f000 fe7c 	bl	8006460 <USBD_LL_PrepareReceive>
}
 8005768:	0030      	movs	r0, r6
 800576a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800576c:	2501      	movs	r5, #1
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 800576e:	2340      	movs	r3, #64	; 0x40
 8005770:	2202      	movs	r2, #2
 8005772:	2181      	movs	r1, #129	; 0x81
 8005774:	f000 fdfc 	bl	8006370 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 8005778:	2340      	movs	r3, #64	; 0x40
    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 800577a:	62e5      	str	r5, [r4, #44]	; 0x2c
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 800577c:	e7c6      	b.n	800570c <USBD_CDC_Init+0x22>
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 800577e:	2340      	movs	r3, #64	; 0x40
 8005780:	0039      	movs	r1, r7
 8005782:	0020      	movs	r0, r4
 8005784:	58aa      	ldr	r2, [r5, r2]
 8005786:	f000 fe6b 	bl	8006460 <USBD_LL_PrepareReceive>
  uint8_t ret = 0U;
 800578a:	2600      	movs	r6, #0
 800578c:	e7ec      	b.n	8005768 <USBD_CDC_Init+0x7e>

0800578e <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 800578e:	0003      	movs	r3, r0
  uint8_t  ret = USBD_FAIL;
 8005790:	2002      	movs	r0, #2

  if (fops != NULL)
 8005792:	2900      	cmp	r1, #0
 8005794:	d003      	beq.n	800579e <USBD_CDC_RegisterInterface+0x10>
  {
    pdev->pUserData = fops;
 8005796:	22af      	movs	r2, #175	; 0xaf
    ret = USBD_OK;
 8005798:	2000      	movs	r0, #0
    pdev->pUserData = fops;
 800579a:	0092      	lsls	r2, r2, #2
 800579c:	5099      	str	r1, [r3, r2]
  }

  return ret;
}
 800579e:	4770      	bx	lr

080057a0 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057a0:	23ae      	movs	r3, #174	; 0xae
 80057a2:	009b      	lsls	r3, r3, #2
 80057a4:	58c3      	ldr	r3, [r0, r3]

  hcdc->TxBuffer = pbuff;
 80057a6:	2082      	movs	r0, #130	; 0x82
 80057a8:	0080      	lsls	r0, r0, #2
 80057aa:	5019      	str	r1, [r3, r0]
  hcdc->TxLength = length;
 80057ac:	2184      	movs	r1, #132	; 0x84
 80057ae:	0089      	lsls	r1, r1, #2

  return USBD_OK;
}
 80057b0:	2000      	movs	r0, #0
  hcdc->TxLength = length;
 80057b2:	505a      	str	r2, [r3, r1]
}
 80057b4:	4770      	bx	lr

080057b6 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;

  hcdc->RxBuffer = pbuff;
 80057b6:	23ae      	movs	r3, #174	; 0xae
 80057b8:	009b      	lsls	r3, r3, #2
 80057ba:	58c2      	ldr	r2, [r0, r3]
 80057bc:	3bb4      	subs	r3, #180	; 0xb4

  return USBD_OK;
}
 80057be:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 80057c0:	50d1      	str	r1, [r2, r3]
}
 80057c2:	4770      	bx	lr

080057c4 <USBD_CDC_TransmitPacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057c4:	23ae      	movs	r3, #174	; 0xae
 80057c6:	009b      	lsls	r3, r3, #2
 80057c8:	58c2      	ldr	r2, [r0, r3]
{
 80057ca:	b510      	push	{r4, lr}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 80057cc:	2302      	movs	r3, #2
  if (pdev->pClassData != NULL)
 80057ce:	2a00      	cmp	r2, #0
 80057d0:	d012      	beq.n	80057f8 <USBD_CDC_TransmitPacket+0x34>
    if (hcdc->TxState == 0U)
 80057d2:	2185      	movs	r1, #133	; 0x85
 80057d4:	0089      	lsls	r1, r1, #2
 80057d6:	5854      	ldr	r4, [r2, r1]
 80057d8:	3b01      	subs	r3, #1
 80057da:	2c00      	cmp	r4, #0
 80057dc:	d10c      	bne.n	80057f8 <USBD_CDC_TransmitPacket+0x34>
      hcdc->TxState = 1U;
 80057de:	5053      	str	r3, [r2, r1]
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80057e0:	2384      	movs	r3, #132	; 0x84
 80057e2:	009b      	lsls	r3, r3, #2
 80057e4:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80057e6:	390c      	subs	r1, #12
 80057e8:	5852      	ldr	r2, [r2, r1]
 80057ea:	3988      	subs	r1, #136	; 0x88
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 80057ec:	6303      	str	r3, [r0, #48]	; 0x30
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 80057ee:	39ff      	subs	r1, #255	; 0xff
 80057f0:	b29b      	uxth	r3, r3
 80057f2:	f000 fe25 	bl	8006440 <USBD_LL_Transmit>
      return USBD_OK;
 80057f6:	0023      	movs	r3, r4
  }
}
 80057f8:	0018      	movs	r0, r3
 80057fa:	bd10      	pop	{r4, pc}

080057fc <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80057fc:	23ae      	movs	r3, #174	; 0xae
 80057fe:	009b      	lsls	r3, r3, #2
 8005800:	58c3      	ldr	r3, [r0, r3]
{
 8005802:	b510      	push	{r4, lr}
    }
    return USBD_OK;
  }
  else
  {
    return USBD_FAIL;
 8005804:	2402      	movs	r4, #2
  if (pdev->pClassData != NULL)
 8005806:	2b00      	cmp	r3, #0
 8005808:	d00a      	beq.n	8005820 <USBD_CDC_ReceivePacket+0x24>
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 800580a:	2281      	movs	r2, #129	; 0x81
 800580c:	7c04      	ldrb	r4, [r0, #16]
 800580e:	0092      	lsls	r2, r2, #2
 8005810:	589a      	ldr	r2, [r3, r2]
 8005812:	2c00      	cmp	r4, #0
 8005814:	d106      	bne.n	8005824 <USBD_CDC_ReceivePacket+0x28>
      USBD_LL_PrepareReceive(pdev,
 8005816:	2380      	movs	r3, #128	; 0x80
 8005818:	2101      	movs	r1, #1
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	f000 fe20 	bl	8006460 <USBD_LL_PrepareReceive>
  }
}
 8005820:	0020      	movs	r0, r4
 8005822:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 8005824:	2340      	movs	r3, #64	; 0x40
 8005826:	2101      	movs	r1, #1
 8005828:	f000 fe1a 	bl	8006460 <USBD_LL_PrepareReceive>
    return USBD_OK;
 800582c:	2400      	movs	r4, #0
 800582e:	e7f7      	b.n	8005820 <USBD_CDC_ReceivePacket+0x24>

08005830 <USBD_Init>:
  if (pdev == NULL)
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8005830:	2302      	movs	r3, #2
{
 8005832:	b510      	push	{r4, lr}
  if (pdev == NULL)
 8005834:	2800      	cmp	r0, #0
 8005836:	d013      	beq.n	8005860 <USBD_Init+0x30>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8005838:	23ad      	movs	r3, #173	; 0xad
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	58c4      	ldr	r4, [r0, r3]
 800583e:	2c00      	cmp	r4, #0
 8005840:	d001      	beq.n	8005846 <USBD_Init+0x16>
  {
    pdev->pClass = NULL;
 8005842:	2400      	movs	r4, #0
 8005844:	50c4      	str	r4, [r0, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005846:	2900      	cmp	r1, #0
 8005848:	d002      	beq.n	8005850 <USBD_Init+0x20>
  {
    pdev->pDesc = pdesc;
 800584a:	23ac      	movs	r3, #172	; 0xac
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	50c1      	str	r1, [r0, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005850:	23a7      	movs	r3, #167	; 0xa7
 8005852:	2101      	movs	r1, #1
 8005854:	009b      	lsls	r3, r3, #2
 8005856:	54c1      	strb	r1, [r0, r3]
  pdev->id = id;
 8005858:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 800585a:	f000 fd39 	bl	80062d0 <USBD_LL_Init>

  return USBD_OK;
 800585e:	2300      	movs	r3, #0
}
 8005860:	0018      	movs	r0, r3
 8005862:	bd10      	pop	{r4, pc}

08005864 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005864:	0003      	movs	r3, r0
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8005866:	2002      	movs	r0, #2
  if (pclass != NULL)
 8005868:	2900      	cmp	r1, #0
 800586a:	d003      	beq.n	8005874 <USBD_RegisterClass+0x10>
    pdev->pClass = pclass;
 800586c:	22ad      	movs	r2, #173	; 0xad
    status = USBD_OK;
 800586e:	2000      	movs	r0, #0
    pdev->pClass = pclass;
 8005870:	0092      	lsls	r2, r2, #2
 8005872:	5099      	str	r1, [r3, r2]
  }

  return status;
}
 8005874:	4770      	bx	lr

08005876 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005876:	b510      	push	{r4, lr}
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8005878:	f000 fd6a 	bl	8006350 <USBD_LL_Start>

  return USBD_OK;
}
 800587c:	2000      	movs	r0, #0
 800587e:	bd10      	pop	{r4, pc}

08005880 <USBD_SetClassConfig>:

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  USBD_StatusTypeDef ret = USBD_FAIL;

  if (pdev->pClass != NULL)
 8005880:	23ad      	movs	r3, #173	; 0xad
 8005882:	009b      	lsls	r3, r3, #2
 8005884:	58c3      	ldr	r3, [r0, r3]
{
 8005886:	b510      	push	{r4, lr}
  if (pdev->pClass != NULL)
 8005888:	2b00      	cmp	r3, #0
 800588a:	d101      	bne.n	8005890 <USBD_SetClassConfig+0x10>
  USBD_StatusTypeDef ret = USBD_FAIL;
 800588c:	2002      	movs	r0, #2
      ret = USBD_OK;
    }
  }

  return ret;
}
 800588e:	bd10      	pop	{r4, pc}
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	4798      	blx	r3
 8005894:	2800      	cmp	r0, #0
 8005896:	d0fa      	beq.n	800588e <USBD_SetClassConfig+0xe>
 8005898:	e7f8      	b.n	800588c <USBD_SetClassConfig+0xc>

0800589a <USBD_ClrClassConfig>:
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 800589a:	23ad      	movs	r3, #173	; 0xad
{
 800589c:	b510      	push	{r4, lr}
  pdev->pClass->DeInit(pdev, cfgidx);
 800589e:	009b      	lsls	r3, r3, #2
 80058a0:	58c3      	ldr	r3, [r0, r3]
 80058a2:	685b      	ldr	r3, [r3, #4]
 80058a4:	4798      	blx	r3

  return USBD_OK;
}
 80058a6:	2000      	movs	r0, #0
 80058a8:	bd10      	pop	{r4, pc}
	...

080058ac <USBD_LL_SetupStage>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058ac:	23aa      	movs	r3, #170	; 0xaa
 80058ae:	009b      	lsls	r3, r3, #2
{
 80058b0:	b570      	push	{r4, r5, r6, lr}
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058b2:	18c5      	adds	r5, r0, r3
{
 80058b4:	0004      	movs	r4, r0
  USBD_ParseSetupRequest(&pdev->request, psetup);
 80058b6:	0028      	movs	r0, r5
 80058b8:	f000 fb28 	bl	8005f0c <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80058bc:	23a5      	movs	r3, #165	; 0xa5
 80058be:	2201      	movs	r2, #1
 80058c0:	009b      	lsls	r3, r3, #2
 80058c2:	50e2      	str	r2, [r4, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 80058c4:	4b11      	ldr	r3, [pc, #68]	; (800590c <USBD_LL_SetupStage+0x60>)
 80058c6:	5ae2      	ldrh	r2, [r4, r3]
 80058c8:	3b16      	subs	r3, #22
 80058ca:	50e2      	str	r2, [r4, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 80058cc:	3310      	adds	r3, #16
 80058ce:	5ce1      	ldrb	r1, [r4, r3]
 80058d0:	231f      	movs	r3, #31
 80058d2:	400b      	ands	r3, r1
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d009      	beq.n	80058ec <USBD_LL_SetupStage+0x40>
 80058d8:	2b02      	cmp	r3, #2
 80058da:	d00c      	beq.n	80058f6 <USBD_LL_SetupStage+0x4a>
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d10f      	bne.n	8005900 <USBD_LL_SetupStage+0x54>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 80058e0:	0029      	movs	r1, r5
 80058e2:	0020      	movs	r0, r4
 80058e4:	f000 f91e 	bl	8005b24 <USBD_StdDevReq>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
      break;
  }

  return USBD_OK;
}
 80058e8:	2000      	movs	r0, #0
 80058ea:	bd70      	pop	{r4, r5, r6, pc}
      USBD_StdItfReq(pdev, &pdev->request);
 80058ec:	0029      	movs	r1, r5
 80058ee:	0020      	movs	r0, r4
 80058f0:	f000 fa4e 	bl	8005d90 <USBD_StdItfReq>
      break;
 80058f4:	e7f8      	b.n	80058e8 <USBD_LL_SetupStage+0x3c>
      USBD_StdEPReq(pdev, &pdev->request);
 80058f6:	0029      	movs	r1, r5
 80058f8:	0020      	movs	r0, r4
 80058fa:	f000 fa71 	bl	8005de0 <USBD_StdEPReq>
      break;
 80058fe:	e7f3      	b.n	80058e8 <USBD_LL_SetupStage+0x3c>
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005900:	237f      	movs	r3, #127	; 0x7f
 8005902:	0020      	movs	r0, r4
 8005904:	4399      	bics	r1, r3
 8005906:	f000 fd55 	bl	80063b4 <USBD_LL_StallEP>
      break;
 800590a:	e7ed      	b.n	80058e8 <USBD_LL_SetupStage+0x3c>
 800590c:	000002ae 	.word	0x000002ae

08005910 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	000d      	movs	r5, r1
 8005914:	0004      	movs	r4, r0
 8005916:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8005918:	2d00      	cmp	r5, #0
 800591a:	d12e      	bne.n	800597a <USBD_LL_DataOutStage+0x6a>
  {
    pep = &pdev->ep_out[0];

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 800591c:	23a5      	movs	r3, #165	; 0xa5
 800591e:	009b      	lsls	r3, r3, #2
 8005920:	58c2      	ldr	r2, [r0, r3]
 8005922:	2a03      	cmp	r2, #3
 8005924:	d122      	bne.n	800596c <USBD_LL_DataOutStage+0x5c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005926:	0002      	movs	r2, r0
 8005928:	3255      	adds	r2, #85	; 0x55
 800592a:	32ff      	adds	r2, #255	; 0xff
 800592c:	68d3      	ldr	r3, [r2, #12]
 800592e:	6910      	ldr	r0, [r2, #16]
 8005930:	4283      	cmp	r3, r0
 8005932:	d90a      	bls.n	800594a <USBD_LL_DataOutStage+0x3a>
      {
        pep->rem_length -= pep->maxpacket;
 8005934:	1a1b      	subs	r3, r3, r0
 8005936:	60d3      	str	r3, [r2, #12]

        USBD_CtlContinueRx(pdev, pdata,
 8005938:	b282      	uxth	r2, r0
 800593a:	4298      	cmp	r0, r3
 800593c:	d900      	bls.n	8005940 <USBD_LL_DataOutStage+0x30>
 800593e:	b29a      	uxth	r2, r3
 8005940:	0020      	movs	r0, r4
 8005942:	f000 fb45 	bl	8005fd0 <USBD_CtlContinueRx>
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 8005946:	0028      	movs	r0, r5
 8005948:	bd70      	pop	{r4, r5, r6, pc}
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800594a:	23ad      	movs	r3, #173	; 0xad
 800594c:	009b      	lsls	r3, r3, #2
 800594e:	58e3      	ldr	r3, [r4, r3]
 8005950:	691b      	ldr	r3, [r3, #16]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d006      	beq.n	8005964 <USBD_LL_DataOutStage+0x54>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005956:	22a7      	movs	r2, #167	; 0xa7
 8005958:	0092      	lsls	r2, r2, #2
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 800595a:	5ca2      	ldrb	r2, [r4, r2]
 800595c:	2a03      	cmp	r2, #3
 800595e:	d101      	bne.n	8005964 <USBD_LL_DataOutStage+0x54>
          pdev->pClass->EP0_RxReady(pdev);
 8005960:	0020      	movs	r0, r4
 8005962:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 8005964:	0020      	movs	r0, r4
 8005966:	f000 fb3b 	bl	8005fe0 <USBD_CtlSendStatus>
 800596a:	e7ec      	b.n	8005946 <USBD_LL_DataOutStage+0x36>
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 800596c:	2a05      	cmp	r2, #5
 800596e:	d1ea      	bne.n	8005946 <USBD_LL_DataOutStage+0x36>
        USBD_LL_StallEP(pdev, 0U);
 8005970:	0029      	movs	r1, r5
        pdev->ep0_state = USBD_EP0_IDLE;
 8005972:	50c5      	str	r5, [r0, r3]
        USBD_LL_StallEP(pdev, 0U);
 8005974:	f000 fd1e 	bl	80063b4 <USBD_LL_StallEP>
 8005978:	e7e5      	b.n	8005946 <USBD_LL_DataOutStage+0x36>
  else if ((pdev->pClass->DataOut != NULL) &&
 800597a:	23ad      	movs	r3, #173	; 0xad
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	58c3      	ldr	r3, [r0, r3]
 8005980:	699b      	ldr	r3, [r3, #24]
 8005982:	2b00      	cmp	r3, #0
 8005984:	d008      	beq.n	8005998 <USBD_LL_DataOutStage+0x88>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005986:	22a7      	movs	r2, #167	; 0xa7
 8005988:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataOut != NULL) &&
 800598a:	5c82      	ldrb	r2, [r0, r2]
 800598c:	2a03      	cmp	r2, #3
 800598e:	d103      	bne.n	8005998 <USBD_LL_DataOutStage+0x88>
    pdev->pClass->DataOut(pdev, epnum);
 8005990:	0029      	movs	r1, r5
 8005992:	4798      	blx	r3
  return USBD_OK;
 8005994:	2500      	movs	r5, #0
    pdev->pClass->DataOut(pdev, epnum);
 8005996:	e7d6      	b.n	8005946 <USBD_LL_DataOutStage+0x36>
    return USBD_FAIL;
 8005998:	2502      	movs	r5, #2
 800599a:	e7d4      	b.n	8005946 <USBD_LL_DataOutStage+0x36>

0800599c <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800599c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800599e:	000d      	movs	r5, r1
 80059a0:	0004      	movs	r4, r0
 80059a2:	0011      	movs	r1, r2
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 80059a4:	2d00      	cmp	r5, #0
 80059a6:	d14d      	bne.n	8005a44 <USBD_LL_DataInStage+0xa8>
  {
    pep = &pdev->ep_in[0];

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80059a8:	23a5      	movs	r3, #165	; 0xa5
 80059aa:	009b      	lsls	r3, r3, #2
 80059ac:	58c3      	ldr	r3, [r0, r3]
 80059ae:	2b02      	cmp	r3, #2
 80059b0:	d141      	bne.n	8005a36 <USBD_LL_DataInStage+0x9a>
    {
      if (pep->rem_length > pep->maxpacket)
 80059b2:	6a03      	ldr	r3, [r0, #32]
 80059b4:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059b6:	42b3      	cmp	r3, r6
 80059b8:	d913      	bls.n	80059e2 <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -= pep->maxpacket;
 80059ba:	1b9b      	subs	r3, r3, r6
 80059bc:	6203      	str	r3, [r0, #32]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 80059be:	b29a      	uxth	r2, r3
 80059c0:	f000 faee 	bl	8005fa0 <USBD_CtlContinueSendData>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
          pdev->ep0_data_len = 0U;

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80059c4:	002b      	movs	r3, r5
 80059c6:	002a      	movs	r2, r5
 80059c8:	0029      	movs	r1, r5
 80059ca:	0020      	movs	r0, r4
 80059cc:	f000 fd48 	bl	8006460 <USBD_LL_PrepareReceive>
      {
        USBD_LL_StallEP(pdev, 0x80U);
      }
    }

    if (pdev->dev_test_mode == 1U)
 80059d0:	23a8      	movs	r3, #168	; 0xa8
 80059d2:	009b      	lsls	r3, r3, #2
 80059d4:	5ce2      	ldrb	r2, [r4, r3]
 80059d6:	2a01      	cmp	r2, #1
 80059d8:	d101      	bne.n	80059de <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev);
      pdev->dev_test_mode = 0U;
 80059da:	2200      	movs	r2, #0
 80059dc:	54e2      	strb	r2, [r4, r3]
    /* should never be in this condition */
    return USBD_FAIL;
  }

  return USBD_OK;
}
 80059de:	0028      	movs	r0, r5
 80059e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if ((pep->total_length % pep->maxpacket == 0U) &&
 80059e2:	69c7      	ldr	r7, [r0, #28]
 80059e4:	0031      	movs	r1, r6
 80059e6:	0038      	movs	r0, r7
 80059e8:	f7fa fc44 	bl	8000274 <__aeabi_uidivmod>
 80059ec:	2900      	cmp	r1, #0
 80059ee:	d10d      	bne.n	8005a0c <USBD_LL_DataInStage+0x70>
 80059f0:	42be      	cmp	r6, r7
 80059f2:	d80b      	bhi.n	8005a0c <USBD_LL_DataInStage+0x70>
            (pep->total_length < pdev->ep0_data_len))
 80059f4:	26a6      	movs	r6, #166	; 0xa6
 80059f6:	00b6      	lsls	r6, r6, #2
            (pep->total_length >= pep->maxpacket) &&
 80059f8:	59a3      	ldr	r3, [r4, r6]
 80059fa:	429f      	cmp	r7, r3
 80059fc:	d206      	bcs.n	8005a0c <USBD_LL_DataInStage+0x70>
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 80059fe:	002a      	movs	r2, r5
 8005a00:	0029      	movs	r1, r5
 8005a02:	0020      	movs	r0, r4
 8005a04:	f000 facc 	bl	8005fa0 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005a08:	51a5      	str	r5, [r4, r6]
 8005a0a:	e7db      	b.n	80059c4 <USBD_LL_DataInStage+0x28>
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005a0c:	23ad      	movs	r3, #173	; 0xad
 8005a0e:	009b      	lsls	r3, r3, #2
 8005a10:	58e3      	ldr	r3, [r4, r3]
 8005a12:	68db      	ldr	r3, [r3, #12]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d006      	beq.n	8005a26 <USBD_LL_DataInStage+0x8a>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a18:	22a7      	movs	r2, #167	; 0xa7
 8005a1a:	0092      	lsls	r2, r2, #2
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8005a1c:	5ca2      	ldrb	r2, [r4, r2]
 8005a1e:	2a03      	cmp	r2, #3
 8005a20:	d101      	bne.n	8005a26 <USBD_LL_DataInStage+0x8a>
            pdev->pClass->EP0_TxSent(pdev);
 8005a22:	0020      	movs	r0, r4
 8005a24:	4798      	blx	r3
          USBD_LL_StallEP(pdev, 0x80U);
 8005a26:	2180      	movs	r1, #128	; 0x80
 8005a28:	0020      	movs	r0, r4
 8005a2a:	f000 fcc3 	bl	80063b4 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 8005a2e:	0020      	movs	r0, r4
 8005a30:	f000 fae2 	bl	8005ff8 <USBD_CtlReceiveStatus>
 8005a34:	e7cc      	b.n	80059d0 <USBD_LL_DataInStage+0x34>
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 8005a36:	2204      	movs	r2, #4
 8005a38:	4393      	bics	r3, r2
 8005a3a:	d1c9      	bne.n	80059d0 <USBD_LL_DataInStage+0x34>
        USBD_LL_StallEP(pdev, 0x80U);
 8005a3c:	2180      	movs	r1, #128	; 0x80
 8005a3e:	f000 fcb9 	bl	80063b4 <USBD_LL_StallEP>
 8005a42:	e7c5      	b.n	80059d0 <USBD_LL_DataInStage+0x34>
  else if ((pdev->pClass->DataIn != NULL) &&
 8005a44:	23ad      	movs	r3, #173	; 0xad
 8005a46:	009b      	lsls	r3, r3, #2
 8005a48:	58c3      	ldr	r3, [r0, r3]
 8005a4a:	695b      	ldr	r3, [r3, #20]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d008      	beq.n	8005a62 <USBD_LL_DataInStage+0xc6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8005a50:	22a7      	movs	r2, #167	; 0xa7
 8005a52:	0092      	lsls	r2, r2, #2
  else if ((pdev->pClass->DataIn != NULL) &&
 8005a54:	5c82      	ldrb	r2, [r0, r2]
 8005a56:	2a03      	cmp	r2, #3
 8005a58:	d103      	bne.n	8005a62 <USBD_LL_DataInStage+0xc6>
    pdev->pClass->DataIn(pdev, epnum);
 8005a5a:	0029      	movs	r1, r5
 8005a5c:	4798      	blx	r3
  return USBD_OK;
 8005a5e:	2500      	movs	r5, #0
    pdev->pClass->DataIn(pdev, epnum);
 8005a60:	e7bd      	b.n	80059de <USBD_LL_DataInStage+0x42>
    return USBD_FAIL;
 8005a62:	2502      	movs	r5, #2
 8005a64:	e7bb      	b.n	80059de <USBD_LL_DataInStage+0x42>

08005a66 <USBD_LL_Reset>:
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a66:	2200      	movs	r2, #0
{
 8005a68:	b570      	push	{r4, r5, r6, lr}
 8005a6a:	0004      	movs	r4, r0
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a6c:	0011      	movs	r1, r2
 8005a6e:	2340      	movs	r3, #64	; 0x40
 8005a70:	f000 fc7e 	bl	8006370 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a74:	0023      	movs	r3, r4
 8005a76:	2501      	movs	r5, #1

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a78:	2640      	movs	r6, #64	; 0x40
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a7a:	33fc      	adds	r3, #252	; 0xfc

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a7c:	2180      	movs	r1, #128	; 0x80
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a7e:	65dd      	str	r5, [r3, #92]	; 0x5c
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a80:	669e      	str	r6, [r3, #104]	; 0x68
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a82:	2200      	movs	r2, #0
 8005a84:	0033      	movs	r3, r6
 8005a86:	0020      	movs	r0, r4
 8005a88:	f000 fc72 	bl	8006370 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a8c:	23a7      	movs	r3, #167	; 0xa7
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a8e:	2100      	movs	r1, #0
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a90:	009b      	lsls	r3, r3, #2
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a92:	61a5      	str	r5, [r4, #24]
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a94:	6266      	str	r6, [r4, #36]	; 0x24
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005a96:	54e5      	strb	r5, [r4, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8005a98:	3b08      	subs	r3, #8
 8005a9a:	50e1      	str	r1, [r4, r3]
  pdev->dev_config = 0U;
  pdev->dev_remote_wakeup = 0U;
 8005a9c:	3310      	adds	r3, #16
  pdev->dev_config = 0U;
 8005a9e:	6061      	str	r1, [r4, #4]
  pdev->dev_remote_wakeup = 0U;
 8005aa0:	50e1      	str	r1, [r4, r3]

  if (pdev->pClassData)
 8005aa2:	3314      	adds	r3, #20
 8005aa4:	58e3      	ldr	r3, [r4, r3]
 8005aa6:	428b      	cmp	r3, r1
 8005aa8:	d005      	beq.n	8005ab6 <USBD_LL_Reset+0x50>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 8005aaa:	23ad      	movs	r3, #173	; 0xad
 8005aac:	009b      	lsls	r3, r3, #2
 8005aae:	58e3      	ldr	r3, [r4, r3]
 8005ab0:	0020      	movs	r0, r4
 8005ab2:	685b      	ldr	r3, [r3, #4]
 8005ab4:	4798      	blx	r3
  }

  return USBD_OK;
}
 8005ab6:	2000      	movs	r0, #0
 8005ab8:	bd70      	pop	{r4, r5, r6, pc}

08005aba <USBD_LL_SetSpeed>:
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 8005aba:	7401      	strb	r1, [r0, #16]

  return USBD_OK;
}
 8005abc:	2000      	movs	r0, #0
 8005abe:	4770      	bx	lr

08005ac0 <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 8005ac0:	23a7      	movs	r3, #167	; 0xa7
 8005ac2:	009b      	lsls	r3, r3, #2
 8005ac4:	5cc1      	ldrb	r1, [r0, r3]
 8005ac6:	4a03      	ldr	r2, [pc, #12]	; (8005ad4 <USBD_LL_Suspend+0x14>)
 8005ac8:	5481      	strb	r1, [r0, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8005aca:	2204      	movs	r2, #4
 8005acc:	54c2      	strb	r2, [r0, r3]

  return USBD_OK;
}
 8005ace:	2000      	movs	r0, #0
 8005ad0:	4770      	bx	lr
 8005ad2:	46c0      	nop			; (mov r8, r8)
 8005ad4:	0000029d 	.word	0x0000029d

08005ad8 <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005ad8:	23a7      	movs	r3, #167	; 0xa7
 8005ada:	009b      	lsls	r3, r3, #2
 8005adc:	5cc2      	ldrb	r2, [r0, r3]
 8005ade:	2a04      	cmp	r2, #4
 8005ae0:	d102      	bne.n	8005ae8 <USBD_LL_Resume+0x10>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ae2:	4a02      	ldr	r2, [pc, #8]	; (8005aec <USBD_LL_Resume+0x14>)
 8005ae4:	5c82      	ldrb	r2, [r0, r2]
 8005ae6:	54c2      	strb	r2, [r0, r3]
  }

  return USBD_OK;
}
 8005ae8:	2000      	movs	r0, #0
 8005aea:	4770      	bx	lr
 8005aec:	0000029d 	.word	0x0000029d

08005af0 <USBD_LL_SOF>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af0:	23a7      	movs	r3, #167	; 0xa7
{
 8005af2:	b510      	push	{r4, lr}
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005af4:	009b      	lsls	r3, r3, #2
 8005af6:	5cc3      	ldrb	r3, [r0, r3]
 8005af8:	2b03      	cmp	r3, #3
 8005afa:	d106      	bne.n	8005b0a <USBD_LL_SOF+0x1a>
  {
    if (pdev->pClass->SOF != NULL)
 8005afc:	23ad      	movs	r3, #173	; 0xad
 8005afe:	009b      	lsls	r3, r3, #2
 8005b00:	58c3      	ldr	r3, [r0, r3]
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d000      	beq.n	8005b0a <USBD_LL_SOF+0x1a>
    {
      pdev->pClass->SOF(pdev);
 8005b08:	4798      	blx	r3
    }
  }

  return USBD_OK;
}
 8005b0a:	2000      	movs	r0, #0
 8005b0c:	bd10      	pop	{r4, pc}

08005b0e <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
 8005b0e:	b510      	push	{r4, lr}
 8005b10:	0004      	movs	r4, r0
                   USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev, 0x80U);
 8005b12:	2180      	movs	r1, #128	; 0x80
 8005b14:	f000 fc4e 	bl	80063b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005b18:	2100      	movs	r1, #0
 8005b1a:	0020      	movs	r0, r4
 8005b1c:	f000 fc4a 	bl	80063b4 <USBD_LL_StallEP>
}
 8005b20:	bd10      	pop	{r4, pc}
	...

08005b24 <USBD_StdDevReq>:
{
 8005b24:	2260      	movs	r2, #96	; 0x60
 8005b26:	780b      	ldrb	r3, [r1, #0]
 8005b28:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b2e:	0019      	movs	r1, r3
 8005b30:	1892      	adds	r2, r2, r2
 8005b32:	3920      	subs	r1, #32
{
 8005b34:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005b36:	4211      	tst	r1, r2
 8005b38:	d012      	beq.n	8005b60 <USBD_StdDevReq+0x3c>
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d000      	beq.n	8005b40 <USBD_StdDevReq+0x1c>
 8005b3e:	e096      	b.n	8005c6e <USBD_StdDevReq+0x14a>
      switch (req->bRequest)
 8005b40:	7868      	ldrb	r0, [r5, #1]
 8005b42:	2809      	cmp	r0, #9
 8005b44:	d900      	bls.n	8005b48 <USBD_StdDevReq+0x24>
 8005b46:	e092      	b.n	8005c6e <USBD_StdDevReq+0x14a>
 8005b48:	f7fa fb04 	bl	8000154 <__gnu_thumb1_case_uhi>
 8005b4c:	010e00f0 	.word	0x010e00f0
 8005b50:	01060091 	.word	0x01060091
 8005b54:	00830091 	.word	0x00830091
 8005b58:	00910012 	.word	0x00910012
 8005b5c:	00a400da 	.word	0x00a400da
      pdev->pClass->Setup(pdev, req);
 8005b60:	23ad      	movs	r3, #173	; 0xad
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	58c3      	ldr	r3, [r0, r3]
 8005b66:	0029      	movs	r1, r5
 8005b68:	689b      	ldr	r3, [r3, #8]
 8005b6a:	4798      	blx	r3
}
 8005b6c:	2000      	movs	r0, #0
 8005b6e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
  uint16_t len = 0U;
 8005b70:	2300      	movs	r3, #0
 8005b72:	466a      	mov	r2, sp
 8005b74:	80d3      	strh	r3, [r2, #6]
  switch (req->wValue >> 8)
 8005b76:	886b      	ldrh	r3, [r5, #2]
 8005b78:	0a18      	lsrs	r0, r3, #8
 8005b7a:	3801      	subs	r0, #1
 8005b7c:	2806      	cmp	r0, #6
 8005b7e:	d876      	bhi.n	8005c6e <USBD_StdDevReq+0x14a>
 8005b80:	f7fa fad4 	bl	800012c <__gnu_thumb1_case_uqi>
 8005b84:	75261704 	.word	0x75261704
 8005b88:	4075      	.short	0x4075
 8005b8a:	4b          	.byte	0x4b
 8005b8b:	00          	.byte	0x00
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005b8c:	23ac      	movs	r3, #172	; 0xac
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	58e3      	ldr	r3, [r4, r3]
 8005b92:	7c20      	ldrb	r0, [r4, #16]
 8005b94:	681b      	ldr	r3, [r3, #0]
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005b96:	466a      	mov	r2, sp
 8005b98:	1d91      	adds	r1, r2, #6
 8005b9a:	4798      	blx	r3
    if ((len != 0U) && (req->wLength != 0U))
 8005b9c:	466b      	mov	r3, sp
 8005b9e:	88d9      	ldrh	r1, [r3, #6]
 8005ba0:	2900      	cmp	r1, #0
 8005ba2:	d051      	beq.n	8005c48 <USBD_StdDevReq+0x124>
 8005ba4:	88ea      	ldrh	r2, [r5, #6]
 8005ba6:	2a00      	cmp	r2, #0
 8005ba8:	d143      	bne.n	8005c32 <USBD_StdDevReq+0x10e>
        USBD_CtlSendStatus(pdev);
 8005baa:	0020      	movs	r0, r4
 8005bac:	f000 fa18 	bl	8005fe0 <USBD_CtlSendStatus>
 8005bb0:	e7dc      	b.n	8005b6c <USBD_StdDevReq+0x48>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005bb2:	23ad      	movs	r3, #173	; 0xad
 8005bb4:	7c22      	ldrb	r2, [r4, #16]
 8005bb6:	009b      	lsls	r3, r3, #2
 8005bb8:	58e3      	ldr	r3, [r4, r3]
 8005bba:	2a00      	cmp	r2, #0
 8005bbc:	d106      	bne.n	8005bcc <USBD_StdDevReq+0xa8>
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 8005bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005bc0:	466a      	mov	r2, sp
 8005bc2:	1d90      	adds	r0, r2, #6
 8005bc4:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8005bc6:	2302      	movs	r3, #2
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005bc8:	7043      	strb	r3, [r0, #1]
  if (err != 0U)
 8005bca:	e7e7      	b.n	8005b9c <USBD_StdDevReq+0x78>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8005bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bce:	e7f7      	b.n	8005bc0 <USBD_StdDevReq+0x9c>
      switch ((uint8_t)(req->wValue))
 8005bd0:	b2d8      	uxtb	r0, r3
 8005bd2:	2805      	cmp	r0, #5
 8005bd4:	d84b      	bhi.n	8005c6e <USBD_StdDevReq+0x14a>
 8005bd6:	23ac      	movs	r3, #172	; 0xac
 8005bd8:	009b      	lsls	r3, r3, #2
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005bda:	58e3      	ldr	r3, [r4, r3]
 8005bdc:	f7fa faa6 	bl	800012c <__gnu_thumb1_case_uqi>
 8005be0:	0c0a0803 	.word	0x0c0a0803
 8005be4:	100e      	.short	0x100e
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8005be6:	685b      	ldr	r3, [r3, #4]
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d040      	beq.n	8005c6e <USBD_StdDevReq+0x14a>
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8005bec:	7c20      	ldrb	r0, [r4, #16]
 8005bee:	e7d2      	b.n	8005b96 <USBD_StdDevReq+0x72>
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	e7f9      	b.n	8005be8 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8005bf4:	68db      	ldr	r3, [r3, #12]
 8005bf6:	e7f7      	b.n	8005be8 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8005bf8:	691b      	ldr	r3, [r3, #16]
 8005bfa:	e7f5      	b.n	8005be8 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8005bfc:	695b      	ldr	r3, [r3, #20]
 8005bfe:	e7f3      	b.n	8005be8 <USBD_StdDevReq+0xc4>
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8005c00:	699b      	ldr	r3, [r3, #24]
 8005c02:	e7f1      	b.n	8005be8 <USBD_StdDevReq+0xc4>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c04:	7c23      	ldrb	r3, [r4, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d131      	bne.n	8005c6e <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8005c0a:	23ad      	movs	r3, #173	; 0xad
 8005c0c:	466a      	mov	r2, sp
 8005c0e:	009b      	lsls	r3, r3, #2
 8005c10:	58e3      	ldr	r3, [r4, r3]
 8005c12:	1d90      	adds	r0, r2, #6
 8005c14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c16:	4798      	blx	r3
  if (err != 0U)
 8005c18:	e7c0      	b.n	8005b9c <USBD_StdDevReq+0x78>
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005c1a:	7c23      	ldrb	r3, [r4, #16]
 8005c1c:	2b00      	cmp	r3, #0
 8005c1e:	d126      	bne.n	8005c6e <USBD_StdDevReq+0x14a>
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8005c20:	23ad      	movs	r3, #173	; 0xad
 8005c22:	466a      	mov	r2, sp
 8005c24:	009b      	lsls	r3, r3, #2
 8005c26:	58e3      	ldr	r3, [r4, r3]
 8005c28:	1d90      	adds	r0, r2, #6
 8005c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c2c:	4798      	blx	r3
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8005c2e:	2307      	movs	r3, #7
 8005c30:	e7ca      	b.n	8005bc8 <USBD_StdDevReq+0xa4>
      len = MIN(len, req->wLength);
 8005c32:	1c0b      	adds	r3, r1, #0
 8005c34:	4291      	cmp	r1, r2
 8005c36:	d900      	bls.n	8005c3a <USBD_StdDevReq+0x116>
 8005c38:	1c13      	adds	r3, r2, #0
 8005c3a:	4669      	mov	r1, sp
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	80cb      	strh	r3, [r1, #6]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8005c40:	0001      	movs	r1, r0
 8005c42:	0020      	movs	r0, r4
 8005c44:	f000 f99e 	bl	8005f84 <USBD_CtlSendData>
    if (req->wLength == 0U)
 8005c48:	88eb      	ldrh	r3, [r5, #6]
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d000      	beq.n	8005c50 <USBD_StdDevReq+0x12c>
 8005c4e:	e78d      	b.n	8005b6c <USBD_StdDevReq+0x48>
 8005c50:	e7ab      	b.n	8005baa <USBD_StdDevReq+0x86>
  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8005c52:	88ab      	ldrh	r3, [r5, #4]
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10a      	bne.n	8005c6e <USBD_StdDevReq+0x14a>
 8005c58:	88eb      	ldrh	r3, [r5, #6]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d107      	bne.n	8005c6e <USBD_StdDevReq+0x14a>
 8005c5e:	886e      	ldrh	r6, [r5, #2]
 8005c60:	2e7f      	cmp	r6, #127	; 0x7f
 8005c62:	d804      	bhi.n	8005c6e <USBD_StdDevReq+0x14a>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005c64:	25a7      	movs	r5, #167	; 0xa7
 8005c66:	00ad      	lsls	r5, r5, #2
 8005c68:	5d63      	ldrb	r3, [r4, r5]
 8005c6a:	2b03      	cmp	r3, #3
 8005c6c:	d103      	bne.n	8005c76 <USBD_StdDevReq+0x152>
        USBD_CtlError(pdev, req);
 8005c6e:	0020      	movs	r0, r4
 8005c70:	f7ff ff4d 	bl	8005b0e <USBD_CtlError.constprop.0>
        break;
 8005c74:	e77a      	b.n	8005b6c <USBD_StdDevReq+0x48>
      pdev->dev_address = dev_addr;
 8005c76:	4b44      	ldr	r3, [pc, #272]	; (8005d88 <USBD_StdDevReq+0x264>)
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8005c78:	b2f1      	uxtb	r1, r6
      pdev->dev_address = dev_addr;
 8005c7a:	54e1      	strb	r1, [r4, r3]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8005c7c:	0020      	movs	r0, r4
 8005c7e:	f000 fbcf 	bl	8006420 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8005c82:	0020      	movs	r0, r4
 8005c84:	f000 f9ac 	bl	8005fe0 <USBD_CtlSendStatus>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8005c88:	2302      	movs	r3, #2
      if (dev_addr != 0U)
 8005c8a:	2e00      	cmp	r6, #0
 8005c8c:	d100      	bne.n	8005c90 <USBD_StdDevReq+0x16c>
        pdev->dev_state = USBD_STATE_DEFAULT;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	5563      	strb	r3, [r4, r5]
 8005c92:	e76b      	b.n	8005b6c <USBD_StdDevReq+0x48>
  cfgidx = (uint8_t)(req->wValue);
 8005c94:	78a9      	ldrb	r1, [r5, #2]
 8005c96:	4d3d      	ldr	r5, [pc, #244]	; (8005d8c <USBD_StdDevReq+0x268>)
 8005c98:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8005c9a:	2901      	cmp	r1, #1
 8005c9c:	d8e7      	bhi.n	8005c6e <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 8005c9e:	23a7      	movs	r3, #167	; 0xa7
 8005ca0:	009b      	lsls	r3, r3, #2
 8005ca2:	5ce2      	ldrb	r2, [r4, r3]
 8005ca4:	2a02      	cmp	r2, #2
 8005ca6:	d009      	beq.n	8005cbc <USBD_StdDevReq+0x198>
 8005ca8:	2a03      	cmp	r2, #3
 8005caa:	d015      	beq.n	8005cd8 <USBD_StdDevReq+0x1b4>
        USBD_CtlError(pdev, req);
 8005cac:	0020      	movs	r0, r4
 8005cae:	f7ff ff2e 	bl	8005b0e <USBD_CtlError.constprop.0>
        USBD_ClrClassConfig(pdev, cfgidx);
 8005cb2:	0020      	movs	r0, r4
 8005cb4:	7829      	ldrb	r1, [r5, #0]
 8005cb6:	f7ff fdf0 	bl	800589a <USBD_ClrClassConfig>
        break;
 8005cba:	e757      	b.n	8005b6c <USBD_StdDevReq+0x48>
        if (cfgidx)
 8005cbc:	2900      	cmp	r1, #0
 8005cbe:	d100      	bne.n	8005cc2 <USBD_StdDevReq+0x19e>
 8005cc0:	e773      	b.n	8005baa <USBD_StdDevReq+0x86>
          pdev->dev_config = cfgidx;
 8005cc2:	2101      	movs	r1, #1
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005cc4:	2203      	movs	r2, #3
          pdev->dev_config = cfgidx;
 8005cc6:	6061      	str	r1, [r4, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8005cc8:	54e2      	strb	r2, [r4, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8005cca:	0020      	movs	r0, r4
 8005ccc:	f7ff fdd8 	bl	8005880 <USBD_SetClassConfig>
 8005cd0:	2802      	cmp	r0, #2
 8005cd2:	d000      	beq.n	8005cd6 <USBD_StdDevReq+0x1b2>
 8005cd4:	e769      	b.n	8005baa <USBD_StdDevReq+0x86>
 8005cd6:	e7ca      	b.n	8005c6e <USBD_StdDevReq+0x14a>
        if (cfgidx == 0U)
 8005cd8:	2900      	cmp	r1, #0
 8005cda:	d106      	bne.n	8005cea <USBD_StdDevReq+0x1c6>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005cdc:	2202      	movs	r2, #2
          USBD_ClrClassConfig(pdev, cfgidx);
 8005cde:	0020      	movs	r0, r4
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8005ce0:	54e2      	strb	r2, [r4, r3]
          pdev->dev_config = cfgidx;
 8005ce2:	6061      	str	r1, [r4, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8005ce4:	f7ff fdd9 	bl	800589a <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8005ce8:	e75f      	b.n	8005baa <USBD_StdDevReq+0x86>
        else if (cfgidx != pdev->dev_config)
 8005cea:	6861      	ldr	r1, [r4, #4]
 8005cec:	2901      	cmp	r1, #1
 8005cee:	d100      	bne.n	8005cf2 <USBD_StdDevReq+0x1ce>
 8005cf0:	e75b      	b.n	8005baa <USBD_StdDevReq+0x86>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8005cf2:	b2c9      	uxtb	r1, r1
 8005cf4:	0020      	movs	r0, r4
 8005cf6:	f7ff fdd0 	bl	800589a <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8005cfa:	7829      	ldrb	r1, [r5, #0]
 8005cfc:	6061      	str	r1, [r4, #4]
 8005cfe:	e7e4      	b.n	8005cca <USBD_StdDevReq+0x1a6>
  if (req->wLength != 1U)
 8005d00:	88ea      	ldrh	r2, [r5, #6]
 8005d02:	2a01      	cmp	r2, #1
 8005d04:	d1b3      	bne.n	8005c6e <USBD_StdDevReq+0x14a>
    switch (pdev->dev_state)
 8005d06:	23a7      	movs	r3, #167	; 0xa7
 8005d08:	009b      	lsls	r3, r3, #2
 8005d0a:	5ce3      	ldrb	r3, [r4, r3]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d806      	bhi.n	8005d1e <USBD_StdDevReq+0x1fa>
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d0ac      	beq.n	8005c6e <USBD_StdDevReq+0x14a>
        pdev->dev_default_config = 0U;
 8005d14:	2300      	movs	r3, #0
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005d16:	0021      	movs	r1, r4
        pdev->dev_default_config = 0U;
 8005d18:	60a3      	str	r3, [r4, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8005d1a:	3108      	adds	r1, #8
 8005d1c:	e002      	b.n	8005d24 <USBD_StdDevReq+0x200>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8005d1e:	1d21      	adds	r1, r4, #4
    switch (pdev->dev_state)
 8005d20:	2b03      	cmp	r3, #3
 8005d22:	d1a4      	bne.n	8005c6e <USBD_StdDevReq+0x14a>
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005d24:	0020      	movs	r0, r4
 8005d26:	f000 f92d 	bl	8005f84 <USBD_CtlSendData>
      break;
 8005d2a:	e71f      	b.n	8005b6c <USBD_StdDevReq+0x48>
  switch (pdev->dev_state)
 8005d2c:	23a7      	movs	r3, #167	; 0xa7
 8005d2e:	009b      	lsls	r3, r3, #2
 8005d30:	5ce3      	ldrb	r3, [r4, r3]
 8005d32:	3b01      	subs	r3, #1
 8005d34:	2b02      	cmp	r3, #2
 8005d36:	d89a      	bhi.n	8005c6e <USBD_StdDevReq+0x14a>
      if (req->wLength != 0x2U)
 8005d38:	88eb      	ldrh	r3, [r5, #6]
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	d197      	bne.n	8005c6e <USBD_StdDevReq+0x14a>
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	60e3      	str	r3, [r4, #12]
      if (pdev->dev_remote_wakeup)
 8005d42:	23a9      	movs	r3, #169	; 0xa9
 8005d44:	009b      	lsls	r3, r3, #2
 8005d46:	58e3      	ldr	r3, [r4, r3]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <USBD_StdDevReq+0x22c>
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8005d4c:	2303      	movs	r3, #3
 8005d4e:	60e3      	str	r3, [r4, #12]
      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8005d50:	0021      	movs	r1, r4
 8005d52:	2202      	movs	r2, #2
 8005d54:	310c      	adds	r1, #12
 8005d56:	e7e5      	b.n	8005d24 <USBD_StdDevReq+0x200>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d58:	886b      	ldrh	r3, [r5, #2]
 8005d5a:	2b01      	cmp	r3, #1
 8005d5c:	d000      	beq.n	8005d60 <USBD_StdDevReq+0x23c>
 8005d5e:	e705      	b.n	8005b6c <USBD_StdDevReq+0x48>
    pdev->dev_remote_wakeup = 1U;
 8005d60:	22a9      	movs	r2, #169	; 0xa9
 8005d62:	0092      	lsls	r2, r2, #2
 8005d64:	50a3      	str	r3, [r4, r2]
    USBD_CtlSendStatus(pdev);
 8005d66:	e720      	b.n	8005baa <USBD_StdDevReq+0x86>
  switch (pdev->dev_state)
 8005d68:	23a7      	movs	r3, #167	; 0xa7
 8005d6a:	009b      	lsls	r3, r3, #2
 8005d6c:	5ce3      	ldrb	r3, [r4, r3]
 8005d6e:	3b01      	subs	r3, #1
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d900      	bls.n	8005d76 <USBD_StdDevReq+0x252>
 8005d74:	e77b      	b.n	8005c6e <USBD_StdDevReq+0x14a>
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8005d76:	886b      	ldrh	r3, [r5, #2]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d000      	beq.n	8005d7e <USBD_StdDevReq+0x25a>
 8005d7c:	e6f6      	b.n	8005b6c <USBD_StdDevReq+0x48>
        pdev->dev_remote_wakeup = 0U;
 8005d7e:	23a9      	movs	r3, #169	; 0xa9
 8005d80:	2200      	movs	r2, #0
 8005d82:	009b      	lsls	r3, r3, #2
 8005d84:	50e2      	str	r2, [r4, r3]
 8005d86:	e710      	b.n	8005baa <USBD_StdDevReq+0x86>
 8005d88:	0000029e 	.word	0x0000029e
 8005d8c:	20000248 	.word	0x20000248

08005d90 <USBD_StdItfReq>:
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d90:	2360      	movs	r3, #96	; 0x60
 8005d92:	780a      	ldrb	r2, [r1, #0]
{
 8005d94:	b570      	push	{r4, r5, r6, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d96:	4013      	ands	r3, r2
{
 8005d98:	0004      	movs	r4, r0
 8005d9a:	000d      	movs	r5, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d9c:	2b40      	cmp	r3, #64	; 0x40
 8005d9e:	d001      	beq.n	8005da4 <USBD_StdItfReq+0x14>
 8005da0:	0653      	lsls	r3, r2, #25
 8005da2:	d419      	bmi.n	8005dd8 <USBD_StdItfReq+0x48>
      switch (pdev->dev_state)
 8005da4:	23a7      	movs	r3, #167	; 0xa7
 8005da6:	009b      	lsls	r3, r3, #2
 8005da8:	5ce3      	ldrb	r3, [r4, r3]
 8005daa:	3b01      	subs	r3, #1
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d813      	bhi.n	8005dd8 <USBD_StdItfReq+0x48>
          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005db0:	792b      	ldrb	r3, [r5, #4]
 8005db2:	2b01      	cmp	r3, #1
 8005db4:	d810      	bhi.n	8005dd8 <USBD_StdItfReq+0x48>
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8005db6:	23ad      	movs	r3, #173	; 0xad
 8005db8:	009b      	lsls	r3, r3, #2
 8005dba:	58e3      	ldr	r3, [r4, r3]
 8005dbc:	0029      	movs	r1, r5
 8005dbe:	689b      	ldr	r3, [r3, #8]
 8005dc0:	0020      	movs	r0, r4
 8005dc2:	4798      	blx	r3
            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005dc4:	88eb      	ldrh	r3, [r5, #6]
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d104      	bne.n	8005dd4 <USBD_StdItfReq+0x44>
 8005dca:	2800      	cmp	r0, #0
 8005dcc:	d102      	bne.n	8005dd4 <USBD_StdItfReq+0x44>
              USBD_CtlSendStatus(pdev);
 8005dce:	0020      	movs	r0, r4
 8005dd0:	f000 f906 	bl	8005fe0 <USBD_CtlSendStatus>
}
 8005dd4:	2000      	movs	r0, #0
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
          USBD_CtlError(pdev, req);
 8005dd8:	0020      	movs	r0, r4
 8005dda:	f7ff fe98 	bl	8005b0e <USBD_CtlError.constprop.0>
          break;
 8005dde:	e7f9      	b.n	8005dd4 <USBD_StdItfReq+0x44>

08005de0 <USBD_StdEPReq>:
{
 8005de0:	780a      	ldrb	r2, [r1, #0]
 8005de2:	000b      	movs	r3, r1
 8005de4:	2160      	movs	r1, #96	; 0x60
 8005de6:	400a      	ands	r2, r1
 8005de8:	b570      	push	{r4, r5, r6, lr}
 8005dea:	0004      	movs	r4, r0
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005dec:	0010      	movs	r0, r2
 8005dee:	1849      	adds	r1, r1, r1
 8005df0:	3820      	subs	r0, #32
 8005df2:	4208      	tst	r0, r1
 8005df4:	d029      	beq.n	8005e4a <USBD_StdEPReq+0x6a>
 8005df6:	2a00      	cmp	r2, #0
 8005df8:	d137      	bne.n	8005e6a <USBD_StdEPReq+0x8a>
  ep_addr  = LOBYTE(req->wIndex);
 8005dfa:	8898      	ldrh	r0, [r3, #4]
      switch (req->bRequest)
 8005dfc:	785a      	ldrb	r2, [r3, #1]
  ep_addr  = LOBYTE(req->wIndex);
 8005dfe:	b2c1      	uxtb	r1, r0
      switch (req->bRequest)
 8005e00:	2a01      	cmp	r2, #1
 8005e02:	d045      	beq.n	8005e90 <USBD_StdEPReq+0xb0>
 8005e04:	2a03      	cmp	r2, #3
 8005e06:	d029      	beq.n	8005e5c <USBD_StdEPReq+0x7c>
 8005e08:	2a00      	cmp	r2, #0
 8005e0a:	d12e      	bne.n	8005e6a <USBD_StdEPReq+0x8a>
          switch (pdev->dev_state)
 8005e0c:	23a7      	movs	r3, #167	; 0xa7
 8005e0e:	009b      	lsls	r3, r3, #2
 8005e10:	5ce3      	ldrb	r3, [r4, r3]
 8005e12:	2b02      	cmp	r3, #2
 8005e14:	d056      	beq.n	8005ec4 <USBD_StdEPReq+0xe4>
 8005e16:	2b03      	cmp	r3, #3
 8005e18:	d127      	bne.n	8005e6a <USBD_StdEPReq+0x8a>
              if ((ep_addr & 0x80U) == 0x80U)
 8005e1a:	220f      	movs	r2, #15
 8005e1c:	2314      	movs	r3, #20
 8005e1e:	400a      	ands	r2, r1
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e20:	435a      	muls	r2, r3
 8005e22:	18a2      	adds	r2, r4, r2
              if ((ep_addr & 0x80U) == 0x80U)
 8005e24:	0600      	lsls	r0, r0, #24
 8005e26:	d55d      	bpl.n	8005ee4 <USBD_StdEPReq+0x104>
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005e28:	6992      	ldr	r2, [r2, #24]
 8005e2a:	2a00      	cmp	r2, #0
 8005e2c:	d01d      	beq.n	8005e6a <USBD_StdEPReq+0x8a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e2e:	257f      	movs	r5, #127	; 0x7f
 8005e30:	400d      	ands	r5, r1
 8005e32:	3501      	adds	r5, #1
 8005e34:	435d      	muls	r5, r3
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e36:	237f      	movs	r3, #127	; 0x7f
 8005e38:	000a      	movs	r2, r1
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e3a:	1965      	adds	r5, r4, r5
              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005e3c:	401a      	ands	r2, r3
 8005e3e:	4219      	tst	r1, r3
 8005e40:	d15a      	bne.n	8005ef8 <USBD_StdEPReq+0x118>
                pep->status = 0x0000U;
 8005e42:	602a      	str	r2, [r5, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005e44:	2202      	movs	r2, #2
 8005e46:	0029      	movs	r1, r5
 8005e48:	e048      	b.n	8005edc <USBD_StdEPReq+0xfc>
      pdev->pClass->Setup(pdev, req);
 8005e4a:	22ad      	movs	r2, #173	; 0xad
 8005e4c:	0092      	lsls	r2, r2, #2
 8005e4e:	58a2      	ldr	r2, [r4, r2]
 8005e50:	0019      	movs	r1, r3
 8005e52:	0020      	movs	r0, r4
 8005e54:	6892      	ldr	r2, [r2, #8]
 8005e56:	4790      	blx	r2
}
 8005e58:	2000      	movs	r0, #0
 8005e5a:	bd70      	pop	{r4, r5, r6, pc}
          switch (pdev->dev_state)
 8005e5c:	22a7      	movs	r2, #167	; 0xa7
 8005e5e:	0092      	lsls	r2, r2, #2
 8005e60:	5ca2      	ldrb	r2, [r4, r2]
 8005e62:	2a02      	cmp	r2, #2
 8005e64:	d024      	beq.n	8005eb0 <USBD_StdEPReq+0xd0>
 8005e66:	2a03      	cmp	r2, #3
 8005e68:	d003      	beq.n	8005e72 <USBD_StdEPReq+0x92>
              USBD_CtlError(pdev, req);
 8005e6a:	0020      	movs	r0, r4
 8005e6c:	f7ff fe4f 	bl	8005b0e <USBD_CtlError.constprop.0>
              break;
 8005e70:	e7f2      	b.n	8005e58 <USBD_StdEPReq+0x78>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e72:	885a      	ldrh	r2, [r3, #2]
 8005e74:	2a00      	cmp	r2, #0
 8005e76:	d107      	bne.n	8005e88 <USBD_StdEPReq+0xa8>
                if ((ep_addr != 0x00U) &&
 8005e78:	064a      	lsls	r2, r1, #25
 8005e7a:	d005      	beq.n	8005e88 <USBD_StdEPReq+0xa8>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005e7c:	88db      	ldrh	r3, [r3, #6]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d102      	bne.n	8005e88 <USBD_StdEPReq+0xa8>
                  USBD_LL_StallEP(pdev, ep_addr);
 8005e82:	0020      	movs	r0, r4
 8005e84:	f000 fa96 	bl	80063b4 <USBD_LL_StallEP>
              USBD_CtlSendStatus(pdev);
 8005e88:	0020      	movs	r0, r4
 8005e8a:	f000 f8a9 	bl	8005fe0 <USBD_CtlSendStatus>
              break;
 8005e8e:	e7e3      	b.n	8005e58 <USBD_StdEPReq+0x78>
          switch (pdev->dev_state)
 8005e90:	22a7      	movs	r2, #167	; 0xa7
 8005e92:	0092      	lsls	r2, r2, #2
 8005e94:	5ca2      	ldrb	r2, [r4, r2]
 8005e96:	2a02      	cmp	r2, #2
 8005e98:	d00a      	beq.n	8005eb0 <USBD_StdEPReq+0xd0>
 8005e9a:	2a03      	cmp	r2, #3
 8005e9c:	d1e5      	bne.n	8005e6a <USBD_StdEPReq+0x8a>
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005e9e:	885b      	ldrh	r3, [r3, #2]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d1d9      	bne.n	8005e58 <USBD_StdEPReq+0x78>
                if ((ep_addr & 0x7FU) != 0x00U)
 8005ea4:	064b      	lsls	r3, r1, #25
 8005ea6:	d0ef      	beq.n	8005e88 <USBD_StdEPReq+0xa8>
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 8005ea8:	0020      	movs	r0, r4
 8005eaa:	f000 fa93 	bl	80063d4 <USBD_LL_ClearStallEP>
 8005eae:	e7eb      	b.n	8005e88 <USBD_StdEPReq+0xa8>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005eb0:	064b      	lsls	r3, r1, #25
 8005eb2:	d0da      	beq.n	8005e6a <USBD_StdEPReq+0x8a>
                USBD_LL_StallEP(pdev, ep_addr);
 8005eb4:	0020      	movs	r0, r4
 8005eb6:	f000 fa7d 	bl	80063b4 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8005eba:	2180      	movs	r1, #128	; 0x80
 8005ebc:	0020      	movs	r0, r4
 8005ebe:	f000 fa79 	bl	80063b4 <USBD_LL_StallEP>
 8005ec2:	e7c9      	b.n	8005e58 <USBD_StdEPReq+0x78>
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005ec4:	064b      	lsls	r3, r1, #25
 8005ec6:	d1d0      	bne.n	8005e6a <USBD_StdEPReq+0x8a>
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ec8:	0021      	movs	r1, r4
 8005eca:	3155      	adds	r1, #85	; 0x55
 8005ecc:	31ff      	adds	r1, #255	; 0xff
 8005ece:	0603      	lsls	r3, r0, #24
 8005ed0:	d501      	bpl.n	8005ed6 <USBD_StdEPReq+0xf6>
 8005ed2:	3941      	subs	r1, #65	; 0x41
 8005ed4:	39ff      	subs	r1, #255	; 0xff
              pep->status = 0x0000U;
 8005ed6:	2300      	movs	r3, #0
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005ed8:	2202      	movs	r2, #2
              pep->status = 0x0000U;
 8005eda:	600b      	str	r3, [r1, #0]
              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8005edc:	0020      	movs	r0, r4
 8005ede:	f000 f851 	bl	8005f84 <USBD_CtlSendData>
              break;
 8005ee2:	e7b9      	b.n	8005e58 <USBD_StdEPReq+0x78>
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005ee4:	32fc      	adds	r2, #252	; 0xfc
 8005ee6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8005ee8:	2a00      	cmp	r2, #0
 8005eea:	d0be      	beq.n	8005e6a <USBD_StdEPReq+0x8a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005eec:	257f      	movs	r5, #127	; 0x7f
 8005eee:	400d      	ands	r5, r1
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005ef0:	435d      	muls	r5, r3
 8005ef2:	3555      	adds	r5, #85	; 0x55
 8005ef4:	35ff      	adds	r5, #255	; 0xff
 8005ef6:	e79e      	b.n	8005e36 <USBD_StdEPReq+0x56>
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 8005ef8:	0020      	movs	r0, r4
 8005efa:	f000 fa7b 	bl	80063f4 <USBD_LL_IsStallEP>
 8005efe:	2800      	cmp	r0, #0
 8005f00:	d002      	beq.n	8005f08 <USBD_StdEPReq+0x128>
                pep->status = 0x0001U;
 8005f02:	2301      	movs	r3, #1
 8005f04:	602b      	str	r3, [r5, #0]
 8005f06:	e79d      	b.n	8005e44 <USBD_StdEPReq+0x64>
                pep->status = 0x0000U;
 8005f08:	6028      	str	r0, [r5, #0]
 8005f0a:	e79b      	b.n	8005e44 <USBD_StdEPReq+0x64>

08005f0c <USBD_ParseSetupRequest>:
  req->bmRequest = *(uint8_t *)(pdata);
 8005f0c:	780b      	ldrb	r3, [r1, #0]
 8005f0e:	7003      	strb	r3, [r0, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8005f10:	784b      	ldrb	r3, [r1, #1]
 8005f12:	7043      	strb	r3, [r0, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8005f14:	78ca      	ldrb	r2, [r1, #3]
 8005f16:	788b      	ldrb	r3, [r1, #2]
 8005f18:	0212      	lsls	r2, r2, #8
 8005f1a:	189b      	adds	r3, r3, r2
 8005f1c:	8043      	strh	r3, [r0, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8005f1e:	794a      	ldrb	r2, [r1, #5]
 8005f20:	790b      	ldrb	r3, [r1, #4]
 8005f22:	0212      	lsls	r2, r2, #8
 8005f24:	189b      	adds	r3, r3, r2
 8005f26:	8083      	strh	r3, [r0, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8005f28:	79ca      	ldrb	r2, [r1, #7]
 8005f2a:	798b      	ldrb	r3, [r1, #6]
 8005f2c:	0212      	lsls	r2, r2, #8
 8005f2e:	189b      	adds	r3, r3, r2
 8005f30:	80c3      	strh	r3, [r0, #6]
}
 8005f32:	4770      	bx	lr

08005f34 <USBD_CtlError>:
{
 8005f34:	b510      	push	{r4, lr}
 8005f36:	0004      	movs	r4, r0
  USBD_LL_StallEP(pdev, 0x80U);
 8005f38:	2180      	movs	r1, #128	; 0x80
 8005f3a:	f000 fa3b 	bl	80063b4 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8005f3e:	2100      	movs	r1, #0
 8005f40:	0020      	movs	r0, r4
 8005f42:	f000 fa37 	bl	80063b4 <USBD_LL_StallEP>
}
 8005f46:	bd10      	pop	{r4, pc}

08005f48 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8005f48:	b570      	push	{r4, r5, r6, lr}
 8005f4a:	2500      	movs	r5, #0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
  uint8_t  len = 0U;

  while (*buf != '\0')
 8005f4c:	1e46      	subs	r6, r0, #1
  if (desc != NULL)
 8005f4e:	42a8      	cmp	r0, r5
 8005f50:	d00f      	beq.n	8005f72 <USBD_GetString+0x2a>
  while (*buf != '\0')
 8005f52:	002b      	movs	r3, r5
 8005f54:	3501      	adds	r5, #1
 8005f56:	5d74      	ldrb	r4, [r6, r5]
 8005f58:	2c00      	cmp	r4, #0
 8005f5a:	d1fa      	bne.n	8005f52 <USBD_GetString+0xa>
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	3301      	adds	r3, #1
 8005f60:	005b      	lsls	r3, r3, #1
 8005f62:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8005f64:	700b      	strb	r3, [r1, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8005f66:	2303      	movs	r3, #3
 8005f68:	704b      	strb	r3, [r1, #1]
 8005f6a:	3b01      	subs	r3, #1
    while (*desc != '\0')
 8005f6c:	7805      	ldrb	r5, [r0, #0]
 8005f6e:	2d00      	cmp	r5, #0
 8005f70:	d100      	bne.n	8005f74 <USBD_GetString+0x2c>
}
 8005f72:	bd70      	pop	{r4, r5, r6, pc}
      unicode[idx++] = *desc++;
 8005f74:	1c5a      	adds	r2, r3, #1
 8005f76:	54cd      	strb	r5, [r1, r3]
 8005f78:	b2d2      	uxtb	r2, r2
      unicode[idx++] =  0U;
 8005f7a:	3302      	adds	r3, #2
      unicode[idx++] = *desc++;
 8005f7c:	3001      	adds	r0, #1
      unicode[idx++] =  0U;
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	548c      	strb	r4, [r1, r2]
 8005f82:	e7f3      	b.n	8005f6c <USBD_GetString+0x24>

08005f84 <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8005f84:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005f86:	22a5      	movs	r2, #165	; 0xa5
{
 8005f88:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8005f8a:	2402      	movs	r4, #2
 8005f8c:	0092      	lsls	r2, r2, #2
 8005f8e:	5084      	str	r4, [r0, r2]
  pdev->ep_in[0].total_length = len;
  pdev->ep_in[0].rem_length   = len;

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f90:	000a      	movs	r2, r1
  pdev->ep_in[0].total_length = len;
 8005f92:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f94:	2100      	movs	r1, #0
  pdev->ep_in[0].rem_length   = len;
 8005f96:	6203      	str	r3, [r0, #32]
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005f98:	f000 fa52 	bl	8006440 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005f9c:	2000      	movs	r0, #0
 8005f9e:	bd10      	pop	{r4, pc}

08005fa0 <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8005fa0:	b510      	push	{r4, lr}
 8005fa2:	0013      	movs	r3, r2
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8005fa4:	000a      	movs	r2, r1
 8005fa6:	2100      	movs	r1, #0
 8005fa8:	f000 fa4a 	bl	8006440 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005fac:	2000      	movs	r0, #0
 8005fae:	bd10      	pop	{r4, pc}

08005fb0 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8005fb0:	0013      	movs	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005fb2:	22a5      	movs	r2, #165	; 0xa5
{
 8005fb4:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8005fb6:	2403      	movs	r4, #3
 8005fb8:	0092      	lsls	r2, r2, #2
 8005fba:	5084      	str	r4, [r0, r2]
  pdev->ep_out[0].total_length = len;
 8005fbc:	0002      	movs	r2, r0
 8005fbe:	32fc      	adds	r2, #252	; 0xfc
 8005fc0:	6613      	str	r3, [r2, #96]	; 0x60
  pdev->ep_out[0].rem_length   = len;
 8005fc2:	6653      	str	r3, [r2, #100]	; 0x64

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005fc4:	000a      	movs	r2, r1
 8005fc6:	2100      	movs	r1, #0
 8005fc8:	f000 fa4a 	bl	8006460 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005fcc:	2000      	movs	r0, #0
 8005fce:	bd10      	pop	{r4, pc}

08005fd0 <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 8005fd0:	b510      	push	{r4, lr}
 8005fd2:	0013      	movs	r3, r2
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8005fd4:	000a      	movs	r2, r1
 8005fd6:	2100      	movs	r1, #0
 8005fd8:	f000 fa42 	bl	8006460 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 8005fdc:	2000      	movs	r0, #0
 8005fde:	bd10      	pop	{r4, pc}

08005fe0 <USBD_CtlSendStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005fe0:	23a5      	movs	r3, #165	; 0xa5
 8005fe2:	2204      	movs	r2, #4
 8005fe4:	009b      	lsls	r3, r3, #2
{
 8005fe6:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8005fe8:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8005fea:	2300      	movs	r3, #0
 8005fec:	001a      	movs	r2, r3
 8005fee:	0019      	movs	r1, r3
 8005ff0:	f000 fa26 	bl	8006440 <USBD_LL_Transmit>

  return USBD_OK;
}
 8005ff4:	2000      	movs	r0, #0
 8005ff6:	bd10      	pop	{r4, pc}

08005ff8 <USBD_CtlReceiveStatus>:
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8005ff8:	23a5      	movs	r3, #165	; 0xa5
 8005ffa:	2205      	movs	r2, #5
 8005ffc:	009b      	lsls	r3, r3, #2
{
 8005ffe:	b510      	push	{r4, lr}
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006000:	50c2      	str	r2, [r0, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006002:	2300      	movs	r3, #0
 8006004:	001a      	movs	r2, r3
 8006006:	0019      	movs	r1, r3
 8006008:	f000 fa2a 	bl	8006460 <USBD_LL_PrepareReceive>

  return USBD_OK;
}
 800600c:	2000      	movs	r0, #0
 800600e:	bd10      	pop	{r4, pc}

08006010 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006010:	b510      	push	{r4, lr}
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006012:	4c11      	ldr	r4, [pc, #68]	; (8006058 <MX_USB_DEVICE_Init+0x48>)
 8006014:	2200      	movs	r2, #0
 8006016:	0020      	movs	r0, r4
 8006018:	4910      	ldr	r1, [pc, #64]	; (800605c <MX_USB_DEVICE_Init+0x4c>)
 800601a:	f7ff fc09 	bl	8005830 <USBD_Init>
 800601e:	2800      	cmp	r0, #0
 8006020:	d001      	beq.n	8006026 <MX_USB_DEVICE_Init+0x16>
  {
    Error_Handler();
 8006022:	f7fa fddb 	bl	8000bdc <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 8006026:	0020      	movs	r0, r4
 8006028:	490d      	ldr	r1, [pc, #52]	; (8006060 <MX_USB_DEVICE_Init+0x50>)
 800602a:	f7ff fc1b 	bl	8005864 <USBD_RegisterClass>
 800602e:	2800      	cmp	r0, #0
 8006030:	d001      	beq.n	8006036 <MX_USB_DEVICE_Init+0x26>
  {
    Error_Handler();
 8006032:	f7fa fdd3 	bl	8000bdc <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8006036:	0020      	movs	r0, r4
 8006038:	490a      	ldr	r1, [pc, #40]	; (8006064 <MX_USB_DEVICE_Init+0x54>)
 800603a:	f7ff fba8 	bl	800578e <USBD_CDC_RegisterInterface>
 800603e:	2800      	cmp	r0, #0
 8006040:	d001      	beq.n	8006046 <MX_USB_DEVICE_Init+0x36>
  {
    Error_Handler();
 8006042:	f7fa fdcb 	bl	8000bdc <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006046:	0020      	movs	r0, r4
 8006048:	f7ff fc15 	bl	8005876 <USBD_Start>
 800604c:	2800      	cmp	r0, #0
 800604e:	d001      	beq.n	8006054 <MX_USB_DEVICE_Init+0x44>
  {
    Error_Handler();
 8006050:	f7fa fdc4 	bl	8000bdc <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006054:	bd10      	pop	{r4, pc}
 8006056:	46c0      	nop			; (mov r8, r8)
 8006058:	20000900 	.word	0x20000900
 800605c:	20000170 	.word	0x20000170
 8006060:	20000050 	.word	0x20000050
 8006064:	20000160 	.word	0x20000160

08006068 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8006068:	2000      	movs	r0, #0
 800606a:	4770      	bx	lr

0800606c <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 800606c:	2000      	movs	r0, #0
 800606e:	4770      	bx	lr

08006070 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8006070:	b570      	push	{r4, r5, r6, lr}
 8006072:	0004      	movs	r4, r0
  /* USER CODE BEGIN 6 */
	Test_RxPacket(Buf,*Len);
 8006074:	6809      	ldr	r1, [r1, #0]
 8006076:	f7fa fcb7 	bl	80009e8 <Test_RxPacket>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 800607a:	4d05      	ldr	r5, [pc, #20]	; (8006090 <CDC_Receive_FS+0x20>)
 800607c:	0021      	movs	r1, r4
 800607e:	0028      	movs	r0, r5
 8006080:	f7ff fb99 	bl	80057b6 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8006084:	0028      	movs	r0, r5
 8006086:	f7ff fbb9 	bl	80057fc <USBD_CDC_ReceivePacket>
  return (USBD_OK);
  /* USER CODE END 6 */
}
 800608a:	2000      	movs	r0, #0
 800608c:	bd70      	pop	{r4, r5, r6, pc}
 800608e:	46c0      	nop			; (mov r8, r8)
 8006090:	20000900 	.word	0x20000900

08006094 <CDC_Init_FS>:
{
 8006094:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8006096:	4c06      	ldr	r4, [pc, #24]	; (80060b0 <CDC_Init_FS+0x1c>)
 8006098:	2200      	movs	r2, #0
 800609a:	0020      	movs	r0, r4
 800609c:	4905      	ldr	r1, [pc, #20]	; (80060b4 <CDC_Init_FS+0x20>)
 800609e:	f7ff fb7f 	bl	80057a0 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 80060a2:	0020      	movs	r0, r4
 80060a4:	4904      	ldr	r1, [pc, #16]	; (80060b8 <CDC_Init_FS+0x24>)
 80060a6:	f7ff fb86 	bl	80057b6 <USBD_CDC_SetRxBuffer>
}
 80060aa:	2000      	movs	r0, #0
 80060ac:	bd10      	pop	{r4, pc}
 80060ae:	46c0      	nop			; (mov r8, r8)
 80060b0:	20000900 	.word	0x20000900
 80060b4:	20000cc4 	.word	0x20000cc4
 80060b8:	20000bc4 	.word	0x20000bc4

080060bc <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 80060bc:	000a      	movs	r2, r1
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80060be:	21ae      	movs	r1, #174	; 0xae
{
 80060c0:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80060c2:	4c08      	ldr	r4, [pc, #32]	; (80060e4 <CDC_Transmit_FS+0x28>)
 80060c4:	0089      	lsls	r1, r1, #2
{
 80060c6:	0003      	movs	r3, r0
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 80060c8:	5860      	ldr	r0, [r4, r1]
  if (hcdc->TxState != 0){
 80060ca:	39a4      	subs	r1, #164	; 0xa4
 80060cc:	5841      	ldr	r1, [r0, r1]
    return USBD_BUSY;
 80060ce:	2001      	movs	r0, #1
  if (hcdc->TxState != 0){
 80060d0:	2900      	cmp	r1, #0
 80060d2:	d106      	bne.n	80060e2 <CDC_Transmit_FS+0x26>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 80060d4:	0019      	movs	r1, r3
 80060d6:	0020      	movs	r0, r4
 80060d8:	f7ff fb62 	bl	80057a0 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 80060dc:	0020      	movs	r0, r4
 80060de:	f7ff fb71 	bl	80057c4 <USBD_CDC_TransmitPacket>
  /* USER CODE END 7 */
  return result;
}
 80060e2:	bd10      	pop	{r4, pc}
 80060e4:	20000900 	.word	0x20000900

080060e8 <USBD_FS_DeviceDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80060e8:	2312      	movs	r3, #18
  return USBD_FS_DeviceDesc;
}
 80060ea:	4801      	ldr	r0, [pc, #4]	; (80060f0 <USBD_FS_DeviceDescriptor+0x8>)
  *length = sizeof(USBD_FS_DeviceDesc);
 80060ec:	800b      	strh	r3, [r1, #0]
}
 80060ee:	4770      	bx	lr
 80060f0:	2000018c 	.word	0x2000018c

080060f4 <USBD_FS_LangIDStrDescriptor>:
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80060f4:	2304      	movs	r3, #4
  return USBD_LangIDDesc;
}
 80060f6:	4801      	ldr	r0, [pc, #4]	; (80060fc <USBD_FS_LangIDStrDescriptor+0x8>)
  *length = sizeof(USBD_LangIDDesc);
 80060f8:	800b      	strh	r3, [r1, #0]
}
 80060fa:	4770      	bx	lr
 80060fc:	200001a0 	.word	0x200001a0

08006100 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006100:	b530      	push	{r4, r5, lr}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
    }

    value = value << 4;

    pbuf[2 * idx + 1] = 0;
 8006102:	2500      	movs	r5, #0
 8006104:	0052      	lsls	r2, r2, #1
 8006106:	188a      	adds	r2, r1, r2
    if (((value >> 28)) < 0xA)
 8006108:	0f04      	lsrs	r4, r0, #28
 800610a:	b2e3      	uxtb	r3, r4
 800610c:	2c09      	cmp	r4, #9
 800610e:	d807      	bhi.n	8006120 <IntToUnicode+0x20>
      pbuf[2 * idx] = (value >> 28) + '0';
 8006110:	3330      	adds	r3, #48	; 0x30
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006112:	700b      	strb	r3, [r1, #0]
    pbuf[2 * idx + 1] = 0;
 8006114:	704d      	strb	r5, [r1, #1]
 8006116:	3102      	adds	r1, #2
    value = value << 4;
 8006118:	0100      	lsls	r0, r0, #4
  for (idx = 0; idx < len; idx++)
 800611a:	428a      	cmp	r2, r1
 800611c:	d1f4      	bne.n	8006108 <IntToUnicode+0x8>
  }
}
 800611e:	bd30      	pop	{r4, r5, pc}
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006120:	3337      	adds	r3, #55	; 0x37
 8006122:	e7f6      	b.n	8006112 <IntToUnicode+0x12>

08006124 <USBD_FS_SerialStrDescriptor>:
  *length = USB_SIZ_STRING_SERIAL;
 8006124:	231a      	movs	r3, #26
{
 8006126:	b570      	push	{r4, r5, r6, lr}
  *length = USB_SIZ_STRING_SERIAL;
 8006128:	800b      	strh	r3, [r1, #0]
  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800612a:	4b0b      	ldr	r3, [pc, #44]	; (8006158 <USBD_FS_SerialStrDescriptor+0x34>)
 800612c:	4c0b      	ldr	r4, [pc, #44]	; (800615c <USBD_FS_SerialStrDescriptor+0x38>)
 800612e:	6818      	ldr	r0, [r3, #0]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006130:	4b0b      	ldr	r3, [pc, #44]	; (8006160 <USBD_FS_SerialStrDescriptor+0x3c>)
  deviceserial0 += deviceserial2;
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	18c0      	adds	r0, r0, r3
  if (deviceserial0 != 0)
 8006136:	2800      	cmp	r0, #0
 8006138:	d00b      	beq.n	8006152 <USBD_FS_SerialStrDescriptor+0x2e>
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800613a:	4b0a      	ldr	r3, [pc, #40]	; (8006164 <USBD_FS_SerialStrDescriptor+0x40>)
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800613c:	2208      	movs	r2, #8
 800613e:	1ca1      	adds	r1, r4, #2
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006140:	681d      	ldr	r5, [r3, #0]
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006142:	f7ff ffdd 	bl	8006100 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006146:	0021      	movs	r1, r4
 8006148:	2204      	movs	r2, #4
 800614a:	0028      	movs	r0, r5
 800614c:	3112      	adds	r1, #18
 800614e:	f7ff ffd7 	bl	8006100 <IntToUnicode>
}
 8006152:	0020      	movs	r0, r4
 8006154:	bd70      	pop	{r4, r5, r6, pc}
 8006156:	46c0      	nop			; (mov r8, r8)
 8006158:	1ffff7ac 	.word	0x1ffff7ac
 800615c:	200001a4 	.word	0x200001a4
 8006160:	1ffff7b4 	.word	0x1ffff7b4
 8006164:	1ffff7b0 	.word	0x1ffff7b0

08006168 <USBD_FS_ManufacturerStrDescriptor>:
{
 8006168:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800616a:	4c04      	ldr	r4, [pc, #16]	; (800617c <USBD_FS_ManufacturerStrDescriptor+0x14>)
{
 800616c:	000a      	movs	r2, r1
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800616e:	4804      	ldr	r0, [pc, #16]	; (8006180 <USBD_FS_ManufacturerStrDescriptor+0x18>)
 8006170:	0021      	movs	r1, r4
 8006172:	f7ff fee9 	bl	8005f48 <USBD_GetString>
}
 8006176:	0020      	movs	r0, r4
 8006178:	bd10      	pop	{r4, pc}
 800617a:	46c0      	nop			; (mov r8, r8)
 800617c:	20000dc4 	.word	0x20000dc4
 8006180:	08007332 	.word	0x08007332

08006184 <USBD_FS_ProductStrDescriptor>:
{
 8006184:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006186:	4c04      	ldr	r4, [pc, #16]	; (8006198 <USBD_FS_ProductStrDescriptor+0x14>)
{
 8006188:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800618a:	4804      	ldr	r0, [pc, #16]	; (800619c <USBD_FS_ProductStrDescriptor+0x18>)
 800618c:	0021      	movs	r1, r4
 800618e:	f7ff fedb 	bl	8005f48 <USBD_GetString>
}
 8006192:	0020      	movs	r0, r4
 8006194:	bd10      	pop	{r4, pc}
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	20000dc4 	.word	0x20000dc4
 800619c:	08007345 	.word	0x08007345

080061a0 <USBD_FS_ConfigStrDescriptor>:
{
 80061a0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80061a2:	4c04      	ldr	r4, [pc, #16]	; (80061b4 <USBD_FS_ConfigStrDescriptor+0x14>)
{
 80061a4:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80061a6:	4804      	ldr	r0, [pc, #16]	; (80061b8 <USBD_FS_ConfigStrDescriptor+0x18>)
 80061a8:	0021      	movs	r1, r4
 80061aa:	f7ff fecd 	bl	8005f48 <USBD_GetString>
}
 80061ae:	0020      	movs	r0, r4
 80061b0:	bd10      	pop	{r4, pc}
 80061b2:	46c0      	nop			; (mov r8, r8)
 80061b4:	20000dc4 	.word	0x20000dc4
 80061b8:	0800735b 	.word	0x0800735b

080061bc <USBD_FS_InterfaceStrDescriptor>:
{
 80061bc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061be:	4c04      	ldr	r4, [pc, #16]	; (80061d0 <USBD_FS_InterfaceStrDescriptor+0x14>)
{
 80061c0:	000a      	movs	r2, r1
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80061c2:	4804      	ldr	r0, [pc, #16]	; (80061d4 <USBD_FS_InterfaceStrDescriptor+0x18>)
 80061c4:	0021      	movs	r1, r4
 80061c6:	f7ff febf 	bl	8005f48 <USBD_GetString>
}
 80061ca:	0020      	movs	r0, r4
 80061cc:	bd10      	pop	{r4, pc}
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	20000dc4 	.word	0x20000dc4
 80061d4:	08007366 	.word	0x08007366

080061d8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80061d8:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 80061da:	4b0b      	ldr	r3, [pc, #44]	; (8006208 <HAL_PCD_MspInit+0x30>)
 80061dc:	6802      	ldr	r2, [r0, #0]
 80061de:	429a      	cmp	r2, r3
 80061e0:	d111      	bne.n	8006206 <HAL_PCD_MspInit+0x2e>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 80061e2:	2080      	movs	r0, #128	; 0x80
 80061e4:	4a09      	ldr	r2, [pc, #36]	; (800620c <HAL_PCD_MspInit+0x34>)
 80061e6:	0400      	lsls	r0, r0, #16
 80061e8:	69d1      	ldr	r1, [r2, #28]
 80061ea:	4301      	orrs	r1, r0
 80061ec:	61d1      	str	r1, [r2, #28]
 80061ee:	69d3      	ldr	r3, [r2, #28]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80061f0:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 80061f2:	4003      	ands	r3, r0
 80061f4:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80061f6:	201f      	movs	r0, #31
 80061f8:	0011      	movs	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 80061fa:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 80061fc:	f7fc f81c 	bl	8002238 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8006200:	201f      	movs	r0, #31
 8006202:	f7fc f843 	bl	800228c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8006206:	bd07      	pop	{r0, r1, r2, pc}
 8006208:	40005c00 	.word	0x40005c00
 800620c:	40021000 	.word	0x40021000

08006210 <HAL_PCD_SetupStageCallback>:
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006210:	23ac      	movs	r3, #172	; 0xac
{
 8006212:	b510      	push	{r4, lr}
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006214:	009b      	lsls	r3, r3, #2
 8006216:	18c1      	adds	r1, r0, r3
 8006218:	3340      	adds	r3, #64	; 0x40
 800621a:	58c0      	ldr	r0, [r0, r3]
 800621c:	f7ff fb46 	bl	80058ac <USBD_LL_SetupStage>
}
 8006220:	bd10      	pop	{r4, pc}

08006222 <HAL_PCD_DataOutStageCallback>:
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006222:	2328      	movs	r3, #40	; 0x28
 8006224:	434b      	muls	r3, r1
 8006226:	18c3      	adds	r3, r0, r3
 8006228:	337d      	adds	r3, #125	; 0x7d
 800622a:	33ff      	adds	r3, #255	; 0xff
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	23bc      	movs	r3, #188	; 0xbc
{
 8006230:	b510      	push	{r4, lr}
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	58c0      	ldr	r0, [r0, r3]
 8006236:	f7ff fb6b 	bl	8005910 <USBD_LL_DataOutStage>
}
 800623a:	bd10      	pop	{r4, pc}

0800623c <HAL_PCD_DataInStageCallback>:
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800623c:	2328      	movs	r3, #40	; 0x28
 800623e:	434b      	muls	r3, r1
 8006240:	18c3      	adds	r3, r0, r3
 8006242:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006244:	23bc      	movs	r3, #188	; 0xbc
{
 8006246:	b510      	push	{r4, lr}
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006248:	009b      	lsls	r3, r3, #2
 800624a:	58c0      	ldr	r0, [r0, r3]
 800624c:	f7ff fba6 	bl	800599c <USBD_LL_DataInStage>
}
 8006250:	bd10      	pop	{r4, pc}

08006252 <HAL_PCD_SOFCallback>:
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006252:	23bc      	movs	r3, #188	; 0xbc
{
 8006254:	b510      	push	{r4, lr}
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006256:	009b      	lsls	r3, r3, #2
 8006258:	58c0      	ldr	r0, [r0, r3]
 800625a:	f7ff fc49 	bl	8005af0 <USBD_LL_SOF>
}
 800625e:	bd10      	pop	{r4, pc}

08006260 <HAL_PCD_ResetCallback>:
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006260:	6883      	ldr	r3, [r0, #8]
{
 8006262:	b570      	push	{r4, r5, r6, lr}
 8006264:	0004      	movs	r4, r0
  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006266:	2b02      	cmp	r3, #2
 8006268:	d001      	beq.n	800626e <HAL_PCD_ResetCallback+0xe>
  {
    Error_Handler();
 800626a:	f7fa fcb7 	bl	8000bdc <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 800626e:	25bc      	movs	r5, #188	; 0xbc
 8006270:	00ad      	lsls	r5, r5, #2
 8006272:	2101      	movs	r1, #1
 8006274:	5960      	ldr	r0, [r4, r5]
 8006276:	f7ff fc20 	bl	8005aba <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 800627a:	5960      	ldr	r0, [r4, r5]
 800627c:	f7ff fbf3 	bl	8005a66 <USBD_LL_Reset>
}
 8006280:	bd70      	pop	{r4, r5, r6, pc}
	...

08006284 <HAL_PCD_SuspendCallback>:
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006284:	23bc      	movs	r3, #188	; 0xbc
{
 8006286:	b510      	push	{r4, lr}
 8006288:	0004      	movs	r4, r0
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 800628a:	009b      	lsls	r3, r3, #2
 800628c:	58c0      	ldr	r0, [r0, r3]
 800628e:	f7ff fc17 	bl	8005ac0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006292:	69a3      	ldr	r3, [r4, #24]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d004      	beq.n	80062a2 <HAL_PCD_SuspendCallback+0x1e>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006298:	2306      	movs	r3, #6
 800629a:	4a02      	ldr	r2, [pc, #8]	; (80062a4 <HAL_PCD_SuspendCallback+0x20>)
 800629c:	6911      	ldr	r1, [r2, #16]
 800629e:	430b      	orrs	r3, r1
 80062a0:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80062a2:	bd10      	pop	{r4, pc}
 80062a4:	e000ed00 	.word	0xe000ed00

080062a8 <HAL_PCD_ResumeCallback>:
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80062a8:	6983      	ldr	r3, [r0, #24]
{
 80062aa:	b510      	push	{r4, lr}
 80062ac:	0004      	movs	r4, r0
  if (hpcd->Init.low_power_enable)
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d006      	beq.n	80062c0 <HAL_PCD_ResumeCallback+0x18>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80062b2:	2106      	movs	r1, #6
 80062b4:	4a05      	ldr	r2, [pc, #20]	; (80062cc <HAL_PCD_ResumeCallback+0x24>)
 80062b6:	6913      	ldr	r3, [r2, #16]
 80062b8:	438b      	bics	r3, r1
 80062ba:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 80062bc:	f7fa fe0c 	bl	8000ed8 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80062c0:	23bc      	movs	r3, #188	; 0xbc
 80062c2:	009b      	lsls	r3, r3, #2
 80062c4:	58e0      	ldr	r0, [r4, r3]
 80062c6:	f7ff fc07 	bl	8005ad8 <USBD_LL_Resume>
}
 80062ca:	bd10      	pop	{r4, pc}
 80062cc:	e000ed00 	.word	0xe000ed00

080062d0 <USBD_LL_Init>:
  hpcd_USB_FS.pData = pdev;
 80062d0:	23bc      	movs	r3, #188	; 0xbc
{
 80062d2:	b570      	push	{r4, r5, r6, lr}
 80062d4:	0004      	movs	r4, r0
  hpcd_USB_FS.pData = pdev;
 80062d6:	481c      	ldr	r0, [pc, #112]	; (8006348 <USBD_LL_Init+0x78>)
 80062d8:	009b      	lsls	r3, r3, #2
 80062da:	50c4      	str	r4, [r0, r3]
  hpcd_USB_FS.Instance = USB;
 80062dc:	4b1b      	ldr	r3, [pc, #108]	; (800634c <USBD_LL_Init+0x7c>)
  pdev->pData = &hpcd_USB_FS;
 80062de:	25b0      	movs	r5, #176	; 0xb0
  hpcd_USB_FS.Instance = USB;
 80062e0:	6003      	str	r3, [r0, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 80062e2:	2308      	movs	r3, #8
 80062e4:	6043      	str	r3, [r0, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 80062e6:	3b06      	subs	r3, #6
 80062e8:	6083      	str	r3, [r0, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80062ea:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80062ec:	2300      	movs	r3, #0
  pdev->pData = &hpcd_USB_FS;
 80062ee:	00ad      	lsls	r5, r5, #2
 80062f0:	5160      	str	r0, [r4, r5]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 80062f2:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 80062f4:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 80062f6:	6203      	str	r3, [r0, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 80062f8:	f7fc fae4 	bl	80028c4 <HAL_PCD_Init>
 80062fc:	2800      	cmp	r0, #0
 80062fe:	d001      	beq.n	8006304 <USBD_LL_Init+0x34>
    Error_Handler( );
 8006300:	f7fa fc6c 	bl	8000bdc <Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8006304:	2200      	movs	r2, #0
 8006306:	5960      	ldr	r0, [r4, r5]
 8006308:	0011      	movs	r1, r2
 800630a:	2318      	movs	r3, #24
 800630c:	f7fd f97b 	bl	8003606 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8006310:	5960      	ldr	r0, [r4, r5]
 8006312:	2358      	movs	r3, #88	; 0x58
 8006314:	2200      	movs	r2, #0
 8006316:	2180      	movs	r1, #128	; 0x80
 8006318:	f7fd f975 	bl	8003606 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 800631c:	5960      	ldr	r0, [r4, r5]
 800631e:	23c0      	movs	r3, #192	; 0xc0
 8006320:	2200      	movs	r2, #0
 8006322:	2181      	movs	r1, #129	; 0x81
 8006324:	f7fd f96f 	bl	8003606 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 8006328:	2388      	movs	r3, #136	; 0x88
 800632a:	5960      	ldr	r0, [r4, r5]
 800632c:	2200      	movs	r2, #0
 800632e:	2101      	movs	r1, #1
 8006330:	005b      	lsls	r3, r3, #1
 8006332:	f7fd f968 	bl	8003606 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 8006336:	2380      	movs	r3, #128	; 0x80
 8006338:	5960      	ldr	r0, [r4, r5]
 800633a:	2200      	movs	r2, #0
 800633c:	2182      	movs	r1, #130	; 0x82
 800633e:	005b      	lsls	r3, r3, #1
 8006340:	f7fd f961 	bl	8003606 <HAL_PCDEx_PMAConfig>
}
 8006344:	2000      	movs	r0, #0
 8006346:	bd70      	pop	{r4, r5, r6, pc}
 8006348:	20000fc4 	.word	0x20000fc4
 800634c:	40005c00 	.word	0x40005c00

08006350 <USBD_LL_Start>:
  hal_status = HAL_PCD_Start(pdev->pData);
 8006350:	23b0      	movs	r3, #176	; 0xb0
 8006352:	009b      	lsls	r3, r3, #2
 8006354:	58c0      	ldr	r0, [r0, r3]
{
 8006356:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8006358:	f7fc fb20 	bl	800299c <HAL_PCD_Start>
 800635c:	0003      	movs	r3, r0
 800635e:	2002      	movs	r0, #2
 8006360:	2b03      	cmp	r3, #3
 8006362:	d801      	bhi.n	8006368 <USBD_LL_Start+0x18>
 8006364:	4a01      	ldr	r2, [pc, #4]	; (800636c <USBD_LL_Start+0x1c>)
 8006366:	5cd0      	ldrb	r0, [r2, r3]
}
 8006368:	bd10      	pop	{r4, pc}
 800636a:	46c0      	nop			; (mov r8, r8)
 800636c:	08007374 	.word	0x08007374

08006370 <USBD_LL_OpenEP>:
{
 8006370:	b510      	push	{r4, lr}
 8006372:	0014      	movs	r4, r2
 8006374:	001a      	movs	r2, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006376:	0023      	movs	r3, r4
 8006378:	24b0      	movs	r4, #176	; 0xb0
 800637a:	00a4      	lsls	r4, r4, #2
 800637c:	5900      	ldr	r0, [r0, r4]
 800637e:	f7fd f849 	bl	8003414 <HAL_PCD_EP_Open>
 8006382:	0003      	movs	r3, r0
 8006384:	2002      	movs	r0, #2
 8006386:	2b03      	cmp	r3, #3
 8006388:	d801      	bhi.n	800638e <USBD_LL_OpenEP+0x1e>
 800638a:	4a01      	ldr	r2, [pc, #4]	; (8006390 <USBD_LL_OpenEP+0x20>)
 800638c:	5cd0      	ldrb	r0, [r2, r3]
}
 800638e:	bd10      	pop	{r4, pc}
 8006390:	08007374 	.word	0x08007374

08006394 <USBD_LL_CloseEP>:
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006394:	23b0      	movs	r3, #176	; 0xb0
 8006396:	009b      	lsls	r3, r3, #2
 8006398:	58c0      	ldr	r0, [r0, r3]
{
 800639a:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800639c:	f7fd f86b 	bl	8003476 <HAL_PCD_EP_Close>
 80063a0:	0003      	movs	r3, r0
 80063a2:	2002      	movs	r0, #2
 80063a4:	2b03      	cmp	r3, #3
 80063a6:	d801      	bhi.n	80063ac <USBD_LL_CloseEP+0x18>
 80063a8:	4a01      	ldr	r2, [pc, #4]	; (80063b0 <USBD_LL_CloseEP+0x1c>)
 80063aa:	5cd0      	ldrb	r0, [r2, r3]
}
 80063ac:	bd10      	pop	{r4, pc}
 80063ae:	46c0      	nop			; (mov r8, r8)
 80063b0:	08007374 	.word	0x08007374

080063b4 <USBD_LL_StallEP>:
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80063b4:	23b0      	movs	r3, #176	; 0xb0
 80063b6:	009b      	lsls	r3, r3, #2
 80063b8:	58c0      	ldr	r0, [r0, r3]
{
 80063ba:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80063bc:	f7fd f8c9 	bl	8003552 <HAL_PCD_EP_SetStall>
 80063c0:	0003      	movs	r3, r0
 80063c2:	2002      	movs	r0, #2
 80063c4:	2b03      	cmp	r3, #3
 80063c6:	d801      	bhi.n	80063cc <USBD_LL_StallEP+0x18>
 80063c8:	4a01      	ldr	r2, [pc, #4]	; (80063d0 <USBD_LL_StallEP+0x1c>)
 80063ca:	5cd0      	ldrb	r0, [r2, r3]
}
 80063cc:	bd10      	pop	{r4, pc}
 80063ce:	46c0      	nop			; (mov r8, r8)
 80063d0:	08007374 	.word	0x08007374

080063d4 <USBD_LL_ClearStallEP>:
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80063d4:	23b0      	movs	r3, #176	; 0xb0
 80063d6:	009b      	lsls	r3, r3, #2
 80063d8:	58c0      	ldr	r0, [r0, r3]
{
 80063da:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80063dc:	f7fd f8e4 	bl	80035a8 <HAL_PCD_EP_ClrStall>
 80063e0:	0003      	movs	r3, r0
 80063e2:	2002      	movs	r0, #2
 80063e4:	2b03      	cmp	r3, #3
 80063e6:	d801      	bhi.n	80063ec <USBD_LL_ClearStallEP+0x18>
 80063e8:	4a01      	ldr	r2, [pc, #4]	; (80063f0 <USBD_LL_ClearStallEP+0x1c>)
 80063ea:	5cd0      	ldrb	r0, [r2, r3]
}
 80063ec:	bd10      	pop	{r4, pc}
 80063ee:	46c0      	nop			; (mov r8, r8)
 80063f0:	08007374 	.word	0x08007374

080063f4 <USBD_LL_IsStallEP>:
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80063f4:	23b0      	movs	r3, #176	; 0xb0
  if((ep_addr & 0x80) == 0x80)
 80063f6:	b24a      	sxtb	r2, r1
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	58c3      	ldr	r3, [r0, r3]
  if((ep_addr & 0x80) == 0x80)
 80063fc:	2a00      	cmp	r2, #0
 80063fe:	da07      	bge.n	8006410 <USBD_LL_IsStallEP+0x1c>
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006400:	227f      	movs	r2, #127	; 0x7f
 8006402:	4011      	ands	r1, r2
 8006404:	3101      	adds	r1, #1
 8006406:	3a57      	subs	r2, #87	; 0x57
 8006408:	4351      	muls	r1, r2
 800640a:	185b      	adds	r3, r3, r1
 800640c:	7898      	ldrb	r0, [r3, #2]
}
 800640e:	4770      	bx	lr
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006410:	2228      	movs	r2, #40	; 0x28
 8006412:	4351      	muls	r1, r2
 8006414:	185b      	adds	r3, r3, r1
 8006416:	336b      	adds	r3, #107	; 0x6b
 8006418:	33ff      	adds	r3, #255	; 0xff
 800641a:	7818      	ldrb	r0, [r3, #0]
 800641c:	e7f7      	b.n	800640e <USBD_LL_IsStallEP+0x1a>
	...

08006420 <USBD_LL_SetUSBAddress>:
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006420:	23b0      	movs	r3, #176	; 0xb0
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	58c0      	ldr	r0, [r0, r3]
{
 8006426:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006428:	f7fc facb 	bl	80029c2 <HAL_PCD_SetAddress>
 800642c:	0003      	movs	r3, r0
 800642e:	2002      	movs	r0, #2
 8006430:	2b03      	cmp	r3, #3
 8006432:	d801      	bhi.n	8006438 <USBD_LL_SetUSBAddress+0x18>
 8006434:	4a01      	ldr	r2, [pc, #4]	; (800643c <USBD_LL_SetUSBAddress+0x1c>)
 8006436:	5cd0      	ldrb	r0, [r2, r3]
}
 8006438:	bd10      	pop	{r4, pc}
 800643a:	46c0      	nop			; (mov r8, r8)
 800643c:	08007374 	.word	0x08007374

08006440 <USBD_LL_Transmit>:
{
 8006440:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006442:	24b0      	movs	r4, #176	; 0xb0
 8006444:	00a4      	lsls	r4, r4, #2
 8006446:	5900      	ldr	r0, [r0, r4]
 8006448:	f7fd f866 	bl	8003518 <HAL_PCD_EP_Transmit>
 800644c:	0003      	movs	r3, r0
 800644e:	2002      	movs	r0, #2
 8006450:	2b03      	cmp	r3, #3
 8006452:	d801      	bhi.n	8006458 <USBD_LL_Transmit+0x18>
 8006454:	4a01      	ldr	r2, [pc, #4]	; (800645c <USBD_LL_Transmit+0x1c>)
 8006456:	5cd0      	ldrb	r0, [r2, r3]
}
 8006458:	bd10      	pop	{r4, pc}
 800645a:	46c0      	nop			; (mov r8, r8)
 800645c:	08007374 	.word	0x08007374

08006460 <USBD_LL_PrepareReceive>:
{
 8006460:	b510      	push	{r4, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006462:	24b0      	movs	r4, #176	; 0xb0
 8006464:	00a4      	lsls	r4, r4, #2
 8006466:	5900      	ldr	r0, [r0, r4]
 8006468:	f7fd f82c 	bl	80034c4 <HAL_PCD_EP_Receive>
 800646c:	0003      	movs	r3, r0
 800646e:	2002      	movs	r0, #2
 8006470:	2b03      	cmp	r3, #3
 8006472:	d801      	bhi.n	8006478 <USBD_LL_PrepareReceive+0x18>
 8006474:	4a01      	ldr	r2, [pc, #4]	; (800647c <USBD_LL_PrepareReceive+0x1c>)
 8006476:	5cd0      	ldrb	r0, [r2, r3]
}
 8006478:	bd10      	pop	{r4, pc}
 800647a:	46c0      	nop			; (mov r8, r8)
 800647c:	08007374 	.word	0x08007374

08006480 <USBD_LL_GetRxDataSize>:
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006480:	23b0      	movs	r3, #176	; 0xb0
{
 8006482:	b510      	push	{r4, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8006484:	009b      	lsls	r3, r3, #2
 8006486:	58c0      	ldr	r0, [r0, r3]
 8006488:	f7fd f83d 	bl	8003506 <HAL_PCD_EP_GetRxCount>
}
 800648c:	bd10      	pop	{r4, pc}
	...

08006490 <USBD_static_malloc>:
}
 8006490:	4800      	ldr	r0, [pc, #0]	; (8006494 <USBD_static_malloc+0x4>)
 8006492:	4770      	bx	lr
 8006494:	2000024c 	.word	0x2000024c

08006498 <USBD_static_free>:
}
 8006498:	4770      	bx	lr

0800649a <atoi>:
 800649a:	b510      	push	{r4, lr}
 800649c:	220a      	movs	r2, #10
 800649e:	2100      	movs	r1, #0
 80064a0:	f000 f8f4 	bl	800668c <strtol>
 80064a4:	bd10      	pop	{r4, pc}
	...

080064a8 <__errno>:
 80064a8:	4b01      	ldr	r3, [pc, #4]	; (80064b0 <__errno+0x8>)
 80064aa:	6818      	ldr	r0, [r3, #0]
 80064ac:	4770      	bx	lr
 80064ae:	46c0      	nop			; (mov r8, r8)
 80064b0:	200001c0 	.word	0x200001c0

080064b4 <__libc_init_array>:
 80064b4:	b570      	push	{r4, r5, r6, lr}
 80064b6:	2600      	movs	r6, #0
 80064b8:	4d0c      	ldr	r5, [pc, #48]	; (80064ec <__libc_init_array+0x38>)
 80064ba:	4c0d      	ldr	r4, [pc, #52]	; (80064f0 <__libc_init_array+0x3c>)
 80064bc:	1b64      	subs	r4, r4, r5
 80064be:	10a4      	asrs	r4, r4, #2
 80064c0:	42a6      	cmp	r6, r4
 80064c2:	d109      	bne.n	80064d8 <__libc_init_array+0x24>
 80064c4:	2600      	movs	r6, #0
 80064c6:	f000 fce9 	bl	8006e9c <_init>
 80064ca:	4d0a      	ldr	r5, [pc, #40]	; (80064f4 <__libc_init_array+0x40>)
 80064cc:	4c0a      	ldr	r4, [pc, #40]	; (80064f8 <__libc_init_array+0x44>)
 80064ce:	1b64      	subs	r4, r4, r5
 80064d0:	10a4      	asrs	r4, r4, #2
 80064d2:	42a6      	cmp	r6, r4
 80064d4:	d105      	bne.n	80064e2 <__libc_init_array+0x2e>
 80064d6:	bd70      	pop	{r4, r5, r6, pc}
 80064d8:	00b3      	lsls	r3, r6, #2
 80064da:	58eb      	ldr	r3, [r5, r3]
 80064dc:	4798      	blx	r3
 80064de:	3601      	adds	r6, #1
 80064e0:	e7ee      	b.n	80064c0 <__libc_init_array+0xc>
 80064e2:	00b3      	lsls	r3, r6, #2
 80064e4:	58eb      	ldr	r3, [r5, r3]
 80064e6:	4798      	blx	r3
 80064e8:	3601      	adds	r6, #1
 80064ea:	e7f2      	b.n	80064d2 <__libc_init_array+0x1e>
 80064ec:	080074ac 	.word	0x080074ac
 80064f0:	080074ac 	.word	0x080074ac
 80064f4:	080074ac 	.word	0x080074ac
 80064f8:	080074b0 	.word	0x080074b0

080064fc <memcpy>:
 80064fc:	2300      	movs	r3, #0
 80064fe:	b510      	push	{r4, lr}
 8006500:	429a      	cmp	r2, r3
 8006502:	d100      	bne.n	8006506 <memcpy+0xa>
 8006504:	bd10      	pop	{r4, pc}
 8006506:	5ccc      	ldrb	r4, [r1, r3]
 8006508:	54c4      	strb	r4, [r0, r3]
 800650a:	3301      	adds	r3, #1
 800650c:	e7f8      	b.n	8006500 <memcpy+0x4>

0800650e <memset>:
 800650e:	0003      	movs	r3, r0
 8006510:	1882      	adds	r2, r0, r2
 8006512:	4293      	cmp	r3, r2
 8006514:	d100      	bne.n	8006518 <memset+0xa>
 8006516:	4770      	bx	lr
 8006518:	7019      	strb	r1, [r3, #0]
 800651a:	3301      	adds	r3, #1
 800651c:	e7f9      	b.n	8006512 <memset+0x4>
	...

08006520 <siprintf>:
 8006520:	b40e      	push	{r1, r2, r3}
 8006522:	b500      	push	{lr}
 8006524:	490b      	ldr	r1, [pc, #44]	; (8006554 <siprintf+0x34>)
 8006526:	b09c      	sub	sp, #112	; 0x70
 8006528:	ab1d      	add	r3, sp, #116	; 0x74
 800652a:	9002      	str	r0, [sp, #8]
 800652c:	9006      	str	r0, [sp, #24]
 800652e:	9107      	str	r1, [sp, #28]
 8006530:	9104      	str	r1, [sp, #16]
 8006532:	4809      	ldr	r0, [pc, #36]	; (8006558 <siprintf+0x38>)
 8006534:	4909      	ldr	r1, [pc, #36]	; (800655c <siprintf+0x3c>)
 8006536:	cb04      	ldmia	r3!, {r2}
 8006538:	9105      	str	r1, [sp, #20]
 800653a:	6800      	ldr	r0, [r0, #0]
 800653c:	a902      	add	r1, sp, #8
 800653e:	9301      	str	r3, [sp, #4]
 8006540:	f000 f912 	bl	8006768 <_svfiprintf_r>
 8006544:	2300      	movs	r3, #0
 8006546:	9a02      	ldr	r2, [sp, #8]
 8006548:	7013      	strb	r3, [r2, #0]
 800654a:	b01c      	add	sp, #112	; 0x70
 800654c:	bc08      	pop	{r3}
 800654e:	b003      	add	sp, #12
 8006550:	4718      	bx	r3
 8006552:	46c0      	nop			; (mov r8, r8)
 8006554:	7fffffff 	.word	0x7fffffff
 8006558:	200001c0 	.word	0x200001c0
 800655c:	ffff0208 	.word	0xffff0208

08006560 <strcpy>:
 8006560:	0003      	movs	r3, r0
 8006562:	780a      	ldrb	r2, [r1, #0]
 8006564:	3101      	adds	r1, #1
 8006566:	701a      	strb	r2, [r3, #0]
 8006568:	3301      	adds	r3, #1
 800656a:	2a00      	cmp	r2, #0
 800656c:	d1f9      	bne.n	8006562 <strcpy+0x2>
 800656e:	4770      	bx	lr

08006570 <_strtol_l.isra.0>:
 8006570:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006572:	b087      	sub	sp, #28
 8006574:	001e      	movs	r6, r3
 8006576:	9005      	str	r0, [sp, #20]
 8006578:	9101      	str	r1, [sp, #4]
 800657a:	9202      	str	r2, [sp, #8]
 800657c:	2b01      	cmp	r3, #1
 800657e:	d045      	beq.n	800660c <_strtol_l.isra.0+0x9c>
 8006580:	0008      	movs	r0, r1
 8006582:	2b24      	cmp	r3, #36	; 0x24
 8006584:	d842      	bhi.n	800660c <_strtol_l.isra.0+0x9c>
 8006586:	4b3f      	ldr	r3, [pc, #252]	; (8006684 <_strtol_l.isra.0+0x114>)
 8006588:	2208      	movs	r2, #8
 800658a:	469c      	mov	ip, r3
 800658c:	0003      	movs	r3, r0
 800658e:	4661      	mov	r1, ip
 8006590:	781c      	ldrb	r4, [r3, #0]
 8006592:	1c45      	adds	r5, r0, #1
 8006594:	5d09      	ldrb	r1, [r1, r4]
 8006596:	0028      	movs	r0, r5
 8006598:	000f      	movs	r7, r1
 800659a:	4017      	ands	r7, r2
 800659c:	4211      	tst	r1, r2
 800659e:	d1f5      	bne.n	800658c <_strtol_l.isra.0+0x1c>
 80065a0:	2c2d      	cmp	r4, #45	; 0x2d
 80065a2:	d13a      	bne.n	800661a <_strtol_l.isra.0+0xaa>
 80065a4:	2701      	movs	r7, #1
 80065a6:	782c      	ldrb	r4, [r5, #0]
 80065a8:	1c9d      	adds	r5, r3, #2
 80065aa:	2e00      	cmp	r6, #0
 80065ac:	d065      	beq.n	800667a <_strtol_l.isra.0+0x10a>
 80065ae:	2e10      	cmp	r6, #16
 80065b0:	d109      	bne.n	80065c6 <_strtol_l.isra.0+0x56>
 80065b2:	2c30      	cmp	r4, #48	; 0x30
 80065b4:	d107      	bne.n	80065c6 <_strtol_l.isra.0+0x56>
 80065b6:	2220      	movs	r2, #32
 80065b8:	782b      	ldrb	r3, [r5, #0]
 80065ba:	4393      	bics	r3, r2
 80065bc:	2b58      	cmp	r3, #88	; 0x58
 80065be:	d157      	bne.n	8006670 <_strtol_l.isra.0+0x100>
 80065c0:	2610      	movs	r6, #16
 80065c2:	786c      	ldrb	r4, [r5, #1]
 80065c4:	3502      	adds	r5, #2
 80065c6:	4b30      	ldr	r3, [pc, #192]	; (8006688 <_strtol_l.isra.0+0x118>)
 80065c8:	0031      	movs	r1, r6
 80065ca:	18fb      	adds	r3, r7, r3
 80065cc:	0018      	movs	r0, r3
 80065ce:	9303      	str	r3, [sp, #12]
 80065d0:	f7f9 fe50 	bl	8000274 <__aeabi_uidivmod>
 80065d4:	2300      	movs	r3, #0
 80065d6:	2201      	movs	r2, #1
 80065d8:	4684      	mov	ip, r0
 80065da:	0018      	movs	r0, r3
 80065dc:	9104      	str	r1, [sp, #16]
 80065de:	4252      	negs	r2, r2
 80065e0:	0021      	movs	r1, r4
 80065e2:	3930      	subs	r1, #48	; 0x30
 80065e4:	2909      	cmp	r1, #9
 80065e6:	d81d      	bhi.n	8006624 <_strtol_l.isra.0+0xb4>
 80065e8:	000c      	movs	r4, r1
 80065ea:	42a6      	cmp	r6, r4
 80065ec:	dd28      	ble.n	8006640 <_strtol_l.isra.0+0xd0>
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	db24      	blt.n	800663c <_strtol_l.isra.0+0xcc>
 80065f2:	0013      	movs	r3, r2
 80065f4:	4584      	cmp	ip, r0
 80065f6:	d306      	bcc.n	8006606 <_strtol_l.isra.0+0x96>
 80065f8:	d102      	bne.n	8006600 <_strtol_l.isra.0+0x90>
 80065fa:	9904      	ldr	r1, [sp, #16]
 80065fc:	42a1      	cmp	r1, r4
 80065fe:	db02      	blt.n	8006606 <_strtol_l.isra.0+0x96>
 8006600:	2301      	movs	r3, #1
 8006602:	4370      	muls	r0, r6
 8006604:	1820      	adds	r0, r4, r0
 8006606:	782c      	ldrb	r4, [r5, #0]
 8006608:	3501      	adds	r5, #1
 800660a:	e7e9      	b.n	80065e0 <_strtol_l.isra.0+0x70>
 800660c:	f7ff ff4c 	bl	80064a8 <__errno>
 8006610:	2316      	movs	r3, #22
 8006612:	6003      	str	r3, [r0, #0]
 8006614:	2000      	movs	r0, #0
 8006616:	b007      	add	sp, #28
 8006618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800661a:	2c2b      	cmp	r4, #43	; 0x2b
 800661c:	d1c5      	bne.n	80065aa <_strtol_l.isra.0+0x3a>
 800661e:	782c      	ldrb	r4, [r5, #0]
 8006620:	1c9d      	adds	r5, r3, #2
 8006622:	e7c2      	b.n	80065aa <_strtol_l.isra.0+0x3a>
 8006624:	0021      	movs	r1, r4
 8006626:	3941      	subs	r1, #65	; 0x41
 8006628:	2919      	cmp	r1, #25
 800662a:	d801      	bhi.n	8006630 <_strtol_l.isra.0+0xc0>
 800662c:	3c37      	subs	r4, #55	; 0x37
 800662e:	e7dc      	b.n	80065ea <_strtol_l.isra.0+0x7a>
 8006630:	0021      	movs	r1, r4
 8006632:	3961      	subs	r1, #97	; 0x61
 8006634:	2919      	cmp	r1, #25
 8006636:	d803      	bhi.n	8006640 <_strtol_l.isra.0+0xd0>
 8006638:	3c57      	subs	r4, #87	; 0x57
 800663a:	e7d6      	b.n	80065ea <_strtol_l.isra.0+0x7a>
 800663c:	0013      	movs	r3, r2
 800663e:	e7e2      	b.n	8006606 <_strtol_l.isra.0+0x96>
 8006640:	2b00      	cmp	r3, #0
 8006642:	da09      	bge.n	8006658 <_strtol_l.isra.0+0xe8>
 8006644:	2322      	movs	r3, #34	; 0x22
 8006646:	9a05      	ldr	r2, [sp, #20]
 8006648:	9803      	ldr	r0, [sp, #12]
 800664a:	6013      	str	r3, [r2, #0]
 800664c:	9b02      	ldr	r3, [sp, #8]
 800664e:	2b00      	cmp	r3, #0
 8006650:	d0e1      	beq.n	8006616 <_strtol_l.isra.0+0xa6>
 8006652:	1e6b      	subs	r3, r5, #1
 8006654:	9301      	str	r3, [sp, #4]
 8006656:	e007      	b.n	8006668 <_strtol_l.isra.0+0xf8>
 8006658:	2f00      	cmp	r7, #0
 800665a:	d000      	beq.n	800665e <_strtol_l.isra.0+0xee>
 800665c:	4240      	negs	r0, r0
 800665e:	9a02      	ldr	r2, [sp, #8]
 8006660:	2a00      	cmp	r2, #0
 8006662:	d0d8      	beq.n	8006616 <_strtol_l.isra.0+0xa6>
 8006664:	2b00      	cmp	r3, #0
 8006666:	d1f4      	bne.n	8006652 <_strtol_l.isra.0+0xe2>
 8006668:	9b02      	ldr	r3, [sp, #8]
 800666a:	9a01      	ldr	r2, [sp, #4]
 800666c:	601a      	str	r2, [r3, #0]
 800666e:	e7d2      	b.n	8006616 <_strtol_l.isra.0+0xa6>
 8006670:	2430      	movs	r4, #48	; 0x30
 8006672:	2e00      	cmp	r6, #0
 8006674:	d1a7      	bne.n	80065c6 <_strtol_l.isra.0+0x56>
 8006676:	3608      	adds	r6, #8
 8006678:	e7a5      	b.n	80065c6 <_strtol_l.isra.0+0x56>
 800667a:	2c30      	cmp	r4, #48	; 0x30
 800667c:	d09b      	beq.n	80065b6 <_strtol_l.isra.0+0x46>
 800667e:	260a      	movs	r6, #10
 8006680:	e7a1      	b.n	80065c6 <_strtol_l.isra.0+0x56>
 8006682:	46c0      	nop			; (mov r8, r8)
 8006684:	08007379 	.word	0x08007379
 8006688:	7fffffff 	.word	0x7fffffff

0800668c <strtol>:
 800668c:	b510      	push	{r4, lr}
 800668e:	0013      	movs	r3, r2
 8006690:	000a      	movs	r2, r1
 8006692:	0001      	movs	r1, r0
 8006694:	4802      	ldr	r0, [pc, #8]	; (80066a0 <strtol+0x14>)
 8006696:	6800      	ldr	r0, [r0, #0]
 8006698:	f7ff ff6a 	bl	8006570 <_strtol_l.isra.0>
 800669c:	bd10      	pop	{r4, pc}
 800669e:	46c0      	nop			; (mov r8, r8)
 80066a0:	200001c0 	.word	0x200001c0

080066a4 <__ssputs_r>:
 80066a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80066a6:	688e      	ldr	r6, [r1, #8]
 80066a8:	b085      	sub	sp, #20
 80066aa:	0007      	movs	r7, r0
 80066ac:	000c      	movs	r4, r1
 80066ae:	9203      	str	r2, [sp, #12]
 80066b0:	9301      	str	r3, [sp, #4]
 80066b2:	429e      	cmp	r6, r3
 80066b4:	d83c      	bhi.n	8006730 <__ssputs_r+0x8c>
 80066b6:	2390      	movs	r3, #144	; 0x90
 80066b8:	898a      	ldrh	r2, [r1, #12]
 80066ba:	00db      	lsls	r3, r3, #3
 80066bc:	421a      	tst	r2, r3
 80066be:	d034      	beq.n	800672a <__ssputs_r+0x86>
 80066c0:	2503      	movs	r5, #3
 80066c2:	6909      	ldr	r1, [r1, #16]
 80066c4:	6823      	ldr	r3, [r4, #0]
 80066c6:	1a5b      	subs	r3, r3, r1
 80066c8:	9302      	str	r3, [sp, #8]
 80066ca:	6963      	ldr	r3, [r4, #20]
 80066cc:	9802      	ldr	r0, [sp, #8]
 80066ce:	435d      	muls	r5, r3
 80066d0:	0feb      	lsrs	r3, r5, #31
 80066d2:	195d      	adds	r5, r3, r5
 80066d4:	9b01      	ldr	r3, [sp, #4]
 80066d6:	106d      	asrs	r5, r5, #1
 80066d8:	3301      	adds	r3, #1
 80066da:	181b      	adds	r3, r3, r0
 80066dc:	42ab      	cmp	r3, r5
 80066de:	d900      	bls.n	80066e2 <__ssputs_r+0x3e>
 80066e0:	001d      	movs	r5, r3
 80066e2:	0553      	lsls	r3, r2, #21
 80066e4:	d532      	bpl.n	800674c <__ssputs_r+0xa8>
 80066e6:	0029      	movs	r1, r5
 80066e8:	0038      	movs	r0, r7
 80066ea:	f000 fb27 	bl	8006d3c <_malloc_r>
 80066ee:	1e06      	subs	r6, r0, #0
 80066f0:	d109      	bne.n	8006706 <__ssputs_r+0x62>
 80066f2:	230c      	movs	r3, #12
 80066f4:	603b      	str	r3, [r7, #0]
 80066f6:	2340      	movs	r3, #64	; 0x40
 80066f8:	2001      	movs	r0, #1
 80066fa:	89a2      	ldrh	r2, [r4, #12]
 80066fc:	4240      	negs	r0, r0
 80066fe:	4313      	orrs	r3, r2
 8006700:	81a3      	strh	r3, [r4, #12]
 8006702:	b005      	add	sp, #20
 8006704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006706:	9a02      	ldr	r2, [sp, #8]
 8006708:	6921      	ldr	r1, [r4, #16]
 800670a:	f7ff fef7 	bl	80064fc <memcpy>
 800670e:	89a3      	ldrh	r3, [r4, #12]
 8006710:	4a14      	ldr	r2, [pc, #80]	; (8006764 <__ssputs_r+0xc0>)
 8006712:	401a      	ands	r2, r3
 8006714:	2380      	movs	r3, #128	; 0x80
 8006716:	4313      	orrs	r3, r2
 8006718:	81a3      	strh	r3, [r4, #12]
 800671a:	9b02      	ldr	r3, [sp, #8]
 800671c:	6126      	str	r6, [r4, #16]
 800671e:	18f6      	adds	r6, r6, r3
 8006720:	6026      	str	r6, [r4, #0]
 8006722:	6165      	str	r5, [r4, #20]
 8006724:	9e01      	ldr	r6, [sp, #4]
 8006726:	1aed      	subs	r5, r5, r3
 8006728:	60a5      	str	r5, [r4, #8]
 800672a:	9b01      	ldr	r3, [sp, #4]
 800672c:	429e      	cmp	r6, r3
 800672e:	d900      	bls.n	8006732 <__ssputs_r+0x8e>
 8006730:	9e01      	ldr	r6, [sp, #4]
 8006732:	0032      	movs	r2, r6
 8006734:	9903      	ldr	r1, [sp, #12]
 8006736:	6820      	ldr	r0, [r4, #0]
 8006738:	f000 faa3 	bl	8006c82 <memmove>
 800673c:	68a3      	ldr	r3, [r4, #8]
 800673e:	2000      	movs	r0, #0
 8006740:	1b9b      	subs	r3, r3, r6
 8006742:	60a3      	str	r3, [r4, #8]
 8006744:	6823      	ldr	r3, [r4, #0]
 8006746:	199e      	adds	r6, r3, r6
 8006748:	6026      	str	r6, [r4, #0]
 800674a:	e7da      	b.n	8006702 <__ssputs_r+0x5e>
 800674c:	002a      	movs	r2, r5
 800674e:	0038      	movs	r0, r7
 8006750:	f000 fb52 	bl	8006df8 <_realloc_r>
 8006754:	1e06      	subs	r6, r0, #0
 8006756:	d1e0      	bne.n	800671a <__ssputs_r+0x76>
 8006758:	0038      	movs	r0, r7
 800675a:	6921      	ldr	r1, [r4, #16]
 800675c:	f000 faa4 	bl	8006ca8 <_free_r>
 8006760:	e7c7      	b.n	80066f2 <__ssputs_r+0x4e>
 8006762:	46c0      	nop			; (mov r8, r8)
 8006764:	fffffb7f 	.word	0xfffffb7f

08006768 <_svfiprintf_r>:
 8006768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800676a:	b0a1      	sub	sp, #132	; 0x84
 800676c:	9003      	str	r0, [sp, #12]
 800676e:	001d      	movs	r5, r3
 8006770:	898b      	ldrh	r3, [r1, #12]
 8006772:	000f      	movs	r7, r1
 8006774:	0016      	movs	r6, r2
 8006776:	061b      	lsls	r3, r3, #24
 8006778:	d511      	bpl.n	800679e <_svfiprintf_r+0x36>
 800677a:	690b      	ldr	r3, [r1, #16]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d10e      	bne.n	800679e <_svfiprintf_r+0x36>
 8006780:	2140      	movs	r1, #64	; 0x40
 8006782:	f000 fadb 	bl	8006d3c <_malloc_r>
 8006786:	6038      	str	r0, [r7, #0]
 8006788:	6138      	str	r0, [r7, #16]
 800678a:	2800      	cmp	r0, #0
 800678c:	d105      	bne.n	800679a <_svfiprintf_r+0x32>
 800678e:	230c      	movs	r3, #12
 8006790:	9a03      	ldr	r2, [sp, #12]
 8006792:	3801      	subs	r0, #1
 8006794:	6013      	str	r3, [r2, #0]
 8006796:	b021      	add	sp, #132	; 0x84
 8006798:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800679a:	2340      	movs	r3, #64	; 0x40
 800679c:	617b      	str	r3, [r7, #20]
 800679e:	2300      	movs	r3, #0
 80067a0:	ac08      	add	r4, sp, #32
 80067a2:	6163      	str	r3, [r4, #20]
 80067a4:	3320      	adds	r3, #32
 80067a6:	7663      	strb	r3, [r4, #25]
 80067a8:	3310      	adds	r3, #16
 80067aa:	76a3      	strb	r3, [r4, #26]
 80067ac:	9507      	str	r5, [sp, #28]
 80067ae:	0035      	movs	r5, r6
 80067b0:	782b      	ldrb	r3, [r5, #0]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d001      	beq.n	80067ba <_svfiprintf_r+0x52>
 80067b6:	2b25      	cmp	r3, #37	; 0x25
 80067b8:	d147      	bne.n	800684a <_svfiprintf_r+0xe2>
 80067ba:	1bab      	subs	r3, r5, r6
 80067bc:	9305      	str	r3, [sp, #20]
 80067be:	42b5      	cmp	r5, r6
 80067c0:	d00c      	beq.n	80067dc <_svfiprintf_r+0x74>
 80067c2:	0032      	movs	r2, r6
 80067c4:	0039      	movs	r1, r7
 80067c6:	9803      	ldr	r0, [sp, #12]
 80067c8:	f7ff ff6c 	bl	80066a4 <__ssputs_r>
 80067cc:	1c43      	adds	r3, r0, #1
 80067ce:	d100      	bne.n	80067d2 <_svfiprintf_r+0x6a>
 80067d0:	e0ae      	b.n	8006930 <_svfiprintf_r+0x1c8>
 80067d2:	6962      	ldr	r2, [r4, #20]
 80067d4:	9b05      	ldr	r3, [sp, #20]
 80067d6:	4694      	mov	ip, r2
 80067d8:	4463      	add	r3, ip
 80067da:	6163      	str	r3, [r4, #20]
 80067dc:	782b      	ldrb	r3, [r5, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d100      	bne.n	80067e4 <_svfiprintf_r+0x7c>
 80067e2:	e0a5      	b.n	8006930 <_svfiprintf_r+0x1c8>
 80067e4:	2201      	movs	r2, #1
 80067e6:	2300      	movs	r3, #0
 80067e8:	4252      	negs	r2, r2
 80067ea:	6062      	str	r2, [r4, #4]
 80067ec:	a904      	add	r1, sp, #16
 80067ee:	3254      	adds	r2, #84	; 0x54
 80067f0:	1852      	adds	r2, r2, r1
 80067f2:	1c6e      	adds	r6, r5, #1
 80067f4:	6023      	str	r3, [r4, #0]
 80067f6:	60e3      	str	r3, [r4, #12]
 80067f8:	60a3      	str	r3, [r4, #8]
 80067fa:	7013      	strb	r3, [r2, #0]
 80067fc:	65a3      	str	r3, [r4, #88]	; 0x58
 80067fe:	2205      	movs	r2, #5
 8006800:	7831      	ldrb	r1, [r6, #0]
 8006802:	4854      	ldr	r0, [pc, #336]	; (8006954 <_svfiprintf_r+0x1ec>)
 8006804:	f000 fa32 	bl	8006c6c <memchr>
 8006808:	1c75      	adds	r5, r6, #1
 800680a:	2800      	cmp	r0, #0
 800680c:	d11f      	bne.n	800684e <_svfiprintf_r+0xe6>
 800680e:	6822      	ldr	r2, [r4, #0]
 8006810:	06d3      	lsls	r3, r2, #27
 8006812:	d504      	bpl.n	800681e <_svfiprintf_r+0xb6>
 8006814:	2353      	movs	r3, #83	; 0x53
 8006816:	a904      	add	r1, sp, #16
 8006818:	185b      	adds	r3, r3, r1
 800681a:	2120      	movs	r1, #32
 800681c:	7019      	strb	r1, [r3, #0]
 800681e:	0713      	lsls	r3, r2, #28
 8006820:	d504      	bpl.n	800682c <_svfiprintf_r+0xc4>
 8006822:	2353      	movs	r3, #83	; 0x53
 8006824:	a904      	add	r1, sp, #16
 8006826:	185b      	adds	r3, r3, r1
 8006828:	212b      	movs	r1, #43	; 0x2b
 800682a:	7019      	strb	r1, [r3, #0]
 800682c:	7833      	ldrb	r3, [r6, #0]
 800682e:	2b2a      	cmp	r3, #42	; 0x2a
 8006830:	d016      	beq.n	8006860 <_svfiprintf_r+0xf8>
 8006832:	0035      	movs	r5, r6
 8006834:	2100      	movs	r1, #0
 8006836:	200a      	movs	r0, #10
 8006838:	68e3      	ldr	r3, [r4, #12]
 800683a:	782a      	ldrb	r2, [r5, #0]
 800683c:	1c6e      	adds	r6, r5, #1
 800683e:	3a30      	subs	r2, #48	; 0x30
 8006840:	2a09      	cmp	r2, #9
 8006842:	d94e      	bls.n	80068e2 <_svfiprintf_r+0x17a>
 8006844:	2900      	cmp	r1, #0
 8006846:	d111      	bne.n	800686c <_svfiprintf_r+0x104>
 8006848:	e017      	b.n	800687a <_svfiprintf_r+0x112>
 800684a:	3501      	adds	r5, #1
 800684c:	e7b0      	b.n	80067b0 <_svfiprintf_r+0x48>
 800684e:	4b41      	ldr	r3, [pc, #260]	; (8006954 <_svfiprintf_r+0x1ec>)
 8006850:	6822      	ldr	r2, [r4, #0]
 8006852:	1ac0      	subs	r0, r0, r3
 8006854:	2301      	movs	r3, #1
 8006856:	4083      	lsls	r3, r0
 8006858:	4313      	orrs	r3, r2
 800685a:	002e      	movs	r6, r5
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	e7ce      	b.n	80067fe <_svfiprintf_r+0x96>
 8006860:	9b07      	ldr	r3, [sp, #28]
 8006862:	1d19      	adds	r1, r3, #4
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	9107      	str	r1, [sp, #28]
 8006868:	2b00      	cmp	r3, #0
 800686a:	db01      	blt.n	8006870 <_svfiprintf_r+0x108>
 800686c:	930b      	str	r3, [sp, #44]	; 0x2c
 800686e:	e004      	b.n	800687a <_svfiprintf_r+0x112>
 8006870:	425b      	negs	r3, r3
 8006872:	60e3      	str	r3, [r4, #12]
 8006874:	2302      	movs	r3, #2
 8006876:	4313      	orrs	r3, r2
 8006878:	6023      	str	r3, [r4, #0]
 800687a:	782b      	ldrb	r3, [r5, #0]
 800687c:	2b2e      	cmp	r3, #46	; 0x2e
 800687e:	d10a      	bne.n	8006896 <_svfiprintf_r+0x12e>
 8006880:	786b      	ldrb	r3, [r5, #1]
 8006882:	2b2a      	cmp	r3, #42	; 0x2a
 8006884:	d135      	bne.n	80068f2 <_svfiprintf_r+0x18a>
 8006886:	9b07      	ldr	r3, [sp, #28]
 8006888:	3502      	adds	r5, #2
 800688a:	1d1a      	adds	r2, r3, #4
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	9207      	str	r2, [sp, #28]
 8006890:	2b00      	cmp	r3, #0
 8006892:	db2b      	blt.n	80068ec <_svfiprintf_r+0x184>
 8006894:	9309      	str	r3, [sp, #36]	; 0x24
 8006896:	4e30      	ldr	r6, [pc, #192]	; (8006958 <_svfiprintf_r+0x1f0>)
 8006898:	2203      	movs	r2, #3
 800689a:	0030      	movs	r0, r6
 800689c:	7829      	ldrb	r1, [r5, #0]
 800689e:	f000 f9e5 	bl	8006c6c <memchr>
 80068a2:	2800      	cmp	r0, #0
 80068a4:	d006      	beq.n	80068b4 <_svfiprintf_r+0x14c>
 80068a6:	2340      	movs	r3, #64	; 0x40
 80068a8:	1b80      	subs	r0, r0, r6
 80068aa:	4083      	lsls	r3, r0
 80068ac:	6822      	ldr	r2, [r4, #0]
 80068ae:	3501      	adds	r5, #1
 80068b0:	4313      	orrs	r3, r2
 80068b2:	6023      	str	r3, [r4, #0]
 80068b4:	7829      	ldrb	r1, [r5, #0]
 80068b6:	2206      	movs	r2, #6
 80068b8:	4828      	ldr	r0, [pc, #160]	; (800695c <_svfiprintf_r+0x1f4>)
 80068ba:	1c6e      	adds	r6, r5, #1
 80068bc:	7621      	strb	r1, [r4, #24]
 80068be:	f000 f9d5 	bl	8006c6c <memchr>
 80068c2:	2800      	cmp	r0, #0
 80068c4:	d03c      	beq.n	8006940 <_svfiprintf_r+0x1d8>
 80068c6:	4b26      	ldr	r3, [pc, #152]	; (8006960 <_svfiprintf_r+0x1f8>)
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d125      	bne.n	8006918 <_svfiprintf_r+0x1b0>
 80068cc:	2207      	movs	r2, #7
 80068ce:	9b07      	ldr	r3, [sp, #28]
 80068d0:	3307      	adds	r3, #7
 80068d2:	4393      	bics	r3, r2
 80068d4:	3308      	adds	r3, #8
 80068d6:	9307      	str	r3, [sp, #28]
 80068d8:	6963      	ldr	r3, [r4, #20]
 80068da:	9a04      	ldr	r2, [sp, #16]
 80068dc:	189b      	adds	r3, r3, r2
 80068de:	6163      	str	r3, [r4, #20]
 80068e0:	e765      	b.n	80067ae <_svfiprintf_r+0x46>
 80068e2:	4343      	muls	r3, r0
 80068e4:	0035      	movs	r5, r6
 80068e6:	2101      	movs	r1, #1
 80068e8:	189b      	adds	r3, r3, r2
 80068ea:	e7a6      	b.n	800683a <_svfiprintf_r+0xd2>
 80068ec:	2301      	movs	r3, #1
 80068ee:	425b      	negs	r3, r3
 80068f0:	e7d0      	b.n	8006894 <_svfiprintf_r+0x12c>
 80068f2:	2300      	movs	r3, #0
 80068f4:	200a      	movs	r0, #10
 80068f6:	001a      	movs	r2, r3
 80068f8:	3501      	adds	r5, #1
 80068fa:	6063      	str	r3, [r4, #4]
 80068fc:	7829      	ldrb	r1, [r5, #0]
 80068fe:	1c6e      	adds	r6, r5, #1
 8006900:	3930      	subs	r1, #48	; 0x30
 8006902:	2909      	cmp	r1, #9
 8006904:	d903      	bls.n	800690e <_svfiprintf_r+0x1a6>
 8006906:	2b00      	cmp	r3, #0
 8006908:	d0c5      	beq.n	8006896 <_svfiprintf_r+0x12e>
 800690a:	9209      	str	r2, [sp, #36]	; 0x24
 800690c:	e7c3      	b.n	8006896 <_svfiprintf_r+0x12e>
 800690e:	4342      	muls	r2, r0
 8006910:	0035      	movs	r5, r6
 8006912:	2301      	movs	r3, #1
 8006914:	1852      	adds	r2, r2, r1
 8006916:	e7f1      	b.n	80068fc <_svfiprintf_r+0x194>
 8006918:	ab07      	add	r3, sp, #28
 800691a:	9300      	str	r3, [sp, #0]
 800691c:	003a      	movs	r2, r7
 800691e:	0021      	movs	r1, r4
 8006920:	4b10      	ldr	r3, [pc, #64]	; (8006964 <_svfiprintf_r+0x1fc>)
 8006922:	9803      	ldr	r0, [sp, #12]
 8006924:	e000      	b.n	8006928 <_svfiprintf_r+0x1c0>
 8006926:	bf00      	nop
 8006928:	9004      	str	r0, [sp, #16]
 800692a:	9b04      	ldr	r3, [sp, #16]
 800692c:	3301      	adds	r3, #1
 800692e:	d1d3      	bne.n	80068d8 <_svfiprintf_r+0x170>
 8006930:	89bb      	ldrh	r3, [r7, #12]
 8006932:	980d      	ldr	r0, [sp, #52]	; 0x34
 8006934:	065b      	lsls	r3, r3, #25
 8006936:	d400      	bmi.n	800693a <_svfiprintf_r+0x1d2>
 8006938:	e72d      	b.n	8006796 <_svfiprintf_r+0x2e>
 800693a:	2001      	movs	r0, #1
 800693c:	4240      	negs	r0, r0
 800693e:	e72a      	b.n	8006796 <_svfiprintf_r+0x2e>
 8006940:	ab07      	add	r3, sp, #28
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	003a      	movs	r2, r7
 8006946:	0021      	movs	r1, r4
 8006948:	4b06      	ldr	r3, [pc, #24]	; (8006964 <_svfiprintf_r+0x1fc>)
 800694a:	9803      	ldr	r0, [sp, #12]
 800694c:	f000 f87c 	bl	8006a48 <_printf_i>
 8006950:	e7ea      	b.n	8006928 <_svfiprintf_r+0x1c0>
 8006952:	46c0      	nop			; (mov r8, r8)
 8006954:	08007479 	.word	0x08007479
 8006958:	0800747f 	.word	0x0800747f
 800695c:	08007483 	.word	0x08007483
 8006960:	00000000 	.word	0x00000000
 8006964:	080066a5 	.word	0x080066a5

08006968 <_printf_common>:
 8006968:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800696a:	0015      	movs	r5, r2
 800696c:	9301      	str	r3, [sp, #4]
 800696e:	688a      	ldr	r2, [r1, #8]
 8006970:	690b      	ldr	r3, [r1, #16]
 8006972:	000c      	movs	r4, r1
 8006974:	9000      	str	r0, [sp, #0]
 8006976:	4293      	cmp	r3, r2
 8006978:	da00      	bge.n	800697c <_printf_common+0x14>
 800697a:	0013      	movs	r3, r2
 800697c:	0022      	movs	r2, r4
 800697e:	602b      	str	r3, [r5, #0]
 8006980:	3243      	adds	r2, #67	; 0x43
 8006982:	7812      	ldrb	r2, [r2, #0]
 8006984:	2a00      	cmp	r2, #0
 8006986:	d001      	beq.n	800698c <_printf_common+0x24>
 8006988:	3301      	adds	r3, #1
 800698a:	602b      	str	r3, [r5, #0]
 800698c:	6823      	ldr	r3, [r4, #0]
 800698e:	069b      	lsls	r3, r3, #26
 8006990:	d502      	bpl.n	8006998 <_printf_common+0x30>
 8006992:	682b      	ldr	r3, [r5, #0]
 8006994:	3302      	adds	r3, #2
 8006996:	602b      	str	r3, [r5, #0]
 8006998:	6822      	ldr	r2, [r4, #0]
 800699a:	2306      	movs	r3, #6
 800699c:	0017      	movs	r7, r2
 800699e:	401f      	ands	r7, r3
 80069a0:	421a      	tst	r2, r3
 80069a2:	d027      	beq.n	80069f4 <_printf_common+0x8c>
 80069a4:	0023      	movs	r3, r4
 80069a6:	3343      	adds	r3, #67	; 0x43
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	1e5a      	subs	r2, r3, #1
 80069ac:	4193      	sbcs	r3, r2
 80069ae:	6822      	ldr	r2, [r4, #0]
 80069b0:	0692      	lsls	r2, r2, #26
 80069b2:	d430      	bmi.n	8006a16 <_printf_common+0xae>
 80069b4:	0022      	movs	r2, r4
 80069b6:	9901      	ldr	r1, [sp, #4]
 80069b8:	9800      	ldr	r0, [sp, #0]
 80069ba:	9e08      	ldr	r6, [sp, #32]
 80069bc:	3243      	adds	r2, #67	; 0x43
 80069be:	47b0      	blx	r6
 80069c0:	1c43      	adds	r3, r0, #1
 80069c2:	d025      	beq.n	8006a10 <_printf_common+0xa8>
 80069c4:	2306      	movs	r3, #6
 80069c6:	6820      	ldr	r0, [r4, #0]
 80069c8:	682a      	ldr	r2, [r5, #0]
 80069ca:	68e1      	ldr	r1, [r4, #12]
 80069cc:	2500      	movs	r5, #0
 80069ce:	4003      	ands	r3, r0
 80069d0:	2b04      	cmp	r3, #4
 80069d2:	d103      	bne.n	80069dc <_printf_common+0x74>
 80069d4:	1a8d      	subs	r5, r1, r2
 80069d6:	43eb      	mvns	r3, r5
 80069d8:	17db      	asrs	r3, r3, #31
 80069da:	401d      	ands	r5, r3
 80069dc:	68a3      	ldr	r3, [r4, #8]
 80069de:	6922      	ldr	r2, [r4, #16]
 80069e0:	4293      	cmp	r3, r2
 80069e2:	dd01      	ble.n	80069e8 <_printf_common+0x80>
 80069e4:	1a9b      	subs	r3, r3, r2
 80069e6:	18ed      	adds	r5, r5, r3
 80069e8:	2700      	movs	r7, #0
 80069ea:	42bd      	cmp	r5, r7
 80069ec:	d120      	bne.n	8006a30 <_printf_common+0xc8>
 80069ee:	2000      	movs	r0, #0
 80069f0:	e010      	b.n	8006a14 <_printf_common+0xac>
 80069f2:	3701      	adds	r7, #1
 80069f4:	68e3      	ldr	r3, [r4, #12]
 80069f6:	682a      	ldr	r2, [r5, #0]
 80069f8:	1a9b      	subs	r3, r3, r2
 80069fa:	42bb      	cmp	r3, r7
 80069fc:	ddd2      	ble.n	80069a4 <_printf_common+0x3c>
 80069fe:	0022      	movs	r2, r4
 8006a00:	2301      	movs	r3, #1
 8006a02:	9901      	ldr	r1, [sp, #4]
 8006a04:	9800      	ldr	r0, [sp, #0]
 8006a06:	9e08      	ldr	r6, [sp, #32]
 8006a08:	3219      	adds	r2, #25
 8006a0a:	47b0      	blx	r6
 8006a0c:	1c43      	adds	r3, r0, #1
 8006a0e:	d1f0      	bne.n	80069f2 <_printf_common+0x8a>
 8006a10:	2001      	movs	r0, #1
 8006a12:	4240      	negs	r0, r0
 8006a14:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8006a16:	2030      	movs	r0, #48	; 0x30
 8006a18:	18e1      	adds	r1, r4, r3
 8006a1a:	3143      	adds	r1, #67	; 0x43
 8006a1c:	7008      	strb	r0, [r1, #0]
 8006a1e:	0021      	movs	r1, r4
 8006a20:	1c5a      	adds	r2, r3, #1
 8006a22:	3145      	adds	r1, #69	; 0x45
 8006a24:	7809      	ldrb	r1, [r1, #0]
 8006a26:	18a2      	adds	r2, r4, r2
 8006a28:	3243      	adds	r2, #67	; 0x43
 8006a2a:	3302      	adds	r3, #2
 8006a2c:	7011      	strb	r1, [r2, #0]
 8006a2e:	e7c1      	b.n	80069b4 <_printf_common+0x4c>
 8006a30:	0022      	movs	r2, r4
 8006a32:	2301      	movs	r3, #1
 8006a34:	9901      	ldr	r1, [sp, #4]
 8006a36:	9800      	ldr	r0, [sp, #0]
 8006a38:	9e08      	ldr	r6, [sp, #32]
 8006a3a:	321a      	adds	r2, #26
 8006a3c:	47b0      	blx	r6
 8006a3e:	1c43      	adds	r3, r0, #1
 8006a40:	d0e6      	beq.n	8006a10 <_printf_common+0xa8>
 8006a42:	3701      	adds	r7, #1
 8006a44:	e7d1      	b.n	80069ea <_printf_common+0x82>
	...

08006a48 <_printf_i>:
 8006a48:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006a4a:	b08b      	sub	sp, #44	; 0x2c
 8006a4c:	9206      	str	r2, [sp, #24]
 8006a4e:	000a      	movs	r2, r1
 8006a50:	3243      	adds	r2, #67	; 0x43
 8006a52:	9307      	str	r3, [sp, #28]
 8006a54:	9005      	str	r0, [sp, #20]
 8006a56:	9204      	str	r2, [sp, #16]
 8006a58:	7e0a      	ldrb	r2, [r1, #24]
 8006a5a:	000c      	movs	r4, r1
 8006a5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8006a5e:	2a78      	cmp	r2, #120	; 0x78
 8006a60:	d806      	bhi.n	8006a70 <_printf_i+0x28>
 8006a62:	2a62      	cmp	r2, #98	; 0x62
 8006a64:	d808      	bhi.n	8006a78 <_printf_i+0x30>
 8006a66:	2a00      	cmp	r2, #0
 8006a68:	d100      	bne.n	8006a6c <_printf_i+0x24>
 8006a6a:	e0c0      	b.n	8006bee <_printf_i+0x1a6>
 8006a6c:	2a58      	cmp	r2, #88	; 0x58
 8006a6e:	d052      	beq.n	8006b16 <_printf_i+0xce>
 8006a70:	0026      	movs	r6, r4
 8006a72:	3642      	adds	r6, #66	; 0x42
 8006a74:	7032      	strb	r2, [r6, #0]
 8006a76:	e022      	b.n	8006abe <_printf_i+0x76>
 8006a78:	0010      	movs	r0, r2
 8006a7a:	3863      	subs	r0, #99	; 0x63
 8006a7c:	2815      	cmp	r0, #21
 8006a7e:	d8f7      	bhi.n	8006a70 <_printf_i+0x28>
 8006a80:	f7f9 fb5e 	bl	8000140 <__gnu_thumb1_case_shi>
 8006a84:	001f0016 	.word	0x001f0016
 8006a88:	fff6fff6 	.word	0xfff6fff6
 8006a8c:	fff6fff6 	.word	0xfff6fff6
 8006a90:	fff6001f 	.word	0xfff6001f
 8006a94:	fff6fff6 	.word	0xfff6fff6
 8006a98:	00a8fff6 	.word	0x00a8fff6
 8006a9c:	009a0036 	.word	0x009a0036
 8006aa0:	fff6fff6 	.word	0xfff6fff6
 8006aa4:	fff600b9 	.word	0xfff600b9
 8006aa8:	fff60036 	.word	0xfff60036
 8006aac:	009efff6 	.word	0x009efff6
 8006ab0:	0026      	movs	r6, r4
 8006ab2:	681a      	ldr	r2, [r3, #0]
 8006ab4:	3642      	adds	r6, #66	; 0x42
 8006ab6:	1d11      	adds	r1, r2, #4
 8006ab8:	6019      	str	r1, [r3, #0]
 8006aba:	6813      	ldr	r3, [r2, #0]
 8006abc:	7033      	strb	r3, [r6, #0]
 8006abe:	2301      	movs	r3, #1
 8006ac0:	e0a7      	b.n	8006c12 <_printf_i+0x1ca>
 8006ac2:	6808      	ldr	r0, [r1, #0]
 8006ac4:	6819      	ldr	r1, [r3, #0]
 8006ac6:	1d0a      	adds	r2, r1, #4
 8006ac8:	0605      	lsls	r5, r0, #24
 8006aca:	d50b      	bpl.n	8006ae4 <_printf_i+0x9c>
 8006acc:	680d      	ldr	r5, [r1, #0]
 8006ace:	601a      	str	r2, [r3, #0]
 8006ad0:	2d00      	cmp	r5, #0
 8006ad2:	da03      	bge.n	8006adc <_printf_i+0x94>
 8006ad4:	232d      	movs	r3, #45	; 0x2d
 8006ad6:	9a04      	ldr	r2, [sp, #16]
 8006ad8:	426d      	negs	r5, r5
 8006ada:	7013      	strb	r3, [r2, #0]
 8006adc:	4b61      	ldr	r3, [pc, #388]	; (8006c64 <_printf_i+0x21c>)
 8006ade:	270a      	movs	r7, #10
 8006ae0:	9303      	str	r3, [sp, #12]
 8006ae2:	e032      	b.n	8006b4a <_printf_i+0x102>
 8006ae4:	680d      	ldr	r5, [r1, #0]
 8006ae6:	601a      	str	r2, [r3, #0]
 8006ae8:	0641      	lsls	r1, r0, #25
 8006aea:	d5f1      	bpl.n	8006ad0 <_printf_i+0x88>
 8006aec:	b22d      	sxth	r5, r5
 8006aee:	e7ef      	b.n	8006ad0 <_printf_i+0x88>
 8006af0:	680d      	ldr	r5, [r1, #0]
 8006af2:	6819      	ldr	r1, [r3, #0]
 8006af4:	1d08      	adds	r0, r1, #4
 8006af6:	6018      	str	r0, [r3, #0]
 8006af8:	062e      	lsls	r6, r5, #24
 8006afa:	d501      	bpl.n	8006b00 <_printf_i+0xb8>
 8006afc:	680d      	ldr	r5, [r1, #0]
 8006afe:	e003      	b.n	8006b08 <_printf_i+0xc0>
 8006b00:	066d      	lsls	r5, r5, #25
 8006b02:	d5fb      	bpl.n	8006afc <_printf_i+0xb4>
 8006b04:	680d      	ldr	r5, [r1, #0]
 8006b06:	b2ad      	uxth	r5, r5
 8006b08:	4b56      	ldr	r3, [pc, #344]	; (8006c64 <_printf_i+0x21c>)
 8006b0a:	270a      	movs	r7, #10
 8006b0c:	9303      	str	r3, [sp, #12]
 8006b0e:	2a6f      	cmp	r2, #111	; 0x6f
 8006b10:	d117      	bne.n	8006b42 <_printf_i+0xfa>
 8006b12:	2708      	movs	r7, #8
 8006b14:	e015      	b.n	8006b42 <_printf_i+0xfa>
 8006b16:	3145      	adds	r1, #69	; 0x45
 8006b18:	700a      	strb	r2, [r1, #0]
 8006b1a:	4a52      	ldr	r2, [pc, #328]	; (8006c64 <_printf_i+0x21c>)
 8006b1c:	9203      	str	r2, [sp, #12]
 8006b1e:	681a      	ldr	r2, [r3, #0]
 8006b20:	6821      	ldr	r1, [r4, #0]
 8006b22:	ca20      	ldmia	r2!, {r5}
 8006b24:	601a      	str	r2, [r3, #0]
 8006b26:	0608      	lsls	r0, r1, #24
 8006b28:	d550      	bpl.n	8006bcc <_printf_i+0x184>
 8006b2a:	07cb      	lsls	r3, r1, #31
 8006b2c:	d502      	bpl.n	8006b34 <_printf_i+0xec>
 8006b2e:	2320      	movs	r3, #32
 8006b30:	4319      	orrs	r1, r3
 8006b32:	6021      	str	r1, [r4, #0]
 8006b34:	2710      	movs	r7, #16
 8006b36:	2d00      	cmp	r5, #0
 8006b38:	d103      	bne.n	8006b42 <_printf_i+0xfa>
 8006b3a:	2320      	movs	r3, #32
 8006b3c:	6822      	ldr	r2, [r4, #0]
 8006b3e:	439a      	bics	r2, r3
 8006b40:	6022      	str	r2, [r4, #0]
 8006b42:	0023      	movs	r3, r4
 8006b44:	2200      	movs	r2, #0
 8006b46:	3343      	adds	r3, #67	; 0x43
 8006b48:	701a      	strb	r2, [r3, #0]
 8006b4a:	6863      	ldr	r3, [r4, #4]
 8006b4c:	60a3      	str	r3, [r4, #8]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	db03      	blt.n	8006b5a <_printf_i+0x112>
 8006b52:	2204      	movs	r2, #4
 8006b54:	6821      	ldr	r1, [r4, #0]
 8006b56:	4391      	bics	r1, r2
 8006b58:	6021      	str	r1, [r4, #0]
 8006b5a:	2d00      	cmp	r5, #0
 8006b5c:	d102      	bne.n	8006b64 <_printf_i+0x11c>
 8006b5e:	9e04      	ldr	r6, [sp, #16]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d00c      	beq.n	8006b7e <_printf_i+0x136>
 8006b64:	9e04      	ldr	r6, [sp, #16]
 8006b66:	0028      	movs	r0, r5
 8006b68:	0039      	movs	r1, r7
 8006b6a:	f7f9 fb83 	bl	8000274 <__aeabi_uidivmod>
 8006b6e:	9b03      	ldr	r3, [sp, #12]
 8006b70:	3e01      	subs	r6, #1
 8006b72:	5c5b      	ldrb	r3, [r3, r1]
 8006b74:	7033      	strb	r3, [r6, #0]
 8006b76:	002b      	movs	r3, r5
 8006b78:	0005      	movs	r5, r0
 8006b7a:	429f      	cmp	r7, r3
 8006b7c:	d9f3      	bls.n	8006b66 <_printf_i+0x11e>
 8006b7e:	2f08      	cmp	r7, #8
 8006b80:	d109      	bne.n	8006b96 <_printf_i+0x14e>
 8006b82:	6823      	ldr	r3, [r4, #0]
 8006b84:	07db      	lsls	r3, r3, #31
 8006b86:	d506      	bpl.n	8006b96 <_printf_i+0x14e>
 8006b88:	6863      	ldr	r3, [r4, #4]
 8006b8a:	6922      	ldr	r2, [r4, #16]
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	dc02      	bgt.n	8006b96 <_printf_i+0x14e>
 8006b90:	2330      	movs	r3, #48	; 0x30
 8006b92:	3e01      	subs	r6, #1
 8006b94:	7033      	strb	r3, [r6, #0]
 8006b96:	9b04      	ldr	r3, [sp, #16]
 8006b98:	1b9b      	subs	r3, r3, r6
 8006b9a:	6123      	str	r3, [r4, #16]
 8006b9c:	9b07      	ldr	r3, [sp, #28]
 8006b9e:	0021      	movs	r1, r4
 8006ba0:	9300      	str	r3, [sp, #0]
 8006ba2:	9805      	ldr	r0, [sp, #20]
 8006ba4:	9b06      	ldr	r3, [sp, #24]
 8006ba6:	aa09      	add	r2, sp, #36	; 0x24
 8006ba8:	f7ff fede 	bl	8006968 <_printf_common>
 8006bac:	1c43      	adds	r3, r0, #1
 8006bae:	d135      	bne.n	8006c1c <_printf_i+0x1d4>
 8006bb0:	2001      	movs	r0, #1
 8006bb2:	4240      	negs	r0, r0
 8006bb4:	b00b      	add	sp, #44	; 0x2c
 8006bb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006bb8:	2220      	movs	r2, #32
 8006bba:	6809      	ldr	r1, [r1, #0]
 8006bbc:	430a      	orrs	r2, r1
 8006bbe:	6022      	str	r2, [r4, #0]
 8006bc0:	0022      	movs	r2, r4
 8006bc2:	2178      	movs	r1, #120	; 0x78
 8006bc4:	3245      	adds	r2, #69	; 0x45
 8006bc6:	7011      	strb	r1, [r2, #0]
 8006bc8:	4a27      	ldr	r2, [pc, #156]	; (8006c68 <_printf_i+0x220>)
 8006bca:	e7a7      	b.n	8006b1c <_printf_i+0xd4>
 8006bcc:	0648      	lsls	r0, r1, #25
 8006bce:	d5ac      	bpl.n	8006b2a <_printf_i+0xe2>
 8006bd0:	b2ad      	uxth	r5, r5
 8006bd2:	e7aa      	b.n	8006b2a <_printf_i+0xe2>
 8006bd4:	681a      	ldr	r2, [r3, #0]
 8006bd6:	680d      	ldr	r5, [r1, #0]
 8006bd8:	1d10      	adds	r0, r2, #4
 8006bda:	6949      	ldr	r1, [r1, #20]
 8006bdc:	6018      	str	r0, [r3, #0]
 8006bde:	6813      	ldr	r3, [r2, #0]
 8006be0:	062e      	lsls	r6, r5, #24
 8006be2:	d501      	bpl.n	8006be8 <_printf_i+0x1a0>
 8006be4:	6019      	str	r1, [r3, #0]
 8006be6:	e002      	b.n	8006bee <_printf_i+0x1a6>
 8006be8:	066d      	lsls	r5, r5, #25
 8006bea:	d5fb      	bpl.n	8006be4 <_printf_i+0x19c>
 8006bec:	8019      	strh	r1, [r3, #0]
 8006bee:	2300      	movs	r3, #0
 8006bf0:	9e04      	ldr	r6, [sp, #16]
 8006bf2:	6123      	str	r3, [r4, #16]
 8006bf4:	e7d2      	b.n	8006b9c <_printf_i+0x154>
 8006bf6:	681a      	ldr	r2, [r3, #0]
 8006bf8:	1d11      	adds	r1, r2, #4
 8006bfa:	6019      	str	r1, [r3, #0]
 8006bfc:	6816      	ldr	r6, [r2, #0]
 8006bfe:	2100      	movs	r1, #0
 8006c00:	0030      	movs	r0, r6
 8006c02:	6862      	ldr	r2, [r4, #4]
 8006c04:	f000 f832 	bl	8006c6c <memchr>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	d001      	beq.n	8006c10 <_printf_i+0x1c8>
 8006c0c:	1b80      	subs	r0, r0, r6
 8006c0e:	6060      	str	r0, [r4, #4]
 8006c10:	6863      	ldr	r3, [r4, #4]
 8006c12:	6123      	str	r3, [r4, #16]
 8006c14:	2300      	movs	r3, #0
 8006c16:	9a04      	ldr	r2, [sp, #16]
 8006c18:	7013      	strb	r3, [r2, #0]
 8006c1a:	e7bf      	b.n	8006b9c <_printf_i+0x154>
 8006c1c:	6923      	ldr	r3, [r4, #16]
 8006c1e:	0032      	movs	r2, r6
 8006c20:	9906      	ldr	r1, [sp, #24]
 8006c22:	9805      	ldr	r0, [sp, #20]
 8006c24:	9d07      	ldr	r5, [sp, #28]
 8006c26:	47a8      	blx	r5
 8006c28:	1c43      	adds	r3, r0, #1
 8006c2a:	d0c1      	beq.n	8006bb0 <_printf_i+0x168>
 8006c2c:	6823      	ldr	r3, [r4, #0]
 8006c2e:	079b      	lsls	r3, r3, #30
 8006c30:	d415      	bmi.n	8006c5e <_printf_i+0x216>
 8006c32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006c34:	68e0      	ldr	r0, [r4, #12]
 8006c36:	4298      	cmp	r0, r3
 8006c38:	dabc      	bge.n	8006bb4 <_printf_i+0x16c>
 8006c3a:	0018      	movs	r0, r3
 8006c3c:	e7ba      	b.n	8006bb4 <_printf_i+0x16c>
 8006c3e:	0022      	movs	r2, r4
 8006c40:	2301      	movs	r3, #1
 8006c42:	9906      	ldr	r1, [sp, #24]
 8006c44:	9805      	ldr	r0, [sp, #20]
 8006c46:	9e07      	ldr	r6, [sp, #28]
 8006c48:	3219      	adds	r2, #25
 8006c4a:	47b0      	blx	r6
 8006c4c:	1c43      	adds	r3, r0, #1
 8006c4e:	d0af      	beq.n	8006bb0 <_printf_i+0x168>
 8006c50:	3501      	adds	r5, #1
 8006c52:	68e3      	ldr	r3, [r4, #12]
 8006c54:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006c56:	1a9b      	subs	r3, r3, r2
 8006c58:	42ab      	cmp	r3, r5
 8006c5a:	dcf0      	bgt.n	8006c3e <_printf_i+0x1f6>
 8006c5c:	e7e9      	b.n	8006c32 <_printf_i+0x1ea>
 8006c5e:	2500      	movs	r5, #0
 8006c60:	e7f7      	b.n	8006c52 <_printf_i+0x20a>
 8006c62:	46c0      	nop			; (mov r8, r8)
 8006c64:	0800748a 	.word	0x0800748a
 8006c68:	0800749b 	.word	0x0800749b

08006c6c <memchr>:
 8006c6c:	b2c9      	uxtb	r1, r1
 8006c6e:	1882      	adds	r2, r0, r2
 8006c70:	4290      	cmp	r0, r2
 8006c72:	d101      	bne.n	8006c78 <memchr+0xc>
 8006c74:	2000      	movs	r0, #0
 8006c76:	4770      	bx	lr
 8006c78:	7803      	ldrb	r3, [r0, #0]
 8006c7a:	428b      	cmp	r3, r1
 8006c7c:	d0fb      	beq.n	8006c76 <memchr+0xa>
 8006c7e:	3001      	adds	r0, #1
 8006c80:	e7f6      	b.n	8006c70 <memchr+0x4>

08006c82 <memmove>:
 8006c82:	b510      	push	{r4, lr}
 8006c84:	4288      	cmp	r0, r1
 8006c86:	d902      	bls.n	8006c8e <memmove+0xc>
 8006c88:	188b      	adds	r3, r1, r2
 8006c8a:	4298      	cmp	r0, r3
 8006c8c:	d303      	bcc.n	8006c96 <memmove+0x14>
 8006c8e:	2300      	movs	r3, #0
 8006c90:	e007      	b.n	8006ca2 <memmove+0x20>
 8006c92:	5c8b      	ldrb	r3, [r1, r2]
 8006c94:	5483      	strb	r3, [r0, r2]
 8006c96:	3a01      	subs	r2, #1
 8006c98:	d2fb      	bcs.n	8006c92 <memmove+0x10>
 8006c9a:	bd10      	pop	{r4, pc}
 8006c9c:	5ccc      	ldrb	r4, [r1, r3]
 8006c9e:	54c4      	strb	r4, [r0, r3]
 8006ca0:	3301      	adds	r3, #1
 8006ca2:	429a      	cmp	r2, r3
 8006ca4:	d1fa      	bne.n	8006c9c <memmove+0x1a>
 8006ca6:	e7f8      	b.n	8006c9a <memmove+0x18>

08006ca8 <_free_r>:
 8006ca8:	b570      	push	{r4, r5, r6, lr}
 8006caa:	0005      	movs	r5, r0
 8006cac:	2900      	cmp	r1, #0
 8006cae:	d010      	beq.n	8006cd2 <_free_r+0x2a>
 8006cb0:	1f0c      	subs	r4, r1, #4
 8006cb2:	6823      	ldr	r3, [r4, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	da00      	bge.n	8006cba <_free_r+0x12>
 8006cb8:	18e4      	adds	r4, r4, r3
 8006cba:	0028      	movs	r0, r5
 8006cbc:	f000 f8d4 	bl	8006e68 <__malloc_lock>
 8006cc0:	4a1d      	ldr	r2, [pc, #116]	; (8006d38 <_free_r+0x90>)
 8006cc2:	6813      	ldr	r3, [r2, #0]
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d105      	bne.n	8006cd4 <_free_r+0x2c>
 8006cc8:	6063      	str	r3, [r4, #4]
 8006cca:	6014      	str	r4, [r2, #0]
 8006ccc:	0028      	movs	r0, r5
 8006cce:	f000 f8d3 	bl	8006e78 <__malloc_unlock>
 8006cd2:	bd70      	pop	{r4, r5, r6, pc}
 8006cd4:	42a3      	cmp	r3, r4
 8006cd6:	d908      	bls.n	8006cea <_free_r+0x42>
 8006cd8:	6821      	ldr	r1, [r4, #0]
 8006cda:	1860      	adds	r0, r4, r1
 8006cdc:	4283      	cmp	r3, r0
 8006cde:	d1f3      	bne.n	8006cc8 <_free_r+0x20>
 8006ce0:	6818      	ldr	r0, [r3, #0]
 8006ce2:	685b      	ldr	r3, [r3, #4]
 8006ce4:	1841      	adds	r1, r0, r1
 8006ce6:	6021      	str	r1, [r4, #0]
 8006ce8:	e7ee      	b.n	8006cc8 <_free_r+0x20>
 8006cea:	001a      	movs	r2, r3
 8006cec:	685b      	ldr	r3, [r3, #4]
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d001      	beq.n	8006cf6 <_free_r+0x4e>
 8006cf2:	42a3      	cmp	r3, r4
 8006cf4:	d9f9      	bls.n	8006cea <_free_r+0x42>
 8006cf6:	6811      	ldr	r1, [r2, #0]
 8006cf8:	1850      	adds	r0, r2, r1
 8006cfa:	42a0      	cmp	r0, r4
 8006cfc:	d10b      	bne.n	8006d16 <_free_r+0x6e>
 8006cfe:	6820      	ldr	r0, [r4, #0]
 8006d00:	1809      	adds	r1, r1, r0
 8006d02:	1850      	adds	r0, r2, r1
 8006d04:	6011      	str	r1, [r2, #0]
 8006d06:	4283      	cmp	r3, r0
 8006d08:	d1e0      	bne.n	8006ccc <_free_r+0x24>
 8006d0a:	6818      	ldr	r0, [r3, #0]
 8006d0c:	685b      	ldr	r3, [r3, #4]
 8006d0e:	1841      	adds	r1, r0, r1
 8006d10:	6011      	str	r1, [r2, #0]
 8006d12:	6053      	str	r3, [r2, #4]
 8006d14:	e7da      	b.n	8006ccc <_free_r+0x24>
 8006d16:	42a0      	cmp	r0, r4
 8006d18:	d902      	bls.n	8006d20 <_free_r+0x78>
 8006d1a:	230c      	movs	r3, #12
 8006d1c:	602b      	str	r3, [r5, #0]
 8006d1e:	e7d5      	b.n	8006ccc <_free_r+0x24>
 8006d20:	6821      	ldr	r1, [r4, #0]
 8006d22:	1860      	adds	r0, r4, r1
 8006d24:	4283      	cmp	r3, r0
 8006d26:	d103      	bne.n	8006d30 <_free_r+0x88>
 8006d28:	6818      	ldr	r0, [r3, #0]
 8006d2a:	685b      	ldr	r3, [r3, #4]
 8006d2c:	1841      	adds	r1, r0, r1
 8006d2e:	6021      	str	r1, [r4, #0]
 8006d30:	6063      	str	r3, [r4, #4]
 8006d32:	6054      	str	r4, [r2, #4]
 8006d34:	e7ca      	b.n	8006ccc <_free_r+0x24>
 8006d36:	46c0      	nop			; (mov r8, r8)
 8006d38:	2000046c 	.word	0x2000046c

08006d3c <_malloc_r>:
 8006d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d3e:	2303      	movs	r3, #3
 8006d40:	1ccd      	adds	r5, r1, #3
 8006d42:	439d      	bics	r5, r3
 8006d44:	3508      	adds	r5, #8
 8006d46:	0006      	movs	r6, r0
 8006d48:	2d0c      	cmp	r5, #12
 8006d4a:	d21f      	bcs.n	8006d8c <_malloc_r+0x50>
 8006d4c:	250c      	movs	r5, #12
 8006d4e:	42a9      	cmp	r1, r5
 8006d50:	d81e      	bhi.n	8006d90 <_malloc_r+0x54>
 8006d52:	0030      	movs	r0, r6
 8006d54:	f000 f888 	bl	8006e68 <__malloc_lock>
 8006d58:	4925      	ldr	r1, [pc, #148]	; (8006df0 <_malloc_r+0xb4>)
 8006d5a:	680a      	ldr	r2, [r1, #0]
 8006d5c:	0014      	movs	r4, r2
 8006d5e:	2c00      	cmp	r4, #0
 8006d60:	d11a      	bne.n	8006d98 <_malloc_r+0x5c>
 8006d62:	4f24      	ldr	r7, [pc, #144]	; (8006df4 <_malloc_r+0xb8>)
 8006d64:	683b      	ldr	r3, [r7, #0]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d104      	bne.n	8006d74 <_malloc_r+0x38>
 8006d6a:	0021      	movs	r1, r4
 8006d6c:	0030      	movs	r0, r6
 8006d6e:	f000 f869 	bl	8006e44 <_sbrk_r>
 8006d72:	6038      	str	r0, [r7, #0]
 8006d74:	0029      	movs	r1, r5
 8006d76:	0030      	movs	r0, r6
 8006d78:	f000 f864 	bl	8006e44 <_sbrk_r>
 8006d7c:	1c43      	adds	r3, r0, #1
 8006d7e:	d12b      	bne.n	8006dd8 <_malloc_r+0x9c>
 8006d80:	230c      	movs	r3, #12
 8006d82:	0030      	movs	r0, r6
 8006d84:	6033      	str	r3, [r6, #0]
 8006d86:	f000 f877 	bl	8006e78 <__malloc_unlock>
 8006d8a:	e003      	b.n	8006d94 <_malloc_r+0x58>
 8006d8c:	2d00      	cmp	r5, #0
 8006d8e:	dade      	bge.n	8006d4e <_malloc_r+0x12>
 8006d90:	230c      	movs	r3, #12
 8006d92:	6033      	str	r3, [r6, #0]
 8006d94:	2000      	movs	r0, #0
 8006d96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d98:	6823      	ldr	r3, [r4, #0]
 8006d9a:	1b5b      	subs	r3, r3, r5
 8006d9c:	d419      	bmi.n	8006dd2 <_malloc_r+0x96>
 8006d9e:	2b0b      	cmp	r3, #11
 8006da0:	d903      	bls.n	8006daa <_malloc_r+0x6e>
 8006da2:	6023      	str	r3, [r4, #0]
 8006da4:	18e4      	adds	r4, r4, r3
 8006da6:	6025      	str	r5, [r4, #0]
 8006da8:	e003      	b.n	8006db2 <_malloc_r+0x76>
 8006daa:	6863      	ldr	r3, [r4, #4]
 8006dac:	42a2      	cmp	r2, r4
 8006dae:	d10e      	bne.n	8006dce <_malloc_r+0x92>
 8006db0:	600b      	str	r3, [r1, #0]
 8006db2:	0030      	movs	r0, r6
 8006db4:	f000 f860 	bl	8006e78 <__malloc_unlock>
 8006db8:	0020      	movs	r0, r4
 8006dba:	2207      	movs	r2, #7
 8006dbc:	300b      	adds	r0, #11
 8006dbe:	1d23      	adds	r3, r4, #4
 8006dc0:	4390      	bics	r0, r2
 8006dc2:	1ac2      	subs	r2, r0, r3
 8006dc4:	4298      	cmp	r0, r3
 8006dc6:	d0e6      	beq.n	8006d96 <_malloc_r+0x5a>
 8006dc8:	1a1b      	subs	r3, r3, r0
 8006dca:	50a3      	str	r3, [r4, r2]
 8006dcc:	e7e3      	b.n	8006d96 <_malloc_r+0x5a>
 8006dce:	6053      	str	r3, [r2, #4]
 8006dd0:	e7ef      	b.n	8006db2 <_malloc_r+0x76>
 8006dd2:	0022      	movs	r2, r4
 8006dd4:	6864      	ldr	r4, [r4, #4]
 8006dd6:	e7c2      	b.n	8006d5e <_malloc_r+0x22>
 8006dd8:	2303      	movs	r3, #3
 8006dda:	1cc4      	adds	r4, r0, #3
 8006ddc:	439c      	bics	r4, r3
 8006dde:	42a0      	cmp	r0, r4
 8006de0:	d0e1      	beq.n	8006da6 <_malloc_r+0x6a>
 8006de2:	1a21      	subs	r1, r4, r0
 8006de4:	0030      	movs	r0, r6
 8006de6:	f000 f82d 	bl	8006e44 <_sbrk_r>
 8006dea:	1c43      	adds	r3, r0, #1
 8006dec:	d1db      	bne.n	8006da6 <_malloc_r+0x6a>
 8006dee:	e7c7      	b.n	8006d80 <_malloc_r+0x44>
 8006df0:	2000046c 	.word	0x2000046c
 8006df4:	20000470 	.word	0x20000470

08006df8 <_realloc_r>:
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	0007      	movs	r7, r0
 8006dfc:	000d      	movs	r5, r1
 8006dfe:	0016      	movs	r6, r2
 8006e00:	2900      	cmp	r1, #0
 8006e02:	d105      	bne.n	8006e10 <_realloc_r+0x18>
 8006e04:	0011      	movs	r1, r2
 8006e06:	f7ff ff99 	bl	8006d3c <_malloc_r>
 8006e0a:	0004      	movs	r4, r0
 8006e0c:	0020      	movs	r0, r4
 8006e0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e10:	2a00      	cmp	r2, #0
 8006e12:	d103      	bne.n	8006e1c <_realloc_r+0x24>
 8006e14:	f7ff ff48 	bl	8006ca8 <_free_r>
 8006e18:	0034      	movs	r4, r6
 8006e1a:	e7f7      	b.n	8006e0c <_realloc_r+0x14>
 8006e1c:	f000 f834 	bl	8006e88 <_malloc_usable_size_r>
 8006e20:	002c      	movs	r4, r5
 8006e22:	42b0      	cmp	r0, r6
 8006e24:	d2f2      	bcs.n	8006e0c <_realloc_r+0x14>
 8006e26:	0031      	movs	r1, r6
 8006e28:	0038      	movs	r0, r7
 8006e2a:	f7ff ff87 	bl	8006d3c <_malloc_r>
 8006e2e:	1e04      	subs	r4, r0, #0
 8006e30:	d0ec      	beq.n	8006e0c <_realloc_r+0x14>
 8006e32:	0029      	movs	r1, r5
 8006e34:	0032      	movs	r2, r6
 8006e36:	f7ff fb61 	bl	80064fc <memcpy>
 8006e3a:	0029      	movs	r1, r5
 8006e3c:	0038      	movs	r0, r7
 8006e3e:	f7ff ff33 	bl	8006ca8 <_free_r>
 8006e42:	e7e3      	b.n	8006e0c <_realloc_r+0x14>

08006e44 <_sbrk_r>:
 8006e44:	2300      	movs	r3, #0
 8006e46:	b570      	push	{r4, r5, r6, lr}
 8006e48:	4d06      	ldr	r5, [pc, #24]	; (8006e64 <_sbrk_r+0x20>)
 8006e4a:	0004      	movs	r4, r0
 8006e4c:	0008      	movs	r0, r1
 8006e4e:	602b      	str	r3, [r5, #0]
 8006e50:	f7fb f846 	bl	8001ee0 <_sbrk>
 8006e54:	1c43      	adds	r3, r0, #1
 8006e56:	d103      	bne.n	8006e60 <_sbrk_r+0x1c>
 8006e58:	682b      	ldr	r3, [r5, #0]
 8006e5a:	2b00      	cmp	r3, #0
 8006e5c:	d000      	beq.n	8006e60 <_sbrk_r+0x1c>
 8006e5e:	6023      	str	r3, [r4, #0]
 8006e60:	bd70      	pop	{r4, r5, r6, pc}
 8006e62:	46c0      	nop			; (mov r8, r8)
 8006e64:	200012b8 	.word	0x200012b8

08006e68 <__malloc_lock>:
 8006e68:	b510      	push	{r4, lr}
 8006e6a:	4802      	ldr	r0, [pc, #8]	; (8006e74 <__malloc_lock+0xc>)
 8006e6c:	f000 f814 	bl	8006e98 <__retarget_lock_acquire_recursive>
 8006e70:	bd10      	pop	{r4, pc}
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	200012c0 	.word	0x200012c0

08006e78 <__malloc_unlock>:
 8006e78:	b510      	push	{r4, lr}
 8006e7a:	4802      	ldr	r0, [pc, #8]	; (8006e84 <__malloc_unlock+0xc>)
 8006e7c:	f000 f80d 	bl	8006e9a <__retarget_lock_release_recursive>
 8006e80:	bd10      	pop	{r4, pc}
 8006e82:	46c0      	nop			; (mov r8, r8)
 8006e84:	200012c0 	.word	0x200012c0

08006e88 <_malloc_usable_size_r>:
 8006e88:	1f0b      	subs	r3, r1, #4
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	1f18      	subs	r0, r3, #4
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	da01      	bge.n	8006e96 <_malloc_usable_size_r+0xe>
 8006e92:	580b      	ldr	r3, [r1, r0]
 8006e94:	18c0      	adds	r0, r0, r3
 8006e96:	4770      	bx	lr

08006e98 <__retarget_lock_acquire_recursive>:
 8006e98:	4770      	bx	lr

08006e9a <__retarget_lock_release_recursive>:
 8006e9a:	4770      	bx	lr

08006e9c <_init>:
 8006e9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e9e:	46c0      	nop			; (mov r8, r8)
 8006ea0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006ea2:	bc08      	pop	{r3}
 8006ea4:	469e      	mov	lr, r3
 8006ea6:	4770      	bx	lr

08006ea8 <_fini>:
 8006ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006eaa:	46c0      	nop			; (mov r8, r8)
 8006eac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006eae:	bc08      	pop	{r3}
 8006eb0:	469e      	mov	lr, r3
 8006eb2:	4770      	bx	lr
